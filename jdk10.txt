[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 19, 2018 2:08:52 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:991:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1077:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d12(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "l"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367665.555 ops/s
[info] # Warmup Iteration   2: 753611.518 ops/s
[info] # Warmup Iteration   3: 770007.130 ops/s
[info] # Warmup Iteration   4: 775172.956 ops/s
[info] # Warmup Iteration   5: 776174.631 ops/s
[info] Iteration   1: 774561.188 ops/s
[info]                  ·gc.alloc.rate:                   2035.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4093.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 774570.570 ops/s
[info]                  ·gc.alloc.rate:                   2035.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4100.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 775852.956 ops/s
[info]                  ·gc.alloc.rate:                   2038.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4099.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 775451.831 ops/s
[info]                  ·gc.alloc.rate:                   2037.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4110.947 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 773201.688 ops/s
[info]                  ·gc.alloc.rate:                   2031.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4129.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   774727.647 ±(99.9%) 3932.418 ops/s [Average]
[info]   (min, avg, max) = (773201.688, 774727.647, 775852.956), stdev = 1021.236
[info]   CI (99.9%): [770795.229, 778660.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2035.781 ±(99.9%) 10.534 MB/sec [Average]
[info]   (min, avg, max) = (2031.611, 2035.781, 2038.850), stdev = 2.736
[info]   CI (99.9%): [2025.247, 2046.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4136.001, 4136.001, 4136.001), stdev = 0.001
[info]   CI (99.9%): [4136.000, 4136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.135 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (0.085, 0.135, 0.169), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2021.423 ±(99.9%) 20.934 MB/sec [Average]
[info]   (min, avg, max) = (2014.970, 2021.423, 2028.466), stdev = 5.436
[info]   CI (99.9%): [2000.489, 2042.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4106.840 ±(99.9%) 54.458 B/op [Average]
[info]   (min, avg, max) = (4093.911, 4106.840, 4129.597), stdev = 14.143
[info]   CI (99.9%): [4052.382, 4161.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347318.521 ops/s
[info] # Warmup Iteration   2: 1600489.811 ops/s
[info] # Warmup Iteration   3: 1642067.649 ops/s
[info] # Warmup Iteration   4: 1630054.541 ops/s
[info] # Warmup Iteration   5: 1630771.533 ops/s
[info] Iteration   1: 1639244.988 ops/s
[info]                  ·gc.alloc.rate:                   1166.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1296.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1639371.284 ops/s
[info]                  ·gc.alloc.rate:                   1166.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1297.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1648441.756 ops/s
[info]                  ·gc.alloc.rate:                   1173.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 645.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1641665.836 ops/s
[info]                  ·gc.alloc.rate:                   1168.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1297.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1592473.387 ops/s
[info]                  ·gc.alloc.rate:                   1133.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1338.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1632239.450 ±(99.9%) 86803.027 ops/s [Average]
[info]   (min, avg, max) = (1592473.387, 1632239.450, 1648441.756), stdev = 22542.470
[info]   CI (99.9%): [1545436.423, 1719042.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1161.474 ±(99.9%) 62.032 MB/sec [Average]
[info]   (min, avg, max) = (1133.063, 1161.474, 1173.124), stdev = 16.110
[info]   CI (99.9%): [1099.442, 1223.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.965 ±(99.9%) 1164.101 MB/sec [Average]
[info]   (min, avg, max) = (676.176, 1216.965, 1354.049), stdev = 302.313
[info]   CI (99.9%): [52.864, 2381.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1175.019 ±(99.9%) 1141.799 B/op [Average]
[info]   (min, avg, max) = (645.556, 1175.019, 1338.438), stdev = 296.522
[info]   CI (99.9%): [33.220, 2316.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2968464.910 ops/s
[info] # Warmup Iteration   2: 3865335.013 ops/s
[info] # Warmup Iteration   3: 3721403.811 ops/s
[info] # Warmup Iteration   4: 3889252.845 ops/s
[info] # Warmup Iteration   5: 3856131.259 ops/s
[info] Iteration   1: 3892976.234 ops/s
[info]                  ·gc.alloc.rate:      257.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3875430.034 ops/s
[info]                  ·gc.alloc.rate:                   256.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻³ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207.764 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3893826.844 ops/s
[info]                  ·gc.alloc.rate:                   257.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3892687.322 ops/s
[info]                  ·gc.alloc.rate:      257.204 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3809268.334 ops/s
[info]                  ·gc.alloc.rate:                   251.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3872837.753 ±(99.9%) 140005.420 ops/s [Average]
[info]   (min, avg, max) = (3809268.334, 3872837.753, 3893826.844), stdev = 36358.963
[info]   CI (99.9%): [3732832.334, 4012843.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   255.881 ±(99.9%) 9.225 MB/sec [Average]
[info]   (min, avg, max) = (251.694, 255.881, 257.266), stdev = 2.396
[info]   CI (99.9%): [246.656, 265.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.917 ±(99.9%) 1078.857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.917, 511.560), stdev = 280.176
[info]   CI (99.9%): [≈ 0, 1385.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   125.184 ±(99.9%) 440.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.184, 211.377), stdev = 114.290
[info]   CI (99.9%): [≈ 0, 565.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32752.952 ops/s
[info] # Warmup Iteration   2: 166263.862 ops/s
[info] # Warmup Iteration   3: 173000.450 ops/s
[info] # Warmup Iteration   4: 171359.127 ops/s
[info] # Warmup Iteration   5: 171493.272 ops/s
[info] Iteration   1: 171366.980 ops/s
[info]                  ·gc.alloc.rate:                   1435.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12410.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 171882.565 ops/s
[info]                  ·gc.alloc.rate:                   1439.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12382.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 172121.950 ops/s
[info]                  ·gc.alloc.rate:                   1441.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12377.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 172122.479 ops/s
[info]                  ·gc.alloc.rate:                   1441.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12386.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 171392.423 ops/s
[info]                  ·gc.alloc.rate:                   1435.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12448.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   171777.279 ±(99.9%) 1447.845 ops/s [Average]
[info]   (min, avg, max) = (171366.980, 171777.279, 172122.479), stdev = 376.001
[info]   CI (99.9%): [170329.434, 173225.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1438.731 ±(99.9%) 12.341 MB/sec [Average]
[info]   (min, avg, max) = (1435.184, 1438.731, 1441.694), stdev = 3.205
[info]   CI (99.9%): [1426.390, 1451.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.002, 13184.002, 13184.003), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.381 ±(99.9%) 1.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 0.574), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.279 ±(99.9%) 6.868 MB/sec [Average]
[info]   (min, avg, max) = (1350.990, 1353.279, 1355.411), stdev = 1.783
[info]   CI (99.9%): [1346.412, 1360.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12401.000 ±(99.9%) 113.256 B/op [Average]
[info]   (min, avg, max) = (12377.322, 12401.000, 12448.384), stdev = 29.412
[info]   CI (99.9%): [12287.744, 12514.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:52:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147841.827 ops/s
[info] # Warmup Iteration   2: 539627.825 ops/s
[info] # Warmup Iteration   3: 539402.176 ops/s
[info] # Warmup Iteration   4: 555156.137 ops/s
[info] # Warmup Iteration   5: 542440.803 ops/s
[info] Iteration   1: 555138.065 ops/s
[info]                  ·gc.alloc.rate:                   1678.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3803.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 555135.565 ops/s
[info]                  ·gc.alloc.rate:                   1679.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5710.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 555919.528 ops/s
[info]                  ·gc.alloc.rate:                   1681.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3805.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 555410.622 ops/s
[info]                  ·gc.alloc.rate:                   1680.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5720.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 555056.913 ops/s
[info]                  ·gc.alloc.rate:                   1678.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3823.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   555332.139 ±(99.9%) 1365.813 ops/s [Average]
[info]   (min, avg, max) = (555056.913, 555332.139, 555919.528), stdev = 354.697
[info]   CI (99.9%): [553966.326, 556697.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1679.592 ±(99.9%) 5.027 MB/sec [Average]
[info]   (min, avg, max) = (1678.469, 1679.592, 1681.650), stdev = 1.306
[info]   CI (99.9%): [1674.565, 1684.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4760.001, 4760.001, 4760.001), stdev = 0.001
[info]   CI (99.9%): [4760.001, 4760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.130 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.130, 0.177), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1613.486 ±(99.9%) 1417.290 MB/sec [Average]
[info]   (min, avg, max) = (1341.423, 1613.486, 2019.151), stdev = 368.066
[info]   CI (99.9%): [196.196, 3030.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4572.667 ±(99.9%) 4016.855 B/op [Average]
[info]   (min, avg, max) = (3803.636, 4572.667, 5720.645), stdev = 1043.165
[info]   CI (99.9%): [555.811, 8589.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f7c6d30b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 543022.045 ops/s
[info] # Warmup Iteration   2: 2011059.367 ops/s
[info] # Warmup Iteration   3: 1965385.576 ops/s
[info] # Warmup Iteration   4: 2032981.064 ops/s
[info] # Warmup Iteration   5: 1990271.667 ops/s
[info] Iteration   1: 2049873.896 ops/s
[info]                  ·gc.alloc.rate:                   666.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2044079.952 ops/s
[info]                  ·gc.alloc.rate:                   664.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2044060.144 ops/s
[info]                  ·gc.alloc.rate:                   664.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2046573.824 ops/s
[info]                  ·gc.alloc.rate:                   665.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1983032.487 ops/s
[info]                  ·gc.alloc.rate:                   645.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 535.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2033524.060 ±(99.9%) 109073.326 ops/s [Average]
[info]   (min, avg, max) = (1983032.487, 2033524.060, 2049873.896), stdev = 28325.996
[info]   CI (99.9%): [1924450.734, 2142597.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   661.475 ±(99.9%) 35.581 MB/sec [Average]
[info]   (min, avg, max) = (645.007, 661.475, 666.846), stdev = 9.240
[info]   CI (99.9%): [625.893, 697.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.113 ±(99.9%) 0.758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.460), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.087 ±(99.9%) 0.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.353), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.281 ±(99.9%) 2.054 MB/sec [Average]
[info]   (min, avg, max) = (673.757, 674.281, 675.053), stdev = 0.533
[info]   CI (99.9%): [672.227, 676.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   521.999 ±(99.9%) 29.951 B/op [Average]
[info]   (min, avg, max) = (517.334, 521.999, 535.851), stdev = 7.778
[info]   CI (99.9%): [492.049, 551.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4011007.074 ops/s
[info] # Warmup Iteration   2: 12342793.053 ops/s
[info] # Warmup Iteration   3: 14848423.785 ops/s
[info] # Warmup Iteration   4: 14934586.700 ops/s
[info] # Warmup Iteration   5: 14945961.096 ops/s
[info] Iteration   1: 14920002.085 ops/s
[info]                  ·gc.alloc.rate:                   758.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14969932.955 ops/s
[info]                  ·gc.alloc.rate:                   760.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.943 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15028815.057 ops/s
[info]                  ·gc.alloc.rate:                   763.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.455 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14988582.363 ops/s
[info]                  ·gc.alloc.rate:                   762.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15036439.612 ops/s
[info]                  ·gc.alloc.rate:                   764.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14988754.414 ±(99.9%) 182244.645 ops/s [Average]
[info]   (min, avg, max) = (14920002.085, 14988754.414, 15036439.612), stdev = 47328.355
[info]   CI (99.9%): [14806509.770, 15170999.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   761.879 ±(99.9%) 9.396 MB/sec [Average]
[info]   (min, avg, max) = (758.303, 761.879, 764.333), stdev = 2.440
[info]   CI (99.9%): [752.483, 771.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.677 ±(99.9%) 5.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.303), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.071 ±(99.9%) 0.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.348), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.457 ±(99.9%) 4.568 MB/sec [Average]
[info]   (min, avg, max) = (672.160, 673.457, 674.724), stdev = 1.186
[info]   CI (99.9%): [668.889, 678.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   70.716 ±(99.9%) 1.325 B/op [Average]
[info]   (min, avg, max) = (70.353, 70.716, 71.183), stdev = 0.344
[info]   CI (99.9%): [69.391, 72.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:51:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4337365.580 ops/s
[info] # Warmup Iteration   2: 14578781.140 ops/s
[info] # Warmup Iteration   3: 15072731.426 ops/s
[info] # Warmup Iteration   4: 15058134.185 ops/s
[info] # Warmup Iteration   5: 14997016.282 ops/s
[info] Iteration   1: 15068393.019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15063463.729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15047061.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15072225.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15042695.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   15058767.836 ±(99.9%) 50617.236 ops/s [Average]
[info]   (min, avg, max) = (15042695.523, 15058767.836, 15072225.787), stdev = 13145.136
[info]   CI (99.9%): [15008150.600, 15109385.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71175.789 ops/s
[info] # Warmup Iteration   2: 313230.007 ops/s
[info] # Warmup Iteration   3: 313557.041 ops/s
[info] # Warmup Iteration   4: 314714.312 ops/s
[info] # Warmup Iteration   5: 314791.497 ops/s
[info] Iteration   1: 311724.320 ops/s
[info]                  ·gc.alloc.rate:                   1017.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6813.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 309886.007 ops/s
[info]                  ·gc.alloc.rate:                   1011.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3430.555 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 315420.133 ops/s
[info]                  ·gc.alloc.rate:                   1029.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6744.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 315092.810 ops/s
[info]                  ·gc.alloc.rate:                   1028.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3377.351 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 314874.018 ops/s
[info]                  ·gc.alloc.rate:                   1027.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6762.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   313399.457 ±(99.9%) 9486.059 ops/s [Average]
[info]   (min, avg, max) = (309886.007, 313399.457, 315420.133), stdev = 2463.499
[info]   CI (99.9%): [303913.399, 322885.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1022.574 ±(99.9%) 31.074 MB/sec [Average]
[info]   (min, avg, max) = (1011.047, 1022.574, 1029.173), stdev = 8.070
[info]   CI (99.9%): [991.500, 1053.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.083 ±(99.9%) 0.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.312), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.984 ±(99.9%) 1424.562 MB/sec [Average]
[info]   (min, avg, max) = (675.322, 1080.984, 1352.692), stdev = 369.954
[info]   CI (99.9%): [≈ 0, 2505.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5425.656 ±(99.9%) 7107.620 B/op [Average]
[info]   (min, avg, max) = (3377.351, 5425.656, 6813.783), stdev = 1845.826
[info]   CI (99.9%): [≈ 0, 12533.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 965046.093 ops/s
[info] # Warmup Iteration   2: 1605522.814 ops/s
[info] # Warmup Iteration   3: 1622526.668 ops/s
[info] # Warmup Iteration   4: 1623637.879 ops/s
[info] # Warmup Iteration   5: 1622339.321 ops/s
[info] Iteration   1: 1619333.888 ops/s
[info]                  ·gc.alloc.rate:                   2501.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2617.614 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1615632.537 ops/s
[info]                  ·gc.alloc.rate:                   2496.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2629.423 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1623690.380 ops/s
[info]                  ·gc.alloc.rate:                   2509.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1965.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1621855.945 ops/s
[info]                  ·gc.alloc.rate:                   2505.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2628.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1621480.405 ops/s
[info]                  ·gc.alloc.rate:                   2505.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2633.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1620398.631 ±(99.9%) 11865.193 ops/s [Average]
[info]   (min, avg, max) = (1615632.537, 1620398.631, 1623690.380), stdev = 3081.353
[info]   CI (99.9%): [1608533.438, 1632263.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2503.548 ±(99.9%) 18.636 MB/sec [Average]
[info]   (min, avg, max) = (2496.277, 2503.548, 2509.014), stdev = 4.840
[info]   CI (99.9%): [2484.912, 2522.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.053 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.053, 0.061), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2567.965 ±(99.9%) 1162.595 MB/sec [Average]
[info]   (min, avg, max) = (2028.049, 2567.965, 2712.521), stdev = 301.922
[info]   CI (99.9%): [1405.370, 3730.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2494.864 ±(99.9%) 1139.071 B/op [Average]
[info]   (min, avg, max) = (1965.798, 2494.864, 2633.130), stdev = 295.813
[info]   CI (99.9%): [1355.793, 3633.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.966 ops/s
[info] # Warmup Iteration   2: 9340909.794 ops/s
[info] # Warmup Iteration   3: 9761622.163 ops/s
[info] # Warmup Iteration   4: 9654734.454 ops/s
[info] # Warmup Iteration   5: 9637410.482 ops/s
[info] Iteration   1: 9628998.209 ops/s
[info]                  ·gc.alloc.rate:                   1174.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9813973.459 ops/s
[info]                  ·gc.alloc.rate:                   1197.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 9797953.897 ops/s
[info]                  ·gc.alloc.rate:                   1195.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9787939.421 ops/s
[info]                  ·gc.alloc.rate:                   1193.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9793333.029 ops/s
[info]                  ·gc.alloc.rate:                   1194.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9764439.603 ±(99.9%) 293939.690 ops/s [Average]
[info]   (min, avg, max) = (9628998.209, 9764439.603, 9813973.459), stdev = 76335.204
[info]   CI (99.9%): [9470499.913, 10058379.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1191.225 ±(99.9%) 35.983 MB/sec [Average]
[info]   (min, avg, max) = (1174.673, 1191.225, 1197.392), stdev = 9.345
[info]   CI (99.9%): [1155.241, 1227.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1210.399 ±(99.9%) 1158.506 MB/sec [Average]
[info]   (min, avg, max) = (672.205, 1210.399, 1346.074), stdev = 300.860
[info]   CI (99.9%): [51.893, 2368.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   195.213 ±(99.9%) 188.283 B/op [Average]
[info]   (min, avg, max) = (107.787, 195.213, 219.716), stdev = 48.897
[info]   CI (99.9%): [6.930, 383.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934827.800 ops/s
[info] # Warmup Iteration   2: 2582451.525 ops/s
[info] # Warmup Iteration   3: 2624194.060 ops/s
[info] # Warmup Iteration   4: 2627029.215 ops/s
[info] # Warmup Iteration   5: 2616780.288 ops/s
[info] Iteration   1: 2629522.367 ops/s
[info]                  ·gc.alloc.rate:                   1844.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 809.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2583331.705 ops/s
[info]                  ·gc.alloc.rate:                   1812.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1238.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2629052.354 ops/s
[info]                  ·gc.alloc.rate:                   1843.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1217.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2613487.175 ops/s
[info]                  ·gc.alloc.rate:                   1833.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1226.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2630931.038 ops/s
[info]                  ·gc.alloc.rate:                   1845.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 812.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2617264.928 ±(99.9%) 78009.660 ops/s [Average]
[info]   (min, avg, max) = (2583331.705, 2617264.928, 2630931.038), stdev = 20258.861
[info]   CI (99.9%): [2539255.268, 2695274.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1835.772 ±(99.9%) 54.276 MB/sec [Average]
[info]   (min, avg, max) = (1812.076, 1835.772, 1845.227), stdev = 14.095
[info]   CI (99.9%): [1781.497, 1890.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.051), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762.642 ±(99.9%) 1431.458 MB/sec [Average]
[info]   (min, avg, max) = (1352.790, 1762.642, 2036.460), stdev = 371.745
[info]   CI (99.9%): [331.184, 3194.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1060.869 ±(99.9%) 878.187 B/op [Average]
[info]   (min, avg, max) = (809.807, 1060.869, 1238.037), stdev = 228.062
[info]   CI (99.9%): [182.683, 1939.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9321827.224 ops/s
[info] # Warmup Iteration   2: 10207820.868 ops/s
[info] # Warmup Iteration   3: 10492812.496 ops/s
[info] # Warmup Iteration   4: 10494808.418 ops/s
[info] # Warmup Iteration   5: 10486114.269 ops/s
[info] Iteration   1: 10463583.878 ops/s
[info]                  ·gc.alloc.rate:                   1329.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10481612.356 ops/s
[info]                  ·gc.alloc.rate:                   1331.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 10465948.050 ops/s
[info]                  ·gc.alloc.rate:                   1329.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10510219.464 ops/s
[info]                  ·gc.alloc.rate:                   1335.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10456061.430 ops/s
[info]                  ·gc.alloc.rate:                   1328.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10475485.036 ±(99.9%) 82898.307 ops/s [Average]
[info]   (min, avg, max) = (10456061.430, 10475485.036, 10510219.464), stdev = 21528.427
[info]   CI (99.9%): [10392586.729, 10558383.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1331.038 ±(99.9%) 10.959 MB/sec [Average]
[info]   (min, avg, max) = (1328.500, 1331.038, 1335.657), stdev = 2.846
[info]   CI (99.9%): [1320.079, 1341.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1345.294 ±(99.9%) 5.628 MB/sec [Average]
[info]   (min, avg, max) = (1344.058, 1345.294, 1347.349), stdev = 1.461
[info]   CI (99.9%): [1339.666, 1350.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   202.143 ±(99.9%) 1.814 B/op [Average]
[info]   (min, avg, max) = (201.591, 202.143, 202.838), stdev = 0.471
[info]   CI (99.9%): [200.329, 203.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145584.972 ops/s
[info] # Warmup Iteration   2: 646201.581 ops/s
[info] # Warmup Iteration   3: 650216.827 ops/s
[info] # Warmup Iteration   4: 651707.057 ops/s
[info] # Warmup Iteration   5: 654569.732 ops/s
[info] Iteration   1: 645953.925 ops/s
[info]                  ·gc.alloc.rate:                   1707.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3294.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 649302.070 ops/s
[info]                  ·gc.alloc.rate:                   1716.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4922.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 648699.285 ops/s
[info]                  ·gc.alloc.rate:                   1714.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3287.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 647849.576 ops/s
[info]                  ·gc.alloc.rate:                   1712.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4943.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 649851.089 ops/s
[info]                  ·gc.alloc.rate:                   1717.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3287.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   648331.189 ±(99.9%) 5862.451 ops/s [Average]
[info]   (min, avg, max) = (645953.925, 648331.189, 649851.089), stdev = 1522.460
[info]   CI (99.9%): [642468.738, 654193.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1713.608 ±(99.9%) 15.040 MB/sec [Average]
[info]   (min, avg, max) = (1707.704, 1713.608, 1717.446), stdev = 3.906
[info]   CI (99.9%): [1698.568, 1728.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.182, 0.252), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.944 ±(99.9%) 1429.882 MB/sec [Average]
[info]   (min, avg, max) = (1352.486, 1625.944, 2034.423), stdev = 371.336
[info]   CI (99.9%): [196.063, 3055.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3946.934 ±(99.9%) 3465.306 B/op [Average]
[info]   (min, avg, max) = (3287.262, 3946.934, 4943.296), stdev = 899.929
[info]   CI (99.9%): [481.628, 7412.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1017793.229 ops/s
[info] # Warmup Iteration   2: 1955254.728 ops/s
[info] # Warmup Iteration   3: 1972255.804 ops/s
[info] # Warmup Iteration   4: 2000221.985 ops/s
[info] # Warmup Iteration   5: 1997437.261 ops/s
[info] Iteration   1: 2001928.293 ops/s
[info]                  ·gc.alloc.rate:                   1709.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1582.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2000226.097 ops/s
[info]                  ·gc.alloc.rate:                   1708.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1585.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2007312.899 ops/s
[info]                  ·gc.alloc.rate:                   1714.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1054.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2007473.317 ops/s
[info]                  ·gc.alloc.rate:                   1713.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1584.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2001453.082 ops/s
[info]                  ·gc.alloc.rate:                   1708.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2003678.737 ±(99.9%) 13275.550 ops/s [Average]
[info]   (min, avg, max) = (2000226.097, 2003678.737, 2007473.317), stdev = 3447.618
[info]   CI (99.9%): [1990403.188, 2016954.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1710.867 ±(99.9%) 11.017 MB/sec [Average]
[info]   (min, avg, max) = (1708.220, 1710.867, 1714.012), stdev = 2.861
[info]   CI (99.9%): [1699.850, 1721.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1344.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.000, 1344.000, 1344.000), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.046, 0.066), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.193 ±(99.9%) 1411.057 MB/sec [Average]
[info]   (min, avg, max) = (1344.826, 1748.193, 2020.044), stdev = 366.447
[info]   CI (99.9%): [337.136, 3159.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1373.394 ±(99.9%) 1109.953 B/op [Average]
[info]   (min, avg, max) = (1054.512, 1373.394, 1585.287), stdev = 288.251
[info]   CI (99.9%): [263.441, 2483.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.946 ops/s
[info] # Warmup Iteration   2: 16871394.609 ops/s
[info] # Warmup Iteration   3: 16819804.421 ops/s
[info] # Warmup Iteration   4: 18178480.548 ops/s
[info] # Warmup Iteration   5: 18495613.643 ops/s
[info] Iteration   1: 17606932.145 ops/s
[info]                  ·gc.alloc.rate:                   537.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.731 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17306559.966 ops/s
[info]                  ·gc.alloc.rate:                   527.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18490184.899 ops/s
[info]                  ·gc.alloc.rate:      563.919 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18524962.245 ops/s
[info]                  ·gc.alloc.rate:                   564.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17897474.381 ops/s
[info]                  ·gc.alloc.rate:                   545.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   17965222.727 ±(99.9%) 2069781.309 ops/s [Average]
[info]   (min, avg, max) = (17306559.966, 17965222.727, 18524962.245), stdev = 537515.633
[info]   CI (99.9%): [15895441.418, 20035004.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   547.919 ±(99.9%) 63.067 MB/sec [Average]
[info]   (min, avg, max) = (527.765, 547.919, 564.937), stdev = 16.378
[info]   CI (99.9%): [484.853, 610.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.506 ±(99.9%) 4.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.531), stdev = 1.132
[info]   CI (99.9%): [≈ 0, 4.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.230), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.135 ±(99.9%) 1122.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.135, 673.419), stdev = 291.429
[info]   CI (99.9%): [≈ 0, 1628.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   44.659 ±(99.9%) 98.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.659, 61.246), stdev = 25.676
[info]   CI (99.9%): [≈ 0, 143.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f7c6d30b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2023835.709 ops/s
[info] # Warmup Iteration   2: 6200938.472 ops/s
[info] # Warmup Iteration   3: 6304212.462 ops/s
[info] # Warmup Iteration   4: 6323579.882 ops/s
[info] # Warmup Iteration   5: 6356939.385 ops/s
[info] Iteration   1: 6272495.691 ops/s
[info]                  ·gc.alloc.rate:                   1721.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6382918.763 ops/s
[info]                  ·gc.alloc.rate:                   1751.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6391123.838 ops/s
[info]                  ·gc.alloc.rate:                   1753.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6252578.703 ops/s
[info]                  ·gc.alloc.rate:                   1715.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6377701.741 ops/s
[info]                  ·gc.alloc.rate:                   1750.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 502.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6335363.747 ±(99.9%) 258086.009 ops/s [Average]
[info]   (min, avg, max) = (6252578.703, 6335363.747, 6391123.838), stdev = 67024.117
[info]   CI (99.9%): [6077277.738, 6593449.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1738.691 ±(99.9%) 70.585 MB/sec [Average]
[info]   (min, avg, max) = (1715.962, 1738.691, 1753.921), stdev = 18.331
[info]   CI (99.9%): [1668.106, 1809.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.016, 0.021), stdev = 0.004
[info]   CI (99.9%): [0.002, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1760.938 ±(99.9%) 1431.149 MB/sec [Average]
[info]   (min, avg, max) = (1351.881, 1760.938, 2035.287), stdev = 371.665
[info]   CI (99.9%): [329.789, 3192.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   436.792 ±(99.9%) 339.316 B/op [Average]
[info]   (min, avg, max) = (339.226, 436.792, 502.368), stdev = 88.119
[info]   CI (99.9%): [97.476, 776.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14960711.927 ops/s
[info] # Warmup Iteration   2: 19948734.531 ops/s
[info] # Warmup Iteration   3: 21010124.628 ops/s
[info] # Warmup Iteration   4: 21777392.922 ops/s
[info] # Warmup Iteration   5: 21753572.159 ops/s
[info] Iteration   1: 21880437.791 ops/s
[info]                  ·gc.alloc.rate:                   667.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21994832.193 ops/s
[info]                  ·gc.alloc.rate:                   670.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21922569.526 ops/s
[info]                  ·gc.alloc.rate:                   668.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21959525.559 ops/s
[info]                  ·gc.alloc.rate:                   669.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21937546.143 ops/s
[info]                  ·gc.alloc.rate:                   669.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21938982.242 ±(99.9%) 163823.713 ops/s [Average]
[info]   (min, avg, max) = (21880437.791, 21938982.242, 21994832.193), stdev = 42544.498
[info]   CI (99.9%): [21775158.530, 22102805.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   669.047 ±(99.9%) 4.971 MB/sec [Average]
[info]   (min, avg, max) = (667.255, 669.047, 670.733), stdev = 1.291
[info]   CI (99.9%): [664.076, 674.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.665 ±(99.9%) 5.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.240), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 6.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.233), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.276 ±(99.9%) 5.416 MB/sec [Average]
[info]   (min, avg, max) = (671.543, 673.276, 674.732), stdev = 1.406
[info]   CI (99.9%): [667.860, 678.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.304 ±(99.9%) 0.541 B/op [Average]
[info]   (min, avg, max) = (48.172, 48.304, 48.537), stdev = 0.141
[info]   CI (99.9%): [47.762, 48.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15535128.222 ops/s
[info] # Warmup Iteration   2: 21049930.555 ops/s
[info] # Warmup Iteration   3: 19729635.552 ops/s
[info] # Warmup Iteration   4: 20786776.441 ops/s
[info] # Warmup Iteration   5: 20785043.085 ops/s
[info] Iteration   1: 19769447.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20247102.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20291951.251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20242330.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20266740.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20163514.478 ±(99.9%) 851591.682 ops/s [Average]
[info]   (min, avg, max) = (19769447.544, 20163514.478, 20291951.251), stdev = 221155.655
[info]   CI (99.9%): [19311922.796, 21015106.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431359.254 ops/s
[info] # Warmup Iteration   2: 1442107.223 ops/s
[info] # Warmup Iteration   3: 1439909.488 ops/s
[info] # Warmup Iteration   4: 1462623.678 ops/s
[info] # Warmup Iteration   5: 1463150.603 ops/s
[info] Iteration   1: 1458583.933 ops/s
[info]                  ·gc.alloc.rate:                   2142.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2922.225 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1465071.095 ops/s
[info]                  ·gc.alloc.rate:                   2151.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2184.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1464819.535 ops/s
[info]                  ·gc.alloc.rate:                   2151.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2187.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1468512.242 ops/s
[info]                  ·gc.alloc.rate:                   2156.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2183.846 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1464807.410 ops/s
[info]                  ·gc.alloc.rate:                   2151.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2190.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1464358.843 ±(99.9%) 13819.609 ops/s [Average]
[info]   (min, avg, max) = (1458583.933, 1464358.843, 1468512.242), stdev = 3588.909
[info]   CI (99.9%): [1450539.233, 1478178.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2151.013 ±(99.9%) 19.624 MB/sec [Average]
[info]   (min, avg, max) = (2142.841, 2151.013, 2156.964), stdev = 5.096
[info]   CI (99.9%): [2131.388, 2170.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2312.000, 2312.000, 2312.000), stdev = 0.001
[info]   CI (99.9%): [2312.000, 2312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.081 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.081, 0.112), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2170.784 ±(99.9%) 1157.324 MB/sec [Average]
[info]   (min, avg, max) = (2033.427, 2170.784, 2708.418), stdev = 300.553
[info]   CI (99.9%): [1013.459, 3328.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2333.811 ±(99.9%) 1266.649 B/op [Average]
[info]   (min, avg, max) = (2183.846, 2333.811, 2922.225), stdev = 328.945
[info]   CI (99.9%): [1067.163, 3600.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316219.734 ops/s
[info] # Warmup Iteration   2: 366862.396 ops/s
[info] # Warmup Iteration   3: 379353.060 ops/s
[info] # Warmup Iteration   4: 378991.683 ops/s
[info] # Warmup Iteration   5: 378703.978 ops/s
[info] Iteration   1: 380410.750 ops/s
[info]                  ·gc.alloc.rate:                   2093.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8349.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 380058.594 ops/s
[info]                  ·gc.alloc.rate:                   2092.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8368.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 381032.417 ops/s
[info]                  ·gc.alloc.rate:                   2097.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8360.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 380809.175 ops/s
[info]                  ·gc.alloc.rate:                   2096.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8379.258 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 379655.697 ops/s
[info]                  ·gc.alloc.rate:                   2089.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11228.332 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   380393.327 ±(99.9%) 2142.056 ops/s [Average]
[info]   (min, avg, max) = (379655.697, 380393.327, 381032.417), stdev = 556.285
[info]   CI (99.9%): [378251.271, 382535.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2093.965 ±(99.9%) 11.992 MB/sec [Average]
[info]   (min, avg, max) = (2089.685, 2093.965, 2097.500), stdev = 3.114
[info]   CI (99.9%): [2081.973, 2105.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.276 ±(99.9%) 0.491 B/op [Average]
[info]   (min, avg, max) = (0.086, 0.276, 0.431), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2159.665 ±(99.9%) 1180.803 MB/sec [Average]
[info]   (min, avg, max) = (2017.676, 2159.665, 2708.181), stdev = 306.651
[info]   CI (99.9%): [978.862, 3340.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8937.013 ±(99.9%) 4932.419 B/op [Average]
[info]   (min, avg, max) = (8349.264, 8937.013, 11228.332), stdev = 1280.933
[info]   CI (99.9%): [4004.594, 13869.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242421.648 ops/s
[info] # Warmup Iteration   2: 459527.519 ops/s
[info] # Warmup Iteration   3: 462176.468 ops/s
[info] # Warmup Iteration   4: 460008.842 ops/s
[info] # Warmup Iteration   5: 462493.798 ops/s
[info] Iteration   1: 460988.375 ops/s
[info]                  ·gc.alloc.rate:                   627.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2300.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 461394.300 ops/s
[info]                  ·gc.alloc.rate:                   628.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 462131.063 ops/s
[info]                  ·gc.alloc.rate:                   629.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2296.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 462693.535 ops/s
[info]                  ·gc.alloc.rate:                   630.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2294.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 461288.656 ops/s
[info]                  ·gc.alloc.rate:                   628.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2303.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   461699.186 ±(99.9%) 2683.039 ops/s [Average]
[info]   (min, avg, max) = (460988.375, 461699.186, 462693.535), stdev = 696.777
[info]   CI (99.9%): [459016.146, 464382.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   628.866 ±(99.9%) 3.794 MB/sec [Average]
[info]   (min, avg, max) = (627.885, 628.866, 630.276), stdev = 0.985
[info]   CI (99.9%): [625.072, 632.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.354), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.284 ±(99.9%) 2.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.208), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.222 ±(99.9%) 2.145 MB/sec [Average]
[info]   (min, avg, max) = (673.676, 674.222, 674.995), stdev = 0.557
[info]   CI (99.9%): [672.077, 676.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2298.638 ±(99.9%) 13.635 B/op [Average]
[info]   (min, avg, max) = (2294.093, 2298.638, 2303.466), stdev = 3.541
[info]   CI (99.9%): [2285.003, 2312.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022177.311 ops/s
[info] # Warmup Iteration   2: 1126215.968 ops/s
[info] # Warmup Iteration   3: 1127692.330 ops/s
[info] # Warmup Iteration   4: 1129255.733 ops/s
[info] # Warmup Iteration   5: 1126184.293 ops/s
[info] Iteration   1: 1130567.733 ops/s
[info]                  ·gc.alloc.rate:                   752.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 939.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1131631.717 ops/s
[info]                  ·gc.alloc.rate:                   753.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 935.717 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1129163.923 ops/s
[info]                  ·gc.alloc.rate:                   751.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 937.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1131968.244 ops/s
[info]                  ·gc.alloc.rate:                   753.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 934.523 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1125599.512 ops/s
[info]                  ·gc.alloc.rate:                   749.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 939.777 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1129786.226 ±(99.9%) 9947.345 ops/s [Average]
[info]   (min, avg, max) = (1125599.512, 1129786.226, 1131968.244), stdev = 2583.294
[info]   CI (99.9%): [1119838.881, 1139733.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   752.222 ±(99.9%) 6.578 MB/sec [Average]
[info]   (min, avg, max) = (749.452, 752.222, 753.695), stdev = 1.708
[info]   CI (99.9%): [745.644, 758.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.087), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.859 ±(99.9%) 4.111 MB/sec [Average]
[info]   (min, avg, max) = (672.059, 672.859, 674.672), stdev = 1.068
[info]   CI (99.9%): [668.748, 676.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   937.434 ±(99.9%) 8.791 B/op [Average]
[info]   (min, avg, max) = (934.523, 937.434, 939.777), stdev = 2.283
[info]   CI (99.9%): [928.643, 946.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73375.190 ops/s
[info] # Warmup Iteration   2: 114265.900 ops/s
[info] # Warmup Iteration   3: 113793.797 ops/s
[info] # Warmup Iteration   4: 115519.656 ops/s
[info] # Warmup Iteration   5: 115165.891 ops/s
[info] Iteration   1: 115977.576 ops/s
[info]                  ·gc.alloc.rate:                   4013.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4074.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55308.341 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 115895.828 ops/s
[info]                  ·gc.alloc.rate:                   4010.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4080.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55420.790 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 114932.278 ops/s
[info]                  ·gc.alloc.rate:                   3977.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55935.729 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 115773.331 ops/s
[info]                  ·gc.alloc.rate:                   4007.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55556.154 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 115771.393 ops/s
[info]                  ·gc.alloc.rate:                   4006.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              54472.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55583.321 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   115670.081 ±(99.9%) 1623.211 ops/s [Average]
[info]   (min, avg, max) = (114932.278, 115670.081, 115977.576), stdev = 421.543
[info]   CI (99.9%): [114046.870, 117293.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4003.177 ±(99.9%) 56.068 MB/sec [Average]
[info]   (min, avg, max) = (3977.550, 4003.177, 4013.285), stdev = 14.561
[info]   CI (99.9%): [3947.108, 4059.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54472.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54472.004, 54472.004, 54472.004), stdev = 0.001
[info]   CI (99.9%): [54472.003, 54472.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.020 ±(99.9%) 1.254 B/op [Average]
[info]   (min, avg, max) = (0.566, 1.020, 1.425), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 2.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4083.149 ±(99.9%) 21.364 MB/sec [Average]
[info]   (min, avg, max) = (4074.903, 4083.149, 4088.209), stdev = 5.548
[info]   CI (99.9%): [4061.785, 4104.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55560.867 ±(99.9%) 912.121 B/op [Average]
[info]   (min, avg, max) = (55308.341, 55560.867, 55935.729), stdev = 236.875
[info]   CI (99.9%): [54648.746, 56472.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:47:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246934.115 ops/s
[info] # Warmup Iteration   2: 322194.609 ops/s
[info] # Warmup Iteration   3: 324327.357 ops/s
[info] # Warmup Iteration   4: 322736.948 ops/s
[info] # Warmup Iteration   5: 322992.058 ops/s
[info] Iteration   1: 325664.532 ops/s
[info]                  ·gc.alloc.rate:                   498.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2472.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 324649.104 ops/s
[info]                  ·gc.alloc.rate:                   496.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2480.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 324593.084 ops/s
[info]                  ·gc.alloc.rate:                   496.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3268.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 324806.477 ops/s
[info]                  ·gc.alloc.rate:                   497.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3266.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 325676.739 ops/s
[info]                  ·gc.alloc.rate:      498.240 MB/sec
[info]                  ·gc.alloc.rate.norm: 2408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   325077.987 ±(99.9%) 2104.975 ops/s [Average]
[info]   (min, avg, max) = (324593.084, 325077.987, 325676.739), stdev = 546.655
[info]   CI (99.9%): [322973.012, 327182.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   497.378 ±(99.9%) 3.204 MB/sec [Average]
[info]   (min, avg, max) = (496.561, 497.378, 498.288), stdev = 0.832
[info]   CI (99.9%): [494.174, 500.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.701 ±(99.9%) 6.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.492), stdev = 1.561
[info]   CI (99.9%): [≈ 0, 6.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.397 ±(99.9%) 29.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.397, 16.936), stdev = 7.568
[info]   CI (99.9%): [≈ 0, 32.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.325 ±(99.9%) 1067.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.325, 674.356), stdev = 277.343
[info]   CI (99.9%): [≈ 0, 1542.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2297.604 ±(99.9%) 5175.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2297.604, 3268.836), stdev = 1343.990
[info]   CI (99.9%): [≈ 0, 7472.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362012.310 ops/s
[info] # Warmup Iteration   2: 630664.983 ops/s
[info] # Warmup Iteration   3: 617471.817 ops/s
[info] # Warmup Iteration   4: 621784.718 ops/s
[info] # Warmup Iteration   5: 635115.230 ops/s
[info] Iteration   1: 634900.277 ops/s
[info]                  ·gc.alloc.rate:                   467.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1268.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 634445.106 ops/s
[info]                  ·gc.alloc.rate:      467.613 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 636299.261 ops/s
[info]                  ·gc.alloc.rate:                   468.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1666.548 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 636622.676 ops/s
[info]                  ·gc.alloc.rate:                   469.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1665.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 635311.129 ops/s
[info]                  ·gc.alloc.rate:      468.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   635515.690 ±(99.9%) 3553.317 ops/s [Average]
[info]   (min, avg, max) = (634445.106, 635515.690, 636622.676), stdev = 922.785
[info]   CI (99.9%): [631962.373, 639069.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   468.364 ±(99.9%) 2.730 MB/sec [Average]
[info]   (min, avg, max) = (467.613, 468.364, 469.238), stdev = 0.709
[info]   CI (99.9%): [465.634, 471.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.291), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.165 ±(99.9%) 1.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.721), stdev = 0.314
[info]   CI (99.9%): [≈ 0, 1.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   371.810 ±(99.9%) 1331.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.810, 673.815), stdev = 345.822
[info]   CI (99.9%): [≈ 0, 1703.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   920.096 ±(99.9%) 3294.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 920.096, 1666.548), stdev = 855.496
[info]   CI (99.9%): [≈ 0, 4214.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2508964.187 ops/s
[info] # Warmup Iteration   2: 2700666.455 ops/s
[info] # Warmup Iteration   3: 2691487.345 ops/s
[info] # Warmup Iteration   4: 2701809.210 ops/s
[info] # Warmup Iteration   5: 2701814.833 ops/s
[info] Iteration   1: 2705106.123 ops/s
[info]                  ·gc.alloc.rate:                   1251.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 782.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2695725.036 ops/s
[info]                  ·gc.alloc.rate:                   1246.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2700541.255 ops/s
[info]                  ·gc.alloc.rate:                   1249.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 783.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2703485.958 ops/s
[info]                  ·gc.alloc.rate:                   1250.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 782.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2699471.847 ops/s
[info]                  ·gc.alloc.rate:                   1248.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 784.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2700866.044 ±(99.9%) 14058.998 ops/s [Average]
[info]   (min, avg, max) = (2695725.036, 2700866.044, 2705106.123), stdev = 3651.077
[info]   CI (99.9%): [2686807.046, 2714925.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1249.283 ±(99.9%) 6.675 MB/sec [Average]
[info]   (min, avg, max) = (1246.992, 1249.283, 1251.289), stdev = 1.733
[info]   CI (99.9%): [1242.608, 1255.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.053 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.049, 0.053, 0.061), stdev = 0.007
[info]   CI (99.9%): [0.028, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.500 ±(99.9%) 4.250 MB/sec [Average]
[info]   (min, avg, max) = (1343.011, 1344.500, 1345.971), stdev = 1.104
[info]   CI (99.9%): [1340.250, 1348.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   783.487 ±(99.9%) 4.039 B/op [Average]
[info]   (min, avg, max) = (782.129, 783.487, 784.876), stdev = 1.049
[info]   CI (99.9%): [779.448, 787.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2605628.785 ops/s
[info] # Warmup Iteration   2: 2747221.351 ops/s
[info] # Warmup Iteration   3: 2747680.815 ops/s
[info] # Warmup Iteration   4: 2745452.952 ops/s
[info] # Warmup Iteration   5: 2730369.178 ops/s
[info] Iteration   1: 2738196.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2738179.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2738904.640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2737635.256 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2739164.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2738415.912 ±(99.9%) 2367.775 ops/s [Average]
[info]   (min, avg, max) = (2737635.256, 2738415.912, 2739164.163), stdev = 614.904
[info]   CI (99.9%): [2736048.136, 2740783.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314417.067 ops/s
[info] # Warmup Iteration   2: 391525.633 ops/s
[info] # Warmup Iteration   3: 398448.796 ops/s
[info] # Warmup Iteration   4: 399000.522 ops/s
[info] # Warmup Iteration   5: 399230.361 ops/s
[info] Iteration   1: 397897.997 ops/s
[info]                  ·gc.alloc.rate:                   572.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2023.515 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 399065.451 ops/s
[info]                  ·gc.alloc.rate:                   573.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2655.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 398655.055 ops/s
[info]                  ·gc.alloc.rate:                   573.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2658.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 401162.044 ops/s
[info]                  ·gc.alloc.rate:                   577.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2631.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 402051.256 ops/s
[info]                  ·gc.alloc.rate:      578.370 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   399766.361 ±(99.9%) 6775.858 ops/s [Average]
[info]   (min, avg, max) = (397897.997, 399766.361, 402051.256), stdev = 1759.669
[info]   CI (99.9%): [392990.503, 406542.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   575.056 ±(99.9%) 9.804 MB/sec [Average]
[info]   (min, avg, max) = (572.383, 575.056, 578.370), stdev = 2.546
[info]   CI (99.9%): [565.252, 584.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.973), stdev = 1.772
[info]   CI (99.9%): [≈ 0, 7.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.167 ±(99.9%) 26.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.167, 15.670), stdev = 6.990
[info]   CI (99.9%): [≈ 0, 30.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.840 ±(99.9%) 1121.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.840, 673.475), stdev = 291.238
[info]   CI (99.9%): [≈ 0, 1627.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1993.990 ±(99.9%) 4417.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1993.990, 2658.791), stdev = 1147.136
[info]   CI (99.9%): [≈ 0, 6411.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16890.849 ops/s
[info] # Warmup Iteration   2: 20951.687 ops/s
[info] # Warmup Iteration   3: 20913.230 ops/s
[info] # Warmup Iteration   4: 20977.183 ops/s
[info] # Warmup Iteration   5: 20984.144 ops/s
[info] Iteration   1: 20527.796 ops/s
[info]                  ·gc.alloc.rate:                   1284.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102957.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 20971.837 ops/s
[info]                  ·gc.alloc.rate:                   1312.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100778.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21087.169 ops/s
[info]                  ·gc.alloc.rate:                   1319.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100273.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21101.748 ops/s
[info]                  ·gc.alloc.rate:                   1320.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100261.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21010.512 ops/s
[info]                  ·gc.alloc.rate:                   1314.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100786.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   20939.812 ±(99.9%) 910.655 ops/s [Average]
[info]   (min, avg, max) = (20527.796, 20939.812, 21101.748), stdev = 236.494
[info]   CI (99.9%): [20029.157, 21850.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1310.386 ±(99.9%) 56.553 MB/sec [Average]
[info]   (min, avg, max) = (1284.898, 1310.386, 1320.779), stdev = 14.687
[info]   CI (99.9%): [1253.832, 1366.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.026 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (98480.019, 98480.026, 98480.050), stdev = 0.014
[info]   CI (99.9%): [98479.973, 98480.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.180 ±(99.9%) 8.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.180, 4.686), stdev = 2.092
[info]   CI (99.9%): [≈ 0, 10.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.939 ±(99.9%) 3.894 MB/sec [Average]
[info]   (min, avg, max) = (1342.778, 1343.939, 1345.257), stdev = 1.011
[info]   CI (99.9%): [1340.044, 1347.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   101011.655 ±(99.9%) 4304.740 B/op [Average]
[info]   (min, avg, max) = (100261.851, 101011.655, 102957.784), stdev = 1117.927
[info]   CI (99.9%): [96706.915, 105316.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20249.233 ops/s
[info] # Warmup Iteration   2: 32787.004 ops/s
[info] # Warmup Iteration   3: 33151.991 ops/s
[info] # Warmup Iteration   4: 32697.489 ops/s
[info] # Warmup Iteration   5: 33180.944 ops/s
[info] Iteration   1: 33129.896 ops/s
[info]                  ·gc.alloc.rate:                   830.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64066.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33092.467 ops/s
[info]                  ·gc.alloc.rate:                   829.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32092.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 33306.465 ops/s
[info]                  ·gc.alloc.rate:                   834.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31918.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 33272.159 ops/s
[info]                  ·gc.alloc.rate:                   834.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31950.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 33150.915 ops/s
[info]                  ·gc.alloc.rate:                   830.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64197.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   33190.381 ±(99.9%) 360.021 ops/s [Average]
[info]   (min, avg, max) = (33092.467, 33190.381, 33306.465), stdev = 93.496
[info]   CI (99.9%): [32830.359, 33550.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   831.947 ±(99.9%) 9.223 MB/sec [Average]
[info]   (min, avg, max) = (829.413, 831.947, 834.890), stdev = 2.395
[info]   CI (99.9%): [822.724, 841.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (39456.012, 39456.012, 39456.013), stdev = 0.001
[info]   CI (99.9%): [39456.011, 39456.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.383 ±(99.9%) 5.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.383, 2.967), stdev = 1.500
[info]   CI (99.9%): [≈ 0, 7.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   945.165 ±(99.9%) 1423.746 MB/sec [Average]
[info]   (min, avg, max) = (674.630, 945.165, 1351.994), stdev = 369.742
[info]   CI (99.9%): [≈ 0, 2368.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44845.195 ±(99.9%) 67797.151 B/op [Average]
[info]   (min, avg, max) = (31918.110, 44845.195, 64197.885), stdev = 17606.705
[info]   CI (99.9%): [≈ 0, 112642.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35532.089 ops/s
[info] # Warmup Iteration   2: 43089.763 ops/s
[info] # Warmup Iteration   3: 42647.404 ops/s
[info] # Warmup Iteration   4: 42880.716 ops/s
[info] # Warmup Iteration   5: 42736.358 ops/s
[info] Iteration   1: 42889.234 ops/s
[info]                  ·gc.alloc.rate:                   639.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24762.390 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42831.022 ops/s
[info]                  ·gc.alloc.rate:                   638.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24796.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43072.707 ops/s
[info]                  ·gc.alloc.rate:                   641.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24584.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 43045.579 ops/s
[info]                  ·gc.alloc.rate:      641.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 23448.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 43106.085 ops/s
[info]                  ·gc.alloc.rate:                   642.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24564.789 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   42988.925 ±(99.9%) 466.974 ops/s [Average]
[info]   (min, avg, max) = (42831.022, 42988.925, 43106.085), stdev = 121.272
[info]   CI (99.9%): [42521.951, 43455.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   640.505 ±(99.9%) 6.548 MB/sec [Average]
[info]   (min, avg, max) = (638.270, 640.505, 642.137), stdev = 1.700
[info]   CI (99.9%): [633.958, 647.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23448.009, 23448.009, 23448.010), stdev = 0.001
[info]   CI (99.9%): [23448.009, 23448.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.669 ±(99.9%) 5.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.304), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24.548 ±(99.9%) 208.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.548, 121.219), stdev = 54.042
[info]   CI (99.9%): [≈ 0, 232.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   539.089 ±(99.9%) 1160.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.089, 674.977), stdev = 301.362
[info]   CI (99.9%): [≈ 0, 1699.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19741.570 ±(99.9%) 42497.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19741.570, 24796.496), stdev = 11036.358
[info]   CI (99.9%): [≈ 0, 62238.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13772.084 ops/s
[info] # Warmup Iteration   2: 26954.360 ops/s
[info] # Warmup Iteration   3: 26959.178 ops/s
[info] # Warmup Iteration   4: 26988.089 ops/s
[info] # Warmup Iteration   5: 25921.495 ops/s
[info] Iteration   1: 26891.783 ops/s
[info]                  ·gc.alloc.rate:                   1425.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79139.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26999.884 ops/s
[info]                  ·gc.alloc.rate:                   1430.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118331.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27061.595 ops/s
[info]                  ·gc.alloc.rate:                   1434.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78800.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27089.086 ops/s
[info]                  ·gc.alloc.rate:                   1435.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78793.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26961.340 ops/s
[info]                  ·gc.alloc.rate:                   1428.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79208.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   27000.738 ±(99.9%) 304.012 ops/s [Average]
[info]   (min, avg, max) = (26891.783, 27000.738, 27089.086), stdev = 78.951
[info]   CI (99.9%): [26696.726, 27304.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1430.735 ±(99.9%) 16.088 MB/sec [Average]
[info]   (min, avg, max) = (1425.069, 1430.735, 1435.335), stdev = 4.178
[info]   CI (99.9%): [1414.647, 1446.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (83400.015, 83400.015, 83400.016), stdev = 0.001
[info]   CI (99.9%): [83400.013, 83400.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.455 ±(99.9%) 3.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.455, 2.430), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 5.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.993 ±(99.9%) 1162.455 MB/sec [Average]
[info]   (min, avg, max) = (1352.265, 1489.993, 2030.014), stdev = 301.886
[info]   CI (99.9%): [327.538, 2652.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86854.555 ±(99.9%) 67759.921 B/op [Average]
[info]   (min, avg, max) = (78793.162, 86854.555, 118331.248), stdev = 17597.036
[info]   CI (99.9%): [19094.634, 154614.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18332.970 ops/s
[info] # Warmup Iteration   2: 30981.306 ops/s
[info] # Warmup Iteration   3: 30782.435 ops/s
[info] # Warmup Iteration   4: 30926.922 ops/s
[info] # Warmup Iteration   5: 31261.870 ops/s
[info] Iteration   1: 31292.768 ops/s
[info]                  ·gc.alloc.rate:                   1718.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67489.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31248.630 ops/s
[info]                  ·gc.alloc.rate:                   1715.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101472.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31239.602 ops/s
[info]                  ·gc.alloc.rate:                   1715.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67757.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30534.959 ops/s
[info]                  ·gc.alloc.rate:                   1676.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104133.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31199.143 ops/s
[info]                  ·gc.alloc.rate:                   1713.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68045.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   31103.020 ±(99.9%) 1229.487 ops/s [Average]
[info]   (min, avg, max) = (30534.959, 31103.020, 31292.768), stdev = 319.294
[info]   CI (99.9%): [29873.533, 32332.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1708.173 ±(99.9%) 67.567 MB/sec [Average]
[info]   (min, avg, max) = (1676.943, 1708.173, 1718.534), stdev = 17.547
[info]   CI (99.9%): [1640.606, 1775.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86432.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (86432.013, 86432.013, 86432.014), stdev = 0.001
[info]   CI (99.9%): [86432.012, 86432.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.106 ±(99.9%) 5.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.106, 4.188), stdev = 1.481
[info]   CI (99.9%): [≈ 0, 7.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.202 ±(99.9%) 1417.581 MB/sec [Average]
[info]   (min, avg, max) = (1341.900, 1614.202, 2020.378), stdev = 368.141
[info]   CI (99.9%): [196.621, 3031.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   81779.617 ±(99.9%) 73991.977 B/op [Average]
[info]   (min, avg, max) = (67489.580, 81779.617, 104133.166), stdev = 19215.481
[info]   CI (99.9%): [7787.640, 155771.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11946.117 ops/s
[info] # Warmup Iteration   2: 30019.715 ops/s
[info] # Warmup Iteration   3: 29910.917 ops/s
[info] # Warmup Iteration   4: 30001.600 ops/s
[info] # Warmup Iteration   5: 30047.720 ops/s
[info] Iteration   1: 30060.533 ops/s
[info]                  ·gc.alloc.rate:                   1618.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106235.240 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 29791.288 ops/s
[info]                  ·gc.alloc.rate:                   1604.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71527.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30154.495 ops/s
[info]                  ·gc.alloc.rate:                   1623.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106088.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30221.544 ops/s
[info]                  ·gc.alloc.rate:                   1626.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70628.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30204.060 ops/s
[info]                  ·gc.alloc.rate:                   1626.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70738.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   30086.384 ±(99.9%) 679.354 ops/s [Average]
[info]   (min, avg, max) = (29791.288, 30086.384, 30221.544), stdev = 176.426
[info]   CI (99.9%): [29407.030, 30765.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1619.641 ±(99.9%) 35.953 MB/sec [Average]
[info]   (min, avg, max) = (1604.036, 1619.641, 1626.590), stdev = 9.337
[info]   CI (99.9%): [1583.688, 1655.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.014, 84720.015), stdev = 0.001
[info]   CI (99.9%): [84720.012, 84720.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.525 ±(99.9%) 10.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.525, 6.539), stdev = 2.842
[info]   CI (99.9%): [≈ 0, 12.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.969 ±(99.9%) 1423.256 MB/sec [Average]
[info]   (min, avg, max) = (1354.255, 1625.969, 2032.464), stdev = 369.615
[info]   CI (99.9%): [202.713, 3049.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   85043.599 ±(99.9%) 74245.645 B/op [Average]
[info]   (min, avg, max) = (70628.932, 85043.599, 106235.240), stdev = 19281.358
[info]   CI (99.9%): [10797.954, 159289.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25399.993 ops/s
[info] # Warmup Iteration   2: 33374.654 ops/s
[info] # Warmup Iteration   3: 33909.393 ops/s
[info] # Warmup Iteration   4: 33986.718 ops/s
[info] # Warmup Iteration   5: 34464.849 ops/s
[info] Iteration   1: 34386.531 ops/s
[info]                  ·gc.alloc.rate:                   1741.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92259.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 34522.373 ops/s
[info]                  ·gc.alloc.rate:                   1749.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61314.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34470.422 ops/s
[info]                  ·gc.alloc.rate:                   1746.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92224.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34370.576 ops/s
[info]                  ·gc.alloc.rate:                   1741.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92617.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34455.734 ops/s
[info]                  ·gc.alloc.rate:                   1745.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              79736.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61673.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   34441.127 ±(99.9%) 240.709 ops/s [Average]
[info]   (min, avg, max) = (34370.576, 34441.127, 34522.373), stdev = 62.511
[info]   CI (99.9%): [34200.419, 34681.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1744.806 ±(99.9%) 12.296 MB/sec [Average]
[info]   (min, avg, max) = (1741.414, 1744.806, 1749.117), stdev = 3.193
[info]   CI (99.9%): [1732.509, 1757.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79736.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (79736.012, 79736.012, 79736.013), stdev = 0.001
[info]   CI (99.9%): [79736.010, 79736.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.286 ±(99.9%) 10.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.286, 6.669), stdev = 2.745
[info]   CI (99.9%): [≈ 0, 12.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1750.595 ±(99.9%) 1416.961 MB/sec [Average]
[info]   (min, avg, max) = (1345.021, 1750.595, 2022.741), stdev = 367.980
[info]   CI (99.9%): [333.634, 3167.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80017.985 ±(99.9%) 65118.046 B/op [Average]
[info]   (min, avg, max) = (61314.728, 80017.985, 92617.401), stdev = 16910.950
[info]   CI (99.9%): [14899.939, 145136.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26073.257 ops/s
[info] # Warmup Iteration   2: 33575.926 ops/s
[info] # Warmup Iteration   3: 33711.206 ops/s
[info] # Warmup Iteration   4: 34452.083 ops/s
[info] # Warmup Iteration   5: 34977.053 ops/s
[info] Iteration   1: 35029.692 ops/s
[info]                  ·gc.alloc.rate:                   1672.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              75168.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60352.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34967.952 ops/s
[info]                  ·gc.alloc.rate:                   1669.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              75168.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90771.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34988.304 ops/s
[info]                  ·gc.alloc.rate:                   1671.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              75168.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60556.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 35014.296 ops/s
[info]                  ·gc.alloc.rate:                   1672.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              75168.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90884.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35056.457 ops/s
[info]                  ·gc.alloc.rate:                   1674.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              75168.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60585.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   35011.340 ±(99.9%) 133.310 ops/s [Average]
[info]   (min, avg, max) = (34967.952, 35011.340, 35056.457), stdev = 34.620
[info]   CI (99.9%): [34878.030, 35144.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1672.142 ±(99.9%) 6.939 MB/sec [Average]
[info]   (min, avg, max) = (1669.998, 1672.142, 1674.738), stdev = 1.802
[info]   CI (99.9%): [1665.203, 1679.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   75168.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75168.012, 75168.012, 75168.012), stdev = 0.001
[info]   CI (99.9%): [75168.012, 75168.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.123 ±(99.9%) 3.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.123, 1.874), stdev = 1.025
[info]   CI (99.9%): [≈ 0, 5.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1615.511 ±(99.9%) 1419.099 MB/sec [Average]
[info]   (min, avg, max) = (1343.095, 1615.511, 2021.750), stdev = 368.536
[info]   CI (99.9%): [196.412, 3034.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   72630.061 ±(99.9%) 63969.820 B/op [Average]
[info]   (min, avg, max) = (60352.605, 72630.061, 90884.371), stdev = 16612.759
[info]   CI (99.9%): [8660.241, 136599.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5022.445 ops/s
[info] # Warmup Iteration   2: 8538.697 ops/s
[info] # Warmup Iteration   3: 8616.250 ops/s
[info] # Warmup Iteration   4: 8764.687 ops/s
[info] # Warmup Iteration   5: 8779.927 ops/s
[info] Iteration   1: 8815.444 ops/s
[info]                  ·gc.alloc.rate:                   1136.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119759.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8805.917 ops/s
[info]                  ·gc.alloc.rate:                   1134.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239313.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8766.556 ops/s
[info]                  ·gc.alloc.rate:                   1129.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240378.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8828.397 ops/s
[info]                  ·gc.alloc.rate:                   1137.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119404.662 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 8851.460 ops/s
[info]                  ·gc.alloc.rate:                   1141.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238307.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8813.555 ±(99.9%) 120.665 ops/s [Average]
[info]   (min, avg, max) = (8766.556, 8813.555, 8851.460), stdev = 31.336
[info]   CI (99.9%): [8692.890, 8934.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1136.046 ±(99.9%) 15.741 MB/sec [Average]
[info]   (min, avg, max) = (1129.999, 1136.046, 1141.090), stdev = 4.088
[info]   CI (99.9%): [1120.305, 1151.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202880.047 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (202880.046, 202880.047, 202880.050), stdev = 0.002
[info]   CI (99.9%): [202880.041, 202880.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.717 ±(99.9%) 20.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.717, 11.162), stdev = 5.258
[info]   CI (99.9%): [≈ 0, 23.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.685 ±(99.9%) 1411.170 MB/sec [Average]
[info]   (min, avg, max) = (669.728, 1071.685, 1340.350), stdev = 366.476
[info]   CI (99.9%): [≈ 0, 2482.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   191432.687 ±(99.9%) 252581.898 B/op [Average]
[info]   (min, avg, max) = (119404.662, 191432.687, 240378.394), stdev = 65594.717
[info]   CI (99.9%): [≈ 0, 444014.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14395.559 ops/s
[info] # Warmup Iteration   2: 18829.554 ops/s
[info] # Warmup Iteration   3: 18970.465 ops/s
[info] # Warmup Iteration   4: 18711.717 ops/s
[info] # Warmup Iteration   5: 18905.330 ops/s
[info] Iteration   1: 18925.866 ops/s
[info]                  ·gc.alloc.rate:                   1470.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167515.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19028.249 ops/s
[info]                  ·gc.alloc.rate:                   1478.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111072.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19038.124 ops/s
[info]                  ·gc.alloc.rate:                   1479.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111124.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18958.985 ops/s
[info]                  ·gc.alloc.rate:                   1472.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111697.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19089.608 ops/s
[info]                  ·gc.alloc.rate:                   1483.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111041.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19008.167 ±(99.9%) 251.957 ops/s [Average]
[info]   (min, avg, max) = (18925.866, 19008.167, 19089.608), stdev = 65.432
[info]   CI (99.9%): [18756.209, 19260.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1476.891 ±(99.9%) 19.965 MB/sec [Average]
[info]   (min, avg, max) = (1470.384, 1476.891, 1483.313), stdev = 5.185
[info]   CI (99.9%): [1456.926, 1496.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122288.023 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (122288.021, 122288.023, 122288.027), stdev = 0.003
[info]   CI (99.9%): [122288.013, 122288.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.417 ±(99.9%) 12.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.417, 6.924), stdev = 3.368
[info]   CI (99.9%): [≈ 0, 15.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.727 ±(99.9%) 1152.645 MB/sec [Average]
[info]   (min, avg, max) = (1342.826, 1478.727, 2014.193), stdev = 299.338
[info]   CI (99.9%): [326.082, 2631.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   122490.111 ±(99.9%) 96925.292 B/op [Average]
[info]   (min, avg, max) = (111041.200, 122490.111, 167515.126), stdev = 25171.191
[info]   CI (99.9%): [25564.820, 219415.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26218.122 ops/s
[info] # Warmup Iteration   2: 41410.558 ops/s
[info] # Warmup Iteration   3: 41050.206 ops/s
[info] # Warmup Iteration   4: 41766.503 ops/s
[info] # Warmup Iteration   5: 41753.384 ops/s
[info] Iteration   1: 42026.171 ops/s
[info]                  ·gc.alloc.rate:                   1035.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25284.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 41910.335 ops/s
[info]                  ·gc.alloc.rate:                   1032.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50757.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41835.346 ops/s
[info]                  ·gc.alloc.rate:                   1031.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25436.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41924.788 ops/s
[info]                  ·gc.alloc.rate:                   1033.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50790.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42010.610 ops/s
[info]                  ·gc.alloc.rate:                   1035.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25355.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41941.450 ±(99.9%) 301.142 ops/s [Average]
[info]   (min, avg, max) = (41835.346, 41941.450, 42026.171), stdev = 78.206
[info]   CI (99.9%): [41640.308, 42242.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1033.658 ±(99.9%) 7.220 MB/sec [Average]
[info]   (min, avg, max) = (1031.079, 1033.658, 1035.696), stdev = 1.875
[info]   CI (99.9%): [1026.438, 1040.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38792.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (38792.010, 38792.010, 38792.010), stdev = 0.001
[info]   CI (99.9%): [38792.008, 38792.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.093 ±(99.9%) 4.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.093, 2.344), stdev = 1.048
[info]   CI (99.9%): [≈ 0, 5.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.465 ±(99.9%) 1426.326 MB/sec [Average]
[info]   (min, avg, max) = (675.063, 946.465, 1352.861), stdev = 370.412
[info]   CI (99.9%): [≈ 0, 2372.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35525.153 ±(99.9%) 53603.169 B/op [Average]
[info]   (min, avg, max) = (25284.475, 35525.153, 50790.791), stdev = 13920.573
[info]   CI (99.9%): [≈ 0, 89128.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53398.544 ops/s
[info] # Warmup Iteration   2: 58047.242 ops/s
[info] # Warmup Iteration   3: 58213.098 ops/s
[info] # Warmup Iteration   4: 58715.940 ops/s
[info] # Warmup Iteration   5: 58591.267 ops/s
[info] Iteration   1: 57836.866 ops/s
[info]                  ·gc.alloc.rate:                   747.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18362.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 58941.677 ops/s
[info]                  ·gc.alloc.rate:                   761.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17965.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 59069.762 ops/s
[info]                  ·gc.alloc.rate:                   763.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17925.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 57561.849 ops/s
[info]                  ·gc.alloc.rate:                   743.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18377.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 58908.109 ops/s
[info]                  ·gc.alloc.rate:                   761.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17957.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   58463.653 ±(99.9%) 2722.495 ops/s [Average]
[info]   (min, avg, max) = (57561.849, 58463.653, 59069.762), stdev = 707.023
[info]   CI (99.9%): [55741.158, 61186.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   755.439 ±(99.9%) 34.987 MB/sec [Average]
[info]   (min, avg, max) = (743.769, 755.439, 763.217), stdev = 9.086
[info]   CI (99.9%): [720.452, 790.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.007), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.336 ±(99.9%) 1.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 1.109), stdev = 0.498
[info]   CI (99.9%): [≈ 0, 2.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.955 ±(99.9%) 4.464 MB/sec [Average]
[info]   (min, avg, max) = (672.139, 672.955, 674.962), stdev = 1.159
[info]   CI (99.9%): [668.491, 677.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18117.786 ±(99.9%) 889.526 B/op [Average]
[info]   (min, avg, max) = (17925.893, 18117.786, 18377.537), stdev = 231.007
[info]   CI (99.9%): [17228.260, 19007.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12980.702 ops/s
[info] # Warmup Iteration   2: 32894.251 ops/s
[info] # Warmup Iteration   3: 32839.034 ops/s
[info] # Warmup Iteration   4: 33030.625 ops/s
[info] # Warmup Iteration   5: 33076.974 ops/s
[info] Iteration   1: 33186.663 ops/s
[info]                  ·gc.alloc.rate:                   2217.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96356.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 33131.775 ops/s
[info]                  ·gc.alloc.rate:                   2213.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128837.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33174.880 ops/s
[info]                  ·gc.alloc.rate:                   2216.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96593.506 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33216.086 ops/s
[info]                  ·gc.alloc.rate:                   2218.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96584.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33135.635 ops/s
[info]                  ·gc.alloc.rate:                   2213.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129185.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33169.008 ±(99.9%) 136.990 ops/s [Average]
[info]   (min, avg, max) = (33131.775, 33169.008, 33216.086), stdev = 35.576
[info]   CI (99.9%): [33032.018, 33305.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2215.783 ±(99.9%) 9.392 MB/sec [Average]
[info]   (min, avg, max) = (2213.323, 2215.783, 2218.927), stdev = 2.439
[info]   CI (99.9%): [2206.390, 2225.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (105144.012, 105144.012, 105144.013), stdev = 0.001
[info]   CI (99.9%): [105144.011, 105144.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.173 ±(99.9%) 4.164 B/op [Average]
[info]   (min, avg, max) = (0.986, 2.173, 3.949), stdev = 1.081
[info]   CI (99.9%): [≈ 0, 6.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2307.517 ±(99.9%) 1435.041 MB/sec [Average]
[info]   (min, avg, max) = (2031.750, 2307.517, 2719.405), stdev = 372.676
[info]   CI (99.9%): [872.476, 3742.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   109511.412 ±(99.9%) 68547.546 B/op [Average]
[info]   (min, avg, max) = (96356.145, 109511.412, 129185.474), stdev = 17801.580
[info]   CI (99.9%): [40963.866, 178058.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19100.087 ops/s
[info] # Warmup Iteration   2: 35101.954 ops/s
[info] # Warmup Iteration   3: 34417.630 ops/s
[info] # Warmup Iteration   4: 34452.369 ops/s
[info] # Warmup Iteration   5: 35013.651 ops/s
[info] Iteration   1: 34485.766 ops/s
[info]                  ·gc.alloc.rate:                   1885.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61790.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 35102.994 ops/s
[info]                  ·gc.alloc.rate:                   1919.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91131.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34546.623 ops/s
[info]                  ·gc.alloc.rate:                   1889.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92709.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 35177.049 ops/s
[info]                  ·gc.alloc.rate:                   1923.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91136.466 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 35141.597 ops/s
[info]                  ·gc.alloc.rate:                   1921.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91304.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   34890.806 ±(99.9%) 1323.264 ops/s [Average]
[info]   (min, avg, max) = (34485.766, 34890.806, 35177.049), stdev = 343.648
[info]   CI (99.9%): [33567.541, 36214.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1908.018 ±(99.9%) 72.102 MB/sec [Average]
[info]   (min, avg, max) = (1885.758, 1908.018, 1923.536), stdev = 18.725
[info]   CI (99.9%): [1835.916, 1980.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (86072.012, 86072.012, 86072.013), stdev = 0.001
[info]   CI (99.9%): [86072.010, 86072.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.258 ±(99.9%) 4.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.258, 2.850), stdev = 1.262
[info]   CI (99.9%): [≈ 0, 7.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1899.335 ±(99.9%) 1174.372 MB/sec [Average]
[info]   (min, avg, max) = (1353.782, 1899.335, 2038.348), stdev = 304.981
[info]   CI (99.9%): [724.963, 3073.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   85614.671 ±(99.9%) 51345.604 B/op [Average]
[info]   (min, avg, max) = (61790.923, 85614.671, 92709.741), stdev = 13334.290
[info]   CI (99.9%): [34269.066, 136960.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40996.233 ops/s
[info] # Warmup Iteration   2: 46876.283 ops/s
[info] # Warmup Iteration   3: 45746.383 ops/s
[info] # Warmup Iteration   4: 46590.370 ops/s
[info] # Warmup Iteration   5: 46957.200 ops/s
[info] Iteration   1: 47376.067 ops/s
[info]                  ·gc.alloc.rate:                   1974.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67004.772 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 47396.019 ops/s
[info]                  ·gc.alloc.rate:                   1976.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67078.869 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 47341.182 ops/s
[info]                  ·gc.alloc.rate:                   1973.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67248.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 47392.295 ops/s
[info]                  ·gc.alloc.rate:                   1975.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67296.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 47329.150 ops/s
[info]                  ·gc.alloc.rate:                   1972.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67495.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   47366.943 ±(99.9%) 116.531 ops/s [Average]
[info]   (min, avg, max) = (47329.150, 47366.943, 47396.019), stdev = 30.263
[info]   CI (99.9%): [47250.412, 47483.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1974.328 ±(99.9%) 5.745 MB/sec [Average]
[info]   (min, avg, max) = (1972.379, 1974.328, 1976.285), stdev = 1.492
[info]   CI (99.9%): [1968.582, 1980.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65600.009, 65600.009, 65600.009), stdev = 0.001
[info]   CI (99.9%): [65600.007, 65600.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.352 ±(99.9%) 2.381 B/op [Average]
[info]   (min, avg, max) = (1.384, 2.352, 2.768), stdev = 0.618
[info]   CI (99.9%): [≈ 0, 4.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2023.220 ±(99.9%) 18.927 MB/sec [Average]
[info]   (min, avg, max) = (2016.560, 2023.220, 2029.356), stdev = 4.915
[info]   CI (99.9%): [2004.293, 2042.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   67224.593 ±(99.9%) 741.565 B/op [Average]
[info]   (min, avg, max) = (67004.772, 67224.593, 67495.005), stdev = 192.582
[info]   CI (99.9%): [66483.027, 67966.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42133.327 ops/s
[info] # Warmup Iteration   2: 48305.313 ops/s
[info] # Warmup Iteration   3: 48288.416 ops/s
[info] # Warmup Iteration   4: 48761.167 ops/s
[info] # Warmup Iteration   5: 48529.463 ops/s
[info] Iteration   1: 48666.553 ops/s
[info]                  ·gc.alloc.rate:                   1943.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65219.596 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 48735.781 ops/s
[info]                  ·gc.alloc.rate:                   1946.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65234.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 48707.834 ops/s
[info]                  ·gc.alloc.rate:                   1945.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65358.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 48708.282 ops/s
[info]                  ·gc.alloc.rate:                   1944.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65475.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48670.108 ops/s
[info]                  ·gc.alloc.rate:                   1943.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65635.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   48697.711 ±(99.9%) 112.203 ops/s [Average]
[info]   (min, avg, max) = (48666.553, 48697.711, 48735.781), stdev = 29.139
[info]   CI (99.9%): [48585.509, 48809.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1944.629 ±(99.9%) 4.964 MB/sec [Average]
[info]   (min, avg, max) = (1943.280, 1944.629, 1946.388), stdev = 1.289
[info]   CI (99.9%): [1939.665, 1949.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (62856.008, 62856.008, 62856.008), stdev = 0.001
[info]   CI (99.9%): [62856.008, 62856.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2.556 ±(99.9%) 2.163 B/op [Average]
[info]   (min, avg, max) = (2.018, 2.556, 3.361), stdev = 0.562
[info]   CI (99.9%): [0.393, 4.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   2022.863 ±(99.9%) 19.504 MB/sec [Average]
[info]   (min, avg, max) = (2016.354, 2022.863, 2029.383), stdev = 5.065
[info]   CI (99.9%): [2003.360, 2042.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   65384.789 ±(99.9%) 671.417 B/op [Average]
[info]   (min, avg, max) = (65219.596, 65384.789, 65635.627), stdev = 174.365
[info]   CI (99.9%): [64713.372, 66056.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323309.807 ops/s
[info] # Warmup Iteration   2: 384049.505 ops/s
[info] # Warmup Iteration   3: 388509.737 ops/s
[info] # Warmup Iteration   4: 388924.229 ops/s
[info] # Warmup Iteration   5: 390419.226 ops/s
[info] Iteration   1: 389328.598 ops/s
[info]                  ·gc.alloc.rate:                   1968.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8149.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 390561.136 ops/s
[info]                  ·gc.alloc.rate:                   1975.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8140.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 390115.249 ops/s
[info]                  ·gc.alloc.rate:                   1973.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8160.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 390231.175 ops/s
[info]                  ·gc.alloc.rate:                   1973.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8172.753 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 389694.741 ops/s
[info]                  ·gc.alloc.rate:                   1970.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8197.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   389986.180 ±(99.9%) 1851.322 ops/s [Average]
[info]   (min, avg, max) = (389328.598, 389986.180, 390561.136), stdev = 480.783
[info]   CI (99.9%): [388134.857, 391837.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1972.340 ±(99.9%) 10.137 MB/sec [Average]
[info]   (min, avg, max) = (1968.763, 1972.340, 1975.308), stdev = 2.632
[info]   CI (99.9%): [1962.203, 1982.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.168 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.084, 0.168, 0.252), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2022.922 ±(99.9%) 20.647 MB/sec [Average]
[info]   (min, avg, max) = (2015.743, 2022.922, 2029.347), stdev = 5.362
[info]   CI (99.9%): [2002.275, 2043.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8164.149 ±(99.9%) 85.147 B/op [Average]
[info]   (min, avg, max) = (8140.368, 8164.149, 8197.318), stdev = 22.112
[info]   CI (99.9%): [8079.002, 8249.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96108.586 ops/s
[info] # Warmup Iteration   2: 1530994.691 ops/s
[info] # Warmup Iteration   3: 1560211.555 ops/s
[info] # Warmup Iteration   4: 1551100.536 ops/s
[info] # Warmup Iteration   5: 1559892.212 ops/s
[info] Iteration   1: 1557677.858 ops/s
[info]                  ·gc.alloc.rate:                   490.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 516.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1563685.103 ops/s
[info]                  ·gc.alloc.rate:      492.754 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1563020.857 ops/s
[info]                  ·gc.alloc.rate:                   492.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 678.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1565784.221 ops/s
[info]                  ·gc.alloc.rate:                   493.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 677.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1565788.613 ops/s
[info]                  ·gc.alloc.rate:      493.396 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1563191.330 ±(99.9%) 12791.473 ops/s [Average]
[info]   (min, avg, max) = (1557677.858, 1563191.330, 1565788.613), stdev = 3321.905
[info]   CI (99.9%): [1550399.858, 1575982.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   492.607 ±(99.9%) 4.091 MB/sec [Average]
[info]   (min, avg, max) = (490.860, 492.607, 493.508), stdev = 1.063
[info]   CI (99.9%): [488.516, 496.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.504 ±(99.9%) 4.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.520), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.508 ±(99.9%) 4.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.508, 2.538), stdev = 1.135
[info]   CI (99.9%): [≈ 0, 4.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.835 ±(99.9%) 1331.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.835, 673.907), stdev = 345.842
[info]   CI (99.9%): [≈ 0, 1703.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   374.540 ±(99.9%) 1340.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 374.540, 678.489), stdev = 348.167
[info]   CI (99.9%): [≈ 0, 1715.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446027.755 ops/s
[info] # Warmup Iteration   2: 676694.300 ops/s
[info] # Warmup Iteration   3: 659690.716 ops/s
[info] # Warmup Iteration   4: 645943.931 ops/s
[info] # Warmup Iteration   5: 680385.516 ops/s
[info] Iteration   1: 683315.260 ops/s
[info]                  ·gc.alloc.rate:      566.128 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 679615.501 ops/s
[info]                  ·gc.alloc.rate:                   562.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1560.429 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 681952.412 ops/s
[info]                  ·gc.alloc.rate:                   564.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1555.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 681245.935 ops/s
[info]                  ·gc.alloc.rate:                   564.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1558.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 680298.822 ops/s
[info]                  ·gc.alloc.rate:                   563.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1561.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   681285.586 ±(99.9%) 5556.377 ops/s [Average]
[info]   (min, avg, max) = (679615.501, 681285.586, 683315.260), stdev = 1442.974
[info]   CI (99.9%): [675729.209, 686841.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   564.399 ±(99.9%) 4.632 MB/sec [Average]
[info]   (min, avg, max) = (562.983, 564.399, 566.128), stdev = 1.203
[info]   CI (99.9%): [559.767, 569.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.067 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.193), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.361 ±(99.9%) 1161.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.361, 674.756), stdev = 301.512
[info]   CI (99.9%): [≈ 0, 1700.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1247.110 ±(99.9%) 2684.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1247.110, 1561.062), stdev = 697.160
[info]   CI (99.9%): [≈ 0, 3931.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1727884.273 ops/s
[info] # Warmup Iteration   2: 1758414.927 ops/s
[info] # Warmup Iteration   3: 1799256.270 ops/s
[info] # Warmup Iteration   4: 1816750.180 ops/s
[info] # Warmup Iteration   5: 1797383.802 ops/s
[info] Iteration   1: 1780210.170 ops/s
[info]                  ·gc.alloc.rate:                   343.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 452.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1809276.892 ops/s
[info]                  ·gc.alloc.rate:      349.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1807552.962 ops/s
[info]                  ·gc.alloc.rate:                   349.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1807206.619 ops/s
[info]                  ·gc.alloc.rate:                   349.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1810327.450 ops/s
[info]                  ·gc.alloc.rate:      349.627 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1802914.818 ±(99.9%) 49118.585 ops/s [Average]
[info]   (min, avg, max) = (1780210.170, 1802914.818, 1810327.450), stdev = 12755.941
[info]   CI (99.9%): [1753796.233, 1852033.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   348.236 ±(99.9%) 9.315 MB/sec [Average]
[info]   (min, avg, max) = (343.928, 348.236, 349.627), stdev = 2.419
[info]   CI (99.9%): [338.921, 357.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.972 ±(99.9%) 1079.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.972, 511.701), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1386.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   268.656 ±(99.9%) 944.426 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 268.656, 452.295), stdev = 245.264
[info]   CI (99.9%): [≈ 0, 1213.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63234.599 ops/s
[info] # Warmup Iteration   2: 102106.418 ops/s
[info] # Warmup Iteration   3: 104316.635 ops/s
[info] # Warmup Iteration   4: 104559.272 ops/s
[info] # Warmup Iteration   5: 103890.181 ops/s
[info] Iteration   1: 104625.640 ops/s
[info]                  ·gc.alloc.rate:                   3801.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51074.528 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 104599.308 ops/s
[info]                  ·gc.alloc.rate:                   3799.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61382.601 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 104818.500 ops/s
[info]                  ·gc.alloc.rate:                   3807.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51101.501 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 104628.744 ops/s
[info]                  ·gc.alloc.rate:                   3801.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61443.405 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 104621.768 ops/s
[info]                  ·gc.alloc.rate:                   3800.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61505.877 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104658.792 ±(99.9%) 346.652 ops/s [Average]
[info]   (min, avg, max) = (104599.308, 104658.792, 104818.500), stdev = 90.025
[info]   CI (99.9%): [104312.140, 105005.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3801.798 ±(99.9%) 12.814 MB/sec [Average]
[info]   (min, avg, max) = (3799.085, 3801.798, 3807.551), stdev = 3.328
[info]   CI (99.9%): [3788.984, 3814.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.002 ±(99.9%) 1.571 B/op [Average]
[info]   (min, avg, max) = (0.313, 1.002, 1.253), stdev = 0.408
[info]   CI (99.9%): [≈ 0, 2.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3809.964 ±(99.9%) 1443.747 MB/sec [Average]
[info]   (min, avg, max) = (3395.507, 3809.964, 4087.850), stdev = 374.937
[info]   CI (99.9%): [2366.216, 5253.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57301.583 ±(99.9%) 21842.242 B/op [Average]
[info]   (min, avg, max) = (51074.528, 57301.583, 61505.877), stdev = 5672.361
[info]   CI (99.9%): [35459.341, 79143.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250545.795 ops/s
[info] # Warmup Iteration   2: 319705.663 ops/s
[info] # Warmup Iteration   3: 313819.559 ops/s
[info] # Warmup Iteration   4: 324111.713 ops/s
[info] # Warmup Iteration   5: 326869.727 ops/s
[info] Iteration   1: 312591.837 ops/s
[info]                  ·gc.alloc.rate:                   481.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2575.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 325883.688 ops/s
[info]                  ·gc.alloc.rate:                   501.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2470.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 326772.416 ops/s
[info]                  ·gc.alloc.rate:                   503.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3246.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 327539.799 ops/s
[info]                  ·gc.alloc.rate:                   504.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3239.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 327653.628 ops/s
[info]                  ·gc.alloc.rate:      504.573 MB/sec
[info]                  ·gc.alloc.rate.norm: 2424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   324088.274 ±(99.9%) 24897.098 ops/s [Average]
[info]   (min, avg, max) = (312591.837, 324088.274, 327653.628), stdev = 6465.697
[info]   CI (99.9%): [299191.176, 348985.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   499.090 ±(99.9%) 38.303 MB/sec [Average]
[info]   (min, avg, max) = (481.402, 499.090, 504.573), stdev = 9.947
[info]   CI (99.9%): [460.786, 537.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2424.001, 2424.001, 2424.001), stdev = 0.001
[info]   CI (99.9%): [2424.001, 2424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.720 ±(99.9%) 5.947 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.482), stdev = 1.544
[info]   CI (99.9%): [≈ 0, 6.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.469 ±(99.9%) 28.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.469, 16.773), stdev = 7.439
[info]   CI (99.9%): [≈ 0, 32.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.233 ±(99.9%) 1067.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.233, 674.034), stdev = 277.273
[info]   CI (99.9%): [≈ 0, 1541.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2306.534 ±(99.9%) 5156.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2306.534, 3246.882), stdev = 1339.192
[info]   CI (99.9%): [≈ 0, 7463.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124085.097 ops/s
[info] # Warmup Iteration   2: 1185857.815 ops/s
[info] # Warmup Iteration   3: 1175502.405 ops/s
[info] # Warmup Iteration   4: 1189821.021 ops/s
[info] # Warmup Iteration   5: 1187338.848 ops/s
[info] Iteration   1: 1192013.413 ops/s
[info]                  ·gc.alloc.rate:                   551.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 675.480 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1193325.390 ops/s
[info]                  ·gc.alloc.rate:                   551.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 888.665 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1191898.498 ops/s
[info]                  ·gc.alloc.rate:                   551.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 889.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1193757.556 ops/s
[info]                  ·gc.alloc.rate:      552.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1192592.037 ops/s
[info]                  ·gc.alloc.rate:                   551.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 887.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1192717.379 ±(99.9%) 3124.419 ops/s [Average]
[info]   (min, avg, max) = (1191898.498, 1192717.379, 1193757.556), stdev = 811.402
[info]   CI (99.9%): [1189592.959, 1195841.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   551.643 ±(99.9%) 1.575 MB/sec [Average]
[info]   (min, avg, max) = (551.239, 551.643, 552.195), stdev = 0.409
[info]   CI (99.9%): [550.068, 553.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.509 ±(99.9%) 4.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.509, 2.543), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 4.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.671 ±(99.9%) 5.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.354), stdev = 1.500
[info]   CI (99.9%): [≈ 0, 6.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.201 ±(99.9%) 1122.463 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.201, 673.740), stdev = 291.500
[info]   CI (99.9%): [≈ 0, 1628.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   668.183 ±(99.9%) 1481.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 668.183, 889.755), stdev = 384.745
[info]   CI (99.9%): [≈ 0, 2149.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643076.438 ops/s
[info] # Warmup Iteration   2: 1016417.930 ops/s
[info] # Warmup Iteration   3: 1017739.326 ops/s
[info] # Warmup Iteration   4: 1014316.604 ops/s
[info] # Warmup Iteration   5: 1012650.883 ops/s
[info] Iteration   1: 1016420.498 ops/s
[info]                  ·gc.alloc.rate:                   718.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1043.337 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1016516.755 ops/s
[info]                  ·gc.alloc.rate:                   718.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1045.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1016181.725 ops/s
[info]                  ·gc.alloc.rate:                   717.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1045.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 993533.264 ops/s
[info]                  ·gc.alloc.rate:                   702.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1070.484 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1010894.518 ops/s
[info]                  ·gc.alloc.rate:                   714.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1052.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1010709.352 ±(99.9%) 38087.437 ops/s [Average]
[info]   (min, avg, max) = (993533.264, 1010709.352, 1016516.755), stdev = 9891.187
[info]   CI (99.9%): [972621.915, 1048796.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   714.045 ±(99.9%) 26.569 MB/sec [Average]
[info]   (min, avg, max) = (702.078, 714.045, 718.098), stdev = 6.900
[info]   CI (99.9%): [687.476, 740.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   675.061 ±(99.9%) 3.172 MB/sec [Average]
[info]   (min, avg, max) = (673.757, 675.061, 675.866), stdev = 0.824
[info]   CI (99.9%): [671.890, 678.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1051.376 ±(99.9%) 43.056 B/op [Average]
[info]   (min, avg, max) = (1043.337, 1051.376, 1070.484), stdev = 11.181
[info]   CI (99.9%): [1008.320, 1094.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1570812.243 ops/s
[info] # Warmup Iteration   2: 1671612.332 ops/s
[info] # Warmup Iteration   3: 1685159.194 ops/s
[info] # Warmup Iteration   4: 1673044.019 ops/s
[info] # Warmup Iteration   5: 1686481.174 ops/s
[info] Iteration   1: 1689244.686 ops/s
[info]                  ·gc.alloc.rate:                   781.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1686980.667 ops/s
[info]                  ·gc.alloc.rate:                   780.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 627.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1684983.781 ops/s
[info]                  ·gc.alloc.rate:                   779.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1684194.711 ops/s
[info]                  ·gc.alloc.rate:                   778.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1681859.002 ops/s
[info]                  ·gc.alloc.rate:                   778.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1257.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1685452.570 ±(99.9%) 10793.988 ops/s [Average]
[info]   (min, avg, max) = (1681859.002, 1685452.570, 1689244.686), stdev = 2803.164
[info]   CI (99.9%): [1674658.582, 1696246.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   779.616 ±(99.9%) 4.839 MB/sec [Average]
[info]   (min, avg, max) = (778.072, 779.616, 781.284), stdev = 1.257
[info]   CI (99.9%): [774.777, 784.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.039), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.262 ±(99.9%) 1154.961 MB/sec [Average]
[info]   (min, avg, max) = (672.095, 807.262, 1343.808), stdev = 299.940
[info]   CI (99.9%): [≈ 0, 1962.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   754.065 ±(99.9%) 1083.314 B/op [Average]
[info]   (min, avg, max) = (627.703, 754.065, 1257.329), stdev = 281.333
[info]   CI (99.9%): [≈ 0, 1837.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1826262.195 ops/s
[info] # Warmup Iteration   2: 1891952.805 ops/s
[info] # Warmup Iteration   3: 1916947.499 ops/s
[info] # Warmup Iteration   4: 1915375.232 ops/s
[info] # Warmup Iteration   5: 1916798.957 ops/s
[info] Iteration   1: 1911144.244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1916738.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1914449.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1912171.073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1913018.942 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1913504.512 ±(99.9%) 8378.148 ops/s [Average]
[info]   (min, avg, max) = (1911144.244, 1913504.512, 1916738.303), stdev = 2175.779
[info]   CI (99.9%): [1905126.363, 1921882.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406422.919 ops/s
[info] # Warmup Iteration   2: 523583.187 ops/s
[info] # Warmup Iteration   3: 528445.586 ops/s
[info] # Warmup Iteration   4: 526753.297 ops/s
[info] # Warmup Iteration   5: 526954.340 ops/s
[info] Iteration   1: 526560.096 ops/s
[info]                  ·gc.alloc.rate:                   620.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1529.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 509845.849 ops/s
[info]                  ·gc.alloc.rate:                   601.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2078.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 529221.066 ops/s
[info]                  ·gc.alloc.rate:                   624.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2002.782 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 528931.566 ops/s
[info]                  ·gc.alloc.rate:                   623.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1995.978 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 527586.890 ops/s
[info]                  ·gc.alloc.rate:                   622.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2001.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   524429.093 ±(99.9%) 31660.814 ops/s [Average]
[info]   (min, avg, max) = (509845.849, 524429.093, 529221.066), stdev = 8222.213
[info]   CI (99.9%): [492768.279, 556089.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   618.353 ±(99.9%) 37.397 MB/sec [Average]
[info]   (min, avg, max) = (601.129, 618.353, 624.018), stdev = 9.712
[info]   CI (99.9%): [580.956, 655.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.802 ±(99.9%) 6.776 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.802, 3.950), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 7.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.476 ±(99.9%) 20.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.476, 12.196), stdev = 5.434
[info]   CI (99.9%): [≈ 0, 23.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   639.921 ±(99.9%) 276.458 MB/sec [Average]
[info]   (min, avg, max) = (511.512, 639.921, 673.368), stdev = 71.795
[info]   CI (99.9%): [363.464, 916.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1921.558 ±(99.9%) 854.992 B/op [Average]
[info]   (min, avg, max) = (1529.126, 1921.558, 2078.884), stdev = 222.039
[info]   CI (99.9%): [1066.566, 2776.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119475.774 ops/s
[info] # Warmup Iteration   2: 139462.594 ops/s
[info] # Warmup Iteration   3: 144156.330 ops/s
[info] # Warmup Iteration   4: 144415.436 ops/s
[info] # Warmup Iteration   5: 144677.875 ops/s
[info] Iteration   1: 144562.911 ops/s
[info]                  ·gc.alloc.rate:                   1737.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21938.557 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 144291.204 ops/s
[info]                  ·gc.alloc.rate:                   1734.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22000.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 144527.629 ops/s
[info]                  ·gc.alloc.rate:                   1737.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14664.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 144091.504 ops/s
[info]                  ·gc.alloc.rate:                   1731.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22092.861 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 144708.462 ops/s
[info]                  ·gc.alloc.rate:                   1739.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14685.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   144436.342 ±(99.9%) 940.024 ops/s [Average]
[info]   (min, avg, max) = (144091.504, 144436.342, 144708.462), stdev = 244.121
[info]   CI (99.9%): [143496.318, 145376.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1736.227 ±(99.9%) 11.824 MB/sec [Average]
[info]   (min, avg, max) = (1731.944, 1736.227, 1739.665), stdev = 3.071
[info]   CI (99.9%): [1724.404, 1748.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.003, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.454 ±(99.9%) 1.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 0.909), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 2.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1750.213 ±(99.9%) 1412.478 MB/sec [Average]
[info]   (min, avg, max) = (1346.516, 1750.213, 2022.388), stdev = 366.816
[info]   CI (99.9%): [337.734, 3162.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19076.284 ±(99.9%) 15473.990 B/op [Average]
[info]   (min, avg, max) = (14664.004, 19076.284, 22092.861), stdev = 4018.546
[info]   CI (99.9%): [3602.294, 34550.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260290.407 ops/s
[info] # Warmup Iteration   2: 403032.615 ops/s
[info] # Warmup Iteration   3: 408726.724 ops/s
[info] # Warmup Iteration   4: 408357.103 ops/s
[info] # Warmup Iteration   5: 407282.720 ops/s
[info] Iteration   1: 408783.370 ops/s
[info]                  ·gc.alloc.rate:      338.738 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 408632.229 ops/s
[info]                  ·gc.alloc.rate:                   338.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1970.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 408265.135 ops/s
[info]                  ·gc.alloc.rate:                   338.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1972.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 409224.381 ops/s
[info]                  ·gc.alloc.rate:      339.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 408826.642 ops/s
[info]                  ·gc.alloc.rate:                   338.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2595.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   408746.351 ±(99.9%) 1335.184 ops/s [Average]
[info]   (min, avg, max) = (408265.135, 408746.351, 409224.381), stdev = 346.743
[info]   CI (99.9%): [407411.168, 410081.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   338.681 ±(99.9%) 0.896 MB/sec [Average]
[info]   (min, avg, max) = (338.365, 338.681, 339.014), stdev = 0.233
[info]   CI (99.9%): [337.785, 339.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.112 ±(99.9%) 0.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.561), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.488 ±(99.9%) 1220.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.488, 673.988), stdev = 316.909
[info]   CI (99.9%): [≈ 0, 1559.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1307.569 ±(99.9%) 4699.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1307.569, 2595.212), stdev = 1220.514
[info]   CI (99.9%): [≈ 0, 6007.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1016197.763 ops/s
[info] # Warmup Iteration   2: 1088012.293 ops/s
[info] # Warmup Iteration   3: 1059386.946 ops/s
[info] # Warmup Iteration   4: 1082659.152 ops/s
[info] # Warmup Iteration   5: 1081641.374 ops/s
[info] Iteration   1: 1081584.397 ops/s
[info]                  ·gc.alloc.rate:      208.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1086521.802 ops/s
[info]                  ·gc.alloc.rate:      209.919 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1074765.578 ops/s
[info]                  ·gc.alloc.rate:                   207.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1088222.674 ops/s
[info]                  ·gc.alloc.rate:      210.168 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1083463.155 ops/s
[info]                  ·gc.alloc.rate:                   209.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743.151 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1082911.521 ±(99.9%) 20162.123 ops/s [Average]
[info]   (min, avg, max) = (1074765.578, 1082911.521, 1088222.674), stdev = 5236.039
[info]   CI (99.9%): [1062749.399, 1103073.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   209.165 ±(99.9%) 3.906 MB/sec [Average]
[info]   (min, avg, max) = (207.598, 209.165, 210.168), stdev = 1.014
[info]   CI (99.9%): [205.259, 213.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.001 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.625 ±(99.9%) 1078.931 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.625, 511.592), stdev = 280.195
[info]   CI (99.9%): [≈ 0, 1283.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   298.463 ±(99.9%) 1573.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 298.463, 749.162), stdev = 408.692
[info]   CI (99.9%): [≈ 0, 1872.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49555.351 ops/s
[info] # Warmup Iteration   2: 86385.560 ops/s
[info] # Warmup Iteration   3: 86298.161 ops/s
[info] # Warmup Iteration   4: 88183.383 ops/s
[info] # Warmup Iteration   5: 88129.908 ops/s
[info] Iteration   1: 88191.961 ops/s
[info]                  ·gc.alloc.rate:                   3754.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60674.685 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 87470.543 ops/s
[info]                  ·gc.alloc.rate:                   3724.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73474.514 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 87395.569 ops/s
[info]                  ·gc.alloc.rate:                   3721.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61299.890 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 87830.927 ops/s
[info]                  ·gc.alloc.rate:                   3739.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73216.146 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 88054.175 ops/s
[info]                  ·gc.alloc.rate:                   3748.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3406.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60900.728 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   87788.635 ±(99.9%) 1348.627 ops/s [Average]
[info]   (min, avg, max) = (87395.569, 87788.635, 88191.961), stdev = 350.234
[info]   CI (99.9%): [86440.008, 89137.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3737.838 ±(99.9%) 55.932 MB/sec [Average]
[info]   (min, avg, max) = (3721.678, 3737.838, 3754.884), stdev = 14.525
[info]   CI (99.9%): [3681.906, 3793.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.005), stdev = 0.001
[info]   CI (99.9%): [67016.004, 67016.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.568 ±(99.9%) 1.883 B/op [Average]
[info]   (min, avg, max) = (1.114, 1.568, 2.238), stdev = 0.489
[info]   CI (99.9%): [≈ 0, 3.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3675.863 ±(99.9%) 1436.551 MB/sec [Average]
[info]   (min, avg, max) = (3399.582, 3675.863, 4085.530), stdev = 373.068
[info]   CI (99.9%): [2239.312, 5112.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65913.192 ±(99.9%) 26141.592 B/op [Average]
[info]   (min, avg, max) = (60674.685, 65913.192, 73474.514), stdev = 6788.889
[info]   CI (99.9%): [39771.600, 92054.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251467.554 ops/s
[info] # Warmup Iteration   2: 326646.396 ops/s
[info] # Warmup Iteration   3: 330536.219 ops/s
[info] # Warmup Iteration   4: 331423.607 ops/s
[info] # Warmup Iteration   5: 331457.457 ops/s
[info] Iteration   1: 329748.551 ops/s
[info]                  ·gc.alloc.rate:                   1459.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9608.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 331108.550 ops/s
[info]                  ·gc.alloc.rate:                   1465.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6383.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 331405.411 ops/s
[info]                  ·gc.alloc.rate:                   1467.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6381.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 331504.073 ops/s
[info]                  ·gc.alloc.rate:                   1467.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6385.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 331712.196 ops/s
[info]                  ·gc.alloc.rate:                   1468.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6387.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   331095.756 ±(99.9%) 3018.357 ops/s [Average]
[info]   (min, avg, max) = (329748.551, 331095.756, 331712.196), stdev = 783.858
[info]   CI (99.9%): [328077.399, 334114.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1465.839 ±(99.9%) 13.667 MB/sec [Average]
[info]   (min, avg, max) = (1459.767, 1465.839, 1468.684), stdev = 3.549
[info]   CI (99.9%): [1452.172, 1479.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.001, 6968.001, 6968.001), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.277 ±(99.9%) 0.497 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.277, 0.396), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.186 ±(99.9%) 1151.137 MB/sec [Average]
[info]   (min, avg, max) = (1342.909, 1478.186, 2012.953), stdev = 298.947
[info]   CI (99.9%): [327.050, 2629.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7029.366 ±(99.9%) 5551.912 B/op [Average]
[info]   (min, avg, max) = (6381.159, 7029.366, 9608.558), stdev = 1441.814
[info]   CI (99.9%): [1477.455, 12581.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 984456.531 ops/s
[info] # Warmup Iteration   2: 1792357.348 ops/s
[info] # Warmup Iteration   3: 1851183.465 ops/s
[info] # Warmup Iteration   4: 1840728.342 ops/s
[info] # Warmup Iteration   5: 1828939.445 ops/s
[info] Iteration   1: 1846907.472 ops/s
[info]                  ·gc.alloc.rate:                   947.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1150.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1841812.510 ops/s
[info]                  ·gc.alloc.rate:                   945.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 577.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1843234.003 ops/s
[info]                  ·gc.alloc.rate:                   946.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 577.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1848690.054 ops/s
[info]                  ·gc.alloc.rate:                   949.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1151.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1846589.599 ops/s
[info]                  ·gc.alloc.rate:                   947.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 576.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1845446.727 ±(99.9%) 10901.944 ops/s [Average]
[info]   (min, avg, max) = (1841812.510, 1845446.727, 1848690.054), stdev = 2831.200
[info]   CI (99.9%): [1834544.783, 1856348.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   947.287 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (945.403, 947.287, 949.010), stdev = 1.444
[info]   CI (99.9%): [941.728, 952.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.089), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.166 ±(99.9%) 1424.425 MB/sec [Average]
[info]   (min, avg, max) = (675.679, 946.166, 1352.802), stdev = 369.919
[info]   CI (99.9%): [≈ 0, 2370.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   806.753 ±(99.9%) 1210.856 B/op [Average]
[info]   (min, avg, max) = (576.809, 806.753, 1151.795), stdev = 314.456
[info]   CI (99.9%): [≈ 0, 2017.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1877844.298 ops/s
[info] # Warmup Iteration   2: 2000916.509 ops/s
[info] # Warmup Iteration   3: 2041928.839 ops/s
[info] # Warmup Iteration   4: 2009948.409 ops/s
[info] # Warmup Iteration   5: 2037798.754 ops/s
[info] Iteration   1: 2035317.305 ops/s
[info]                  ·gc.alloc.rate:                   548.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 395.606 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2038226.791 ops/s
[info]                  ·gc.alloc.rate:                   549.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2043003.615 ops/s
[info]                  ·gc.alloc.rate:                   550.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519.847 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2049554.845 ops/s
[info]                  ·gc.alloc.rate:      552.050 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2044285.183 ops/s
[info]                  ·gc.alloc.rate:                   550.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517.969 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2042077.548 ±(99.9%) 21280.724 ops/s [Average]
[info]   (min, avg, max) = (2035317.305, 2042077.548, 2049554.845), stdev = 5526.537
[info]   CI (99.9%): [2020796.823, 2063358.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.088 ±(99.9%) 5.769 MB/sec [Average]
[info]   (min, avg, max) = (548.217, 550.088, 552.050), stdev = 1.498
[info]   CI (99.9%): [544.319, 555.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.649 ±(99.9%) 5.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.649, 3.243), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.501 ±(99.9%) 4.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.501, 2.504), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.768 ±(99.9%) 1124.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.768, 674.912), stdev = 291.912
[info]   CI (99.9%): [≈ 0, 1630.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   390.897 ±(99.9%) 866.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 390.897, 521.061), stdev = 225.023
[info]   CI (99.9%): [≈ 0, 1257.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1918139.929 ops/s
[info] # Warmup Iteration   2: 2014217.813 ops/s
[info] # Warmup Iteration   3: 1794225.454 ops/s
[info] # Warmup Iteration   4: 1790047.594 ops/s
[info] # Warmup Iteration   5: 1723328.231 ops/s
[info] Iteration   1: 1781103.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1790219.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1789692.759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1790139.467 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1789214.558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1788073.942 ±(99.9%) 15084.582 ops/s [Average]
[info]   (min, avg, max) = (1781103.142, 1788073.942, 1790219.782), stdev = 3917.418
[info]   CI (99.9%): [1772989.360, 1803158.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30600.753 ops/s
[info] # Warmup Iteration   2: 45919.745 ops/s
[info] # Warmup Iteration   3: 45604.647 ops/s
[info] # Warmup Iteration   4: 46451.573 ops/s
[info] # Warmup Iteration   5: 46296.682 ops/s
[info] Iteration   1: 46385.527 ops/s
[info]                  ·gc.alloc.rate:                   1963.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68225.700 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46443.149 ops/s
[info]                  ·gc.alloc.rate:                   1965.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68264.668 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 46489.456 ops/s
[info]                  ·gc.alloc.rate:                   1967.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45542.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45534.040 ops/s
[info]                  ·gc.alloc.rate:                   1927.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69845.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 46425.706 ops/s
[info]                  ·gc.alloc.rate:                   1964.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68660.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   46255.576 ±(99.9%) 1559.783 ops/s [Average]
[info]   (min, avg, max) = (45534.040, 46255.576, 46489.456), stdev = 405.071
[info]   CI (99.9%): [44695.793, 47815.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1957.852 ±(99.9%) 65.551 MB/sec [Average]
[info]   (min, avg, max) = (1927.510, 1957.852, 1967.649), stdev = 17.023
[info]   CI (99.9%): [1892.301, 2023.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66624.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66624.009, 66624.009, 66624.009), stdev = 0.001
[info]   CI (99.9%): [66624.008, 66624.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.128 ±(99.9%) 3.376 B/op [Average]
[info]   (min, avg, max) = (0.705, 2.128, 2.878), stdev = 0.877
[info]   CI (99.9%): [≈ 0, 5.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1883.110 ±(99.9%) 1158.431 MB/sec [Average]
[info]   (min, avg, max) = (1345.042, 1883.110, 2025.032), stdev = 300.841
[info]   CI (99.9%): [724.679, 3041.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64107.968 ±(99.9%) 40042.794 B/op [Average]
[info]   (min, avg, max) = (45542.707, 64107.968, 69845.969), stdev = 10398.987
[info]   CI (99.9%): [24065.173, 104150.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186255.179 ops/s
[info] # Warmup Iteration   2: 221288.486 ops/s
[info] # Warmup Iteration   3: 221486.368 ops/s
[info] # Warmup Iteration   4: 225069.557 ops/s
[info] # Warmup Iteration   5: 224579.412 ops/s
[info] Iteration   1: 222599.941 ops/s
[info]                  ·gc.alloc.rate:                   2290.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14282.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 226092.221 ops/s
[info]                  ·gc.alloc.rate:                   2327.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14079.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 223917.740 ops/s
[info]                  ·gc.alloc.rate:                   2304.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18995.382 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 221878.247 ops/s
[info]                  ·gc.alloc.rate:                   2284.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14407.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 224831.943 ops/s
[info]                  ·gc.alloc.rate:                   2313.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18977.865 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   223864.018 ±(99.9%) 6513.688 ops/s [Average]
[info]   (min, avg, max) = (221878.247, 223864.018, 226092.221), stdev = 1691.584
[info]   CI (99.9%): [217350.330, 230377.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2304.208 ±(99.9%) 67.258 MB/sec [Average]
[info]   (min, avg, max) = (2284.136, 2304.208, 2327.604), stdev = 17.467
[info]   CI (99.9%): [2236.950, 2371.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.438 ±(99.9%) 0.682 B/op [Average]
[info]   (min, avg, max) = (0.148, 0.438, 0.583), stdev = 0.177
[info]   CI (99.9%): [≈ 0, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2297.385 ±(99.9%) 1437.949 MB/sec [Average]
[info]   (min, avg, max) = (2019.752, 2297.385, 2710.585), stdev = 373.431
[info]   CI (99.9%): [859.435, 3735.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16148.582 ±(99.9%) 9986.266 B/op [Average]
[info]   (min, avg, max) = (14079.965, 16148.582, 18995.382), stdev = 2593.402
[info]   CI (99.9%): [6162.316, 26134.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226269.656 ops/s
[info] # Warmup Iteration   2: 346213.030 ops/s
[info] # Warmup Iteration   3: 354894.667 ops/s
[info] # Warmup Iteration   4: 353965.981 ops/s
[info] # Warmup Iteration   5: 353856.220 ops/s
[info] Iteration   1: 353544.246 ops/s
[info]                  ·gc.alloc.rate:                   1703.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9035.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 354181.501 ops/s
[info]                  ·gc.alloc.rate:                   1706.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9034.243 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 354836.654 ops/s
[info]                  ·gc.alloc.rate:                   1709.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6017.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 354686.808 ops/s
[info]                  ·gc.alloc.rate:                   1708.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9034.811 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 355022.487 ops/s
[info]                  ·gc.alloc.rate:                   1710.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6020.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   354454.339 ±(99.9%) 2298.892 ops/s [Average]
[info]   (min, avg, max) = (353544.246, 354454.339, 355022.487), stdev = 597.015
[info]   CI (99.9%): [352155.447, 356753.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1707.890 ±(99.9%) 10.272 MB/sec [Average]
[info]   (min, avg, max) = (1703.943, 1707.890, 1710.550), stdev = 2.668
[info]   CI (99.9%): [1697.618, 1718.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7584.001, 7584.001, 7584.001), stdev = 0.001
[info]   CI (99.9%): [7584.001, 7584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.203 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.203, 0.278), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1762.602 ±(99.9%) 1425.199 MB/sec [Average]
[info]   (min, avg, max) = (1356.374, 1762.602, 2035.785), stdev = 370.120
[info]   CI (99.9%): [337.403, 3187.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7828.492 ±(99.9%) 6360.984 B/op [Average]
[info]   (min, avg, max) = (6017.095, 7828.492, 9035.614), stdev = 1651.927
[info]   CI (99.9%): [1467.508, 14189.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:36:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224779.766 ops/s
[info] # Warmup Iteration   2: 1242123.906 ops/s
[info] # Warmup Iteration   3: 1237501.627 ops/s
[info] # Warmup Iteration   4: 1261617.478 ops/s
[info] # Warmup Iteration   5: 1269872.531 ops/s
[info] Iteration   1: 1266317.839 ops/s
[info]                  ·gc.alloc.rate:                   437.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 635.843 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1269847.591 ops/s
[info]                  ·gc.alloc.rate:                   438.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 634.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1274615.068 ops/s
[info]                  ·gc.alloc.rate:      440.479 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1270572.213 ops/s
[info]                  ·gc.alloc.rate:                   439.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1272419.107 ops/s
[info]                  ·gc.alloc.rate:                   439.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 834.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1270754.364 ±(99.9%) 11901.943 ops/s [Average]
[info]   (min, avg, max) = (1266317.839, 1270754.364, 1274615.068), stdev = 3090.897
[info]   CI (99.9%): [1258852.421, 1282656.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   439.176 ±(99.9%) 4.119 MB/sec [Average]
[info]   (min, avg, max) = (437.632, 439.176, 440.479), stdev = 1.070
[info]   CI (99.9%): [435.057, 443.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.268), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.830 ±(99.9%) 6.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.830, 4.049), stdev = 1.800
[info]   CI (99.9%): [≈ 0, 7.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.502 ±(99.9%) 1068.643 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.502, 674.805), stdev = 277.523
[info]   CI (99.9%): [≈ 0, 1543.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   588.085 ±(99.9%) 1323.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 588.085, 835.826), stdev = 343.666
[info]   CI (99.9%): [≈ 0, 1911.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36524.656 ops/s
[info] # Warmup Iteration   2: 83930.195 ops/s
[info] # Warmup Iteration   3: 83244.390 ops/s
[info] # Warmup Iteration   4: 85119.824 ops/s
[info] # Warmup Iteration   5: 85365.517 ops/s
[info] Iteration   1: 85629.405 ops/s
[info]                  ·gc.alloc.rate:                   3599.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62430.688 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 84388.856 ops/s
[info]                  ·gc.alloc.rate:                   3546.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4080.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76106.924 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 85296.304 ops/s
[info]                  ·gc.alloc.rate:                   3584.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62806.646 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 85441.614 ops/s
[info]                  ·gc.alloc.rate:                   3590.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62699.345 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 83913.379 ops/s
[info]                  ·gc.alloc.rate:                   3525.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63893.832 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   84933.912 ±(99.9%) 2863.086 ops/s [Average]
[info]   (min, avg, max) = (83913.379, 84933.912, 85629.405), stdev = 743.534
[info]   CI (99.9%): [82070.826, 87796.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3569.521 ±(99.9%) 122.512 MB/sec [Average]
[info]   (min, avg, max) = (3525.867, 3569.521, 3599.801), stdev = 31.816
[info]   CI (99.9%): [3447.009, 3692.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.005, 66144.005), stdev = 0.001
[info]   CI (99.9%): [66144.004, 66144.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.469 ±(99.9%) 2.254 B/op [Average]
[info]   (min, avg, max) = (0.765, 1.469, 2.343), stdev = 0.585
[info]   CI (99.9%): [≈ 0, 3.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3538.369 ±(99.9%) 1166.957 MB/sec [Average]
[info]   (min, avg, max) = (3397.709, 3538.369, 4080.463), stdev = 303.055
[info]   CI (99.9%): [2371.412, 4705.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65587.487 ±(99.9%) 22745.447 B/op [Average]
[info]   (min, avg, max) = (62430.688, 65587.487, 76106.924), stdev = 5906.920
[info]   CI (99.9%): [42842.040, 88332.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167374.061 ops/s
[info] # Warmup Iteration   2: 224931.677 ops/s
[info] # Warmup Iteration   3: 226901.076 ops/s
[info] # Warmup Iteration   4: 228331.038 ops/s
[info] # Warmup Iteration   5: 228278.857 ops/s
[info] Iteration   1: 228658.381 ops/s
[info]                  ·gc.alloc.rate:                   1940.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13869.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 229342.427 ops/s
[info]                  ·gc.alloc.rate:                   1946.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9229.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 228758.914 ops/s
[info]                  ·gc.alloc.rate:                   1941.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13899.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 228442.729 ops/s
[info]                  ·gc.alloc.rate:                   1938.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13942.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 228911.689 ops/s
[info]                  ·gc.alloc.rate:                   1943.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13943.793 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   228822.828 ±(99.9%) 1296.533 ops/s [Average]
[info]   (min, avg, max) = (228442.729, 228822.828, 229342.427), stdev = 336.705
[info]   CI (99.9%): [227526.295, 230119.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1942.347 ±(99.9%) 11.324 MB/sec [Average]
[info]   (min, avg, max) = (1938.975, 1942.347, 1946.652), stdev = 2.941
[info]   CI (99.9%): [1931.023, 1953.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13360.002, 13360.002, 13360.002), stdev = 0.001
[info]   CI (99.9%): [13360.002, 13360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.458 ±(99.9%) 0.721 B/op [Average]
[info]   (min, avg, max) = (0.286, 0.458, 0.717), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 1.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1886.383 ±(99.9%) 1165.916 MB/sec [Average]
[info]   (min, avg, max) = (1344.821, 1886.383, 2028.599), stdev = 302.785
[info]   CI (99.9%): [720.467, 3052.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12977.142 ±(99.9%) 8067.778 B/op [Average]
[info]   (min, avg, max) = (9229.594, 12977.142, 13943.793), stdev = 2095.176
[info]   CI (99.9%): [4909.364, 21044.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 769704.157 ops/s
[info] # Warmup Iteration   2: 1200189.210 ops/s
[info] # Warmup Iteration   3: 1221065.322 ops/s
[info] # Warmup Iteration   4: 1219910.809 ops/s
[info] # Warmup Iteration   5: 1171831.061 ops/s
[info] Iteration   1: 1170456.604 ops/s
[info]                  ·gc.alloc.rate:                   684.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1224236.248 ops/s
[info]                  ·gc.alloc.rate:                   715.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 867.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1223564.485 ops/s
[info]                  ·gc.alloc.rate:                   715.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1215228.000 ops/s
[info]                  ·gc.alloc.rate:                   710.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 875.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1222673.398 ops/s
[info]                  ·gc.alloc.rate:                   714.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869.923 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1211231.747 ±(99.9%) 88872.061 ops/s [Average]
[info]   (min, avg, max) = (1170456.604, 1211231.747, 1224236.248), stdev = 23079.792
[info]   CI (99.9%): [1122359.686, 1300103.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   707.950 ±(99.9%) 52.025 MB/sec [Average]
[info]   (min, avg, max) = (684.055, 707.950, 715.526), stdev = 13.511
[info]   CI (99.9%): [655.925, 759.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   675.067 ±(99.9%) 3.347 MB/sec [Average]
[info]   (min, avg, max) = (673.686, 675.067, 675.891), stdev = 0.869
[info]   CI (99.9%): [671.720, 678.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   877.516 ±(99.9%) 62.440 B/op [Average]
[info]   (min, avg, max) = (867.942, 877.516, 906.054), stdev = 16.216
[info]   CI (99.9%): [815.075, 939.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:35:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2240588.118 ops/s
[info] # Warmup Iteration   2: 2416927.239 ops/s
[info] # Warmup Iteration   3: 2443372.453 ops/s
[info] # Warmup Iteration   4: 2434292.972 ops/s
[info] # Warmup Iteration   5: 2439074.714 ops/s
[info] Iteration   1: 2406434.732 ops/s
[info]                  ·gc.alloc.rate:                   819.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2429692.543 ops/s
[info]                  ·gc.alloc.rate:                   827.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2430598.742 ops/s
[info]                  ·gc.alloc.rate:                   827.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2432940.562 ops/s
[info]                  ·gc.alloc.rate:                   828.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2428108.682 ops/s
[info]                  ·gc.alloc.rate:                   826.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2425555.052 ±(99.9%) 41704.939 ops/s [Average]
[info]   (min, avg, max) = (2406434.732, 2425555.052, 2432940.562), stdev = 10830.640
[info]   CI (99.9%): [2383850.113, 2467259.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   825.972 ±(99.9%) 14.391 MB/sec [Average]
[info]   (min, avg, max) = (819.383, 825.972, 828.585), stdev = 3.737
[info]   CI (99.9%): [811.581, 840.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.157 ±(99.9%) 1159.122 MB/sec [Average]
[info]   (min, avg, max) = (671.364, 807.157, 1345.634), stdev = 301.020
[info]   CI (99.9%): [≈ 0, 1966.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   523.641 ±(99.9%) 749.149 B/op [Average]
[info]   (min, avg, max) = (434.793, 523.641, 871.632), stdev = 194.552
[info]   CI (99.9%): [≈ 0, 1272.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2635834.446 ops/s
[info] # Warmup Iteration   2: 2881586.656 ops/s
[info] # Warmup Iteration   3: 2778381.464 ops/s
[info] # Warmup Iteration   4: 2771978.532 ops/s
[info] # Warmup Iteration   5: 2778103.032 ops/s
[info] Iteration   1: 2781375.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2784519.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2784188.935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2789266.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2781957.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2784261.522 ±(99.9%) 11985.914 ops/s [Average]
[info]   (min, avg, max) = (2781375.068, 2784261.522, 2789266.121), stdev = 3112.704
[info]   CI (99.9%): [2772275.608, 2796247.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187528.478 ops/s
[info] # Warmup Iteration   2: 329089.816 ops/s
[info] # Warmup Iteration   3: 321026.220 ops/s
[info] # Warmup Iteration   4: 328865.941 ops/s
[info] # Warmup Iteration   5: 330107.139 ops/s
[info] Iteration   1: 330080.807 ops/s
[info]                  ·gc.alloc.rate:                   2700.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12939.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 329925.339 ops/s
[info]                  ·gc.alloc.rate:                   2699.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12959.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 330196.608 ops/s
[info]                  ·gc.alloc.rate:                   2702.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12960.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 330329.876 ops/s
[info]                  ·gc.alloc.rate:                   2703.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12965.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 330256.823 ops/s
[info]                  ·gc.alloc.rate:                   2702.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12977.677 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   330157.891 ±(99.9%) 611.537 ops/s [Average]
[info]   (min, avg, max) = (329925.339, 330157.891, 330329.876), stdev = 158.814
[info]   CI (99.9%): [329546.354, 330769.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2701.737 ±(99.9%) 5.250 MB/sec [Average]
[info]   (min, avg, max) = (2699.849, 2701.737, 2703.123), stdev = 1.363
[info]   CI (99.9%): [2696.487, 2706.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12880.001, 12880.001, 12880.001), stdev = 0.001
[info]   CI (99.9%): [12880.001, 12880.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.397 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (0.298, 0.397, 0.496), stdev = 0.070
[info]   CI (99.9%): [0.127, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2718.616 ±(99.9%) 14.638 MB/sec [Average]
[info]   (min, avg, max) = (2713.267, 2718.616, 2722.815), stdev = 3.801
[info]   CI (99.9%): [2703.978, 2733.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12960.466 ±(99.9%) 53.202 B/op [Average]
[info]   (min, avg, max) = (12939.462, 12960.466, 12977.677), stdev = 13.816
[info]   CI (99.9%): [12907.264, 13013.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20427.672 ops/s
[info] # Warmup Iteration   2: 26543.178 ops/s
[info] # Warmup Iteration   3: 26669.843 ops/s
[info] # Warmup Iteration   4: 26616.032 ops/s
[info] # Warmup Iteration   5: 26344.973 ops/s
[info] Iteration   1: 26952.293 ops/s
[info]                  ·gc.alloc.rate:                   1579.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78421.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 26821.695 ops/s
[info]                  ·gc.alloc.rate:                   1571.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118284.845 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 26965.046 ops/s
[info]                  ·gc.alloc.rate:                   1579.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78500.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 26906.561 ops/s
[info]                  ·gc.alloc.rate:                   1576.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78766.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26988.773 ops/s
[info]                  ·gc.alloc.rate:                   1580.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117960.915 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26926.873 ±(99.9%) 254.040 ops/s [Average]
[info]   (min, avg, max) = (26821.695, 26926.873, 26988.773), stdev = 65.973
[info]   CI (99.9%): [26672.833, 27180.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1577.463 ±(99.9%) 14.090 MB/sec [Average]
[info]   (min, avg, max) = (1571.708, 1577.463, 1580.690), stdev = 3.659
[info]   CI (99.9%): [1563.373, 1591.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (92192.015, 92192.015, 92192.016), stdev = 0.001
[info]   CI (99.9%): [92192.013, 92192.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.705 ±(99.9%) 6.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.705, 3.653), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.797 ±(99.9%) 1422.719 MB/sec [Average]
[info]   (min, avg, max) = (1343.438, 1614.797, 2022.515), stdev = 369.476
[info]   CI (99.9%): [192.078, 3037.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   94386.892 ±(99.9%) 83437.965 B/op [Average]
[info]   (min, avg, max) = (78421.473, 94386.892, 118284.845), stdev = 21668.575
[info]   CI (99.9%): [10948.926, 177824.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4605.043 ops/s
[info] # Warmup Iteration   2: 99369.314 ops/s
[info] # Warmup Iteration   3: 99445.405 ops/s
[info] # Warmup Iteration   4: 100351.205 ops/s
[info] # Warmup Iteration   5: 100639.731 ops/s
[info] Iteration   1: 100712.799 ops/s
[info]                  ·gc.alloc.rate:                   907.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21028.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 100923.286 ops/s
[info]                  ·gc.alloc.rate:                   909.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10481.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 98007.433 ops/s
[info]                  ·gc.alloc.rate:                   882.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10793.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 100480.649 ops/s
[info]                  ·gc.alloc.rate:                   904.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21055.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100972.771 ops/s
[info]                  ·gc.alloc.rate:                   909.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10476.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   100219.388 ±(99.9%) 4820.045 ops/s [Average]
[info]   (min, avg, max) = (98007.433, 100219.388, 100972.771), stdev = 1251.750
[info]   CI (99.9%): [95399.343, 105039.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   902.622 ±(99.9%) 43.649 MB/sec [Average]
[info]   (min, avg, max) = (882.595, 902.622, 909.301), stdev = 11.335
[info]   CI (99.9%): [858.973, 946.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.004), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.328 ±(99.9%) 1.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 0.978), stdev = 0.399
[info]   CI (99.9%): [≈ 0, 1.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   941.180 ±(99.9%) 1418.929 MB/sec [Average]
[info]   (min, avg, max) = (671.975, 941.180, 1345.543), stdev = 368.491
[info]   CI (99.9%): [≈ 0, 2360.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   14767.078 ±(99.9%) 22063.116 B/op [Average]
[info]   (min, avg, max) = (10476.208, 14767.078, 21055.617), stdev = 5729.721
[info]   CI (99.9%): [≈ 0, 36830.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38229.652 ops/s
[info] # Warmup Iteration   2: 62786.090 ops/s
[info] # Warmup Iteration   3: 62349.329 ops/s
[info] # Warmup Iteration   4: 63168.312 ops/s
[info] # Warmup Iteration   5: 63040.491 ops/s
[info] Iteration   1: 63107.317 ops/s
[info]                  ·gc.alloc.rate:                   1041.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16837.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 61015.850 ops/s
[info]                  ·gc.alloc.rate:                   1007.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34861.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 63118.211 ops/s
[info]                  ·gc.alloc.rate:                   1041.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16859.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 63120.194 ops/s
[info]                  ·gc.alloc.rate:                   1041.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33733.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 63090.066 ops/s
[info]                  ·gc.alloc.rate:                   1041.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33785.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   62690.328 ±(99.9%) 3604.733 ops/s [Average]
[info]   (min, avg, max) = (61015.850, 62690.328, 63120.194), stdev = 936.138
[info]   CI (99.9%): [59085.595, 66295.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1034.660 ±(99.9%) 59.210 MB/sec [Average]
[info]   (min, avg, max) = (1007.157, 1034.660, 1041.690), stdev = 15.377
[info]   CI (99.9%): [975.451, 1093.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25976.006, 25976.007, 25976.007), stdev = 0.001
[info]   CI (99.9%): [25976.006, 25976.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.422 ±(99.9%) 2.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.422, 1.074), stdev = 0.579
[info]   CI (99.9%): [≈ 0, 2.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.966 ±(99.9%) 1428.280 MB/sec [Average]
[info]   (min, avg, max) = (675.201, 1081.966, 1354.100), stdev = 370.920
[info]   CI (99.9%): [≈ 0, 2510.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27215.441 ±(99.9%) 36483.488 B/op [Average]
[info]   (min, avg, max) = (16837.222, 27215.441, 34861.471), stdev = 9474.646
[info]   CI (99.9%): [≈ 0, 63698.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117999.515 ops/s
[info] # Warmup Iteration   2: 130616.045 ops/s
[info] # Warmup Iteration   3: 132657.601 ops/s
[info] # Warmup Iteration   4: 132417.390 ops/s
[info] # Warmup Iteration   5: 132109.268 ops/s
[info] Iteration   1: 132369.880 ops/s
[info]                  ·gc.alloc.rate:                   853.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16022.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 132539.718 ops/s
[info]                  ·gc.alloc.rate:                   854.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7989.361 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 132721.124 ops/s
[info]                  ·gc.alloc.rate:                   855.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7970.448 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 132583.285 ops/s
[info]                  ·gc.alloc.rate:                   854.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7978.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 132375.144 ops/s
[info]                  ·gc.alloc.rate:                   853.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15965.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   132517.830 ±(99.9%) 572.246 ops/s [Average]
[info]   (min, avg, max) = (132369.880, 132517.830, 132721.124), stdev = 148.611
[info]   CI (99.9%): [131945.584, 133090.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   854.188 ±(99.9%) 4.193 MB/sec [Average]
[info]   (min, avg, max) = (853.006, 854.188, 855.482), stdev = 1.089
[info]   CI (99.9%): [849.995, 858.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.396 ±(99.9%) 1.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 0.743), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.527 ±(99.9%) 1418.415 MB/sec [Average]
[info]   (min, avg, max) = (672.178, 941.527, 1347.349), stdev = 368.358
[info]   CI (99.9%): [≈ 0, 2359.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11185.461 ±(99.9%) 16904.211 B/op [Average]
[info]   (min, avg, max) = (7970.448, 11185.461, 16022.760), stdev = 4389.970
[info]   CI (99.9%): [≈ 0, 28089.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18287.681 ops/s
[info] # Warmup Iteration   2: 35925.473 ops/s
[info] # Warmup Iteration   3: 35990.487 ops/s
[info] # Warmup Iteration   4: 35673.395 ops/s
[info] # Warmup Iteration   5: 36135.414 ops/s
[info] Iteration   1: 36198.284 ops/s
[info]                  ·gc.alloc.rate:                   1891.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88303.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36077.396 ops/s
[info]                  ·gc.alloc.rate:                   1884.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88718.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35995.728 ops/s
[info]                  ·gc.alloc.rate:                   1880.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89009.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36142.061 ops/s
[info]                  ·gc.alloc.rate:                   1887.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59148.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36141.839 ops/s
[info]                  ·gc.alloc.rate:                   1888.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88766.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   36111.062 ±(99.9%) 297.967 ops/s [Average]
[info]   (min, avg, max) = (35995.728, 36111.062, 36198.284), stdev = 77.381
[info]   CI (99.9%): [35813.095, 36409.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1886.524 ±(99.9%) 14.905 MB/sec [Average]
[info]   (min, avg, max) = (1880.830, 1886.524, 1891.159), stdev = 3.871
[info]   CI (99.9%): [1871.620, 1901.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82216.011, 82216.011, 82216.012), stdev = 0.001
[info]   CI (99.9%): [82216.010, 82216.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.359 ±(99.9%) 6.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.359, 4.541), stdev = 1.769
[info]   CI (99.9%): [≈ 0, 9.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1899.595 ±(99.9%) 1165.925 MB/sec [Average]
[info]   (min, avg, max) = (1357.975, 1899.595, 2038.532), stdev = 302.787
[info]   CI (99.9%): [733.670, 3065.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82789.293 ±(99.9%) 50897.658 B/op [Average]
[info]   (min, avg, max) = (59148.656, 82789.293, 89009.979), stdev = 13217.960
[info]   CI (99.9%): [31891.635, 133686.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27973.640 ops/s
[info] # Warmup Iteration   2: 38407.007 ops/s
[info] # Warmup Iteration   3: 39481.898 ops/s
[info] # Warmup Iteration   4: 38482.370 ops/s
[info] # Warmup Iteration   5: 38878.145 ops/s
[info] Iteration   1: 38891.415 ops/s
[info]                  ·gc.alloc.rate:                   510.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20703.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38881.852 ops/s
[info]                  ·gc.alloc.rate:                   510.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20707.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 38922.841 ops/s
[info]                  ·gc.alloc.rate:                   511.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27258.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38817.312 ops/s
[info]                  ·gc.alloc.rate:                   509.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27332.550 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39057.694 ops/s
[info]                  ·gc.alloc.rate:      513.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38914.223 ±(99.9%) 342.349 ops/s [Average]
[info]   (min, avg, max) = (38817.312, 38914.223, 39057.694), stdev = 88.907
[info]   CI (99.9%): [38571.873, 39256.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   511.258 ±(99.9%) 4.587 MB/sec [Average]
[info]   (min, avg, max) = (509.954, 511.258, 513.170), stdev = 1.191
[info]   CI (99.9%): [506.671, 515.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20680.010, 20680.011, 20680.011), stdev = 0.001
[info]   CI (99.9%): [20680.009, 20680.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.707 ±(99.9%) 6.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.707, 3.513), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28.589 ±(99.9%) 244.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.589, 142.069), stdev = 63.438
[info]   CI (99.9%): [≈ 0, 272.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.216 ±(99.9%) 1067.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.216, 674.076), stdev = 277.272
[info]   CI (99.9%): [≈ 0, 1541.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19200.198 ±(99.9%) 43233.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19200.198, 27332.550), stdev = 11227.676
[info]   CI (99.9%): [≈ 0, 62433.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25240.513 ops/s
[info] # Warmup Iteration   2: 41658.196 ops/s
[info] # Warmup Iteration   3: 41742.415 ops/s
[info] # Warmup Iteration   4: 41742.652 ops/s
[info] # Warmup Iteration   5: 41812.773 ops/s
[info] Iteration   1: 41764.887 ops/s
[info]                  ·gc.alloc.rate:                   377.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19279.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 41898.307 ops/s
[info]                  ·gc.alloc.rate:      378.521 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41833.066 ops/s
[info]                  ·gc.alloc.rate:                   377.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19247.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41784.207 ops/s
[info]                  ·gc.alloc.rate:                   377.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25380.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 42032.842 ops/s
[info]                  ·gc.alloc.rate:      379.661 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41862.662 ±(99.9%) 416.612 ops/s [Average]
[info]   (min, avg, max) = (41764.887, 41862.662, 42032.842), stdev = 108.193
[info]   CI (99.9%): [41446.050, 42279.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   378.131 ±(99.9%) 3.805 MB/sec [Average]
[info]   (min, avg, max) = (377.166, 378.131, 379.661), stdev = 0.988
[info]   CI (99.9%): [374.326, 381.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.010), stdev = 0.001
[info]   CI (99.9%): [14216.010, 14216.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.627 ±(99.9%) 3.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.627, 2.352), stdev = 1.022
[info]   CI (99.9%): [≈ 0, 4.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.400 ±(99.9%) 1220.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.400, 674.023), stdev = 316.854
[info]   CI (99.9%): [≈ 0, 1559.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12781.386 ±(99.9%) 45945.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12781.386, 25380.106), stdev = 11931.986
[info]   CI (99.9%): [≈ 0, 58727.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39798.598 ops/s
[info] # Warmup Iteration   2: 43437.854 ops/s
[info] # Warmup Iteration   3: 45113.383 ops/s
[info] # Warmup Iteration   4: 45142.806 ops/s
[info] # Warmup Iteration   5: 45216.754 ops/s
[info] Iteration   1: 42141.750 ops/s
[info]                  ·gc.alloc.rate:                   370.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19106.633 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45171.645 ops/s
[info]                  ·gc.alloc.rate:                   396.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17824.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45171.420 ops/s
[info]                  ·gc.alloc.rate:                   396.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17824.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45183.166 ops/s
[info]                  ·gc.alloc.rate:      397.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 43744.942 ops/s
[info]                  ·gc.alloc.rate:                   384.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24278.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44282.584 ±(99.9%) 5188.996 ops/s [Average]
[info]   (min, avg, max) = (42141.750, 44282.584, 45183.166), stdev = 1347.566
[info]   CI (99.9%): [39093.588, 49471.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   389.144 ±(99.9%) 45.615 MB/sec [Average]
[info]   (min, avg, max) = (370.337, 389.144, 397.067), stdev = 11.846
[info]   CI (99.9%): [343.529, 434.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.660 ±(99.9%) 5.654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.287), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23.737 ±(99.9%) 203.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.737, 118.263), stdev = 52.842
[info]   CI (99.9%): [≈ 0, 227.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.871 ±(99.9%) 989.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.871, 674.696), stdev = 256.916
[info]   CI (99.9%): [≈ 0, 1431.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15806.939 ±(99.9%) 35535.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15806.939, 24278.473), stdev = 9228.457
[info]   CI (99.9%): [≈ 0, 51342.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39551.106 ops/s
[info] # Warmup Iteration   2: 43714.223 ops/s
[info] # Warmup Iteration   3: 44956.381 ops/s
[info] # Warmup Iteration   4: 45497.469 ops/s
[info] # Warmup Iteration   5: 45194.337 ops/s
[info] Iteration   1: 45421.494 ops/s
[info]                  ·gc.alloc.rate:                   347.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17726.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45527.183 ops/s
[info]                  ·gc.alloc.rate:      348.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45435.203 ops/s
[info]                  ·gc.alloc.rate:                   347.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17721.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 44847.260 ops/s
[info]                  ·gc.alloc.rate:                   342.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17953.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45422.478 ops/s
[info]                  ·gc.alloc.rate:      347.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45330.724 ±(99.9%) 1054.379 ops/s [Average]
[info]   (min, avg, max) = (44847.260, 45330.724, 45527.183), stdev = 273.819
[info]   CI (99.9%): [44276.345, 46385.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   346.536 ±(99.9%) 8.013 MB/sec [Average]
[info]   (min, avg, max) = (342.857, 346.536, 348.003), stdev = 2.081
[info]   CI (99.9%): [338.523, 354.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.581 ±(99.9%) 3.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.581, 1.931), stdev = 0.865
[info]   CI (99.9%): [≈ 0, 3.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.946 ±(99.9%) 1078.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.946, 511.628), stdev = 280.202
[info]   CI (99.9%): [≈ 0, 1385.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10680.378 ±(99.9%) 37544.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10680.378, 17953.948), stdev = 9750.259
[info]   CI (99.9%): [≈ 0, 48225.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15789.027 ops/s
[info] # Warmup Iteration   2: 19828.110 ops/s
[info] # Warmup Iteration   3: 19460.584 ops/s
[info] # Warmup Iteration   4: 20057.078 ops/s
[info] # Warmup Iteration   5: 20097.316 ops/s
[info] Iteration   1: 19762.883 ops/s
[info]                  ·gc.alloc.rate:                   741.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              59039.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53789.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19190.786 ops/s
[info]                  ·gc.alloc.rate:                   719.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110571.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20062.552 ops/s
[info]                  ·gc.alloc.rate:                   752.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52776.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20166.902 ops/s
[info]                  ·gc.alloc.rate:                   756.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52452.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19767.490 ops/s
[info]                  ·gc.alloc.rate:                   741.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53510.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19790.122 ±(99.9%) 1462.027 ops/s [Average]
[info]   (min, avg, max) = (19190.786, 19790.122, 20166.902), stdev = 379.684
[info]   CI (99.9%): [18328.095, 21252.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   742.444 ±(99.9%) 54.940 MB/sec [Average]
[info]   (min, avg, max) = (719.883, 742.444, 756.666), stdev = 14.268
[info]   CI (99.9%): [687.504, 797.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59039.857 ±(99.9%) 1.416 B/op [Average]
[info]   (min, avg, max) = (59039.199, 59039.857, 59040.023), stdev = 0.368
[info]   CI (99.9%): [59038.441, 59041.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.626 ±(99.9%) 5.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.626, 3.091), stdev = 1.378
[info]   CI (99.9%): [≈ 0, 5.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49.870 ±(99.9%) 422.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.870, 246.099), stdev = 109.705
[info]   CI (99.9%): [≈ 0, 472.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   808.179 ±(99.9%) 1162.489 MB/sec [Average]
[info]   (min, avg, max) = (672.235, 808.179, 1348.219), stdev = 301.895
[info]   CI (99.9%): [≈ 0, 1970.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   64620.110 ±(99.9%) 98936.593 B/op [Average]
[info]   (min, avg, max) = (52452.193, 64620.110, 110571.940), stdev = 25693.519
[info]   CI (99.9%): [≈ 0, 163556.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12964.143 ops/s
[info] # Warmup Iteration   2: 20336.803 ops/s
[info] # Warmup Iteration   3: 19222.965 ops/s
[info] # Warmup Iteration   4: 20479.863 ops/s
[info] # Warmup Iteration   5: 19826.268 ops/s
[info] Iteration   1: 20161.038 ops/s
[info]                  ·gc.alloc.rate:                   572.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              44675.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52600.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20700.553 ops/s
[info]                  ·gc.alloc.rate:      587.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 44648.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20628.964 ops/s
[info]                  ·gc.alloc.rate:                   585.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51407.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20605.614 ops/s
[info]                  ·gc.alloc.rate:                   584.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51566.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20690.461 ops/s
[info]                  ·gc.alloc.rate:                   586.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51354.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   20557.326 ±(99.9%) 866.922 ops/s [Average]
[info]   (min, avg, max) = (20161.038, 20557.326, 20700.553), stdev = 225.137
[info]   CI (99.9%): [19690.404, 21424.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   583.188 ±(99.9%) 24.041 MB/sec [Average]
[info]   (min, avg, max) = (572.208, 583.188, 587.222), stdev = 6.243
[info]   CI (99.9%): [559.147, 607.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44653.600 ±(99.9%) 48.048 B/op [Average]
[info]   (min, avg, max) = (44648.020, 44653.600, 44675.921), stdev = 12.478
[info]   CI (99.9%): [44605.552, 44701.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.583 ±(99.9%) 16.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.583, 9.750), stdev = 4.235
[info]   CI (99.9%): [≈ 0, 18.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.505 ±(99.9%) 1161.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.505, 675.098), stdev = 301.593
[info]   CI (99.9%): [≈ 0, 1700.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41385.729 ±(99.9%) 89107.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41385.729, 52600.408), stdev = 23140.887
[info]   CI (99.9%): [≈ 0, 130493.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77165.865 ops/s
[info] # Warmup Iteration   2: 81120.325 ops/s
[info] # Warmup Iteration   3: 78230.577 ops/s
[info] # Warmup Iteration   4: 82014.670 ops/s
[info] # Warmup Iteration   5: 81946.361 ops/s
[info] Iteration   1: 82102.562 ops/s
[info]                  ·gc.alloc.rate:      213.650 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 81871.241 ops/s
[info]                  ·gc.alloc.rate:                   213.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9834.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 82073.546 ops/s
[info]                  ·gc.alloc.rate:      213.563 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 82087.119 ops/s
[info]                  ·gc.alloc.rate:      213.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 79213.544 ops/s
[info]                  ·gc.alloc.rate:                   206.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10164.288 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   81469.602 ±(99.9%) 4869.895 ops/s [Average]
[info]   (min, avg, max) = (79213.544, 81469.602, 82102.562), stdev = 1264.696
[info]   CI (99.9%): [76599.708, 86339.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   212.014 ±(99.9%) 12.531 MB/sec [Average]
[info]   (min, avg, max) = (206.209, 212.014, 213.650), stdev = 3.254
[info]   CI (99.9%): [199.483, 224.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.279), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.648 ±(99.9%) 1079.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.648, 511.710), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1283.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3999.802 ±(99.9%) 21094.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3999.802, 10164.288), stdev = 5478.194
[info]   CI (99.9%): [≈ 0, 25094.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9834.826 ops/s
[info] # Warmup Iteration   2: 16657.627 ops/s
[info] # Warmup Iteration   3: 16824.863 ops/s
[info] # Warmup Iteration   4: 16842.493 ops/s
[info] # Warmup Iteration   5: 16845.111 ops/s
[info] Iteration   1: 16920.753 ops/s
[info]                  ·gc.alloc.rate:                   1096.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125650.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16837.126 ops/s
[info]                  ·gc.alloc.rate:                   1091.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63166.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17017.999 ops/s
[info]                  ·gc.alloc.rate:                   1103.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125119.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 17014.337 ops/s
[info]                  ·gc.alloc.rate:                   1103.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125264.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16980.406 ops/s
[info]                  ·gc.alloc.rate:                   1100.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62788.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16954.124 ±(99.9%) 293.247 ops/s [Average]
[info]   (min, avg, max) = (16837.126, 16954.124, 17017.999), stdev = 76.155
[info]   CI (99.9%): [16660.878, 17247.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1099.276 ±(99.9%) 19.307 MB/sec [Average]
[info]   (min, avg, max) = (1091.651, 1099.276, 1103.473), stdev = 5.014
[info]   CI (99.9%): [1079.969, 1118.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.026 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (102048.024, 102048.026, 102048.030), stdev = 0.003
[info]   CI (99.9%): [102048.015, 102048.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.317 ±(99.9%) 9.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.317, 5.788), stdev = 2.518
[info]   CI (99.9%): [≈ 0, 12.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1082.234 ±(99.9%) 1426.146 MB/sec [Average]
[info]   (min, avg, max) = (675.714, 1082.234, 1354.456), stdev = 370.366
[info]   CI (99.9%): [≈ 0, 2508.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   100397.910 ±(99.9%) 131541.641 B/op [Average]
[info]   (min, avg, max) = (62788.612, 100397.910, 125650.681), stdev = 34160.946
[info]   CI (99.9%): [≈ 0, 231939.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48363.652 ops/s
[info] # Warmup Iteration   2: 67546.263 ops/s
[info] # Warmup Iteration   3: 67773.353 ops/s
[info] # Warmup Iteration   4: 68131.130 ops/s
[info] # Warmup Iteration   5: 67975.704 ops/s
[info] Iteration   1: 68592.292 ops/s
[info]                  ·gc.alloc.rate:                   905.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30920.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 68379.223 ops/s
[info]                  ·gc.alloc.rate:                   902.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15485.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 68440.112 ops/s
[info]                  ·gc.alloc.rate:                   903.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15455.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 68274.246 ops/s
[info]                  ·gc.alloc.rate:                   901.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30987.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 68638.751 ops/s
[info]                  ·gc.alloc.rate:                   905.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15411.700 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   68464.925 ±(99.9%) 580.021 ops/s [Average]
[info]   (min, avg, max) = (68274.246, 68464.925, 68638.751), stdev = 150.630
[info]   CI (99.9%): [67884.904, 69044.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   903.753 ±(99.9%) 7.889 MB/sec [Average]
[info]   (min, avg, max) = (901.191, 903.753, 905.937), stdev = 2.049
[info]   CI (99.9%): [895.865, 911.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20776.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20776.006, 20776.006, 20776.006), stdev = 0.001
[info]   CI (99.9%): [20776.005, 20776.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.862 ±(99.9%) 4.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 2.399), stdev = 1.193
[info]   CI (99.9%): [≈ 0, 5.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   941.780 ±(99.9%) 1421.093 MB/sec [Average]
[info]   (min, avg, max) = (672.023, 941.780, 1347.970), stdev = 369.053
[info]   CI (99.9%): [≈ 0, 2362.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21652.269 ±(99.9%) 32697.521 B/op [Average]
[info]   (min, avg, max) = (15411.700, 21652.269, 30987.704), stdev = 8491.442
[info]   CI (99.9%): [≈ 0, 54349.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55614.258 ops/s
[info] # Warmup Iteration   2: 88952.621 ops/s
[info] # Warmup Iteration   3: 91703.762 ops/s
[info] # Warmup Iteration   4: 92296.135 ops/s
[info] # Warmup Iteration   5: 92168.749 ops/s
[info] Iteration   1: 91734.636 ops/s
[info]                  ·gc.alloc.rate:                   1087.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23177.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 92056.159 ops/s
[info]                  ·gc.alloc.rate:                   1091.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11553.788 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 91912.293 ops/s
[info]                  ·gc.alloc.rate:                   1089.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23166.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 91958.901 ops/s
[info]                  ·gc.alloc.rate:                   1090.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23166.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 91939.125 ops/s
[info]                  ·gc.alloc.rate:                   1090.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11596.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   91920.223 ±(99.9%) 450.860 ops/s [Average]
[info]   (min, avg, max) = (91734.636, 91920.223, 92056.159), stdev = 117.087
[info]   CI (99.9%): [91469.363, 92371.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1089.999 ±(99.9%) 5.666 MB/sec [Average]
[info]   (min, avg, max) = (1087.733, 1089.999, 1091.765), stdev = 1.471
[info]   CI (99.9%): [1084.333, 1095.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.004, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.570 ±(99.9%) 3.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.139), stdev = 0.895
[info]   CI (99.9%): [≈ 0, 4.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.066 ±(99.9%) 1425.296 MB/sec [Average]
[info]   (min, avg, max) = (675.847, 1082.066, 1353.669), stdev = 370.145
[info]   CI (99.9%): [≈ 0, 2507.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18532.152 ±(99.9%) 24454.069 B/op [Average]
[info]   (min, avg, max) = (11553.788, 18532.152, 23177.244), stdev = 6350.644
[info]   CI (99.9%): [≈ 0, 42986.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198557.649 ops/s
[info] # Warmup Iteration   2: 203618.314 ops/s
[info] # Warmup Iteration   3: 205686.586 ops/s
[info] # Warmup Iteration   4: 205302.237 ops/s
[info] # Warmup Iteration   5: 202521.199 ops/s
[info] Iteration   1: 205256.984 ops/s
[info]                  ·gc.alloc.rate:      325.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 204996.971 ops/s
[info]                  ·gc.alloc.rate:                   325.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3927.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 204757.209 ops/s
[info]                  ·gc.alloc.rate:                   324.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3932.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 205224.683 ops/s
[info]                  ·gc.alloc.rate:      325.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 205203.866 ops/s
[info]                  ·gc.alloc.rate:                   325.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3923.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   205087.943 ±(99.9%) 813.143 ops/s [Average]
[info]   (min, avg, max) = (204757.209, 205087.943, 205256.984), stdev = 211.171
[info]   CI (99.9%): [204274.800, 205901.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   325.213 ±(99.9%) 1.324 MB/sec [Average]
[info]   (min, avg, max) = (324.678, 325.213, 325.493), stdev = 0.344
[info]   CI (99.9%): [323.888, 326.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.915 ±(99.9%) 1078.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.915, 511.536), stdev = 280.174
[info]   CI (99.9%): [≈ 0, 1385.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2356.793 ±(99.9%) 8284.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2356.793, 3932.371), stdev = 2151.450
[info]   CI (99.9%): [≈ 0, 10641.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235525.233 ops/s
[info] # Warmup Iteration   2: 250263.745 ops/s
[info] # Warmup Iteration   3: 253381.453 ops/s
[info] # Warmup Iteration   4: 253458.175 ops/s
[info] # Warmup Iteration   5: 253633.472 ops/s
[info] Iteration   1: 253421.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 253439.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 253482.548 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 253353.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 252619.029 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   253263.316 ±(99.9%) 1398.364 ops/s [Average]
[info]   (min, avg, max) = (252619.029, 253263.316, 253482.548), stdev = 363.151
[info]   CI (99.9%): [251864.952, 254661.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53046.762 ops/s
[info] # Warmup Iteration   2: 73566.320 ops/s
[info] # Warmup Iteration   3: 73865.113 ops/s
[info] # Warmup Iteration   4: 74524.900 ops/s
[info] # Warmup Iteration   5: 74413.689 ops/s
[info] Iteration   1: 74539.696 ops/s
[info]                  ·gc.alloc.rate:                   1162.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28299.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 74583.582 ops/s
[info]                  ·gc.alloc.rate:                   1162.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28254.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 74716.735 ops/s
[info]                  ·gc.alloc.rate:                   1165.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14101.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 74714.177 ops/s
[info]                  ·gc.alloc.rate:                   1164.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28218.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 74428.222 ops/s
[info]                  ·gc.alloc.rate:                   1160.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28355.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   74596.482 ±(99.9%) 471.666 ops/s [Average]
[info]   (min, avg, max) = (74428.222, 74596.482, 74716.735), stdev = 122.490
[info]   CI (99.9%): [74124.816, 75068.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1163.119 ±(99.9%) 7.367 MB/sec [Average]
[info]   (min, avg, max) = (1160.539, 1163.119, 1165.071), stdev = 1.913
[info]   CI (99.9%): [1155.752, 1170.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24544.005, 24544.006, 24544.006), stdev = 0.001
[info]   CI (99.9%): [24544.005, 24544.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.790 ±(99.9%) 3.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.790, 2.193), stdev = 0.899
[info]   CI (99.9%): [≈ 0, 4.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205.623 ±(99.9%) 1154.290 MB/sec [Average]
[info]   (min, avg, max) = (669.388, 1205.623, 1340.744), stdev = 299.765
[info]   CI (99.9%): [51.333, 2359.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25445.717 ±(99.9%) 24419.679 B/op [Average]
[info]   (min, avg, max) = (14101.684, 25445.717, 28355.120), stdev = 6341.713
[info]   CI (99.9%): [1026.038, 49865.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18995.830 ops/s
[info] # Warmup Iteration   2: 27371.846 ops/s
[info] # Warmup Iteration   3: 27648.017 ops/s
[info] # Warmup Iteration   4: 27703.156 ops/s
[info] # Warmup Iteration   5: 27708.767 ops/s
[info] Iteration   1: 27761.951 ops/s
[info]                  ·gc.alloc.rate:                   577.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29002.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27819.414 ops/s
[info]                  ·gc.alloc.rate:                   578.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38138.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27797.861 ops/s
[info]                  ·gc.alloc.rate:                   578.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38167.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27849.142 ops/s
[info]                  ·gc.alloc.rate:                   579.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37982.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27882.136 ops/s
[info]                  ·gc.alloc.rate:      580.113 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27822.101 ±(99.9%) 178.010 ops/s [Average]
[info]   (min, avg, max) = (27761.951, 27822.101, 27882.136), stdev = 46.229
[info]   CI (99.9%): [27644.091, 28000.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   578.699 ±(99.9%) 3.991 MB/sec [Average]
[info]   (min, avg, max) = (577.412, 578.699, 580.113), stdev = 1.037
[info]   CI (99.9%): [574.708, 582.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.015, 32736.016), stdev = 0.001
[info]   CI (99.9%): [32736.013, 32736.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.711 ±(99.9%) 6.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.711, 3.521), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 6.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40.255 ±(99.9%) 342.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.255, 199.228), stdev = 88.870
[info]   CI (99.9%): [≈ 0, 382.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   506.353 ±(99.9%) 1122.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.353, 674.063), stdev = 291.608
[info]   CI (99.9%): [≈ 0, 1629.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28658.098 ±(99.9%) 63525.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28658.098, 38167.065), stdev = 16497.352
[info]   CI (99.9%): [≈ 0, 92183.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17430.573 ops/s
[info] # Warmup Iteration   2: 28114.841 ops/s
[info] # Warmup Iteration   3: 28763.526 ops/s
[info] # Warmup Iteration   4: 27651.790 ops/s
[info] # Warmup Iteration   5: 28826.165 ops/s
[info] Iteration   1: 28894.566 ops/s
[info]                  ·gc.alloc.rate:                   379.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27865.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28946.208 ops/s
[info]                  ·gc.alloc.rate:      379.897 MB/sec
[info]                  ·gc.alloc.rate.norm: 20656.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28882.057 ops/s
[info]                  ·gc.alloc.rate:                   379.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27877.812 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28608.173 ops/s
[info]                  ·gc.alloc.rate:                   375.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37066.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28956.939 ops/s
[info]                  ·gc.alloc.rate:      380.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 20656.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28857.589 ±(99.9%) 550.986 ops/s [Average]
[info]   (min, avg, max) = (28608.173, 28857.589, 28956.939), stdev = 143.089
[info]   CI (99.9%): [28306.602, 29408.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   378.779 ±(99.9%) 7.205 MB/sec [Average]
[info]   (min, avg, max) = (375.495, 378.779, 380.015), stdev = 1.871
[info]   CI (99.9%): [371.574, 385.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20656.014, 20656.015, 20656.015), stdev = 0.001
[info]   CI (99.9%): [20656.012, 20656.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.374 ±(99.9%) 11.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.374, 6.871), stdev = 3.073
[info]   CI (99.9%): [≈ 0, 13.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.453 ±(99.9%) 1220.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.453, 673.822), stdev = 316.864
[info]   CI (99.9%): [≈ 0, 1559.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18562.013 ±(99.9%) 66830.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18562.013, 37066.982), stdev = 17355.585
[info]   CI (99.9%): [≈ 0, 85392.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108772.462 ops/s
[info] # Warmup Iteration   2: 120682.007 ops/s
[info] # Warmup Iteration   3: 125487.669 ops/s
[info] # Warmup Iteration   4: 119713.564 ops/s
[info] # Warmup Iteration   5: 124966.476 ops/s
[info] Iteration   1: 125046.656 ops/s
[info]                  ·gc.alloc.rate:                   488.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6439.000 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 125043.294 ops/s
[info]                  ·gc.alloc.rate:                   488.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6439.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 124569.486 ops/s
[info]                  ·gc.alloc.rate:                   486.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8525.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 125459.676 ops/s
[info]                  ·gc.alloc.rate:      489.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 119363.207 ops/s
[info]                  ·gc.alloc.rate:                   465.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8897.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   123896.464 ±(99.9%) 9833.321 ops/s [Average]
[info]   (min, avg, max) = (119363.207, 123896.464, 125459.676), stdev = 2553.682
[info]   CI (99.9%): [114063.143, 133729.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   483.597 ±(99.9%) 38.409 MB/sec [Average]
[info]   (min, avg, max) = (465.898, 483.597, 489.764), stdev = 9.975
[info]   CI (99.9%): [445.188, 522.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.003), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.672 ±(99.9%) 5.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.672, 3.247), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 6.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.495 ±(99.9%) 70.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.495, 41.033), stdev = 18.193
[info]   CI (99.9%): [≈ 0, 78.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.483 ±(99.9%) 1068.592 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.483, 674.715), stdev = 277.510
[info]   CI (99.9%): [≈ 0, 1543.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6060.386 ±(99.9%) 13769.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6060.386, 8897.775), stdev = 3575.776
[info]   CI (99.9%): [≈ 0, 19829.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10601.345 ops/s
[info] # Warmup Iteration   2: 22151.882 ops/s
[info] # Warmup Iteration   3: 22177.441 ops/s
[info] # Warmup Iteration   4: 22005.670 ops/s
[info] # Warmup Iteration   5: 22203.350 ops/s
[info] Iteration   1: 21623.961 ops/s
[info]                  ·gc.alloc.rate:                   1193.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98322.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 22121.775 ops/s
[info]                  ·gc.alloc.rate:                   1221.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96203.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22151.522 ops/s
[info]                  ·gc.alloc.rate:                   1223.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48060.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22154.037 ops/s
[info]                  ·gc.alloc.rate:                   1223.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96164.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22128.144 ops/s
[info]                  ·gc.alloc.rate:                   1221.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96343.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22035.888 ±(99.9%) 888.368 ops/s [Average]
[info]   (min, avg, max) = (21623.961, 22035.888, 22154.037), stdev = 230.706
[info]   CI (99.9%): [21147.520, 22924.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1216.934 ±(99.9%) 49.461 MB/sec [Average]
[info]   (min, avg, max) = (1193.999, 1216.934, 1223.450), stdev = 12.845
[info]   CI (99.9%): [1167.474, 1266.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.020 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (86920.018, 86920.020, 86920.024), stdev = 0.002
[info]   CI (99.9%): [86920.012, 86920.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.782 ±(99.9%) 6.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.782, 4.437), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 8.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.486 ±(99.9%) 1164.569 MB/sec [Average]
[info]   (min, avg, max) = (676.480, 1217.486, 1354.400), stdev = 302.435
[info]   CI (99.9%): [52.917, 2382.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87018.888 ±(99.9%) 83933.236 B/op [Average]
[info]   (min, avg, max) = (48060.522, 87018.888, 98322.181), stdev = 21797.195
[info]   CI (99.9%): [3085.651, 170952.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135181.622 ops/s
[info] # Warmup Iteration   2: 176881.768 ops/s
[info] # Warmup Iteration   3: 179222.880 ops/s
[info] # Warmup Iteration   4: 173550.487 ops/s
[info] # Warmup Iteration   5: 178782.163 ops/s
[info] Iteration   1: 177362.027 ops/s
[info]                  ·gc.alloc.rate:                   616.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4539.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 179343.821 ops/s
[info]                  ·gc.alloc.rate:                   623.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5915.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 179689.523 ops/s
[info]                  ·gc.alloc.rate:                   624.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5904.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 179718.467 ops/s
[info]                  ·gc.alloc.rate:                   624.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5886.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 179889.972 ops/s
[info]                  ·gc.alloc.rate:                   625.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5880.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   179200.762 ±(99.9%) 4030.931 ops/s [Average]
[info]   (min, avg, max) = (177362.027, 179200.762, 179889.972), stdev = 1046.820
[info]   CI (99.9%): [175169.831, 183231.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   623.039 ±(99.9%) 14.257 MB/sec [Average]
[info]   (min, avg, max) = (616.511, 623.039, 625.506), stdev = 3.703
[info]   CI (99.9%): [608.781, 637.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.706 ±(99.9%) 6.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.508), stdev = 1.566
[info]   CI (99.9%): [≈ 0, 6.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.191 ±(99.9%) 52.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.191, 30.774), stdev = 13.742
[info]   CI (99.9%): [≈ 0, 59.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.825 ±(99.9%) 278.480 MB/sec [Average]
[info]   (min, avg, max) = (511.469, 640.825, 674.324), stdev = 72.320
[info]   CI (99.9%): [362.345, 919.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5625.381 ±(99.9%) 2337.699 B/op [Average]
[info]   (min, avg, max) = (4539.674, 5625.381, 5915.770), stdev = 607.093
[info]   CI (99.9%): [3287.682, 7963.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194204.887 ops/s
[info] # Warmup Iteration   2: 285093.145 ops/s
[info] # Warmup Iteration   3: 285759.160 ops/s
[info] # Warmup Iteration   4: 282265.033 ops/s
[info] # Warmup Iteration   5: 285676.681 ops/s
[info] Iteration   1: 285083.563 ops/s
[info]                  ·gc.alloc.rate:                   288.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2824.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 285286.490 ops/s
[info]                  ·gc.alloc.rate:      288.608 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 285079.354 ops/s
[info]                  ·gc.alloc.rate:                   288.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2824.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 285142.149 ops/s
[info]                  ·gc.alloc.rate:                   288.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2823.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 285527.410 ops/s
[info]                  ·gc.alloc.rate:      288.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   285223.793 ±(99.9%) 728.849 ops/s [Average]
[info]   (min, avg, max) = (285079.354, 285223.793, 285527.410), stdev = 189.280
[info]   CI (99.9%): [284494.944, 285952.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   288.500 ±(99.9%) 0.748 MB/sec [Average]
[info]   (min, avg, max) = (288.340, 288.500, 288.790), stdev = 0.194
[info]   CI (99.9%): [287.752, 289.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.946 ±(99.9%) 1078.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.946, 511.580), stdev = 280.202
[info]   CI (99.9%): [≈ 0, 1385.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1694.567 ±(99.9%) 5956.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1694.567, 2824.516), stdev = 1546.921
[info]   CI (99.9%): [≈ 0, 7651.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472911.122 ops/s
[info] # Warmup Iteration   2: 481833.116 ops/s
[info] # Warmup Iteration   3: 501897.927 ops/s
[info] # Warmup Iteration   4: 501489.879 ops/s
[info] # Warmup Iteration   5: 508210.355 ops/s
[info] Iteration   1: 504864.136 ops/s
[info]                  ·gc.alloc.rate:                   387.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1594.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 505477.218 ops/s
[info]                  ·gc.alloc.rate:                   387.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1592.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 505401.694 ops/s
[info]                  ·gc.alloc.rate:                   387.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1593.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 508449.443 ops/s
[info]                  ·gc.alloc.rate:      390.311 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 506300.055 ops/s
[info]                  ·gc.alloc.rate:                   388.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2097.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   506098.509 ±(99.9%) 5432.938 ops/s [Average]
[info]   (min, avg, max) = (504864.136, 506098.509, 508449.443), stdev = 1410.917
[info]   CI (99.9%): [500665.571, 511531.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   388.432 ±(99.9%) 4.324 MB/sec [Average]
[info]   (min, avg, max) = (387.446, 388.432, 390.311), stdev = 1.123
[info]   CI (99.9%): [384.108, 392.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.660 ±(99.9%) 5.627 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.274), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.051 ±(99.9%) 17.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.051, 10.178), stdev = 4.543
[info]   CI (99.9%): [≈ 0, 19.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.871 ±(99.9%) 989.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.871, 674.719), stdev = 256.920
[info]   CI (99.9%): [≈ 0, 1431.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1375.704 ±(99.9%) 3078.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1375.704, 2097.686), stdev = 799.417
[info]   CI (99.9%): [≈ 0, 4453.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517991.681 ops/s
[info] # Warmup Iteration   2: 557069.884 ops/s
[info] # Warmup Iteration   3: 556856.649 ops/s
[info] # Warmup Iteration   4: 556780.575 ops/s
[info] # Warmup Iteration   5: 556490.801 ops/s
[info] Iteration   1: 556811.166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 556860.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 556461.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 558130.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 556789.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   557010.637 ±(99.9%) 2484.822 ops/s [Average]
[info]   (min, avg, max) = (556461.995, 557010.637, 558130.168), stdev = 645.300
[info]   CI (99.9%): [554525.815, 559495.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170123.420 ops/s
[info] # Warmup Iteration   2: 289964.352 ops/s
[info] # Warmup Iteration   3: 293487.735 ops/s
[info] # Warmup Iteration   4: 288499.310 ops/s
[info] # Warmup Iteration   5: 294808.402 ops/s
[info] Iteration   1: 294400.176 ops/s
[info]                  ·gc.alloc.rate:                   814.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7209.590 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 294923.351 ops/s
[info]                  ·gc.alloc.rate:                   815.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3601.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 295008.335 ops/s
[info]                  ·gc.alloc.rate:                   815.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3603.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 294525.733 ops/s
[info]                  ·gc.alloc.rate:                   814.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3609.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 293038.785 ops/s
[info]                  ·gc.alloc.rate:                   810.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3631.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   294379.276 ±(99.9%) 3050.609 ops/s [Average]
[info]   (min, avg, max) = (293038.785, 294379.276, 295008.335), stdev = 792.233
[info]   CI (99.9%): [291328.667, 297429.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   814.000 ±(99.9%) 8.229 MB/sec [Average]
[info]   (min, avg, max) = (810.412, 814.000, 815.736), stdev = 2.137
[info]   CI (99.9%): [805.771, 822.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.334), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   810.062 ±(99.9%) 1158.999 MB/sec [Average]
[info]   (min, avg, max) = (674.788, 810.062, 1348.486), stdev = 300.988
[info]   CI (99.9%): [≈ 0, 1969.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4330.973 ±(99.9%) 6196.609 B/op [Average]
[info]   (min, avg, max) = (3601.057, 4330.973, 7209.590), stdev = 1609.240
[info]   CI (99.9%): [≈ 0, 10527.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29747.778 ops/s
[info] # Warmup Iteration   2: 38268.974 ops/s
[info] # Warmup Iteration   3: 37420.178 ops/s
[info] # Warmup Iteration   4: 38602.870 ops/s
[info] # Warmup Iteration   5: 37945.046 ops/s
[info] Iteration   1: 38605.964 ops/s
[info]                  ·gc.alloc.rate:                   1722.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82149.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38810.774 ops/s
[info]                  ·gc.alloc.rate:                   1731.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54512.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 38739.818 ops/s
[info]                  ·gc.alloc.rate:                   1727.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82043.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38803.446 ops/s
[info]                  ·gc.alloc.rate:                   1730.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54684.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38795.932 ops/s
[info]                  ·gc.alloc.rate:                   1730.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82136.607 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38751.187 ±(99.9%) 330.700 ops/s [Average]
[info]   (min, avg, max) = (38605.964, 38751.187, 38810.774), stdev = 85.882
[info]   CI (99.9%): [38420.487, 39081.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1728.397 ±(99.9%) 14.490 MB/sec [Average]
[info]   (min, avg, max) = (1722.097, 1728.397, 1731.344), stdev = 3.763
[info]   CI (99.9%): [1713.906, 1742.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.011), stdev = 0.001
[info]   CI (99.9%): [70200.009, 70200.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.030 ±(99.9%) 4.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.030, 3.383), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 6.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1750.296 ±(99.9%) 1420.495 MB/sec [Average]
[info]   (min, avg, max) = (1344.452, 1750.296, 2024.582), stdev = 368.898
[info]   CI (99.9%): [329.801, 3170.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   71105.299 ±(99.9%) 58023.185 B/op [Average]
[info]   (min, avg, max) = (54512.878, 71105.299, 82149.135), stdev = 15068.437
[info]   CI (99.9%): [13082.113, 129128.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27787.700 ops/s
[info] # Warmup Iteration   2: 305419.389 ops/s
[info] # Warmup Iteration   3: 304619.884 ops/s
[info] # Warmup Iteration   4: 305251.359 ops/s
[info] # Warmup Iteration   5: 306583.715 ops/s
[info] Iteration   1: 305093.390 ops/s
[info]                  ·gc.alloc.rate:                   316.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2639.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 297451.012 ops/s
[info]                  ·gc.alloc.rate:      308.394 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 304430.002 ops/s
[info]                  ·gc.alloc.rate:                   315.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2644.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 304930.854 ops/s
[info]                  ·gc.alloc.rate:                   316.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2640.548 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 305611.299 ops/s
[info]                  ·gc.alloc.rate:      316.854 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   303503.312 ±(99.9%) 13128.794 ops/s [Average]
[info]   (min, avg, max) = (297451.012, 303503.312, 305611.299), stdev = 3409.506
[info]   CI (99.9%): [290374.518, 316632.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.694 ±(99.9%) 13.662 MB/sec [Average]
[info]   (min, avg, max) = (308.394, 314.694, 316.854), stdev = 3.548
[info]   CI (99.9%): [301.032, 328.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.007 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.154), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.953 ±(99.9%) 1078.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.953, 511.652), stdev = 280.209
[info]   CI (99.9%): [≈ 0, 1385.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1584.912 ±(99.9%) 5571.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1584.912, 2644.884), stdev = 1446.822
[info]   CI (99.9%): [≈ 0, 7156.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63140.950 ops/s
[info] # Warmup Iteration   2: 101517.414 ops/s
[info] # Warmup Iteration   3: 102802.283 ops/s
[info] # Warmup Iteration   4: 103207.649 ops/s
[info] # Warmup Iteration   5: 103407.160 ops/s
[info] Iteration   1: 103451.834 ops/s
[info]                  ·gc.alloc.rate:                   1140.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10281.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 102156.887 ops/s
[info]                  ·gc.alloc.rate:                   1126.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20828.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 103114.101 ops/s
[info]                  ·gc.alloc.rate:                   1137.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20650.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 103432.262 ops/s
[info]                  ·gc.alloc.rate:                   1140.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10298.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 103196.249 ops/s
[info]                  ·gc.alloc.rate:                   1138.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20663.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   103070.267 ±(99.9%) 2045.459 ops/s [Average]
[info]   (min, avg, max) = (102156.887, 103070.267, 103451.834), stdev = 531.199
[info]   CI (99.9%): [101024.808, 105115.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1136.704 ±(99.9%) 22.823 MB/sec [Average]
[info]   (min, avg, max) = (1126.508, 1136.704, 1140.950), stdev = 5.927
[info]   CI (99.9%): [1113.882, 1159.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.003, 17360.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.638 ±(99.9%) 2.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.638, 1.283), stdev = 0.638
[info]   CI (99.9%): [≈ 0, 3.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.295 ±(99.9%) 1427.420 MB/sec [Average]
[info]   (min, avg, max) = (675.707, 1082.295, 1354.630), stdev = 370.696
[info]   CI (99.9%): [≈ 0, 2509.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16544.495 ±(99.9%) 21987.648 B/op [Average]
[info]   (min, avg, max) = (10281.150, 16544.495, 20828.660), stdev = 5710.122
[info]   CI (99.9%): [≈ 0, 38532.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412052.756 ops/s
[info] # Warmup Iteration   2: 427990.881 ops/s
[info] # Warmup Iteration   3: 432210.657 ops/s
[info] # Warmup Iteration   4: 430555.722 ops/s
[info] # Warmup Iteration   5: 431886.588 ops/s
[info] Iteration   1: 421716.165 ops/s
[info]                  ·gc.alloc.rate:                   274.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1909.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 431105.193 ops/s
[info]                  ·gc.alloc.rate:      280.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 427902.557 ops/s
[info]                  ·gc.alloc.rate:                   278.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1881.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 427688.953 ops/s
[info]                  ·gc.alloc.rate:                   278.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1882.661 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 430600.068 ops/s
[info]                  ·gc.alloc.rate:      280.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   427802.587 ±(99.9%) 14382.109 ops/s [Average]
[info]   (min, avg, max) = (421716.165, 427802.587, 431105.193), stdev = 3734.988
[info]   CI (99.9%): [413420.478, 442184.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   278.320 ±(99.9%) 9.356 MB/sec [Average]
[info]   (min, avg, max) = (274.343, 278.320, 280.444), stdev = 2.430
[info]   CI (99.9%): [268.965, 287.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.955 ±(99.9%) 1078.990 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.955, 511.698), stdev = 280.210
[info]   CI (99.9%): [≈ 0, 1385.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1134.744 ±(99.9%) 3989.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1134.744, 1909.336), stdev = 1035.934
[info]   CI (99.9%): [≈ 0, 5123.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22960.545 ops/s
[info] # Warmup Iteration   2: 40573.377 ops/s
[info] # Warmup Iteration   3: 40814.277 ops/s
[info] # Warmup Iteration   4: 40645.407 ops/s
[info] # Warmup Iteration   5: 40280.167 ops/s
[info] Iteration   1: 40681.890 ops/s
[info]                  ·gc.alloc.rate:                   2171.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104891.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 40794.739 ops/s
[info]                  ·gc.alloc.rate:                   2177.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78540.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40863.174 ops/s
[info]                  ·gc.alloc.rate:                   2181.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78486.688 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40743.937 ops/s
[info]                  ·gc.alloc.rate:                   2175.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78765.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40873.557 ops/s
[info]                  ·gc.alloc.rate:                   2181.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78560.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   40791.459 ±(99.9%) 311.389 ops/s [Average]
[info]   (min, avg, max) = (40681.890, 40791.459, 40873.557), stdev = 80.867
[info]   CI (99.9%): [40480.070, 41102.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2177.408 ±(99.9%) 15.989 MB/sec [Average]
[info]   (min, avg, max) = (2171.792, 2177.408, 2181.584), stdev = 4.152
[info]   CI (99.9%): [2161.419, 2193.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (84016.010, 84016.010, 84016.011), stdev = 0.001
[info]   CI (99.9%): [84016.009, 84016.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.928 ±(99.9%) 4.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.928, 3.221), stdev = 1.220
[info]   CI (99.9%): [≈ 0, 6.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2172.721 ±(99.9%) 1159.583 MB/sec [Average]
[info]   (min, avg, max) = (2035.480, 2172.721, 2711.408), stdev = 301.140
[info]   CI (99.9%): [1013.138, 3332.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83848.820 ±(99.9%) 45296.933 B/op [Average]
[info]   (min, avg, max) = (78486.688, 83848.820, 104891.103), stdev = 11763.470
[info]   CI (99.9%): [38551.888, 129145.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68677.873 ops/s
[info] # Warmup Iteration   2: 89096.232 ops/s
[info] # Warmup Iteration   3: 90738.088 ops/s
[info] # Warmup Iteration   4: 88405.554 ops/s
[info] # Warmup Iteration   5: 90157.741 ops/s
[info] Iteration   1: 90019.274 ops/s
[info]                  ·gc.alloc.rate:                   433.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8944.668 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 90708.871 ops/s
[info]                  ·gc.alloc.rate:      436.636 MB/sec
[info]                  ·gc.alloc.rate.norm: 7576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 90449.888 ops/s
[info]                  ·gc.alloc.rate:                   435.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8901.856 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 89954.850 ops/s
[info]                  ·gc.alloc.rate:                   432.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11794.717 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 90417.803 ops/s
[info]                  ·gc.alloc.rate:      435.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 7576.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   90310.137 ±(99.9%) 1219.111 ops/s [Average]
[info]   (min, avg, max) = (89954.850, 90310.137, 90708.871), stdev = 316.599
[info]   CI (99.9%): [89091.026, 91529.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   434.684 ±(99.9%) 5.920 MB/sec [Average]
[info]   (min, avg, max) = (432.961, 434.684, 436.636), stdev = 1.537
[info]   CI (99.9%): [428.764, 440.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7576.004, 7576.005, 7576.005), stdev = 0.001
[info]   CI (99.9%): [7576.004, 7576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.705 ±(99.9%) 6.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.705, 3.496), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.328 ±(99.9%) 105.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.328, 61.169), stdev = 27.304
[info]   CI (99.9%): [≈ 0, 117.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   339.431 ±(99.9%) 1220.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.431, 674.056), stdev = 316.879
[info]   CI (99.9%): [≈ 0, 1559.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5928.248 ±(99.9%) 21322.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5928.248, 11794.717), stdev = 5537.257
[info]   CI (99.9%): [≈ 0, 27250.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10790.226 ops/s
[info] # Warmup Iteration   2: 112322.894 ops/s
[info] # Warmup Iteration   3: 110454.554 ops/s
[info] # Warmup Iteration   4: 112479.460 ops/s
[info] # Warmup Iteration   5: 112883.651 ops/s
[info] Iteration   1: 111949.175 ops/s
[info]                  ·gc.alloc.rate:                   342.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7192.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 113020.569 ops/s
[info]                  ·gc.alloc.rate:                   345.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7124.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 113311.478 ops/s
[info]                  ·gc.alloc.rate:      346.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112272.397 ops/s
[info]                  ·gc.alloc.rate:                   343.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7171.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 113003.538 ops/s
[info]                  ·gc.alloc.rate:      345.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           1.000 counts
[info]                  ·gc.time:            2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   112711.431 ±(99.9%) 2207.610 ops/s [Average]
[info]   (min, avg, max) = (111949.175, 112711.431, 113311.478), stdev = 573.309
[info]   CI (99.9%): [110503.821, 114919.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   344.898 ±(99.9%) 6.722 MB/sec [Average]
[info]   (min, avg, max) = (342.596, 344.898, 346.759), stdev = 1.746
[info]   CI (99.9%): [338.176, 351.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.061 ±(99.9%) 0.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.965 ±(99.9%) 1079.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.965, 511.629), stdev = 280.219
[info]   CI (99.9%): [≈ 0, 1385.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   4297.556 ±(99.9%) 15106.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4297.556, 7192.162), stdev = 3923.192
[info]   CI (99.9%): [≈ 0, 19404.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67358.316 ops/s
[info] # Warmup Iteration   2: 100296.639 ops/s
[info] # Warmup Iteration   3: 100626.986 ops/s
[info] # Warmup Iteration   4: 96870.884 ops/s
[info] # Warmup Iteration   5: 100446.360 ops/s
[info] Iteration   1: 100194.753 ops/s
[info]                  ·gc.alloc.rate:      331.029 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 100424.941 ops/s
[info]                  ·gc.alloc.rate:                   331.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8017.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 100309.336 ops/s
[info]                  ·gc.alloc.rate:                   331.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8026.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 100840.326 ops/s
[info]                  ·gc.alloc.rate:      333.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 100098.618 ops/s
[info]                  ·gc.alloc.rate:                   330.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10594.163 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   100373.595 ±(99.9%) 1109.695 ops/s [Average]
[info]   (min, avg, max) = (100098.618, 100373.595, 100840.326), stdev = 288.184
[info]   CI (99.9%): [99263.899, 101483.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   331.618 ±(99.9%) 3.867 MB/sec [Average]
[info]   (min, avg, max) = (330.675, 331.618, 333.264), stdev = 1.004
[info]   CI (99.9%): [327.751, 335.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.327 ±(99.9%) 2.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 1.637), stdev = 0.732
[info]   CI (99.9%): [≈ 0, 3.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.345 ±(99.9%) 1219.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.345, 673.697), stdev = 316.775
[info]   CI (99.9%): [≈ 0, 1559.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5327.737 ±(99.9%) 19159.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5327.737, 10594.163), stdev = 4975.585
[info]   CI (99.9%): [≈ 0, 24486.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108724.152 ops/s
[info] # Warmup Iteration   2: 113237.653 ops/s
[info] # Warmup Iteration   3: 110218.991 ops/s
[info] # Warmup Iteration   4: 115565.088 ops/s
[info] # Warmup Iteration   5: 114811.670 ops/s
[info] Iteration   1: 113040.889 ops/s
[info]                  ·gc.alloc.rate:                   345.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7123.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 115723.169 ops/s
[info]                  ·gc.alloc.rate:      354.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115409.749 ops/s
[info]                  ·gc.alloc.rate:                   353.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6976.699 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 115361.469 ops/s
[info]                  ·gc.alloc.rate:                   352.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6979.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 115735.033 ops/s
[info]                  ·gc.alloc.rate:      354.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   115054.062 ±(99.9%) 4384.200 ops/s [Average]
[info]   (min, avg, max) = (113040.889, 115054.062, 115735.033), stdev = 1138.563
[info]   CI (99.9%): [110669.861, 119438.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   352.040 ±(99.9%) 13.485 MB/sec [Average]
[info]   (min, avg, max) = (345.849, 352.040, 354.133), stdev = 3.502
[info]   CI (99.9%): [338.554, 365.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.927 ±(99.9%) 1078.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.927, 511.574), stdev = 280.185
[info]   CI (99.9%): [≈ 0, 1385.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4215.875 ±(99.9%) 14821.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4215.875, 7123.075), stdev = 3849.005
[info]   CI (99.9%): [≈ 0, 19037.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108205.925 ops/s
[info] # Warmup Iteration   2: 113403.940 ops/s
[info] # Warmup Iteration   3: 116672.008 ops/s
[info] # Warmup Iteration   4: 116371.369 ops/s
[info] # Warmup Iteration   5: 116549.967 ops/s
[info] Iteration   1: 115882.210 ops/s
[info]                  ·gc.alloc.rate:                   263.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6948.406 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 116482.057 ops/s
[info]                  ·gc.alloc.rate:      264.626 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116375.888 ops/s
[info]                  ·gc.alloc.rate:                   264.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6918.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 116811.776 ops/s
[info]                  ·gc.alloc.rate:      265.358 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116371.313 ops/s
[info]                  ·gc.alloc.rate:                   264.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6919.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116384.649 ±(99.9%) 1283.809 ops/s [Average]
[info]   (min, avg, max) = (115882.210, 116384.649, 116811.776), stdev = 333.401
[info]   CI (99.9%): [115100.840, 117668.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   264.397 ±(99.9%) 2.933 MB/sec [Average]
[info]   (min, avg, max) = (263.237, 264.397, 265.358), stdev = 0.762
[info]   CI (99.9%): [261.464, 267.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.076 ±(99.9%) 0.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.378), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.909 ±(99.9%) 1078.828 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.909, 511.550), stdev = 280.168
[info]   CI (99.9%): [≈ 0, 1385.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4157.235 ±(99.9%) 14613.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4157.235, 6948.406), stdev = 3795.038
[info]   CI (99.9%): [≈ 0, 18770.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6417.205 ops/s
[info] # Warmup Iteration   2: 9842.711 ops/s
[info] # Warmup Iteration   3: 9998.630 ops/s
[info] # Warmup Iteration   4: 10039.721 ops/s
[info] # Warmup Iteration   5: 9869.254 ops/s
[info] Iteration   1: 10018.343 ops/s
[info]                  ·gc.alloc.rate:                   1647.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316791.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10038.008 ops/s
[info]                  ·gc.alloc.rate:                   1650.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210916.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10026.142 ops/s
[info]                  ·gc.alloc.rate:                   1649.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317008.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10037.204 ops/s
[info]                  ·gc.alloc.rate:                   1651.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211386.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10045.084 ops/s
[info]                  ·gc.alloc.rate:                   1652.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317400.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10032.956 ±(99.9%) 40.870 ops/s [Average]
[info]   (min, avg, max) = (10018.343, 10032.956, 10045.084), stdev = 10.614
[info]   CI (99.9%): [9992.086, 10073.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1650.227 ±(99.9%) 7.383 MB/sec [Average]
[info]   (min, avg, max) = (1647.446, 1650.227, 1652.365), stdev = 1.917
[info]   CI (99.9%): [1642.844, 1657.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856.041 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (258856.041, 258856.041, 258856.041), stdev = 0.001
[info]   CI (99.9%): [258856.040, 258856.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.186 ±(99.9%) 22.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.186, 13.080), stdev = 5.845
[info]   CI (99.9%): [≈ 0, 29.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1751.104 ±(99.9%) 1421.341 MB/sec [Average]
[info]   (min, avg, max) = (1345.163, 1751.104, 2026.076), stdev = 369.118
[info]   CI (99.9%): [329.763, 3172.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   274700.680 ±(99.9%) 223387.710 B/op [Average]
[info]   (min, avg, max) = (210916.258, 274700.680, 317400.866), stdev = 58013.079
[info]   CI (99.9%): [51312.970, 498088.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4824.339 ops/s
[info] # Warmup Iteration   2: 10298.220 ops/s
[info] # Warmup Iteration   3: 10440.485 ops/s
[info] # Warmup Iteration   4: 10558.989 ops/s
[info] # Warmup Iteration   5: 10487.217 ops/s
[info] Iteration   1: 10549.330 ops/s
[info]                  ·gc.alloc.rate:                   1631.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              243480.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201874.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10519.443 ops/s
[info]                  ·gc.alloc.rate:                   1627.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              243499.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202599.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10506.608 ops/s
[info]                  ·gc.alloc.rate:                   1625.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304595.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10575.096 ops/s
[info]                  ·gc.alloc.rate:                   1636.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201942.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10558.058 ops/s
[info]                  ·gc.alloc.rate:                   1633.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303650.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10541.707 ±(99.9%) 108.365 ops/s [Average]
[info]   (min, avg, max) = (10506.608, 10541.707, 10575.096), stdev = 28.142
[info]   CI (99.9%): [10433.341, 10650.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1630.987 ±(99.9%) 17.078 MB/sec [Average]
[info]   (min, avg, max) = (1625.400, 1630.987, 1636.305), stdev = 4.435
[info]   CI (99.9%): [1613.909, 1648.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243503.063 ±(99.9%) 54.013 B/op [Average]
[info]   (min, avg, max) = (243480.039, 243503.063, 243512.039), stdev = 14.027
[info]   CI (99.9%): [243449.050, 243557.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.217 ±(99.9%) 11.975 B/op [Average]
[info]   (min, avg, max) = (3.103, 6.217, 9.353), stdev = 3.110
[info]   CI (99.9%): [≈ 0, 18.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1626.914 ±(99.9%) 1435.098 MB/sec [Average]
[info]   (min, avg, max) = (1352.966, 1626.914, 2037.215), stdev = 372.690
[info]   CI (99.9%): [191.816, 3062.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   242932.670 ±(99.9%) 215099.244 B/op [Average]
[info]   (min, avg, max) = (201874.729, 242932.670, 304595.864), stdev = 55860.591
[info]   CI (99.9%): [27833.425, 458031.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177911.707 ops/s
[info] # Warmup Iteration   2: 181813.272 ops/s
[info] # Warmup Iteration   3: 185278.086 ops/s
[info] # Warmup Iteration   4: 188655.197 ops/s
[info] # Warmup Iteration   5: 188816.996 ops/s
[info] Iteration   1: 188670.761 ops/s
[info]                  ·gc.alloc.rate:                   490.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4267.609 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 189013.821 ops/s
[info]                  ·gc.alloc.rate:                   491.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4259.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 188736.055 ops/s
[info]                  ·gc.alloc.rate:                   491.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5638.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 188468.511 ops/s
[info]                  ·gc.alloc.rate:                   490.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5646.238 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 189218.623 ops/s
[info]                  ·gc.alloc.rate:      492.613 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   188821.554 ±(99.9%) 1137.927 ops/s [Average]
[info]   (min, avg, max) = (188468.511, 188821.554, 189218.623), stdev = 295.516
[info]   CI (99.9%): [187683.627, 189959.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   491.436 ±(99.9%) 3.128 MB/sec [Average]
[info]   (min, avg, max) = (490.582, 491.436, 492.613), stdev = 0.812
[info]   CI (99.9%): [488.308, 494.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.535 ±(99.9%) 4.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.535, 2.627), stdev = 1.169
[info]   CI (99.9%): [≈ 0, 5.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.462 ±(99.9%) 37.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.462, 21.908), stdev = 9.753
[info]   CI (99.9%): [≈ 0, 42.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   475.078 ±(99.9%) 1070.605 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 475.078, 676.255), stdev = 278.033
[info]   CI (99.9%): [≈ 0, 1545.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3962.368 ±(99.9%) 8932.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3962.368, 5646.238), stdev = 2319.782
[info]   CI (99.9%): [≈ 0, 12895.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3002.691 ops/s
[info] # Warmup Iteration   2: 6178.956 ops/s
[info] # Warmup Iteration   3: 6314.001 ops/s
[info] # Warmup Iteration   4: 6374.357 ops/s
[info] # Warmup Iteration   5: 6110.880 ops/s
[info] Iteration   1: 6373.578 ops/s
[info]                  ·gc.alloc.rate:                   1618.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              399592.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501260.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6382.195 ops/s
[info]                  ·gc.alloc.rate:                   1620.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              399592.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334055.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6376.038 ops/s
[info]                  ·gc.alloc.rate:                   1618.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              399592.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 502007.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6376.453 ops/s
[info]                  ·gc.alloc.rate:                   1618.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              399592.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334893.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6376.114 ops/s
[info]                  ·gc.alloc.rate:                   1618.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              399592.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335057.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6376.875 ±(99.9%) 12.272 ops/s [Average]
[info]   (min, avg, max) = (6373.578, 6376.875, 6382.195), stdev = 3.187
[info]   CI (99.9%): [6364.604, 6389.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1618.961 ±(99.9%) 3.854 MB/sec [Average]
[info]   (min, avg, max) = (1618.018, 1618.961, 1620.670), stdev = 1.001
[info]   CI (99.9%): [1615.108, 1622.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399592.065 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (399592.064, 399592.065, 399592.069), stdev = 0.002
[info]   CI (99.9%): [399592.056, 399592.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.167 ±(99.9%) 25.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.167, 15.415), stdev = 6.700
[info]   CI (99.9%): [≈ 0, 31.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626.410 ±(99.9%) 1424.496 MB/sec [Average]
[info]   (min, avg, max) = (1354.868, 1626.410, 2033.613), stdev = 369.937
[info]   CI (99.9%): [201.914, 3050.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   401454.998 ±(99.9%) 352147.916 B/op [Average]
[info]   (min, avg, max) = (334055.976, 401454.998, 502007.610), stdev = 91451.696
[info]   CI (99.9%): [49307.082, 753602.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17517.908 ops/s
[info] # Warmup Iteration   2: 25574.154 ops/s
[info] # Warmup Iteration   3: 26297.914 ops/s
[info] # Warmup Iteration   4: 26369.697 ops/s
[info] # Warmup Iteration   5: 26011.357 ops/s
[info] Iteration   1: 26375.476 ops/s
[info]                  ·gc.alloc.rate:                   1366.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80176.572 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26425.180 ops/s
[info]                  ·gc.alloc.rate:                   1369.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80024.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 26388.075 ops/s
[info]                  ·gc.alloc.rate:                   1367.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80196.675 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26414.430 ops/s
[info]                  ·gc.alloc.rate:                   1368.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80177.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 26417.996 ops/s
[info]                  ·gc.alloc.rate:                   1369.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80244.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   26404.231 ±(99.9%) 82.142 ops/s [Average]
[info]   (min, avg, max) = (26375.476, 26404.231, 26425.180), stdev = 21.332
[info]   CI (99.9%): [26322.090, 26486.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1368.345 ±(99.9%) 4.392 MB/sec [Average]
[info]   (min, avg, max) = (1366.824, 1368.345, 1369.498), stdev = 1.141
[info]   CI (99.9%): [1363.953, 1372.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81568.015, 81568.016, 81568.017), stdev = 0.001
[info]   CI (99.9%): [81568.014, 81568.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.737 ±(99.9%) 7.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.737, 4.961), stdev = 2.075
[info]   CI (99.9%): [≈ 0, 9.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1344.792 ±(99.9%) 5.455 MB/sec [Average]
[info]   (min, avg, max) = (1343.507, 1344.792, 1346.872), stdev = 1.417
[info]   CI (99.9%): [1339.337, 1350.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   80163.988 ±(99.9%) 317.750 B/op [Average]
[info]   (min, avg, max) = (80024.889, 80163.988, 80244.519), stdev = 82.519
[info]   CI (99.9%): [79846.238, 80481.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:23:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16507.132 ops/s
[info] # Warmup Iteration   2: 31024.653 ops/s
[info] # Warmup Iteration   3: 31071.295 ops/s
[info] # Warmup Iteration   4: 31324.945 ops/s
[info] # Warmup Iteration   5: 31268.191 ops/s
[info] Iteration   1: 31266.945 ops/s
[info]                  ·gc.alloc.rate:                   1528.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68067.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 31235.272 ops/s
[info]                  ·gc.alloc.rate:                   1527.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102336.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31275.790 ops/s
[info]                  ·gc.alloc.rate:                   1528.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68215.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31309.035 ops/s
[info]                  ·gc.alloc.rate:                   1530.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68193.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 31293.208 ops/s
[info]                  ·gc.alloc.rate:                   1529.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68262.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   31276.050 ±(99.9%) 107.685 ops/s [Average]
[info]   (min, avg, max) = (31235.272, 31276.050, 31309.035), stdev = 27.965
[info]   CI (99.9%): [31168.366, 31383.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1528.936 ±(99.9%) 4.170 MB/sec [Average]
[info]   (min, avg, max) = (1527.456, 1528.936, 1530.308), stdev = 1.083
[info]   CI (99.9%): [1524.766, 1533.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (76944.013, 76944.013, 76944.014), stdev = 0.001
[info]   CI (99.9%): [76944.011, 76944.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.143 ±(99.9%) 2.863 B/op [Average]
[info]   (min, avg, max) = (2.093, 3.143, 4.196), stdev = 0.743
[info]   CI (99.9%): [0.281, 6.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1490.479 ±(99.9%) 1164.705 MB/sec [Average]
[info]   (min, avg, max) = (1352.184, 1490.479, 2031.544), stdev = 302.470
[info]   CI (99.9%): [325.774, 2655.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75015.271 ±(99.9%) 58812.598 B/op [Average]
[info]   (min, avg, max) = (68067.577, 75015.271, 102336.936), stdev = 15273.445
[info]   CI (99.9%): [16202.673, 133827.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 337736.564 ops/s
[info] # Warmup Iteration   2: 339183.880 ops/s
[info] # Warmup Iteration   3: 358845.233 ops/s
[info] # Warmup Iteration   4: 352978.282 ops/s
[info] # Warmup Iteration   5: 360644.080 ops/s
[info] Iteration   1: 363176.363 ops/s
[info]                  ·gc.alloc.rate:                   802.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2930.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 363038.335 ops/s
[info]                  ·gc.alloc.rate:                   802.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2922.594 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 361117.880 ops/s
[info]                  ·gc.alloc.rate:                   798.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2938.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 360970.973 ops/s
[info]                  ·gc.alloc.rate:                   798.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5872.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 361079.297 ops/s
[info]                  ·gc.alloc.rate:                   798.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2935.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   361876.570 ±(99.9%) 4335.405 ops/s [Average]
[info]   (min, avg, max) = (360970.973, 361876.570, 363176.363), stdev = 1125.891
[info]   CI (99.9%): [357541.165, 366211.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   800.098 ±(99.9%) 9.607 MB/sec [Average]
[info]   (min, avg, max) = (798.061, 800.098, 802.974), stdev = 2.495
[info]   CI (99.9%): [790.490, 809.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.127 ±(99.9%) 0.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.545), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.907 ±(99.9%) 1157.820 MB/sec [Average]
[info]   (min, avg, max) = (673.383, 808.907, 1346.780), stdev = 300.682
[info]   CI (99.9%): [≈ 0, 1966.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3519.824 ±(99.9%) 5064.863 B/op [Average]
[info]   (min, avg, max) = (2922.594, 3519.824, 5872.732), stdev = 1315.329
[info]   CI (99.9%): [≈ 0, 8584.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380111.993 ops/s
[info] # Warmup Iteration   2: 401483.778 ops/s
[info] # Warmup Iteration   3: 410962.360 ops/s
[info] # Warmup Iteration   4: 410885.711 ops/s
[info] # Warmup Iteration   5: 410801.962 ops/s
[info] Iteration   1: 410776.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 411013.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 410656.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 410915.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 411428.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   410958.093 ±(99.9%) 1139.102 ops/s [Average]
[info]   (min, avg, max) = (410656.944, 410958.093, 411428.569), stdev = 295.821
[info]   CI (99.9%): [409818.990, 412097.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19696.717 ops/s
[info] # Warmup Iteration   2: 28245.596 ops/s
[info] # Warmup Iteration   3: 28688.618 ops/s
[info] # Warmup Iteration   4: 28838.642 ops/s
[info] # Warmup Iteration   5: 28818.726 ops/s
[info] Iteration   1: 28857.030 ops/s
[info]                  ·gc.alloc.rate:                   1518.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73024.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28872.411 ops/s
[info]                  ·gc.alloc.rate:                   1519.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73020.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28905.109 ops/s
[info]                  ·gc.alloc.rate:                   1521.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73014.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28903.015 ops/s
[info]                  ·gc.alloc.rate:                   1520.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109692.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28905.104 ops/s
[info]                  ·gc.alloc.rate:                   1520.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73245.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28888.534 ±(99.9%) 86.349 ops/s [Average]
[info]   (min, avg, max) = (28857.030, 28888.534, 28905.109), stdev = 22.425
[info]   CI (99.9%): [28802.185, 28974.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1520.206 ±(99.9%) 5.050 MB/sec [Average]
[info]   (min, avg, max) = (1518.495, 1520.206, 1521.532), stdev = 1.311
[info]   CI (99.9%): [1515.156, 1525.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82824.014, 82824.014, 82824.015), stdev = 0.001
[info]   CI (99.9%): [82824.012, 82824.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.814 ±(99.9%) 7.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.814, 4.534), stdev = 1.897
[info]   CI (99.9%): [≈ 0, 9.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1475.771 ±(99.9%) 1159.286 MB/sec [Average]
[info]   (min, avg, max) = (1338.834, 1475.771, 2014.310), stdev = 301.063
[info]   CI (99.9%): [316.485, 2635.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80399.663 ±(99.9%) 63057.109 B/op [Average]
[info]   (min, avg, max) = (73014.753, 80399.663, 109692.940), stdev = 16375.731
[info]   CI (99.9%): [17342.554, 143456.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83791.511 ops/s
[info] # Warmup Iteration   2: 96565.587 ops/s
[info] # Warmup Iteration   3: 95189.663 ops/s
[info] # Warmup Iteration   4: 97571.120 ops/s
[info] # Warmup Iteration   5: 96980.051 ops/s
[info] Iteration   1: 96928.949 ops/s
[info]                  ·gc.alloc.rate:                   1579.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32712.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 96784.045 ops/s
[info]                  ·gc.alloc.rate:                   1576.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21853.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 97112.297 ops/s
[info]                  ·gc.alloc.rate:                   1581.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32699.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 97404.108 ops/s
[info]                  ·gc.alloc.rate:                   1586.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21774.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 94841.656 ops/s
[info]                  ·gc.alloc.rate:                   1545.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22384.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   96614.211 ±(99.9%) 3918.341 ops/s [Average]
[info]   (min, avg, max) = (94841.656, 96614.211, 97404.108), stdev = 1017.581
[info]   CI (99.9%): [92695.870, 100532.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1573.986 ±(99.9%) 63.638 MB/sec [Average]
[info]   (min, avg, max) = (1545.106, 1573.986, 1586.546), stdev = 16.527
[info]   CI (99.9%): [1510.348, 1637.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.005), stdev = 0.001
[info]   CI (99.9%): [25640.004, 25640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.611 ±(99.9%) 2.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.611, 1.349), stdev = 0.604
[info]   CI (99.9%): [≈ 0, 2.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.579 ±(99.9%) 1411.979 MB/sec [Average]
[info]   (min, avg, max) = (1344.100, 1614.579, 2017.357), stdev = 366.686
[info]   CI (99.9%): [202.600, 3026.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26284.921 ±(99.9%) 22588.662 B/op [Average]
[info]   (min, avg, max) = (21774.027, 26284.921, 32712.231), stdev = 5866.204
[info]   CI (99.9%): [3696.259, 48873.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36079.966 ops/s
[info] # Warmup Iteration   2: 503581.235 ops/s
[info] # Warmup Iteration   3: 506773.473 ops/s
[info] # Warmup Iteration   4: 509332.888 ops/s
[info] # Warmup Iteration   5: 517760.249 ops/s
[info] Iteration   1: 505759.748 ops/s
[info]                  ·gc.alloc.rate:                   524.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1592.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 517702.947 ops/s
[info]                  ·gc.alloc.rate:                   536.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2048.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 518910.658 ops/s
[info]                  ·gc.alloc.rate:      538.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 517217.834 ops/s
[info]                  ·gc.alloc.rate:                   536.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2050.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 517033.976 ops/s
[info]                  ·gc.alloc.rate:                   536.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2046.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   515325.033 ±(99.9%) 20781.801 ops/s [Average]
[info]   (min, avg, max) = (505759.748, 515325.033, 518910.658), stdev = 5396.968
[info]   CI (99.9%): [494543.231, 536106.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   534.368 ±(99.9%) 21.358 MB/sec [Average]
[info]   (min, avg, max) = (524.545, 534.368, 538.080), stdev = 5.546
[info]   CI (99.9%): [513.010, 555.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.504 ±(99.9%) 4.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.483), stdev = 1.107
[info]   CI (99.9%): [≈ 0, 4.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.533 ±(99.9%) 12.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.533, 7.549), stdev = 3.364
[info]   CI (99.9%): [≈ 0, 14.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.265 ±(99.9%) 1122.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.265, 673.842), stdev = 291.524
[info]   CI (99.9%): [≈ 0, 1628.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1547.340 ±(99.9%) 3416.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1547.340, 2050.280), stdev = 887.260
[info]   CI (99.9%): [≈ 0, 4963.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187247.262 ops/s
[info] # Warmup Iteration   2: 283437.540 ops/s
[info] # Warmup Iteration   3: 283955.960 ops/s
[info] # Warmup Iteration   4: 287891.409 ops/s
[info] # Warmup Iteration   5: 287018.805 ops/s
[info] Iteration   1: 287053.427 ops/s
[info]                  ·gc.alloc.rate:                   405.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2805.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 287413.889 ops/s
[info]                  ·gc.alloc.rate:                   406.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2801.543 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 287901.661 ops/s
[info]                  ·gc.alloc.rate:      406.760 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 287087.329 ops/s
[info]                  ·gc.alloc.rate:                   405.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3693.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 286966.056 ops/s
[info]                  ·gc.alloc.rate:                   405.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3695.449 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   287284.473 ±(99.9%) 1480.506 ops/s [Average]
[info]   (min, avg, max) = (286966.056, 287284.473, 287901.661), stdev = 384.483
[info]   CI (99.9%): [285803.967, 288764.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   405.894 ±(99.9%) 2.111 MB/sec [Average]
[info]   (min, avg, max) = (405.418, 405.894, 406.760), stdev = 0.548
[info]   CI (99.9%): [403.782, 408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.137 ±(99.9%) 0.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.571), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.091 ±(99.9%) 1067.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.091, 673.729), stdev = 277.149
[info]   CI (99.9%): [≈ 0, 1541.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2599.193 ±(99.9%) 5852.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2599.193, 3695.449), stdev = 1519.806
[info]   CI (99.9%): [≈ 0, 8451.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601408.841 ops/s
[info] # Warmup Iteration   2: 623967.851 ops/s
[info] # Warmup Iteration   3: 634855.893 ops/s
[info] # Warmup Iteration   4: 622138.410 ops/s
[info] # Warmup Iteration   5: 633928.073 ops/s
[info] Iteration   1: 636035.192 ops/s
[info]                  ·gc.alloc.rate:      413.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 606628.570 ops/s
[info]                  ·gc.alloc.rate:                   394.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1327.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 634800.605 ops/s
[info]                  ·gc.alloc.rate:                   412.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1268.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 634435.340 ops/s
[info]                  ·gc.alloc.rate:                   412.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1673.914 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 635758.146 ops/s
[info]                  ·gc.alloc.rate:      413.609 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   629531.571 ±(99.9%) 49365.812 ops/s [Average]
[info]   (min, avg, max) = (606628.570, 629531.571, 636035.192), stdev = 12820.145
[info]   CI (99.9%): [580165.758, 678897.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   409.566 ±(99.9%) 32.142 MB/sec [Average]
[info]   (min, avg, max) = (394.652, 409.566, 413.777), stdev = 8.347
[info]   CI (99.9%): [377.424, 441.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.659 ±(99.9%) 5.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.659, 3.264), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.634 ±(99.9%) 13.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.634, 8.096), stdev = 3.613
[info]   CI (99.9%): [≈ 0, 15.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.585 ±(99.9%) 1220.980 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.585, 674.841), stdev = 317.085
[info]   CI (99.9%): [≈ 0, 1560.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   853.930 ±(99.9%) 3060.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 853.930, 1673.914), stdev = 794.775
[info]   CI (99.9%): [≈ 0, 3914.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46057.242 ops/s
[info] # Warmup Iteration   2: 75281.562 ops/s
[info] # Warmup Iteration   3: 74406.662 ops/s
[info] # Warmup Iteration   4: 75975.927 ops/s
[info] # Warmup Iteration   5: 75336.433 ops/s
[info] Iteration   1: 76158.124 ops/s
[info]                  ·gc.alloc.rate:                   3335.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70223.535 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 75213.502 ops/s
[info]                  ·gc.alloc.rate:                   3293.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71156.757 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 76030.055 ops/s
[info]                  ·gc.alloc.rate:                   3329.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70463.998 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 75799.434 ops/s
[info]                  ·gc.alloc.rate:                   3319.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70677.773 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 75986.056 ops/s
[info]                  ·gc.alloc.rate:                   3326.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70532.389 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   75837.434 ±(99.9%) 1431.446 ops/s [Average]
[info]   (min, avg, max) = (75213.502, 75837.434, 76158.124), stdev = 371.742
[info]   CI (99.9%): [74405.988, 77268.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3320.786 ±(99.9%) 62.932 MB/sec [Average]
[info]   (min, avg, max) = (3293.478, 3320.786, 3335.400), stdev = 16.343
[info]   CI (99.9%): [3257.854, 3383.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.005, 68920.005, 68920.006), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.989 ±(99.9%) 1.928 B/op [Average]
[info]   (min, avg, max) = (1.294, 1.989, 2.613), stdev = 0.501
[info]   CI (99.9%): [0.061, 3.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3402.193 ±(99.9%) 10.207 MB/sec [Average]
[info]   (min, avg, max) = (3398.485, 3402.193, 3404.767), stdev = 2.651
[info]   CI (99.9%): [3391.986, 3412.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   70610.890 ±(99.9%) 1334.218 B/op [Average]
[info]   (min, avg, max) = (70223.535, 70610.890, 71156.757), stdev = 346.492
[info]   CI (99.9%): [69276.672, 71945.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188366.064 ops/s
[info] # Warmup Iteration   2: 245829.737 ops/s
[info] # Warmup Iteration   3: 248730.536 ops/s
[info] # Warmup Iteration   4: 249862.312 ops/s
[info] # Warmup Iteration   5: 248527.397 ops/s
[info] Iteration   1: 250111.805 ops/s
[info]                  ·gc.alloc.rate:                   1490.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8442.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 249215.552 ops/s
[info]                  ·gc.alloc.rate:                   1484.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8480.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 249029.674 ops/s
[info]                  ·gc.alloc.rate:                   1483.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8491.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 243406.205 ops/s
[info]                  ·gc.alloc.rate:                   1449.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8695.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 242620.134 ops/s
[info]                  ·gc.alloc.rate:                   1445.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13106.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   246876.674 ±(99.9%) 13713.662 ops/s [Average]
[info]   (min, avg, max) = (242620.134, 246876.674, 250111.805), stdev = 3561.395
[info]   CI (99.9%): [233163.012, 260590.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1470.632 ±(99.9%) 82.207 MB/sec [Average]
[info]   (min, avg, max) = (1445.059, 1470.632, 1490.070), stdev = 21.349
[info]   CI (99.9%): [1388.425, 1552.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9376.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9376.002, 9376.002, 9376.002), stdev = 0.001
[info]   CI (99.9%): [9376.001, 9376.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 0.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 0.538), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 1.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.547 ±(99.9%) 1165.451 MB/sec [Average]
[info]   (min, avg, max) = (1341.639, 1478.547, 2019.965), stdev = 302.664
[info]   CI (99.9%): [313.095, 2643.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9443.240 ±(99.9%) 7893.931 B/op [Average]
[info]   (min, avg, max) = (8442.027, 9443.240, 13106.174), stdev = 2050.029
[info]   CI (99.9%): [1549.309, 17337.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81242.128 ops/s
[info] # Warmup Iteration   2: 1000672.909 ops/s
[info] # Warmup Iteration   3: 979741.634 ops/s
[info] # Warmup Iteration   4: 976518.522 ops/s
[info] # Warmup Iteration   5: 951084.339 ops/s
[info] Iteration   1: 980870.025 ops/s
[info]                  ·gc.alloc.rate:                   533.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 820.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 982724.366 ops/s
[info]                  ·gc.alloc.rate:                   534.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1079.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 983532.150 ops/s
[info]                  ·gc.alloc.rate:      534.907 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 982974.851 ops/s
[info]                  ·gc.alloc.rate:                   534.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1078.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 978738.608 ops/s
[info]                  ·gc.alloc.rate:                   532.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1080.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   981768.000 ±(99.9%) 7571.908 ops/s [Average]
[info]   (min, avg, max) = (978738.608, 981768.000, 983532.150), stdev = 1966.400
[info]   CI (99.9%): [974196.092, 989339.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   534.015 ±(99.9%) 3.974 MB/sec [Average]
[info]   (min, avg, max) = (532.446, 534.015, 534.907), stdev = 1.032
[info]   CI (99.9%): [530.041, 537.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.502 ±(99.9%) 4.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.502, 2.504), stdev = 1.119
[info]   CI (99.9%): [≈ 0, 4.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.804 ±(99.9%) 6.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 4.010), stdev = 1.792
[info]   CI (99.9%): [≈ 0, 7.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.329 ±(99.9%) 1122.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.329, 673.891), stdev = 291.585
[info]   CI (99.9%): [≈ 0, 1629.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   811.931 ±(99.9%) 1800.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 811.931, 1080.839), stdev = 467.507
[info]   CI (99.9%): [≈ 0, 2612.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576898.835 ops/s
[info] # Warmup Iteration   2: 846093.009 ops/s
[info] # Warmup Iteration   3: 857980.800 ops/s
[info] # Warmup Iteration   4: 857489.770 ops/s
[info] # Warmup Iteration   5: 857553.330 ops/s
[info] Iteration   1: 859122.968 ops/s
[info]                  ·gc.alloc.rate:                   676.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1234.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 859072.940 ops/s
[info]                  ·gc.alloc.rate:                   676.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 861141.403 ops/s
[info]                  ·gc.alloc.rate:                   678.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2465.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 860807.440 ops/s
[info]                  ·gc.alloc.rate:                   678.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.628 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 861538.786 ops/s
[info]                  ·gc.alloc.rate:                   678.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1234.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   860336.707 ±(99.9%) 4467.571 ops/s [Average]
[info]   (min, avg, max) = (859072.940, 860336.707, 861538.786), stdev = 1160.214
[info]   CI (99.9%): [855869.137, 864804.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   677.790 ±(99.9%) 3.556 MB/sec [Average]
[info]   (min, avg, max) = (676.724, 677.790, 678.627), stdev = 0.924
[info]   CI (99.9%): [674.233, 681.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.061 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.114), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.715 ±(99.9%) 1160.917 MB/sec [Average]
[info]   (min, avg, max) = (673.989, 809.715, 1349.028), stdev = 301.486
[info]   CI (99.9%): [≈ 0, 1970.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1481.065 ±(99.9%) 2118.253 B/op [Average]
[info]   (min, avg, max) = (1234.525, 1481.065, 2465.120), stdev = 550.104
[info]   CI (99.9%): [≈ 0, 3599.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002707.327 ops/s
[info] # Warmup Iteration   2: 1061761.604 ops/s
[info] # Warmup Iteration   3: 1076871.230 ops/s
[info] # Warmup Iteration   4: 1075262.519 ops/s
[info] # Warmup Iteration   5: 1075522.629 ops/s
[info] Iteration   1: 1084417.927 ops/s
[info]                  ·gc.alloc.rate:                   589.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 742.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1086402.577 ops/s
[info]                  ·gc.alloc.rate:                   590.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.622 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1084622.198 ops/s
[info]                  ·gc.alloc.rate:                   589.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 979.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1082868.068 ops/s
[info]                  ·gc.alloc.rate:                   588.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1081409.279 ops/s
[info]                  ·gc.alloc.rate:                   588.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 979.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1083944.010 ±(99.9%) 7283.623 ops/s [Average]
[info]   (min, avg, max) = (1081409.279, 1083944.010, 1086402.577), stdev = 1891.534
[info]   CI (99.9%): [1076660.386, 1091227.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   589.500 ±(99.9%) 3.812 MB/sec [Average]
[info]   (min, avg, max) = (588.229, 589.500, 590.817), stdev = 0.990
[info]   CI (99.9%): [585.688, 593.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.665 ±(99.9%) 5.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.264), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.964 ±(99.9%) 8.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.964, 4.729), stdev = 2.105
[info]   CI (99.9%): [≈ 0, 9.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.340 ±(99.9%) 279.353 MB/sec [Average]
[info]   (min, avg, max) = (511.575, 641.340, 674.761), stdev = 72.547
[info]   CI (99.9%): [361.987, 920.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   931.296 ±(99.9%) 406.326 B/op [Average]
[info]   (min, avg, max) = (742.537, 931.296, 979.227), stdev = 105.522
[info]   CI (99.9%): [524.969, 1337.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1019575.586 ops/s
[info] # Warmup Iteration   2: 1076728.172 ops/s
[info] # Warmup Iteration   3: 1083195.246 ops/s
[info] # Warmup Iteration   4: 1085608.696 ops/s
[info] # Warmup Iteration   5: 1083409.325 ops/s
[info] Iteration   1: 1085956.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1085959.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1086192.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1086241.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1086156.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1086101.196 ±(99.9%) 517.497 ops/s [Average]
[info]   (min, avg, max) = (1085956.063, 1086101.196, 1086241.015), stdev = 134.392
[info]   CI (99.9%): [1085583.699, 1086618.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21862.011 ops/s
[info] # Warmup Iteration   2: 33413.587 ops/s
[info] # Warmup Iteration   3: 33340.853 ops/s
[info] # Warmup Iteration   4: 33823.442 ops/s
[info] # Warmup Iteration   5: 33887.208 ops/s
[info] Iteration   1: 33995.521 ops/s
[info]                  ·gc.alloc.rate:                   1845.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62016.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34103.758 ops/s
[info]                  ·gc.alloc.rate:                   1850.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92853.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34030.587 ops/s
[info]                  ·gc.alloc.rate:                   1846.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93209.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34019.834 ops/s
[info]                  ·gc.alloc.rate:                   1846.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93452.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34044.678 ops/s
[info]                  ·gc.alloc.rate:                   1847.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62344.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34038.875 ±(99.9%) 155.872 ops/s [Average]
[info]   (min, avg, max) = (33995.521, 34038.875, 34103.758), stdev = 40.479
[info]   CI (99.9%): [33883.003, 34194.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1847.203 ±(99.9%) 8.460 MB/sec [Average]
[info]   (min, avg, max) = (1845.176, 1847.203, 1850.905), stdev = 2.197
[info]   CI (99.9%): [1838.743, 1855.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85416.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85416.012, 85416.012, 85416.013), stdev = 0.001
[info]   CI (99.9%): [85416.011, 85416.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.118 ±(99.9%) 6.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.118, 3.852), stdev = 1.723
[info]   CI (99.9%): [≈ 0, 8.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1746.984 ±(99.9%) 1416.682 MB/sec [Average]
[info]   (min, avg, max) = (1339.695, 1746.984, 2019.875), stdev = 367.908
[info]   CI (99.9%): [330.303, 3163.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80775.207 ±(99.9%) 65369.011 B/op [Average]
[info]   (min, avg, max) = (62016.538, 80775.207, 93452.264), stdev = 16976.125
[info]   CI (99.9%): [15406.196, 146144.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87543.292 ops/s
[info] # Warmup Iteration   2: 119822.395 ops/s
[info] # Warmup Iteration   3: 120800.090 ops/s
[info] # Warmup Iteration   4: 121219.918 ops/s
[info] # Warmup Iteration   5: 121075.677 ops/s
[info] Iteration   1: 121290.162 ops/s
[info]                  ·gc.alloc.rate:                   1494.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17408.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 121338.808 ops/s
[info]                  ·gc.alloc.rate:                   1495.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17418.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 121779.458 ops/s
[info]                  ·gc.alloc.rate:                   1501.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17363.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 121430.440 ops/s
[info]                  ·gc.alloc.rate:                   1496.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17432.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 120491.204 ops/s
[info]                  ·gc.alloc.rate:                   1484.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26390.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   121266.014 ±(99.9%) 1823.346 ops/s [Average]
[info]   (min, avg, max) = (120491.204, 121266.014, 121779.458), stdev = 473.517
[info]   CI (99.9%): [119442.669, 123089.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1494.704 ±(99.9%) 23.095 MB/sec [Average]
[info]   (min, avg, max) = (1484.957, 1494.704, 1501.296), stdev = 5.998
[info]   CI (99.9%): [1471.610, 1517.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19400.003, 19400.003, 19400.004), stdev = 0.001
[info]   CI (99.9%): [19400.003, 19400.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.595 ±(99.9%) 1.151 B/op [Average]
[info]   (min, avg, max) = (0.270, 0.595, 1.088), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.603 ±(99.9%) 1165.510 MB/sec [Average]
[info]   (min, avg, max) = (1341.386, 1478.603, 2020.047), stdev = 302.679
[info]   CI (99.9%): [313.093, 2644.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19202.766 ±(99.9%) 15472.664 B/op [Average]
[info]   (min, avg, max) = (17363.922, 19202.766, 26390.598), stdev = 4018.202
[info]   CI (99.9%): [3730.102, 34675.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110584.677 ops/s
[info] # Warmup Iteration   2: 186793.131 ops/s
[info] # Warmup Iteration   3: 187970.993 ops/s
[info] # Warmup Iteration   4: 188633.069 ops/s
[info] # Warmup Iteration   5: 188224.866 ops/s
[info] Iteration   1: 184997.448 ops/s
[info]                  ·gc.alloc.rate:                   983.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5743.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 188187.588 ops/s
[info]                  ·gc.alloc.rate:                   1000.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11298.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 184986.543 ops/s
[info]                  ·gc.alloc.rate:                   983.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5752.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 188279.786 ops/s
[info]                  ·gc.alloc.rate:                   1001.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11294.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 188294.858 ops/s
[info]                  ·gc.alloc.rate:                   1001.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5657.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   186949.245 ±(99.9%) 6881.839 ops/s [Average]
[info]   (min, avg, max) = (184986.543, 186949.245, 188294.858), stdev = 1787.192
[info]   CI (99.9%): [180067.405, 193831.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   994.028 ±(99.9%) 37.022 MB/sec [Average]
[info]   (min, avg, max) = (983.419, 994.028, 1001.513), stdev = 9.614
[info]   CI (99.9%): [957.007, 1031.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.244 ±(99.9%) 1.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 0.522), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.144 ±(99.9%) 1424.397 MB/sec [Average]
[info]   (min, avg, max) = (675.148, 946.144, 1351.796), stdev = 369.911
[info]   CI (99.9%): [≈ 0, 2370.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7949.431 ±(99.9%) 11767.141 B/op [Average]
[info]   (min, avg, max) = (5657.023, 7949.431, 11298.734), stdev = 3055.889
[info]   CI (99.9%): [≈ 0, 19716.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245512.222 ops/s
[info] # Warmup Iteration   2: 268082.558 ops/s
[info] # Warmup Iteration   3: 268259.861 ops/s
[info] # Warmup Iteration   4: 269790.017 ops/s
[info] # Warmup Iteration   5: 270369.151 ops/s
[info] Iteration   1: 270148.439 ops/s
[info]                  ·gc.alloc.rate:                   702.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3931.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 270889.288 ops/s
[info]                  ·gc.alloc.rate:                   704.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3920.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 271048.441 ops/s
[info]                  ·gc.alloc.rate:                   705.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3906.550 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 270885.760 ops/s
[info]                  ·gc.alloc.rate:                   704.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3908.972 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 271096.077 ops/s
[info]                  ·gc.alloc.rate:                   705.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3902.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   270813.601 ±(99.9%) 1476.759 ops/s [Average]
[info]   (min, avg, max) = (270148.439, 270813.601, 271096.077), stdev = 383.510
[info]   CI (99.9%): [269336.842, 272290.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   704.736 ±(99.9%) 3.981 MB/sec [Average]
[info]   (min, avg, max) = (702.956, 704.736, 705.501), stdev = 1.034
[info]   CI (99.9%): [700.754, 708.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.249), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.883 ±(99.9%) 32.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.883, 18.934), stdev = 8.414
[info]   CI (99.9%): [≈ 0, 36.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.392 ±(99.9%) 4.748 MB/sec [Average]
[info]   (min, avg, max) = (672.087, 673.392, 674.746), stdev = 1.233
[info]   CI (99.9%): [668.643, 678.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3913.840 ±(99.9%) 45.669 B/op [Average]
[info]   (min, avg, max) = (3902.006, 3913.840, 3931.219), stdev = 11.860
[info]   CI (99.9%): [3868.171, 3959.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34302.387 ops/s
[info] # Warmup Iteration   2: 70079.237 ops/s
[info] # Warmup Iteration   3: 69355.625 ops/s
[info] # Warmup Iteration   4: 71298.518 ops/s
[info] # Warmup Iteration   5: 70970.122 ops/s
[info] Iteration   1: 71182.391 ops/s
[info]                  ·gc.alloc.rate:                   3005.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60031.403 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 71299.620 ops/s
[info]                  ·gc.alloc.rate:                   3010.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59995.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 71043.659 ops/s
[info]                  ·gc.alloc.rate:                   2999.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75335.733 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71218.482 ops/s
[info]                  ·gc.alloc.rate:                   3006.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60164.679 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71096.286 ops/s
[info]                  ·gc.alloc.rate:                   3001.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75355.432 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   71168.088 ±(99.9%) 388.338 ops/s [Average]
[info]   (min, avg, max) = (71043.659, 71168.088, 71299.620), stdev = 100.850
[info]   CI (99.9%): [70779.750, 71556.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3004.554 ±(99.9%) 17.596 MB/sec [Average]
[info]   (min, avg, max) = (2999.091, 3004.554, 3010.656), stdev = 4.569
[info]   CI (99.9%): [2986.958, 3022.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.006), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.473 ±(99.9%) 1.946 B/op [Average]
[info]   (min, avg, max) = (0.921, 1.473, 2.304), stdev = 0.505
[info]   CI (99.9%): [≈ 0, 3.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2991.869 ±(99.9%) 1441.242 MB/sec [Average]
[info]   (min, avg, max) = (2714.897, 2991.869, 3403.500), stdev = 374.286
[info]   CI (99.9%): [1550.627, 4433.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66176.468 ±(99.9%) 32231.657 B/op [Average]
[info]   (min, avg, max) = (59995.093, 66176.468, 75355.432), stdev = 8370.459
[info]   CI (99.9%): [33944.811, 98408.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134607.870 ops/s
[info] # Warmup Iteration   2: 176579.766 ops/s
[info] # Warmup Iteration   3: 175836.351 ops/s
[info] # Warmup Iteration   4: 176029.167 ops/s
[info] # Warmup Iteration   5: 175184.879 ops/s
[info] Iteration   1: 176999.340 ops/s
[info]                  ·gc.alloc.rate:                   615.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4548.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 177085.121 ops/s
[info]                  ·gc.alloc.rate:                   615.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5991.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 177188.045 ops/s
[info]                  ·gc.alloc.rate:                   615.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5987.772 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177223.751 ops/s
[info]                  ·gc.alloc.rate:                   616.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5968.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177312.747 ops/s
[info]                  ·gc.alloc.rate:                   616.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5965.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   177161.801 ±(99.9%) 469.970 ops/s [Average]
[info]   (min, avg, max) = (176999.340, 177161.801, 177312.747), stdev = 122.050
[info]   CI (99.9%): [176691.830, 177631.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   615.908 ±(99.9%) 1.845 MB/sec [Average]
[info]   (min, avg, max) = (615.324, 615.908, 616.585), stdev = 0.479
[info]   CI (99.9%): [614.063, 617.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.713 ±(99.9%) 5.961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.482), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 6.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.338 ±(99.9%) 52.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.338, 30.951), stdev = 13.760
[info]   CI (99.9%): [≈ 0, 59.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.768 ±(99.9%) 278.230 MB/sec [Average]
[info]   (min, avg, max) = (511.525, 640.768, 674.043), stdev = 72.255
[info]   CI (99.9%): [362.538, 918.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5692.604 ±(99.9%) 2462.219 B/op [Average]
[info]   (min, avg, max) = (4548.931, 5692.604, 5991.423), stdev = 639.431
[info]   CI (99.9%): [3230.384, 8154.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321282.266 ops/s
[info] # Warmup Iteration   2: 490210.099 ops/s
[info] # Warmup Iteration   3: 474023.146 ops/s
[info] # Warmup Iteration   4: 489875.927 ops/s
[info] # Warmup Iteration   5: 490625.561 ops/s
[info] Iteration   1: 483178.906 ops/s
[info]                  ·gc.alloc.rate:                   488.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1666.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 490088.451 ops/s
[info]                  ·gc.alloc.rate:                   495.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2163.819 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 491203.950 ops/s
[info]                  ·gc.alloc.rate:      496.783 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 491557.912 ops/s
[info]                  ·gc.alloc.rate:                   497.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2157.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 491912.300 ops/s
[info]                  ·gc.alloc.rate:                   497.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2158.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   489588.304 ±(99.9%) 14045.769 ops/s [Average]
[info]   (min, avg, max) = (483178.906, 489588.304, 491912.300), stdev = 3647.642
[info]   CI (99.9%): [475542.534, 503634.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   495.177 ±(99.9%) 14.315 MB/sec [Average]
[info]   (min, avg, max) = (488.652, 495.177, 497.591), stdev = 3.718
[info]   CI (99.9%): [480.862, 509.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.120 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.401), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.751 ±(99.9%) 1124.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.751, 674.805), stdev = 291.902
[info]   CI (99.9%): [≈ 0, 1630.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1629.316 ±(99.9%) 3602.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1629.316, 2163.819), stdev = 935.565
[info]   CI (99.9%): [≈ 0, 5231.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459498.704 ops/s
[info] # Warmup Iteration   2: 477230.809 ops/s
[info] # Warmup Iteration   3: 490871.851 ops/s
[info] # Warmup Iteration   4: 490048.755 ops/s
[info] # Warmup Iteration   5: 493071.341 ops/s
[info] Iteration   1: 490676.488 ops/s
[info]                  ·gc.alloc.rate:                   376.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1640.957 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 490254.375 ops/s
[info]                  ·gc.alloc.rate:                   376.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1642.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 491114.601 ops/s
[info]                  ·gc.alloc.rate:      376.868 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 486463.531 ops/s
[info]                  ·gc.alloc.rate:                   373.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1655.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 488625.973 ops/s
[info]                  ·gc.alloc.rate:                   374.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2173.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   489426.994 ±(99.9%) 7335.845 ops/s [Average]
[info]   (min, avg, max) = (486463.531, 489426.994, 491114.601), stdev = 1905.096
[info]   CI (99.9%): [482091.148, 496762.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   375.680 ±(99.9%) 5.503 MB/sec [Average]
[info]   (min, avg, max) = (373.499, 375.680, 376.868), stdev = 1.429
[info]   CI (99.9%): [370.177, 381.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.656 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 3.240), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.114 ±(99.9%) 17.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.114, 10.438), stdev = 4.653
[info]   CI (99.9%): [≈ 0, 20.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.972 ±(99.9%) 989.431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.972, 674.705), stdev = 256.952
[info]   CI (99.9%): [≈ 0, 1431.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1422.415 ±(99.9%) 3185.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1422.415, 2173.581), stdev = 827.319
[info]   CI (99.9%): [≈ 0, 4608.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499558.213 ops/s
[info] # Warmup Iteration   2: 535028.919 ops/s
[info] # Warmup Iteration   3: 536595.819 ops/s
[info] # Warmup Iteration   4: 536729.478 ops/s
[info] # Warmup Iteration   5: 508170.880 ops/s
[info] Iteration   1: 536494.238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 536782.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 538376.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 536350.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 538045.241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   537209.752 ±(99.9%) 3597.185 ops/s [Average]
[info]   (min, avg, max) = (536350.588, 537209.752, 538376.023), stdev = 934.178
[info]   CI (99.9%): [533612.567, 540806.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177160.953 ops/s
[info] # Warmup Iteration   2: 302170.221 ops/s
[info] # Warmup Iteration   3: 302955.647 ops/s
[info] # Warmup Iteration   4: 304120.811 ops/s
[info] # Warmup Iteration   5: 303617.944 ops/s
[info] Iteration   1: 304248.269 ops/s
[info]                  ·gc.alloc.rate:                   838.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3490.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 298184.027 ops/s
[info]                  ·gc.alloc.rate:                   821.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3561.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 304416.985 ops/s
[info]                  ·gc.alloc.rate:                   838.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3492.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 304498.782 ops/s
[info]                  ·gc.alloc.rate:                   838.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3491.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 304086.223 ops/s
[info]                  ·gc.alloc.rate:                   837.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6998.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   303086.857 ±(99.9%) 10571.425 ops/s [Average]
[info]   (min, avg, max) = (298184.027, 303086.857, 304498.782), stdev = 2745.366
[info]   CI (99.9%): [292515.432, 313658.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   834.928 ±(99.9%) 29.326 MB/sec [Average]
[info]   (min, avg, max) = (821.336, 834.928, 838.957), stdev = 7.616
[info]   CI (99.9%): [805.603, 864.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.152 ±(99.9%) 0.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.323), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   810.452 ±(99.9%) 1165.600 MB/sec [Average]
[info]   (min, avg, max) = (674.658, 810.452, 1351.943), stdev = 302.703
[info]   CI (99.9%): [≈ 0, 1976.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4206.905 ±(99.9%) 6011.117 B/op [Average]
[info]   (min, avg, max) = (3490.682, 4206.905, 6998.896), stdev = 1561.068
[info]   CI (99.9%): [≈ 0, 10218.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7428.806 ops/s
[info] # Warmup Iteration   2: 10636.717 ops/s
[info] # Warmup Iteration   3: 10952.941 ops/s
[info] # Warmup Iteration   4: 11016.391 ops/s
[info] # Warmup Iteration   5: 11020.926 ops/s
[info] Iteration   1: 10993.637 ops/s
[info]                  ·gc.alloc.rate:                   1405.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192436.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10991.360 ops/s
[info]                  ·gc.alloc.rate:                   1405.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192518.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10989.229 ops/s
[info]                  ·gc.alloc.rate:                   1405.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192649.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11039.082 ops/s
[info]                  ·gc.alloc.rate:                   1411.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191919.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 11010.228 ops/s
[info]                  ·gc.alloc.rate:                   1407.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192615.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11004.707 ±(99.9%) 80.597 ops/s [Average]
[info]   (min, avg, max) = (10989.229, 11004.707, 11039.082), stdev = 20.931
[info]   CI (99.9%): [10924.110, 11085.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1407.343 ±(99.9%) 10.610 MB/sec [Average]
[info]   (min, avg, max) = (1405.381, 1407.343, 1411.919), stdev = 2.755
[info]   CI (99.9%): [1396.733, 1417.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280.045 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (201280.037, 201280.045, 201280.066), stdev = 0.013
[info]   CI (99.9%): [201279.996, 201280.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.358 ±(99.9%) 28.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.358, 17.880), stdev = 7.420
[info]   CI (99.9%): [≈ 0, 33.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1345.445 ±(99.9%) 5.171 MB/sec [Average]
[info]   (min, avg, max) = (1344.104, 1345.445, 1347.337), stdev = 1.343
[info]   CI (99.9%): [1340.274, 1350.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   192427.619 ±(99.9%) 1140.691 B/op [Average]
[info]   (min, avg, max) = (191919.226, 192427.619, 192649.130), stdev = 296.234
[info]   CI (99.9%): [191286.928, 193568.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5937.297 ops/s
[info] # Warmup Iteration   2: 11020.608 ops/s
[info] # Warmup Iteration   3: 11049.565 ops/s
[info] # Warmup Iteration   4: 11210.233 ops/s
[info] # Warmup Iteration   5: 11166.165 ops/s
[info] Iteration   1: 10969.505 ops/s
[info]                  ·gc.alloc.rate:                   1300.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193973.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 11212.641 ops/s
[info]                  ·gc.alloc.rate:                   1329.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189910.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11224.798 ops/s
[info]                  ·gc.alloc.rate:                   1330.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189877.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11228.074 ops/s
[info]                  ·gc.alloc.rate:                   1330.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190013.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11219.769 ops/s
[info]                  ·gc.alloc.rate:                   1329.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95112.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11170.957 ±(99.9%) 434.220 ops/s [Average]
[info]   (min, avg, max) = (10969.505, 11170.957, 11228.074), stdev = 112.766
[info]   CI (99.9%): [10736.737, 11605.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1324.145 ±(99.9%) 51.533 MB/sec [Average]
[info]   (min, avg, max) = (1300.241, 1324.145, 1330.977), stdev = 13.383
[info]   CI (99.9%): [1272.612, 1375.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.039 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (186576.036, 186576.039, 186576.048), stdev = 0.005
[info]   CI (99.9%): [186576.018, 186576.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.712 ±(99.9%) 17.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.712, 8.960), stdev = 4.476
[info]   CI (99.9%): [≈ 0, 21.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.441 ±(99.9%) 1163.553 MB/sec [Average]
[info]   (min, avg, max) = (677.907, 1218.441, 1355.500), stdev = 302.171
[info]   CI (99.9%): [54.888, 2381.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   171777.623 ±(99.9%) 165164.446 B/op [Average]
[info]   (min, avg, max) = (95112.748, 171777.623, 193973.657), stdev = 42892.682
[info]   CI (99.9%): [6613.177, 336942.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:16:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186046.038 ops/s
[info] # Warmup Iteration   2: 202961.422 ops/s
[info] # Warmup Iteration   3: 203217.060 ops/s
[info] # Warmup Iteration   4: 204503.386 ops/s
[info] # Warmup Iteration   5: 204852.766 ops/s
[info] Iteration   1: 204342.433 ops/s
[info]                  ·gc.alloc.rate:                   1329.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10374.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 200515.864 ops/s
[info]                  ·gc.alloc.rate:                   1304.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10575.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 204561.818 ops/s
[info]                  ·gc.alloc.rate:                   1330.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10371.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 204526.971 ops/s
[info]                  ·gc.alloc.rate:                   1330.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10380.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 204505.625 ops/s
[info]                  ·gc.alloc.rate:                   1330.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10390.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   203690.542 ±(99.9%) 6841.435 ops/s [Average]
[info]   (min, avg, max) = (200515.864, 203690.542, 204561.818), stdev = 1776.699
[info]   CI (99.9%): [196849.107, 210531.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1325.179 ±(99.9%) 44.088 MB/sec [Average]
[info]   (min, avg, max) = (1304.723, 1325.179, 1330.840), stdev = 11.449
[info]   CI (99.9%): [1281.091, 1369.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.289 ±(99.9%) 1.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.289, 0.641), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1348.163 ±(99.9%) 4.957 MB/sec [Average]
[info]   (min, avg, max) = (1346.733, 1348.163, 1350.060), stdev = 1.287
[info]   CI (99.9%): [1343.207, 1353.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10418.215 ±(99.9%) 338.877 B/op [Average]
[info]   (min, avg, max) = (10371.005, 10418.215, 10575.066), stdev = 88.005
[info]   CI (99.9%): [10079.338, 10757.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4647.930 ops/s
[info] # Warmup Iteration   2: 8786.111 ops/s
[info] # Warmup Iteration   3: 9053.381 ops/s
[info] # Warmup Iteration   4: 9090.511 ops/s
[info] # Warmup Iteration   5: 9064.631 ops/s
[info] Iteration   1: 9088.713 ops/s
[info]                  ·gc.alloc.rate:                   1633.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              282856.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234343.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9109.940 ops/s
[info]                  ·gc.alloc.rate:                   1637.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              282856.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233950.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8981.084 ops/s
[info]                  ·gc.alloc.rate:                   1614.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              282862.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356373.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9115.017 ops/s
[info]                  ·gc.alloc.rate:                   1637.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              282856.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234282.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9060.540 ops/s
[info]                  ·gc.alloc.rate:                   1628.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              282856.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353806.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9071.059 ±(99.9%) 210.573 ops/s [Average]
[info]   (min, avg, max) = (8981.084, 9071.059, 9115.017), stdev = 54.685
[info]   CI (99.9%): [8860.486, 9281.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1630.338 ±(99.9%) 36.818 MB/sec [Average]
[info]   (min, avg, max) = (1614.699, 1630.338, 1637.915), stdev = 9.562
[info]   CI (99.9%): [1593.519, 1667.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282857.332 ±(99.9%) 11.080 B/op [Average]
[info]   (min, avg, max) = (282856.045, 282857.332, 282862.479), stdev = 2.877
[info]   CI (99.9%): [282846.252, 282868.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.513 ±(99.9%) 28.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.513, 18.078), stdev = 7.410
[info]   CI (99.9%): [≈ 0, 35.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1627.041 ±(99.9%) 1435.751 MB/sec [Average]
[info]   (min, avg, max) = (1353.331, 1627.041, 2036.640), stdev = 372.860
[info]   CI (99.9%): [191.289, 3062.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   282551.080 ±(99.9%) 255008.442 B/op [Average]
[info]   (min, avg, max) = (233950.286, 282551.080, 356373.431), stdev = 66224.882
[info]   CI (99.9%): [27542.639, 537559.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16300.065 ops/s
[info] # Warmup Iteration   2: 22287.558 ops/s
[info] # Warmup Iteration   3: 22805.190 ops/s
[info] # Warmup Iteration   4: 22978.773 ops/s
[info] # Warmup Iteration   5: 22717.419 ops/s
[info] Iteration   1: 22949.481 ops/s
[info]                  ·gc.alloc.rate:                   963.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46138.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 23053.212 ops/s
[info]                  ·gc.alloc.rate:                   967.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91819.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23116.817 ops/s
[info]                  ·gc.alloc.rate:                   970.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45759.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23034.124 ops/s
[info]                  ·gc.alloc.rate:                   967.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91845.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22572.784 ops/s
[info]                  ·gc.alloc.rate:                   947.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46864.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22945.284 ±(99.9%) 834.219 ops/s [Average]
[info]   (min, avg, max) = (22572.784, 22945.284, 23116.817), stdev = 216.644
[info]   CI (99.9%): [22111.064, 23779.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   963.371 ±(99.9%) 34.711 MB/sec [Average]
[info]   (min, avg, max) = (947.874, 963.371, 970.393), stdev = 9.014
[info]   CI (99.9%): [928.660, 998.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080.176 ±(99.9%) 1.361 B/op [Average]
[info]   (min, avg, max) = (66080.018, 66080.176, 66080.808), stdev = 0.353
[info]   CI (99.9%): [66078.816, 66081.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.706 ±(99.9%) 9.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.706, 5.685), stdev = 2.543
[info]   CI (99.9%): [≈ 0, 11.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   941.246 ±(99.9%) 1418.065 MB/sec [Average]
[info]   (min, avg, max) = (671.989, 941.246, 1344.796), stdev = 368.267
[info]   CI (99.9%): [≈ 0, 2359.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   64485.476 ±(99.9%) 96140.086 B/op [Average]
[info]   (min, avg, max) = (45759.837, 64485.476, 91845.409), stdev = 24967.275
[info]   CI (99.9%): [≈ 0, 160625.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14401.603 ops/s
[info] # Warmup Iteration   2: 26599.888 ops/s
[info] # Warmup Iteration   3: 26691.299 ops/s
[info] # Warmup Iteration   4: 26903.597 ops/s
[info] # Warmup Iteration   5: 26874.568 ops/s
[info] Iteration   1: 26938.539 ops/s
[info]                  ·gc.alloc.rate:                   1036.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39442.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 26882.539 ops/s
[info]                  ·gc.alloc.rate:                   1034.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79126.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26897.470 ops/s
[info]                  ·gc.alloc.rate:                   1034.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39559.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 26813.127 ops/s
[info]                  ·gc.alloc.rate:                   1031.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79408.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26936.092 ops/s
[info]                  ·gc.alloc.rate:                   1036.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39543.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   26893.553 ±(99.9%) 196.706 ops/s [Average]
[info]   (min, avg, max) = (26813.127, 26893.553, 26938.539), stdev = 51.084
[info]   CI (99.9%): [26696.848, 27090.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1034.516 ±(99.9%) 7.366 MB/sec [Average]
[info]   (min, avg, max) = (1031.498, 1034.516, 1036.268), stdev = 1.913
[info]   CI (99.9%): [1027.150, 1041.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.016 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (60552.015, 60552.016, 60552.016), stdev = 0.001
[info]   CI (99.9%): [60552.013, 60552.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.463 ±(99.9%) 6.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.463, 3.656), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.324 ±(99.9%) 1426.169 MB/sec [Average]
[info]   (min, avg, max) = (675.002, 946.324, 1352.717), stdev = 370.371
[info]   CI (99.9%): [≈ 0, 2372.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55416.170 ±(99.9%) 83842.410 B/op [Average]
[info]   (min, avg, max) = (39442.242, 55416.170, 79408.548), stdev = 21773.608
[info]   CI (99.9%): [≈ 0, 139258.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:15:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677005.243 ops/s
[info] # Warmup Iteration   2: 722678.283 ops/s
[info] # Warmup Iteration   3: 734163.458 ops/s
[info] # Warmup Iteration   4: 738465.751 ops/s
[info] # Warmup Iteration   5: 721473.651 ops/s
[info] Iteration   1: 732917.073 ops/s
[info]                  ·gc.alloc.rate:                   1322.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2892.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 737699.800 ops/s
[info]                  ·gc.alloc.rate:                   1331.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2874.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 735618.167 ops/s
[info]                  ·gc.alloc.rate:                   1327.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2883.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 737502.968 ops/s
[info]                  ·gc.alloc.rate:                   1330.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.943 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2878.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 737046.831 ops/s
[info]                  ·gc.alloc.rate:                   1329.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2882.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   736156.968 ±(99.9%) 7646.008 ops/s [Average]
[info]   (min, avg, max) = (732917.073, 736156.968, 737699.800), stdev = 1985.644
[info]   CI (99.9%): [728510.960, 743802.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1328.240 ±(99.9%) 14.090 MB/sec [Average]
[info]   (min, avg, max) = (1322.301, 1328.240, 1331.036), stdev = 3.659
[info]   CI (99.9%): [1314.150, 1342.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.133 ±(99.9%) 0.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.222), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1348.039 ±(99.9%) 4.839 MB/sec [Average]
[info]   (min, avg, max) = (1346.724, 1348.039, 1349.727), stdev = 1.257
[info]   CI (99.9%): [1343.200, 1352.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2882.349 ±(99.9%) 25.906 B/op [Average]
[info]   (min, avg, max) = (2874.425, 2882.349, 2892.458), stdev = 6.728
[info]   CI (99.9%): [2856.443, 2908.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 792580.419 ops/s
[info] # Warmup Iteration   2: 840623.164 ops/s
[info] # Warmup Iteration   3: 837306.156 ops/s
[info] # Warmup Iteration   4: 837177.321 ops/s
[info] # Warmup Iteration   5: 835976.940 ops/s
[info] Iteration   1: 837160.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 836482.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 836400.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 836832.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 837009.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   836777.032 ±(99.9%) 1266.761 ops/s [Average]
[info]   (min, avg, max) = (836400.061, 836777.032, 837160.391), stdev = 328.974
[info]   CI (99.9%): [835510.270, 838043.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16920.761 ops/s
[info] # Warmup Iteration   2: 23968.918 ops/s
[info] # Warmup Iteration   3: 24887.582 ops/s
[info] # Warmup Iteration   4: 24936.840 ops/s
[info] # Warmup Iteration   5: 24074.026 ops/s
[info] Iteration   1: 24672.745 ops/s
[info]                  ·gc.alloc.rate:                   1041.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85582.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 25051.127 ops/s
[info]                  ·gc.alloc.rate:                   1057.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42058.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24659.698 ops/s
[info]                  ·gc.alloc.rate:                   1040.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85454.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24931.868 ops/s
[info]                  ·gc.alloc.rate:                   1052.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84542.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24994.473 ops/s
[info]                  ·gc.alloc.rate:                   1054.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42172.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24861.982 ±(99.9%) 707.259 ops/s [Average]
[info]   (min, avg, max) = (24659.698, 24861.982, 25051.127), stdev = 183.673
[info]   CI (99.9%): [24154.723, 25569.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1049.328 ±(99.9%) 29.505 MB/sec [Average]
[info]   (min, avg, max) = (1040.940, 1049.328, 1057.169), stdev = 7.662
[info]   CI (99.9%): [1019.823, 1078.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66432.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66432.016, 66432.017, 66432.018), stdev = 0.001
[info]   CI (99.9%): [66432.015, 66432.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.111 ±(99.9%) 11.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.111, 6.570), stdev = 3.032
[info]   CI (99.9%): [≈ 0, 13.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.727 ±(99.9%) 1413.900 MB/sec [Average]
[info]   (min, avg, max) = (669.301, 1071.727, 1341.580), stdev = 367.185
[info]   CI (99.9%): [≈ 0, 2485.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67961.988 ±(99.9%) 90868.013 B/op [Average]
[info]   (min, avg, max) = (42058.544, 67961.988, 85582.431), stdev = 23598.134
[info]   CI (99.9%): [≈ 0, 158830.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20765.102 ops/s
[info] # Warmup Iteration   2: 28419.564 ops/s
[info] # Warmup Iteration   3: 28569.925 ops/s
[info] # Warmup Iteration   4: 27996.877 ops/s
[info] # Warmup Iteration   5: 28687.500 ops/s
[info] Iteration   1: 28652.976 ops/s
[info]                  ·gc.alloc.rate:                   1462.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73837.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28594.068 ops/s
[info]                  ·gc.alloc.rate:                   1459.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111020.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28692.533 ops/s
[info]                  ·gc.alloc.rate:                   1464.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73807.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28724.867 ops/s
[info]                  ·gc.alloc.rate:                   1465.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73795.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28807.457 ops/s
[info]                  ·gc.alloc.rate:                   1470.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73658.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   28694.380 ±(99.9%) 307.425 ops/s [Average]
[info]   (min, avg, max) = (28594.068, 28694.380, 28807.457), stdev = 79.837
[info]   CI (99.9%): [28386.955, 29001.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1464.293 ±(99.9%) 15.865 MB/sec [Average]
[info]   (min, avg, max) = (1459.139, 1464.293, 1470.144), stdev = 4.120
[info]   CI (99.9%): [1448.429, 1480.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80320.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (80320.014, 80320.014, 80320.015), stdev = 0.001
[info]   CI (99.9%): [80320.013, 80320.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.060 ±(99.9%) 11.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.060, 6.875), stdev = 3.073
[info]   CI (99.9%): [≈ 0, 13.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1480.292 ±(99.9%) 1155.038 MB/sec [Average]
[info]   (min, avg, max) = (1344.119, 1480.292, 2016.869), stdev = 299.960
[info]   CI (99.9%): [325.253, 2635.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   81223.884 ±(99.9%) 64140.977 B/op [Average]
[info]   (min, avg, max) = (73658.343, 81223.884, 111020.949), stdev = 16657.208
[info]   CI (99.9%): [17082.907, 145364.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16644.249 ops/s
[info] # Warmup Iteration   2: 30783.825 ops/s
[info] # Warmup Iteration   3: 30988.574 ops/s
[info] # Warmup Iteration   4: 31011.463 ops/s
[info] # Warmup Iteration   5: 30947.580 ops/s
[info] Iteration   1: 31053.268 ops/s
[info]                  ·gc.alloc.rate:                   1418.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68536.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30969.883 ops/s
[info]                  ·gc.alloc.rate:                   1414.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103168.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31095.776 ops/s
[info]                  ·gc.alloc.rate:                   1420.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68578.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 31100.550 ops/s
[info]                  ·gc.alloc.rate:                   1420.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68633.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31089.681 ops/s
[info]                  ·gc.alloc.rate:                   1419.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68684.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31061.832 ±(99.9%) 210.512 ops/s [Average]
[info]   (min, avg, max) = (30969.883, 31061.832, 31100.550), stdev = 54.669
[info]   CI (99.9%): [30851.320, 31272.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1418.689 ±(99.9%) 9.777 MB/sec [Average]
[info]   (min, avg, max) = (1414.446, 1418.689, 1420.460), stdev = 2.539
[info]   CI (99.9%): [1408.911, 1428.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71888.013, 71888.013, 71888.014), stdev = 0.001
[info]   CI (99.9%): [71888.011, 71888.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.687 ±(99.9%) 6.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.687, 4.215), stdev = 1.598
[info]   CI (99.9%): [≈ 0, 7.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1489.962 ±(99.9%) 1162.292 MB/sec [Average]
[info]   (min, avg, max) = (1352.107, 1489.962, 2029.907), stdev = 301.843
[info]   CI (99.9%): [327.671, 2652.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75520.267 ±(99.9%) 59514.892 B/op [Average]
[info]   (min, avg, max) = (68536.586, 75520.267, 103168.314), stdev = 15455.828
[info]   CI (99.9%): [16005.376, 135035.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348120.423 ops/s
[info] # Warmup Iteration   2: 367548.147 ops/s
[info] # Warmup Iteration   3: 358542.990 ops/s
[info] # Warmup Iteration   4: 367929.570 ops/s
[info] # Warmup Iteration   5: 368848.687 ops/s
[info] Iteration   1: 368646.985 ops/s
[info]                  ·gc.alloc.rate:                   959.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2878.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 369571.104 ops/s
[info]                  ·gc.alloc.rate:                   961.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5738.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 369094.916 ops/s
[info]                  ·gc.alloc.rate:                   960.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2871.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 354793.682 ops/s
[info]                  ·gc.alloc.rate:                   923.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5974.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 368928.997 ops/s
[info]                  ·gc.alloc.rate:                   960.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2874.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   366207.137 ±(99.9%) 24602.261 ops/s [Average]
[info]   (min, avg, max) = (354793.682, 366207.137, 369571.104), stdev = 6389.129
[info]   CI (99.9%): [341604.876, 390809.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   952.932 ±(99.9%) 64.141 MB/sec [Average]
[info]   (min, avg, max) = (923.178, 952.932, 961.732), stdev = 16.657
[info]   CI (99.9%): [888.790, 1017.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.073 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.277), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   943.041 ±(99.9%) 1420.205 MB/sec [Average]
[info]   (min, avg, max) = (673.352, 943.041, 1347.503), stdev = 368.823
[info]   CI (99.9%): [≈ 0, 2363.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4067.558 ±(99.9%) 6297.953 B/op [Average]
[info]   (min, avg, max) = (2871.651, 4067.558, 5974.792), stdev = 1635.558
[info]   CI (99.9%): [≈ 0, 10365.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9696.484 ops/s
[info] # Warmup Iteration   2: 18643.749 ops/s
[info] # Warmup Iteration   3: 18490.027 ops/s
[info] # Warmup Iteration   4: 18829.974 ops/s
[info] # Warmup Iteration   5: 18862.885 ops/s
[info] Iteration   1: 18869.445 ops/s
[info]                  ·gc.alloc.rate:                   1881.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169456.727 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18870.185 ops/s
[info]                  ·gc.alloc.rate:                   1881.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169614.418 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18903.343 ops/s
[info]                  ·gc.alloc.rate:                   1884.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169484.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18917.278 ops/s
[info]                  ·gc.alloc.rate:                   1885.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112998.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18877.700 ops/s
[info]                  ·gc.alloc.rate:                   1881.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169931.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18887.590 ±(99.9%) 83.024 ops/s [Average]
[info]   (min, avg, max) = (18869.445, 18887.590, 18917.278), stdev = 21.561
[info]   CI (99.9%): [18804.566, 18970.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1882.969 ±(99.9%) 8.121 MB/sec [Average]
[info]   (min, avg, max) = (1881.286, 1882.969, 1885.940), stdev = 2.109
[info]   CI (99.9%): [1874.849, 1891.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   156904.023 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (156904.022, 156904.023, 156904.027), stdev = 0.002
[info]   CI (99.9%): [156904.015, 156904.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.469 ±(99.9%) 6.681 B/op [Average]
[info]   (min, avg, max) = (1.732, 3.469, 5.209), stdev = 1.735
[info]   CI (99.9%): [≈ 0, 10.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1899.473 ±(99.9%) 1165.145 MB/sec [Average]
[info]   (min, avg, max) = (1358.210, 1899.473, 2038.087), stdev = 302.584
[info]   CI (99.9%): [734.329, 3064.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   158297.157 ±(99.9%) 97511.261 B/op [Average]
[info]   (min, avg, max) = (112998.598, 158297.157, 169931.287), stdev = 25323.365
[info]   CI (99.9%): [60785.896, 255808.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38375.335 ops/s
[info] # Warmup Iteration   2: 53183.908 ops/s
[info] # Warmup Iteration   3: 53469.404 ops/s
[info] # Warmup Iteration   4: 53738.484 ops/s
[info] # Warmup Iteration   5: 54092.124 ops/s
[info] Iteration   1: 54125.996 ops/s
[info]                  ·gc.alloc.rate:                   1312.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39086.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 53871.801 ops/s
[info]                  ·gc.alloc.rate:                   1306.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39272.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 53980.706 ops/s
[info]                  ·gc.alloc.rate:                   1309.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39192.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 53799.758 ops/s
[info]                  ·gc.alloc.rate:                   1304.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39344.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 53840.542 ops/s
[info]                  ·gc.alloc.rate:                   1305.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39353.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53923.761 ±(99.9%) 506.267 ops/s [Average]
[info]   (min, avg, max) = (53799.758, 53923.761, 54125.996), stdev = 131.476
[info]   CI (99.9%): [53417.494, 54430.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1307.854 ±(99.9%) 12.191 MB/sec [Average]
[info]   (min, avg, max) = (1304.883, 1307.854, 1312.728), stdev = 3.166
[info]   CI (99.9%): [1295.663, 1320.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.459 ±(99.9%) 2.677 B/op [Average]
[info]   (min, avg, max) = (0.609, 1.459, 2.436), stdev = 0.695
[info]   CI (99.9%): [≈ 0, 4.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1344.629 ±(99.9%) 3.401 MB/sec [Average]
[info]   (min, avg, max) = (1344.037, 1344.629, 1346.101), stdev = 0.883
[info]   CI (99.9%): [1341.229, 1348.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   39249.686 ±(99.9%) 430.968 B/op [Average]
[info]   (min, avg, max) = (39086.510, 39249.686, 39353.242), stdev = 111.921
[info]   CI (99.9%): [38818.718, 39680.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90035.861 ops/s
[info] # Warmup Iteration   2: 132200.843 ops/s
[info] # Warmup Iteration   3: 132496.550 ops/s
[info] # Warmup Iteration   4: 131153.928 ops/s
[info] # Warmup Iteration   5: 132080.910 ops/s
[info] Iteration   1: 132285.053 ops/s
[info]                  ·gc.alloc.rate:                   1120.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8039.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 131913.057 ops/s
[info]                  ·gc.alloc.rate:                   1117.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16133.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 132143.593 ops/s
[info]                  ·gc.alloc.rate:                   1119.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16116.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 132067.431 ops/s
[info]                  ·gc.alloc.rate:                   1118.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8065.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 132079.525 ops/s
[info]                  ·gc.alloc.rate:                   1118.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16145.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   132097.732 ±(99.9%) 518.577 ops/s [Average]
[info]   (min, avg, max) = (131913.057, 132097.732, 132285.053), stdev = 134.673
[info]   CI (99.9%): [131579.154, 132616.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1119.205 ±(99.9%) 4.193 MB/sec [Average]
[info]   (min, avg, max) = (1117.770, 1119.205, 1120.746), stdev = 1.089
[info]   CI (99.9%): [1115.012, 1123.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.546 ±(99.9%) 1.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 0.993), stdev = 0.509
[info]   CI (99.9%): [≈ 0, 2.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.467 ±(99.9%) 1428.176 MB/sec [Average]
[info]   (min, avg, max) = (675.670, 1082.467, 1354.681), stdev = 370.893
[info]   CI (99.9%): [≈ 0, 2510.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12900.054 ±(99.9%) 17039.713 B/op [Average]
[info]   (min, avg, max) = (8039.939, 12900.054, 16145.127), stdev = 4425.159
[info]   CI (99.9%): [≈ 0, 29939.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920756.282 ops/s
[info] # Warmup Iteration   2: 1034923.395 ops/s
[info] # Warmup Iteration   3: 1028218.465 ops/s
[info] # Warmup Iteration   4: 1035681.856 ops/s
[info] # Warmup Iteration   5: 1037853.418 ops/s
[info] Iteration   1: 1040005.795 ops/s
[info]                  ·gc.alloc.rate:                   1115.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2039.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1033251.622 ops/s
[info]                  ·gc.alloc.rate:                   1108.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1025.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1034620.855 ops/s
[info]                  ·gc.alloc.rate:                   1109.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2048.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1033529.230 ops/s
[info]                  ·gc.alloc.rate:                   1108.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2052.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1036582.545 ops/s
[info]                  ·gc.alloc.rate:                   1111.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1023.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1035598.009 ±(99.9%) 10743.589 ops/s [Average]
[info]   (min, avg, max) = (1033251.622, 1035598.009, 1040005.795), stdev = 2790.076
[info]   CI (99.9%): [1024854.421, 1046341.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1110.610 ±(99.9%) 11.499 MB/sec [Average]
[info]   (min, avg, max) = (1108.228, 1110.610, 1115.376), stdev = 2.986
[info]   CI (99.9%): [1099.111, 1122.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.127), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.839 ±(99.9%) 1420.418 MB/sec [Average]
[info]   (min, avg, max) = (673.491, 1077.839, 1347.533), stdev = 368.878
[info]   CI (99.9%): [≈ 0, 2498.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1637.946 ±(99.9%) 2155.817 B/op [Average]
[info]   (min, avg, max) = (1023.518, 1637.946, 2052.141), stdev = 559.859
[info]   CI (99.9%): [≈ 0, 3793.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 820251.631 ops/s
[info] # Warmup Iteration   2: 882503.899 ops/s
[info] # Warmup Iteration   3: 885477.298 ops/s
[info] # Warmup Iteration   4: 885096.027 ops/s
[info] # Warmup Iteration   5: 885565.562 ops/s
[info] Iteration   1: 885635.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 884980.975 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 885699.051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 885559.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 885154.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   885405.897 ±(99.9%) 1226.720 ops/s [Average]
[info]   (min, avg, max) = (884980.975, 885405.897, 885699.051), stdev = 318.575
[info]   CI (99.9%): [884179.177, 886632.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:12:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46955.227 ops/s
[info] # Warmup Iteration   2: 62070.100 ops/s
[info] # Warmup Iteration   3: 62544.671 ops/s
[info] # Warmup Iteration   4: 63146.371 ops/s
[info] # Warmup Iteration   5: 63033.977 ops/s
[info] Iteration   1: 63046.233 ops/s
[info]                  ·gc.alloc.rate:                   1467.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50136.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 62718.631 ops/s
[info]                  ·gc.alloc.rate:                   1459.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33615.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 63107.663 ops/s
[info]                  ·gc.alloc.rate:                   1468.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33441.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 63080.754 ops/s
[info]                  ·gc.alloc.rate:                   1467.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33489.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 63062.974 ops/s
[info]                  ·gc.alloc.rate:                   1467.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33547.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   63003.251 ±(99.9%) 618.899 ops/s [Average]
[info]   (min, avg, max) = (62718.631, 63003.251, 63107.663), stdev = 160.726
[info]   CI (99.9%): [62384.353, 63622.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1465.951 ±(99.9%) 14.605 MB/sec [Average]
[info]   (min, avg, max) = (1459.199, 1465.951, 1468.252), stdev = 3.793
[info]   CI (99.9%): [1451.346, 1480.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36624.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36624.006, 36624.007, 36624.007), stdev = 0.001
[info]   CI (99.9%): [36624.006, 36624.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.249 ±(99.9%) 4.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.249, 3.118), stdev = 1.197
[info]   CI (99.9%): [≈ 0, 5.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1474.959 ±(99.9%) 1148.928 MB/sec [Average]
[info]   (min, avg, max) = (1339.323, 1474.959, 2008.696), stdev = 298.373
[info]   CI (99.9%): [326.031, 2623.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36846.059 ±(99.9%) 28609.744 B/op [Average]
[info]   (min, avg, max) = (33441.863, 36846.059, 50136.490), stdev = 7429.860
[info]   CI (99.9%): [8236.315, 65455.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11919.444 ops/s
[info] # Warmup Iteration   2: 15574.303 ops/s
[info] # Warmup Iteration   3: 15957.122 ops/s
[info] # Warmup Iteration   4: 16043.676 ops/s
[info] # Warmup Iteration   5: 16086.531 ops/s
[info] Iteration   1: 16082.327 ops/s
[info]                  ·gc.alloc.rate:                   1435.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131552.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16051.710 ops/s
[info]                  ·gc.alloc.rate:                   1432.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131831.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16037.315 ops/s
[info]                  ·gc.alloc.rate:                   1431.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              140479.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198046.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16083.432 ops/s
[info]                  ·gc.alloc.rate:                   1435.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131797.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16038.545 ops/s
[info]                  ·gc.alloc.rate:                   1432.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132289.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16058.666 ±(99.9%) 87.857 ops/s [Average]
[info]   (min, avg, max) = (16037.315, 16058.666, 16083.432), stdev = 22.816
[info]   CI (99.9%): [15970.809, 16146.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1433.435 ±(99.9%) 7.200 MB/sec [Average]
[info]   (min, avg, max) = (1431.572, 1433.435, 1435.525), stdev = 1.870
[info]   CI (99.9%): [1426.235, 1440.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140479.823 ±(99.9%) 1.761 B/op [Average]
[info]   (min, avg, max) = (140479.005, 140479.823, 140480.034), stdev = 0.457
[info]   CI (99.9%): [140478.062, 140481.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.485 ±(99.9%) 17.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.485, 12.222), stdev = 4.644
[info]   CI (99.9%): [≈ 0, 22.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1480.436 ±(99.9%) 1157.639 MB/sec [Average]
[info]   (min, avg, max) = (1344.129, 1480.436, 2018.219), stdev = 300.635
[info]   CI (99.9%): [322.797, 2638.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   145103.340 ±(99.9%) 113968.098 B/op [Average]
[info]   (min, avg, max) = (131552.774, 145103.340, 198046.197), stdev = 29597.153
[info]   CI (99.9%): [31135.242, 259071.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9520.526 ops/s
[info] # Warmup Iteration   2: 16830.995 ops/s
[info] # Warmup Iteration   3: 17006.158 ops/s
[info] # Warmup Iteration   4: 17196.117 ops/s
[info] # Warmup Iteration   5: 16970.260 ops/s
[info] Iteration   1: 17253.442 ops/s
[info]                  ·gc.alloc.rate:                   1394.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123354.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17205.711 ops/s
[info]                  ·gc.alloc.rate:                   1390.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123783.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17231.142 ops/s
[info]                  ·gc.alloc.rate:                   1392.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123694.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17226.130 ops/s
[info]                  ·gc.alloc.rate:                   1391.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123852.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17242.549 ops/s
[info]                  ·gc.alloc.rate:                   1393.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123828.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17231.795 ±(99.9%) 69.342 ops/s [Average]
[info]   (min, avg, max) = (17205.711, 17231.795, 17253.442), stdev = 18.008
[info]   CI (99.9%): [17162.452, 17301.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1392.438 ±(99.9%) 5.211 MB/sec [Average]
[info]   (min, avg, max) = (1390.679, 1392.438, 1394.297), stdev = 1.353
[info]   CI (99.9%): [1387.227, 1397.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.187 ±(99.9%) 1.382 B/op [Average]
[info]   (min, avg, max) = (127184.024, 127184.187, 127184.829), stdev = 0.359
[info]   CI (99.9%): [127182.805, 127185.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.901 ±(99.9%) 7.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.901, 3.808), stdev = 1.902
[info]   CI (99.9%): [≈ 0, 9.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354.320 ±(99.9%) 6.012 MB/sec [Average]
[info]   (min, avg, max) = (1352.318, 1354.320, 1356.302), stdev = 1.561
[info]   CI (99.9%): [1348.308, 1360.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   123702.699 ±(99.9%) 784.094 B/op [Average]
[info]   (min, avg, max) = (123354.733, 123702.699, 123852.351), stdev = 203.627
[info]   CI (99.9%): [122918.605, 124486.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395143.216 ops/s
[info] # Warmup Iteration   2: 421289.180 ops/s
[info] # Warmup Iteration   3: 422187.035 ops/s
[info] # Warmup Iteration   4: 421760.706 ops/s
[info] # Warmup Iteration   5: 420337.884 ops/s
[info] Iteration   1: 420843.573 ops/s
[info]                  ·gc.alloc.rate:                   1095.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5039.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 421131.382 ops/s
[info]                  ·gc.alloc.rate:                   1095.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2516.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 420891.316 ops/s
[info]                  ·gc.alloc.rate:                   1095.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5036.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 420050.178 ops/s
[info]                  ·gc.alloc.rate:                   1093.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5049.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 421187.249 ops/s
[info]                  ·gc.alloc.rate:                   1096.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2519.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   420820.739 ±(99.9%) 1754.152 ops/s [Average]
[info]   (min, avg, max) = (420050.178, 420820.739, 421187.249), stdev = 455.548
[info]   CI (99.9%): [419066.588, 422574.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1095.115 ±(99.9%) 4.723 MB/sec [Average]
[info]   (min, avg, max) = (1093.006, 1095.115, 1096.014), stdev = 1.227
[info]   CI (99.9%): [1090.392, 1099.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.078 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.234), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.870 ±(99.9%) 1420.565 MB/sec [Average]
[info]   (min, avg, max) = (673.440, 1077.870, 1347.717), stdev = 368.916
[info]   CI (99.9%): [≈ 0, 2498.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4032.300 ±(99.9%) 5323.079 B/op [Average]
[info]   (min, avg, max) = (2516.929, 4032.300, 5049.078), stdev = 1382.387
[info]   CI (99.9%): [≈ 0, 9355.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6992.066 ops/s
[info] # Warmup Iteration   2: 12855.488 ops/s
[info] # Warmup Iteration   3: 13008.040 ops/s
[info] # Warmup Iteration   4: 13010.403 ops/s
[info] # Warmup Iteration   5: 12910.130 ops/s
[info] Iteration   1: 12957.308 ops/s
[info]                  ·gc.alloc.rate:                   1788.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164406.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13018.571 ops/s
[info]                  ·gc.alloc.rate:                   1797.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245776.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13013.446 ops/s
[info]                  ·gc.alloc.rate:                   1796.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246112.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12953.099 ops/s
[info]                  ·gc.alloc.rate:                   1788.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164942.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13021.603 ops/s
[info]                  ·gc.alloc.rate:                   1797.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246326.006 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12992.805 ±(99.9%) 132.775 ops/s [Average]
[info]   (min, avg, max) = (12953.099, 12992.805, 13021.603), stdev = 34.481
[info]   CI (99.9%): [12860.030, 13125.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1793.960 ±(99.9%) 18.831 MB/sec [Average]
[info]   (min, avg, max) = (1788.282, 1793.960, 1797.901), stdev = 4.890
[info]   CI (99.9%): [1775.129, 1812.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.053 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (217320.031, 217320.053, 217320.128), stdev = 0.042
[info]   CI (99.9%): [217319.890, 217320.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.013 ±(99.9%) 8.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.013, 5.031), stdev = 2.105
[info]   CI (99.9%): [≈ 0, 10.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1763.330 ±(99.9%) 1434.180 MB/sec [Average]
[info]   (min, avg, max) = (1353.392, 1763.330, 2037.869), stdev = 372.452
[info]   CI (99.9%): [329.150, 3197.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   213512.779 ±(99.9%) 171676.502 B/op [Average]
[info]   (min, avg, max) = (164406.360, 213512.779, 246326.006), stdev = 44583.842
[info]   CI (99.9%): [41836.277, 385189.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26500.640 ops/s
[info] # Warmup Iteration   2: 38806.779 ops/s
[info] # Warmup Iteration   3: 39298.648 ops/s
[info] # Warmup Iteration   4: 38941.019 ops/s
[info] # Warmup Iteration   5: 39389.701 ops/s
[info] Iteration   1: 39523.856 ops/s
[info]                  ·gc.alloc.rate:                   1228.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26763.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 39692.289 ops/s
[info]                  ·gc.alloc.rate:                   1233.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53301.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38711.015 ops/s
[info]                  ·gc.alloc.rate:                   1203.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54652.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39470.087 ops/s
[info]                  ·gc.alloc.rate:                   1226.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53614.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 39550.838 ops/s
[info]                  ·gc.alloc.rate:                   1229.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53544.758 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   39389.617 ±(99.9%) 1494.575 ops/s [Average]
[info]   (min, avg, max) = (38711.015, 39389.617, 39692.289), stdev = 388.136
[info]   CI (99.9%): [37895.042, 40884.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1224.445 ±(99.9%) 46.437 MB/sec [Average]
[info]   (min, avg, max) = (1203.361, 1224.445, 1233.856), stdev = 12.060
[info]   CI (99.9%): [1178.008, 1270.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48928.010, 48928.011, 48928.011), stdev = 0.001
[info]   CI (99.9%): [48928.009, 48928.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.987 ±(99.9%) 7.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.987, 4.142), stdev = 1.905
[info]   CI (99.9%): [≈ 0, 9.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1210.056 ±(99.9%) 1158.111 MB/sec [Average]
[info]   (min, avg, max) = (672.045, 1210.056, 1345.453), stdev = 300.758
[info]   CI (99.9%): [51.945, 2368.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48375.404 ±(99.9%) 46564.031 B/op [Average]
[info]   (min, avg, max) = (26763.462, 48375.404, 54652.264), stdev = 12092.531
[info]   CI (99.9%): [1811.373, 94939.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29084.873 ops/s
[info] # Warmup Iteration   2: 45372.192 ops/s
[info] # Warmup Iteration   3: 44729.924 ops/s
[info] # Warmup Iteration   4: 45909.814 ops/s
[info] # Warmup Iteration   5: 45238.217 ops/s
[info] Iteration   1: 44510.224 ops/s
[info]                  ·gc.alloc.rate:                   1180.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47792.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 44218.450 ops/s
[info]                  ·gc.alloc.rate:                   1173.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48155.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45946.337 ops/s
[info]                  ·gc.alloc.rate:                   1218.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23183.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 45876.749 ops/s
[info]                  ·gc.alloc.rate:                   1216.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46457.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 45895.335 ops/s
[info]                  ·gc.alloc.rate:                   1217.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46487.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   45289.419 ±(99.9%) 3277.434 ops/s [Average]
[info]   (min, avg, max) = (44218.450, 45289.419, 45946.337), stdev = 851.139
[info]   CI (99.9%): [42011.985, 48566.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1201.411 ±(99.9%) 86.555 MB/sec [Average]
[info]   (min, avg, max) = (1173.196, 1201.411, 1218.762), stdev = 22.478
[info]   CI (99.9%): [1114.855, 1287.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.007, 41752.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.181 ±(99.9%) 5.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.181, 3.571), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 7.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.197 ±(99.9%) 1165.543 MB/sec [Average]
[info]   (min, avg, max) = (676.739, 1218.197, 1355.523), stdev = 302.688
[info]   CI (99.9%): [52.654, 2383.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42415.093 ±(99.9%) 41501.104 B/op [Average]
[info]   (min, avg, max) = (23183.540, 42415.093, 48155.067), stdev = 10777.705
[info]   CI (99.9%): [913.989, 83916.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1140972.004 ops/s
[info] # Warmup Iteration   2: 1222669.899 ops/s
[info] # Warmup Iteration   3: 1231622.461 ops/s
[info] # Warmup Iteration   4: 1235207.964 ops/s
[info] # Warmup Iteration   5: 1240636.684 ops/s
[info] Iteration   1: 1238114.525 ops/s
[info]                  ·gc.alloc.rate:                   1126.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1713.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1235447.688 ops/s
[info]                  ·gc.alloc.rate:                   1124.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1715.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1236047.461 ops/s
[info]                  ·gc.alloc.rate:                   1125.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 857.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1233851.203 ops/s
[info]                  ·gc.alloc.rate:                   1122.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1718.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1233389.599 ops/s
[info]                  ·gc.alloc.rate:                   1122.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1720.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1235370.095 ±(99.9%) 7261.843 ops/s [Average]
[info]   (min, avg, max) = (1233389.599, 1235370.095, 1238114.525), stdev = 1885.877
[info]   CI (99.9%): [1228108.253, 1242631.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1124.128 ±(99.9%) 7.310 MB/sec [Average]
[info]   (min, avg, max) = (1122.122, 1124.128, 1126.739), stdev = 1.898
[info]   CI (99.9%): [1116.818, 1131.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.080 ±(99.9%) 0.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.106), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1212.833 ±(99.9%) 1160.511 MB/sec [Average]
[info]   (min, avg, max) = (673.707, 1212.833, 1348.055), stdev = 301.381
[info]   CI (99.9%): [52.322, 2373.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1545.146 ±(99.9%) 1480.235 B/op [Average]
[info]   (min, avg, max) = (857.507, 1545.146, 1720.326), stdev = 384.412
[info]   CI (99.9%): [64.911, 3025.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1431904.646 ops/s
[info] # Warmup Iteration   2: 1500941.622 ops/s
[info] # Warmup Iteration   3: 1520202.322 ops/s
[info] # Warmup Iteration   4: 1519271.521 ops/s
[info] # Warmup Iteration   5: 1520147.098 ops/s
[info] Iteration   1: 1519636.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1518232.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1519532.723 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1518607.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1518944.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1518990.802 ±(99.9%) 2306.567 ops/s [Average]
[info]   (min, avg, max) = (1518232.050, 1518990.802, 1519636.607), stdev = 599.008
[info]   CI (99.9%): [1516684.236, 1521297.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26083.683 ops/s
[info] # Warmup Iteration   2: 35514.676 ops/s
[info] # Warmup Iteration   3: 35932.143 ops/s
[info] # Warmup Iteration   4: 35642.711 ops/s
[info] # Warmup Iteration   5: 36142.815 ops/s
[info] Iteration   1: 36174.637 ops/s
[info]                  ·gc.alloc.rate:                   1094.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29185.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 36183.445 ops/s
[info]                  ·gc.alloc.rate:                   1094.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58239.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 36128.207 ops/s
[info]                  ·gc.alloc.rate:                   1092.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58328.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 36208.776 ops/s
[info]                  ·gc.alloc.rate:                   1095.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29113.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 35966.811 ops/s
[info]                  ·gc.alloc.rate:                   1088.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58642.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   36132.375 ±(99.9%) 373.631 ops/s [Average]
[info]   (min, avg, max) = (35966.811, 36132.375, 36208.776), stdev = 97.031
[info]   CI (99.9%): [35758.744, 36506.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1093.011 ±(99.9%) 11.054 MB/sec [Average]
[info]   (min, avg, max) = (1088.111, 1093.011, 1095.284), stdev = 2.871
[info]   CI (99.9%): [1081.957, 1104.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47616.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (47616.011, 47616.012, 47616.012), stdev = 0.001
[info]   CI (99.9%): [47616.010, 47616.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.087 ±(99.9%) 6.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.087, 3.622), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 7.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.584 ±(99.9%) 1410.852 MB/sec [Average]
[info]   (min, avg, max) = (669.680, 1071.584, 1340.093), stdev = 366.394
[info]   CI (99.9%): [≈ 0, 2482.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46702.056 ±(99.9%) 61701.919 B/op [Average]
[info]   (min, avg, max) = (29113.438, 46702.056, 58642.843), stdev = 16023.792
[info]   CI (99.9%): [≈ 0, 108403.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62997.250 ops/s
[info] # Warmup Iteration   2: 77752.384 ops/s
[info] # Warmup Iteration   3: 78238.042 ops/s
[info] # Warmup Iteration   4: 78630.935 ops/s
[info] # Warmup Iteration   5: 78288.086 ops/s
[info] Iteration   1: 78421.834 ops/s
[info]                  ·gc.alloc.rate:                   1343.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26952.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 78613.555 ops/s
[info]                  ·gc.alloc.rate:                   1347.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26892.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 78293.154 ops/s
[info]                  ·gc.alloc.rate:                   1341.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27016.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 78565.071 ops/s
[info]                  ·gc.alloc.rate:                   1346.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26942.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78751.174 ops/s
[info]                  ·gc.alloc.rate:                   1349.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26912.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   78528.958 ±(99.9%) 680.485 ops/s [Average]
[info]   (min, avg, max) = (78293.154, 78528.958, 78751.174), stdev = 176.720
[info]   CI (99.9%): [77848.473, 79209.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1345.767 ±(99.9%) 11.841 MB/sec [Average]
[info]   (min, avg, max) = (1341.724, 1345.767, 1349.685), stdev = 3.075
[info]   CI (99.9%): [1333.926, 1357.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26976.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26976.005, 26976.005, 26976.006), stdev = 0.001
[info]   CI (99.9%): [26976.005, 26976.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.417 ±(99.9%) 1.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.417, 0.834), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 2.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1344.128 ±(99.9%) 5.879 MB/sec [Average]
[info]   (min, avg, max) = (1342.659, 1344.128, 1346.499), stdev = 1.527
[info]   CI (99.9%): [1338.249, 1350.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26943.226 ±(99.9%) 182.034 B/op [Average]
[info]   (min, avg, max) = (26892.890, 26943.226, 27016.526), stdev = 47.274
[info]   CI (99.9%): [26761.192, 27125.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22955.807 ops/s
[info] # Warmup Iteration   2: 335375.238 ops/s
[info] # Warmup Iteration   3: 318523.208 ops/s
[info] # Warmup Iteration   4: 328606.793 ops/s
[info] # Warmup Iteration   5: 336825.937 ops/s
[info] Iteration   1: 333906.070 ops/s
[info]                  ·gc.alloc.rate:                   668.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3175.952 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 337333.659 ops/s
[info]                  ·gc.alloc.rate:                   675.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3143.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 337076.557 ops/s
[info]                  ·gc.alloc.rate:                   674.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3138.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 337981.605 ops/s
[info]                  ·gc.alloc.rate:                   676.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3129.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 338089.219 ops/s
[info]                  ·gc.alloc.rate:                   677.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3128.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   336877.422 ±(99.9%) 6603.717 ops/s [Average]
[info]   (min, avg, max) = (333906.070, 336877.422, 338089.219), stdev = 1714.964
[info]   CI (99.9%): [330273.705, 343481.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   674.631 ±(99.9%) 13.420 MB/sec [Average]
[info]   (min, avg, max) = (668.619, 674.631, 677.147), stdev = 3.485
[info]   CI (99.9%): [661.211, 688.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.520 ±(99.9%) 4.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.520, 2.557), stdev = 1.139
[info]   CI (99.9%): [≈ 0, 4.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2.449 ±(99.9%) 20.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.449, 12.052), stdev = 5.369
[info]   CI (99.9%): [≈ 0, 23.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.743 ±(99.9%) 3.429 MB/sec [Average]
[info]   (min, avg, max) = (672.001, 672.743, 673.733), stdev = 0.891
[info]   CI (99.9%): [669.314, 676.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   3143.261 ±(99.9%) 74.289 B/op [Average]
[info]   (min, avg, max) = (3128.569, 3143.261, 3175.952), stdev = 19.293
[info]   CI (99.9%): [3068.972, 3217.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172048.330 ops/s
[info] # Warmup Iteration   2: 262193.442 ops/s
[info] # Warmup Iteration   3: 261046.951 ops/s
[info] # Warmup Iteration   4: 262227.823 ops/s
[info] # Warmup Iteration   5: 262533.239 ops/s
[info] Iteration   1: 258148.548 ops/s
[info]                  ·gc.alloc.rate:                   566.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4108.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 263926.108 ops/s
[info]                  ·gc.alloc.rate:      579.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 262972.887 ops/s
[info]                  ·gc.alloc.rate:                   577.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4032.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 262734.516 ops/s
[info]                  ·gc.alloc.rate:                   576.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4044.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 262352.432 ops/s
[info]                  ·gc.alloc.rate:                   576.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4050.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   262026.898 ±(99.9%) 8642.571 ops/s [Average]
[info]   (min, avg, max) = (258148.548, 262026.898, 263926.108), stdev = 2244.448
[info]   CI (99.9%): [253384.327, 270669.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   575.353 ±(99.9%) 19.102 MB/sec [Average]
[info]   (min, avg, max) = (566.761, 575.353, 579.528), stdev = 4.961
[info]   CI (99.9%): [556.251, 594.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.202 ±(99.9%) 1.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 0.635), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.550 ±(99.9%) 1161.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.550, 675.276), stdev = 301.619
[info]   CI (99.9%): [≈ 0, 1700.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3247.013 ±(99.9%) 6990.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3247.013, 4108.137), stdev = 1815.370
[info]   CI (99.9%): [≈ 0, 10237.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442936.042 ops/s
[info] # Warmup Iteration   2: 465100.446 ops/s
[info] # Warmup Iteration   3: 476599.585 ops/s
[info] # Warmup Iteration   4: 474225.493 ops/s
[info] # Warmup Iteration   5: 474030.541 ops/s
[info] Iteration   1: 473241.193 ops/s
[info]                  ·gc.alloc.rate:                   596.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1701.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 477295.791 ops/s
[info]                  ·gc.alloc.rate:                   601.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2225.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 477679.061 ops/s
[info]                  ·gc.alloc.rate:                   602.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2223.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 477000.249 ops/s
[info]                  ·gc.alloc.rate:                   601.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2219.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 477355.133 ops/s
[info]                  ·gc.alloc.rate:                   601.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2218.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   476514.286 ±(99.9%) 7106.440 ops/s [Average]
[info]   (min, avg, max) = (473241.193, 476514.286, 477679.061), stdev = 1845.520
[info]   CI (99.9%): [469407.846, 483620.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   600.750 ±(99.9%) 8.714 MB/sec [Average]
[info]   (min, avg, max) = (596.740, 600.750, 602.081), stdev = 2.263
[info]   CI (99.9%): [592.037, 609.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.611 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.274), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.200 ±(99.9%) 18.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.200, 10.795), stdev = 4.805
[info]   CI (99.9%): [≈ 0, 20.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.410 ±(99.9%) 279.143 MB/sec [Average]
[info]   (min, avg, max) = (511.742, 641.410, 674.828), stdev = 72.493
[info]   CI (99.9%): [362.266, 920.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2117.585 ±(99.9%) 895.917 B/op [Average]
[info]   (min, avg, max) = (1701.407, 2117.585, 2225.115), stdev = 232.667
[info]   CI (99.9%): [1221.668, 3013.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42193.653 ops/s
[info] # Warmup Iteration   2: 69156.353 ops/s
[info] # Warmup Iteration   3: 70497.834 ops/s
[info] # Warmup Iteration   4: 66307.995 ops/s
[info] # Warmup Iteration   5: 70938.878 ops/s
[info] Iteration   1: 71085.915 ops/s
[info]                  ·gc.alloc.rate:                   3171.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60158.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 70786.846 ops/s
[info]                  ·gc.alloc.rate:                   3158.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75593.326 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 71042.241 ops/s
[info]                  ·gc.alloc.rate:                   3169.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75382.126 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71220.722 ops/s
[info]                  ·gc.alloc.rate:                   3177.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60178.556 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 70908.767 ops/s
[info]                  ·gc.alloc.rate:                   3163.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75552.000 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   71008.898 ±(99.9%) 642.163 ops/s [Average]
[info]   (min, avg, max) = (70786.846, 71008.898, 71220.722), stdev = 166.768
[info]   CI (99.9%): [70366.735, 71651.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3168.185 ±(99.9%) 29.147 MB/sec [Average]
[info]   (min, avg, max) = (3158.068, 3168.185, 3177.787), stdev = 7.569
[info]   CI (99.9%): [3139.037, 3197.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.006), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.661 ±(99.9%) 1.582 B/op [Average]
[info]   (min, avg, max) = (1.383, 1.661, 2.306), stdev = 0.411
[info]   CI (99.9%): [0.079, 3.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3128.855 ±(99.9%) 1437.872 MB/sec [Average]
[info]   (min, avg, max) = (2716.730, 3128.855, 3403.331), stdev = 373.411
[info]   CI (99.9%): [1690.983, 4566.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69372.880 ±(99.9%) 32356.229 B/op [Average]
[info]   (min, avg, max) = (60158.394, 69372.880, 75593.326), stdev = 8402.810
[info]   CI (99.9%): [37016.651, 101729.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171650.537 ops/s
[info] # Warmup Iteration   2: 220991.973 ops/s
[info] # Warmup Iteration   3: 222557.038 ops/s
[info] # Warmup Iteration   4: 224042.228 ops/s
[info] # Warmup Iteration   5: 224452.958 ops/s
[info] Iteration   1: 223607.208 ops/s
[info]                  ·gc.alloc.rate:                   1577.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14168.996 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 222536.351 ops/s
[info]                  ·gc.alloc.rate:                   1569.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9500.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 224028.548 ops/s
[info]                  ·gc.alloc.rate:                   1580.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9444.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 223970.718 ops/s
[info]                  ·gc.alloc.rate:                   1580.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14186.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 224701.302 ops/s
[info]                  ·gc.alloc.rate:                   1585.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9443.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   223768.825 ±(99.9%) 3058.078 ops/s [Average]
[info]   (min, avg, max) = (222536.351, 223768.825, 224701.302), stdev = 794.173
[info]   CI (99.9%): [220710.747, 226826.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1578.707 ±(99.9%) 22.056 MB/sec [Average]
[info]   (min, avg, max) = (1569.921, 1578.707, 1585.533), stdev = 5.728
[info]   CI (99.9%): [1556.651, 1600.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.205 ±(99.9%) 0.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 0.293), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1613.504 ±(99.9%) 1414.371 MB/sec [Average]
[info]   (min, avg, max) = (1343.208, 1613.504, 2018.992), stdev = 367.308
[info]   CI (99.9%): [199.133, 3027.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11348.658 ±(99.9%) 9944.553 B/op [Average]
[info]   (min, avg, max) = (9443.352, 11348.658, 14186.203), stdev = 2582.569
[info]   CI (99.9%): [1404.106, 21293.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75059.227 ops/s
[info] # Warmup Iteration   2: 712582.125 ops/s
[info] # Warmup Iteration   3: 653961.663 ops/s
[info] # Warmup Iteration   4: 679205.632 ops/s
[info] # Warmup Iteration   5: 677790.315 ops/s
[info] Iteration   1: 677946.633 ops/s
[info]                  ·gc.alloc.rate:                   530.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1187.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 679150.373 ops/s
[info]                  ·gc.alloc.rate:                   531.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1561.468 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 677187.407 ops/s
[info]                  ·gc.alloc.rate:      530.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 678462.883 ops/s
[info]                  ·gc.alloc.rate:                   531.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1563.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 677466.711 ops/s
[info]                  ·gc.alloc.rate:                   530.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1563.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   678042.801 ±(99.9%) 3029.561 ops/s [Average]
[info]   (min, avg, max) = (677187.407, 678042.801, 679150.373), stdev = 786.767
[info]   CI (99.9%): [675013.241, 681072.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   530.713 ±(99.9%) 2.464 MB/sec [Average]
[info]   (min, avg, max) = (530.015, 530.713, 531.564), stdev = 0.640
[info]   CI (99.9%): [528.249, 533.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.504 ±(99.9%) 4.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.501), stdev = 1.116
[info]   CI (99.9%): [≈ 0, 4.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.169 ±(99.9%) 9.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.169, 5.797), stdev = 2.587
[info]   CI (99.9%): [≈ 0, 11.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.358 ±(99.9%) 1122.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.358, 673.850), stdev = 291.612
[info]   CI (99.9%): [≈ 0, 1629.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1175.042 ±(99.9%) 2605.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1175.042, 1563.046), stdev = 676.624
[info]   CI (99.9%): [≈ 0, 3780.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318315.967 ops/s
[info] # Warmup Iteration   2: 450505.059 ops/s
[info] # Warmup Iteration   3: 452882.891 ops/s
[info] # Warmup Iteration   4: 467095.470 ops/s
[info] # Warmup Iteration   5: 455049.097 ops/s
[info] Iteration   1: 466301.161 ops/s
[info]                  ·gc.alloc.rate:                   478.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1726.728 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 466755.699 ops/s
[info]                  ·gc.alloc.rate:      479.202 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 466888.100 ops/s
[info]                  ·gc.alloc.rate:                   479.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2271.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 467066.502 ops/s
[info]                  ·gc.alloc.rate:                   479.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2270.461 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 468533.444 ops/s
[info]                  ·gc.alloc.rate:                   480.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2267.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   467108.981 ±(99.9%) 3254.346 ops/s [Average]
[info]   (min, avg, max) = (466301.161, 467108.981, 468533.444), stdev = 845.143
[info]   CI (99.9%): [463854.635, 470363.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   479.603 ±(99.9%) 3.151 MB/sec [Average]
[info]   (min, avg, max) = (478.825, 479.603, 480.979), stdev = 0.818
[info]   CI (99.9%): [476.452, 482.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.084 ±(99.9%) 0.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.351), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.857 ±(99.9%) 1124.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.857, 674.988), stdev = 291.957
[info]   CI (99.9%): [≈ 0, 1631.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1707.275 ±(99.9%) 3784.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1707.275, 2271.346), stdev = 982.949
[info]   CI (99.9%): [≈ 0, 5492.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597678.781 ops/s
[info] # Warmup Iteration   2: 626454.002 ops/s
[info] # Warmup Iteration   3: 582651.543 ops/s
[info] # Warmup Iteration   4: 580489.507 ops/s
[info] # Warmup Iteration   5: 585413.193 ops/s
[info] Iteration   1: 585557.524 ops/s
[info]                  ·gc.alloc.rate:                   458.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1375.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 586652.294 ops/s
[info]                  ·gc.alloc.rate:                   459.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1372.531 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 587683.417 ops/s
[info]                  ·gc.alloc.rate:                   460.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1807.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 588104.070 ops/s
[info]                  ·gc.alloc.rate:      460.295 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 589727.334 ops/s
[info]                  ·gc.alloc.rate:                   461.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1800.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   587544.928 ±(99.9%) 6039.893 ops/s [Average]
[info]   (min, avg, max) = (585557.524, 587544.928, 589727.334), stdev = 1568.541
[info]   CI (99.9%): [581505.034, 593584.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   459.905 ±(99.9%) 4.746 MB/sec [Average]
[info]   (min, avg, max) = (458.348, 459.905, 461.640), stdev = 1.233
[info]   CI (99.9%): [455.159, 464.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.631 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.280), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.779 ±(99.9%) 15.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.779, 8.785), stdev = 3.917
[info]   CI (99.9%): [≈ 0, 16.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.564 ±(99.9%) 1068.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.564, 674.826), stdev = 277.560
[info]   CI (99.9%): [≈ 0, 1543.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1271.156 ±(99.9%) 2858.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1271.156, 1807.213), stdev = 742.453
[info]   CI (99.9%): [≈ 0, 4130.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648218.212 ops/s
[info] # Warmup Iteration   2: 678044.266 ops/s
[info] # Warmup Iteration   3: 704042.585 ops/s
[info] # Warmup Iteration   4: 701168.218 ops/s
[info] # Warmup Iteration   5: 685338.015 ops/s
[info] Iteration   1: 704273.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 701341.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 703529.992 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 704657.858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 704109.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   703582.502 ±(99.9%) 5070.740 ops/s [Average]
[info]   (min, avg, max) = (701341.551, 703582.502, 704657.858), stdev = 1316.855
[info]   CI (99.9%): [698511.762, 708653.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21085.298 ops/s
[info] # Warmup Iteration   2: 30312.961 ops/s
[info] # Warmup Iteration   3: 30702.603 ops/s
[info] # Warmup Iteration   4: 30622.256 ops/s
[info] # Warmup Iteration   5: 30801.688 ops/s
[info] Iteration   1: 30817.848 ops/s
[info]                  ·gc.alloc.rate:                   1580.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68380.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30784.873 ops/s
[info]                  ·gc.alloc.rate:                   1578.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102766.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30844.693 ops/s
[info]                  ·gc.alloc.rate:                   1581.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68454.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30850.510 ops/s
[info]                  ·gc.alloc.rate:                   1581.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68511.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30716.883 ops/s
[info]                  ·gc.alloc.rate:                   1574.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103396.836 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   30802.961 ±(99.9%) 210.562 ops/s [Average]
[info]   (min, avg, max) = (30716.883, 30802.961, 30850.510), stdev = 54.682
[info]   CI (99.9%): [30592.399, 31013.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1579.435 ±(99.9%) 11.239 MB/sec [Average]
[info]   (min, avg, max) = (1574.792, 1579.435, 1581.856), stdev = 2.919
[info]   CI (99.9%): [1568.196, 1590.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80704.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (80704.013, 80704.013, 80704.014), stdev = 0.001
[info]   CI (99.9%): [80704.012, 80704.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.128 ±(99.9%) 6.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.128, 4.249), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 8.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1610.224 ±(99.9%) 1418.539 MB/sec [Average]
[info]   (min, avg, max) = (1339.260, 1610.224, 2017.601), stdev = 368.390
[info]   CI (99.9%): [191.685, 3028.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82302.174 ±(99.9%) 73048.125 B/op [Average]
[info]   (min, avg, max) = (68380.954, 82302.174, 103396.836), stdev = 18970.366
[info]   CI (99.9%): [9254.049, 155350.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5444.766 ops/s
[info] # Warmup Iteration   2: 7674.365 ops/s
[info] # Warmup Iteration   3: 7744.307 ops/s
[info] # Warmup Iteration   4: 7906.541 ops/s
[info] # Warmup Iteration   5: 7945.654 ops/s
[info] Iteration   1: 7914.479 ops/s
[info]                  ·gc.alloc.rate:                   1218.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267442.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7928.337 ops/s
[info]                  ·gc.alloc.rate:                   1220.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266838.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7942.433 ops/s
[info]                  ·gc.alloc.rate:                   1223.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266433.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7942.290 ops/s
[info]                  ·gc.alloc.rate:                   1222.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266565.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7929.544 ops/s
[info]                  ·gc.alloc.rate:                   1220.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267201.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7931.417 ±(99.9%) 44.719 ops/s [Average]
[info]   (min, avg, max) = (7914.479, 7931.417, 7942.433), stdev = 11.614
[info]   CI (99.9%): [7886.697, 7976.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1221.095 ±(99.9%) 7.617 MB/sec [Average]
[info]   (min, avg, max) = (1218.197, 1221.095, 1223.133), stdev = 1.978
[info]   CI (99.9%): [1213.477, 1228.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.053 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (242296.051, 242296.053, 242296.059), stdev = 0.004
[info]   CI (99.9%): [242296.039, 242296.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.255 ±(99.9%) 37.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.255, 24.749), stdev = 9.672
[info]   CI (99.9%): [≈ 0, 45.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1345.070 ±(99.9%) 3.047 MB/sec [Average]
[info]   (min, avg, max) = (1344.203, 1345.070, 1346.304), stdev = 0.791
[info]   CI (99.9%): [1342.023, 1348.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   266896.300 ±(99.9%) 1631.055 B/op [Average]
[info]   (min, avg, max) = (266433.869, 266896.300, 267442.514), stdev = 423.580
[info]   CI (99.9%): [265265.244, 268527.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3825.085 ops/s
[info] # Warmup Iteration   2: 8155.589 ops/s
[info] # Warmup Iteration   3: 8114.587 ops/s
[info] # Warmup Iteration   4: 8186.456 ops/s
[info] # Warmup Iteration   5: 8426.227 ops/s
[info] Iteration   1: 8455.395 ops/s
[info]                  ·gc.alloc.rate:                   1218.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125772.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8281.856 ops/s
[info]                  ·gc.alloc.rate:                   1193.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256954.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8380.540 ops/s
[info]                  ·gc.alloc.rate:                   1208.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254107.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8424.487 ops/s
[info]                  ·gc.alloc.rate:                   1214.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252967.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8419.271 ops/s
[info]                  ·gc.alloc.rate:                   1213.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253396.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8392.310 ±(99.9%) 258.887 ops/s [Average]
[info]   (min, avg, max) = (8281.856, 8392.310, 8455.395), stdev = 67.232
[info]   CI (99.9%): [8133.423, 8651.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1209.724 ±(99.9%) 37.144 MB/sec [Average]
[info]   (min, avg, max) = (1193.777, 1209.724, 1218.640), stdev = 9.646
[info]   CI (99.9%): [1172.579, 1246.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.049 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (226864.048, 226864.049, 226864.052), stdev = 0.002
[info]   CI (99.9%): [226864.043, 226864.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.915 ±(99.9%) 21.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.915, 11.665), stdev = 5.523
[info]   CI (99.9%): [≈ 0, 25.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.135 ±(99.9%) 1167.845 MB/sec [Average]
[info]   (min, avg, max) = (675.607, 1218.135, 1355.751), stdev = 303.286
[info]   CI (99.9%): [50.291, 2385.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   228639.506 ±(99.9%) 221510.724 B/op [Average]
[info]   (min, avg, max) = (125772.092, 228639.506, 256954.283), stdev = 57525.632
[info]   CI (99.9%): [7128.782, 450150.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140513.109 ops/s
[info] # Warmup Iteration   2: 158855.371 ops/s
[info] # Warmup Iteration   3: 160512.352 ops/s
[info] # Warmup Iteration   4: 161148.404 ops/s
[info] # Warmup Iteration   5: 160346.495 ops/s
[info] Iteration   1: 160747.055 ops/s
[info]                  ·gc.alloc.rate:                   1557.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19785.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 157464.981 ops/s
[info]                  ·gc.alloc.rate:                   1525.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13472.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 160923.225 ops/s
[info]                  ·gc.alloc.rate:                   1558.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13192.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 160779.049 ops/s
[info]                  ·gc.alloc.rate:                   1557.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19828.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 160899.429 ops/s
[info]                  ·gc.alloc.rate:                   1558.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13220.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   160162.748 ±(99.9%) 5814.412 ops/s [Average]
[info]   (min, avg, max) = (157464.981, 160162.748, 160923.225), stdev = 1509.984
[info]   CI (99.9%): [154348.336, 165977.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1551.556 ±(99.9%) 56.271 MB/sec [Average]
[info]   (min, avg, max) = (1525.444, 1551.556, 1558.850), stdev = 14.613
[info]   CI (99.9%): [1495.284, 1607.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.408 ±(99.9%) 1.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 0.814), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1618.825 ±(99.9%) 1421.179 MB/sec [Average]
[info]   (min, avg, max) = (1347.859, 1618.825, 2025.892), stdev = 369.076
[info]   CI (99.9%): [197.646, 3040.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15899.946 ±(99.9%) 13740.188 B/op [Average]
[info]   (min, avg, max) = (13192.298, 15899.946, 19828.743), stdev = 3568.283
[info]   CI (99.9%): [2159.758, 29640.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3681.205 ops/s
[info] # Warmup Iteration   2: 7367.061 ops/s
[info] # Warmup Iteration   3: 7622.729 ops/s
[info] # Warmup Iteration   4: 7657.028 ops/s
[info] # Warmup Iteration   5: 7504.217 ops/s
[info] Iteration   1: 7666.579 ops/s
[info]                  ·gc.alloc.rate:                   1394.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277596.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7663.862 ops/s
[info]                  ·gc.alloc.rate:                   1393.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277942.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7653.700 ops/s
[info]                  ·gc.alloc.rate:                   1392.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278510.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7529.197 ops/s
[info]                  ·gc.alloc.rate:                   1369.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              286287.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 283342.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7652.863 ops/s
[info]                  ·gc.alloc.rate:                   1391.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 278958.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7633.240 ±(99.9%) 225.172 ops/s [Average]
[info]   (min, avg, max) = (7529.197, 7633.240, 7666.579), stdev = 58.476
[info]   CI (99.9%): [7408.069, 7858.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1388.388 ±(99.9%) 41.042 MB/sec [Average]
[info]   (min, avg, max) = (1369.442, 1388.388, 1394.704), stdev = 10.658
[info]   CI (99.9%): [1347.346, 1429.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286281.453 ±(99.9%) 12.049 B/op [Average]
[info]   (min, avg, max) = (286280.053, 286281.453, 286287.050), stdev = 3.129
[info]   CI (99.9%): [286269.403, 286293.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.305 ±(99.9%) 16.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.305, 8.702), stdev = 4.313
[info]   CI (99.9%): [≈ 0, 20.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1354.316 ±(99.9%) 5.964 MB/sec [Average]
[info]   (min, avg, max) = (1352.399, 1354.316, 1356.243), stdev = 1.549
[info]   CI (99.9%): [1348.352, 1360.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   279270.073 ±(99.9%) 8993.941 B/op [Average]
[info]   (min, avg, max) = (277596.411, 279270.073, 283342.472), stdev = 2335.698
[info]   CI (99.9%): [270276.132, 288264.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13117.246 ops/s
[info] # Warmup Iteration   2: 18531.636 ops/s
[info] # Warmup Iteration   3: 18588.244 ops/s
[info] # Warmup Iteration   4: 18582.556 ops/s
[info] # Warmup Iteration   5: 18607.759 ops/s
[info] Iteration   1: 18634.026 ops/s
[info]                  ·gc.alloc.rate:                   845.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              71432.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56991.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18597.216 ops/s
[info]                  ·gc.alloc.rate:                   844.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              71410.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113871.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18446.610 ops/s
[info]                  ·gc.alloc.rate:                   836.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57344.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18477.849 ops/s
[info]                  ·gc.alloc.rate:                   838.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57245.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18521.325 ops/s
[info]                  ·gc.alloc.rate:                   840.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57109.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18535.405 ±(99.9%) 304.068 ops/s [Average]
[info]   (min, avg, max) = (18446.610, 18535.405, 18634.026), stdev = 78.966
[info]   CI (99.9%): [18231.337, 18839.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   841.213 ±(99.9%) 14.230 MB/sec [Average]
[info]   (min, avg, max) = (836.976, 841.213, 845.802), stdev = 3.695
[info]   CI (99.9%): [826.983, 855.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71413.285 ±(99.9%) 40.535 B/op [Average]
[info]   (min, avg, max) = (71408.022, 71413.285, 71432.031), stdev = 10.527
[info]   CI (99.9%): [71372.750, 71453.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.471 ±(99.9%) 10.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.471, 5.319), stdev = 2.678
[info]   CI (99.9%): [≈ 0, 12.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   807.505 ±(99.9%) 1159.206 MB/sec [Average]
[info]   (min, avg, max) = (672.141, 807.505, 1346.021), stdev = 301.042
[info]   CI (99.9%): [≈ 0, 1966.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68512.622 ±(99.9%) 97639.738 B/op [Average]
[info]   (min, avg, max) = (56991.495, 68512.622, 113871.486), stdev = 25356.730
[info]   CI (99.9%): [≈ 0, 166152.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11952.903 ops/s
[info] # Warmup Iteration   2: 20961.089 ops/s
[info] # Warmup Iteration   3: 20372.089 ops/s
[info] # Warmup Iteration   4: 21061.233 ops/s
[info] # Warmup Iteration   5: 21104.329 ops/s
[info] Iteration   1: 21096.700 ops/s
[info]                  ·gc.alloc.rate:                   893.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50366.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 21149.748 ops/s
[info]                  ·gc.alloc.rate:                   896.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50237.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21140.588 ops/s
[info]                  ·gc.alloc.rate:                   895.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100617.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21152.011 ops/s
[info]                  ·gc.alloc.rate:                   896.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50305.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21124.330 ops/s
[info]                  ·gc.alloc.rate:                   895.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50371.747 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   21132.675 ±(99.9%) 88.058 ops/s [Average]
[info]   (min, avg, max) = (21096.700, 21132.675, 21152.011), stdev = 22.868
[info]   CI (99.9%): [21044.617, 21220.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   895.449 ±(99.9%) 3.898 MB/sec [Average]
[info]   (min, avg, max) = (893.895, 895.449, 896.402), stdev = 1.012
[info]   CI (99.9%): [891.551, 899.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.021, 66696.024), stdev = 0.002
[info]   CI (99.9%): [66696.014, 66696.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.551 ±(99.9%) 8.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.551, 4.649), stdev = 2.193
[info]   CI (99.9%): [≈ 0, 9.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.695 ±(99.9%) 1163.795 MB/sec [Average]
[info]   (min, avg, max) = (675.018, 810.695, 1351.346), stdev = 302.234
[info]   CI (99.9%): [≈ 0, 1974.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   60379.760 ±(99.9%) 86615.394 B/op [Average]
[info]   (min, avg, max) = (50237.864, 60379.760, 100617.673), stdev = 22493.743
[info]   CI (99.9%): [≈ 0, 146995.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414528.606 ops/s
[info] # Warmup Iteration   2: 438109.605 ops/s
[info] # Warmup Iteration   3: 447455.567 ops/s
[info] # Warmup Iteration   4: 446014.965 ops/s
[info] # Warmup Iteration   5: 444687.668 ops/s
[info] Iteration   1: 445428.419 ops/s
[info]                  ·gc.alloc.rate:                   1009.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4763.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 453239.412 ops/s
[info]                  ·gc.alloc.rate:                   1027.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2338.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 450293.185 ops/s
[info]                  ·gc.alloc.rate:                   1020.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4707.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 452657.321 ops/s
[info]                  ·gc.alloc.rate:                   1026.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4684.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 453688.335 ops/s
[info]                  ·gc.alloc.rate:                   1028.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2337.456 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   451061.334 ±(99.9%) 13130.656 ops/s [Average]
[info]   (min, avg, max) = (445428.419, 451061.334, 453688.335), stdev = 3409.990
[info]   CI (99.9%): [437930.678, 464191.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1022.527 ±(99.9%) 29.466 MB/sec [Average]
[info]   (min, avg, max) = (1009.928, 1022.527, 1028.411), stdev = 7.652
[info]   CI (99.9%): [993.061, 1051.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.291), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.900 ±(99.9%) 1421.184 MB/sec [Average]
[info]   (min, avg, max) = (673.465, 1077.900, 1348.429), stdev = 369.077
[info]   CI (99.9%): [≈ 0, 2499.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3766.412 ±(99.9%) 5022.235 B/op [Average]
[info]   (min, avg, max) = (2337.456, 3766.412, 4763.901), stdev = 1304.258
[info]   CI (99.9%): [≈ 0, 8788.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447501.094 ops/s
[info] # Warmup Iteration   2: 485663.095 ops/s
[info] # Warmup Iteration   3: 485714.874 ops/s
[info] # Warmup Iteration   4: 485246.160 ops/s
[info] # Warmup Iteration   5: 484308.356 ops/s
[info] Iteration   1: 485492.536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 485523.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 484822.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 485620.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 487639.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   485819.937 ±(99.9%) 4102.798 ops/s [Average]
[info]   (min, avg, max) = (484822.868, 485819.937, 487639.884), stdev = 1065.484
[info]   CI (99.9%): [481717.139, 489922.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14210.677 ops/s
[info] # Warmup Iteration   2: 19655.800 ops/s
[info] # Warmup Iteration   3: 19705.210 ops/s
[info] # Warmup Iteration   4: 19781.969 ops/s
[info] # Warmup Iteration   5: 19754.647 ops/s
[info] Iteration   1: 19353.878 ops/s
[info]                  ·gc.alloc.rate:                   892.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              72575.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109315.822 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 19818.807 ops/s
[info]                  ·gc.alloc.rate:                   913.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53269.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19775.618 ops/s
[info]                  ·gc.alloc.rate:                   912.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106559.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19677.960 ops/s
[info]                  ·gc.alloc.rate:                   907.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53544.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 19809.267 ops/s
[info]                  ·gc.alloc.rate:                   913.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53188.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19687.106 ±(99.9%) 748.719 ops/s [Average]
[info]   (min, avg, max) = (19353.878, 19687.106, 19818.807), stdev = 194.440
[info]   CI (99.9%): [18938.387, 20435.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   907.790 ±(99.9%) 34.793 MB/sec [Average]
[info]   (min, avg, max) = (892.244, 907.790, 913.659), stdev = 9.036
[info]   CI (99.9%): [872.997, 942.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72576.009 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (72575.963, 72576.009, 72576.021), stdev = 0.026
[info]   CI (99.9%): [72575.909, 72576.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.017 ±(99.9%) 11.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.017, 6.771), stdev = 3.020
[info]   CI (99.9%): [≈ 0, 13.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   938.544 ±(99.9%) 1416.770 MB/sec [Average]
[info]   (min, avg, max) = (669.393, 938.544, 1343.922), stdev = 367.931
[info]   CI (99.9%): [≈ 0, 2355.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75175.667 ±(99.9%) 115225.044 B/op [Average]
[info]   (min, avg, max) = (53188.254, 75175.667, 109315.822), stdev = 29923.578
[info]   CI (99.9%): [≈ 0, 190400.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9579.958 ops/s
[info] # Warmup Iteration   2: 13764.160 ops/s
[info] # Warmup Iteration   3: 14103.732 ops/s
[info] # Warmup Iteration   4: 14044.673 ops/s
[info] # Warmup Iteration   5: 14152.424 ops/s
[info] Iteration   1: 14153.882 ops/s
[info]                  ·gc.alloc.rate:                   1357.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149330.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14134.283 ops/s
[info]                  ·gc.alloc.rate:                   1355.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149521.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14159.524 ops/s
[info]                  ·gc.alloc.rate:                   1358.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223975.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14192.161 ops/s
[info]                  ·gc.alloc.rate:                   1361.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149142.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14169.164 ops/s
[info]                  ·gc.alloc.rate:                   1358.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149532.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   14161.803 ±(99.9%) 81.708 ops/s [Average]
[info]   (min, avg, max) = (14134.283, 14161.803, 14192.161), stdev = 21.219
[info]   CI (99.9%): [14080.095, 14243.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1358.192 ±(99.9%) 8.172 MB/sec [Average]
[info]   (min, avg, max) = (1355.449, 1358.192, 1361.239), stdev = 2.122
[info]   CI (99.9%): [1350.020, 1366.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   150944.031 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (150944.029, 150944.031, 150944.036), stdev = 0.003
[info]   CI (99.9%): [150944.018, 150944.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.240 ±(99.9%) 10.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.240, 6.944), stdev = 2.641
[info]   CI (99.9%): [≈ 0, 13.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.366 ±(99.9%) 1155.684 MB/sec [Average]
[info]   (min, avg, max) = (1342.671, 1478.366, 2015.244), stdev = 300.127
[info]   CI (99.9%): [322.682, 2634.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   164300.457 ±(99.9%) 128456.710 B/op [Average]
[info]   (min, avg, max) = (149142.300, 164300.457, 223975.597), stdev = 33359.800
[info]   CI (99.9%): [35843.747, 292757.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7656.111 ops/s
[info] # Warmup Iteration   2: 13175.708 ops/s
[info] # Warmup Iteration   3: 13374.357 ops/s
[info] # Warmup Iteration   4: 13674.403 ops/s
[info] # Warmup Iteration   5: 13683.711 ops/s
[info] Iteration   1: 13274.619 ops/s
[info]                  ·gc.alloc.rate:                   1215.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160244.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 13687.677 ops/s
[info]                  ·gc.alloc.rate:                   1252.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155486.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13693.668 ops/s
[info]                  ·gc.alloc.rate:                   1253.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155571.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 13681.106 ops/s
[info]                  ·gc.alloc.rate:                   1252.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              144076.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155861.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13732.783 ops/s
[info]                  ·gc.alloc.rate:                   1256.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77679.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13613.971 ±(99.9%) 734.574 ops/s [Average]
[info]   (min, avg, max) = (13274.619, 13613.971, 13732.783), stdev = 190.766
[info]   CI (99.9%): [12879.397, 14348.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1246.131 ±(99.9%) 66.969 MB/sec [Average]
[info]   (min, avg, max) = (1215.151, 1246.131, 1256.549), stdev = 17.392
[info]   CI (99.9%): [1179.162, 1313.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144079.427 ±(99.9%) 54.021 B/op [Average]
[info]   (min, avg, max) = (144056.030, 144079.427, 144088.539), stdev = 14.029
[info]   CI (99.9%): [144025.406, 144133.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.915 ±(99.9%) 7.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.915, 4.787), stdev = 2.003
[info]   CI (99.9%): [≈ 0, 9.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.877 ±(99.9%) 1163.065 MB/sec [Average]
[info]   (min, avg, max) = (677.569, 1217.877, 1354.903), stdev = 302.044
[info]   CI (99.9%): [54.812, 2380.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   140968.489 ±(99.9%) 136451.809 B/op [Average]
[info]   (min, avg, max) = (77679.365, 140968.489, 160244.084), stdev = 35436.101
[info]   CI (99.9%): [4516.680, 277420.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232055.171 ops/s
[info] # Warmup Iteration   2: 247268.509 ops/s
[info] # Warmup Iteration   3: 252697.802 ops/s
[info] # Warmup Iteration   4: 248457.805 ops/s
[info] # Warmup Iteration   5: 253813.164 ops/s
[info] Iteration   1: 252921.669 ops/s
[info]                  ·gc.alloc.rate:                   1462.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8356.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 252790.158 ops/s
[info]                  ·gc.alloc.rate:                   1462.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8369.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 253095.322 ops/s
[info]                  ·gc.alloc.rate:                   1463.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8363.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 253108.708 ops/s
[info]                  ·gc.alloc.rate:                   1463.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8371.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 247910.452 ops/s
[info]                  ·gc.alloc.rate:                   1433.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12837.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   251965.262 ±(99.9%) 8742.988 ops/s [Average]
[info]   (min, avg, max) = (247910.452, 251965.262, 253108.708), stdev = 2270.526
[info]   CI (99.9%): [243222.274, 260708.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1457.294 ±(99.9%) 50.755 MB/sec [Average]
[info]   (min, avg, max) = (1433.752, 1457.294, 1463.872), stdev = 13.181
[info]   CI (99.9%): [1406.539, 1508.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.233 ±(99.9%) 0.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.233, 0.389), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1479.868 ±(99.9%) 1166.253 MB/sec [Average]
[info]   (min, avg, max) = (1342.803, 1479.868, 2021.658), stdev = 302.872
[info]   CI (99.9%): [313.615, 2646.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9259.476 ±(99.9%) 7701.078 B/op [Average]
[info]   (min, avg, max) = (8356.872, 9259.476, 12837.074), stdev = 1999.946
[info]   CI (99.9%): [1558.398, 16960.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5304.515 ops/s
[info] # Warmup Iteration   2: 12078.812 ops/s
[info] # Warmup Iteration   3: 12402.963 ops/s
[info] # Warmup Iteration   4: 12367.352 ops/s
[info] # Warmup Iteration   5: 12394.195 ops/s
[info] Iteration   1: 12369.694 ops/s
[info]                  ·gc.alloc.rate:                   1548.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172036.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 12357.370 ops/s
[info]                  ·gc.alloc.rate:                   1546.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 258538.460 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12418.887 ops/s
[info]                  ·gc.alloc.rate:                   1554.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171653.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12394.623 ops/s
[info]                  ·gc.alloc.rate:                   1551.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172126.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12388.657 ops/s
[info]                  ·gc.alloc.rate:                   1550.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172336.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12385.846 ±(99.9%) 91.294 ops/s [Average]
[info]   (min, avg, max) = (12357.370, 12385.846, 12418.887), stdev = 23.709
[info]   CI (99.9%): [12294.552, 12477.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1550.393 ±(99.9%) 11.831 MB/sec [Average]
[info]   (min, avg, max) = (1546.560, 1550.393, 1554.571), stdev = 3.073
[info]   CI (99.9%): [1538.562, 1562.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197016.055 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (197016.033, 197016.055, 197016.134), stdev = 0.044
[info]   CI (99.9%): [197015.886, 197016.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.762 ±(99.9%) 15.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.762, 10.573), stdev = 3.920
[info]   CI (99.9%): [≈ 0, 19.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.636 ±(99.9%) 1162.128 MB/sec [Average]
[info]   (min, avg, max) = (1352.131, 1489.636, 2029.507), stdev = 301.801
[info]   CI (99.9%): [327.508, 2651.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   189338.366 ±(99.9%) 148961.467 B/op [Average]
[info]   (min, avg, max) = (171653.461, 189338.366, 258538.460), stdev = 38684.820
[info]   CI (99.9%): [40376.899, 338299.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18182.028 ops/s
[info] # Warmup Iteration   2: 26403.704 ops/s
[info] # Warmup Iteration   3: 27671.046 ops/s
[info] # Warmup Iteration   4: 27913.861 ops/s
[info] # Warmup Iteration   5: 27886.654 ops/s
[info] Iteration   1: 27499.813 ops/s
[info]                  ·gc.alloc.rate:                   948.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38467.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28084.320 ops/s
[info]                  ·gc.alloc.rate:                   969.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75258.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28109.824 ops/s
[info]                  ·gc.alloc.rate:                   969.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37557.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28193.449 ops/s
[info]                  ·gc.alloc.rate:                   973.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37445.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28089.156 ops/s
[info]                  ·gc.alloc.rate:                   969.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75188.878 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27995.312 ±(99.9%) 1079.932 ops/s [Average]
[info]   (min, avg, max) = (27499.813, 27995.312, 28193.449), stdev = 280.455
[info]   CI (99.9%): [26915.380, 29075.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   966.042 ±(99.9%) 37.446 MB/sec [Average]
[info]   (min, avg, max) = (948.884, 966.042, 973.049), stdev = 9.725
[info]   CI (99.9%): [928.596, 1003.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54312.015, 54312.015, 54312.016), stdev = 0.001
[info]   CI (99.9%): [54312.013, 54312.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.166 ±(99.9%) 7.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.166, 4.666), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   939.659 ±(99.9%) 1415.421 MB/sec [Average]
[info]   (min, avg, max) = (670.721, 939.659, 1342.960), stdev = 367.580
[info]   CI (99.9%): [≈ 0, 2355.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52783.388 ±(99.9%) 78895.230 B/op [Average]
[info]   (min, avg, max) = (37445.159, 52783.388, 75258.258), stdev = 20488.841
[info]   CI (99.9%): [≈ 0, 131678.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50638.684 ops/s
[info] # Warmup Iteration   2: 78860.735 ops/s
[info] # Warmup Iteration   3: 81977.946 ops/s
[info] # Warmup Iteration   4: 82065.975 ops/s
[info] # Warmup Iteration   5: 82123.181 ops/s
[info] Iteration   1: 82161.181 ops/s
[info]                  ·gc.alloc.rate:                   1307.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25903.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 82399.395 ops/s
[info]                  ·gc.alloc.rate:                   1312.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25847.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 82160.980 ops/s
[info]                  ·gc.alloc.rate:                   1307.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25941.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 82417.442 ops/s
[info]                  ·gc.alloc.rate:                   1311.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12937.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 82451.670 ops/s
[info]                  ·gc.alloc.rate:                   1312.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25887.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   82318.134 ±(99.9%) 556.778 ops/s [Average]
[info]   (min, avg, max) = (82160.980, 82318.134, 82451.670), stdev = 144.593
[info]   CI (99.9%): [81761.356, 82874.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1310.413 ±(99.9%) 9.159 MB/sec [Average]
[info]   (min, avg, max) = (1307.715, 1310.413, 1312.384), stdev = 2.379
[info]   CI (99.9%): [1301.253, 1319.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.636 ±(99.9%) 2.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.636, 1.193), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.602 ±(99.9%) 1164.974 MB/sec [Average]
[info]   (min, avg, max) = (677.408, 1218.602, 1355.926), stdev = 302.540
[info]   CI (99.9%): [53.628, 2383.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23303.628 ±(99.9%) 22314.864 B/op [Average]
[info]   (min, avg, max) = (12937.216, 23303.628, 25941.965), stdev = 5795.099
[info]   CI (99.9%): [988.764, 45618.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645962.096 ops/s
[info] # Warmup Iteration   2: 689290.766 ops/s
[info] # Warmup Iteration   3: 690409.676 ops/s
[info] # Warmup Iteration   4: 706303.818 ops/s
[info] # Warmup Iteration   5: 706847.204 ops/s
[info] Iteration   1: 705195.727 ops/s
[info]                  ·gc.alloc.rate:                   967.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3003.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 706532.449 ops/s
[info]                  ·gc.alloc.rate:                   969.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1495.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 709279.105 ops/s
[info]                  ·gc.alloc.rate:                   973.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1489.958 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 706418.347 ops/s
[info]                  ·gc.alloc.rate:                   969.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2991.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 709211.716 ops/s
[info]                  ·gc.alloc.rate:                   973.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1491.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   707327.469 ±(99.9%) 7037.876 ops/s [Average]
[info]   (min, avg, max) = (705195.727, 707327.469, 709279.105), stdev = 1827.714
[info]   CI (99.9%): [700289.593, 714365.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   970.681 ±(99.9%) 9.574 MB/sec [Average]
[info]   (min, avg, max) = (967.724, 970.681, 973.347), stdev = 2.486
[info]   CI (99.9%): [961.107, 980.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.139), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.671 ±(99.9%) 1418.723 MB/sec [Average]
[info]   (min, avg, max) = (671.314, 940.671, 1345.532), stdev = 368.438
[info]   CI (99.9%): [≈ 0, 2359.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2094.487 ±(99.9%) 3174.687 B/op [Average]
[info]   (min, avg, max) = (1489.958, 2094.487, 3003.285), stdev = 824.456
[info]   CI (99.9%): [≈ 0, 5269.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 775049.400 ops/s
[info] # Warmup Iteration   2: 803835.442 ops/s
[info] # Warmup Iteration   3: 806427.704 ops/s
[info] # Warmup Iteration   4: 805232.677 ops/s
[info] # Warmup Iteration   5: 805722.381 ops/s
[info] Iteration   1: 804593.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 805883.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 805801.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 805754.361 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 805827.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   805572.109 ±(99.9%) 2114.123 ops/s [Average]
[info]   (min, avg, max) = (804593.518, 805572.109, 805883.480), stdev = 549.031
[info]   CI (99.9%): [803457.987, 807686.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37695.069 ops/s
[info] # Warmup Iteration   2: 66540.322 ops/s
[info] # Warmup Iteration   3: 66730.337 ops/s
[info] # Warmup Iteration   4: 66933.932 ops/s
[info] # Warmup Iteration   5: 65967.428 ops/s
[info] Iteration   1: 66922.239 ops/s
[info]                  ·gc.alloc.rate:                   1312.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31786.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 66818.614 ops/s
[info]                  ·gc.alloc.rate:                   1310.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31858.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 66915.942 ops/s
[info]                  ·gc.alloc.rate:                   1312.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31834.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 65239.389 ops/s
[info]                  ·gc.alloc.rate:                   1279.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16335.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 66987.153 ops/s
[info]                  ·gc.alloc.rate:                   1313.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31848.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   66576.667 ±(99.9%) 2887.905 ops/s [Average]
[info]   (min, avg, max) = (65239.389, 66576.667, 66987.153), stdev = 749.980
[info]   CI (99.9%): [63688.763, 69464.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1305.832 ±(99.9%) 56.631 MB/sec [Average]
[info]   (min, avg, max) = (1279.613, 1305.832, 1313.718), stdev = 14.707
[info]   CI (99.9%): [1249.200, 1362.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30872.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30872.006, 30872.006, 30872.007), stdev = 0.001
[info]   CI (99.9%): [30872.005, 30872.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.979 ±(99.9%) 4.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 2.934), stdev = 1.247
[info]   CI (99.9%): [≈ 0, 5.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.982 ±(99.9%) 1164.321 MB/sec [Average]
[info]   (min, avg, max) = (677.091, 1217.982, 1355.273), stdev = 302.371
[info]   CI (99.9%): [53.660, 2382.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28732.860 ±(99.9%) 26686.381 B/op [Average]
[info]   (min, avg, max) = (16335.538, 28732.860, 31858.949), stdev = 6930.368
[info]   CI (99.9%): [2046.478, 55419.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8993.174 ops/s
[info] # Warmup Iteration   2: 18932.731 ops/s
[info] # Warmup Iteration   3: 20162.071 ops/s
[info] # Warmup Iteration   4: 20400.178 ops/s
[info] # Warmup Iteration   5: 20543.469 ops/s
[info] Iteration   1: 20519.406 ops/s
[info]                  ·gc.alloc.rate:                   742.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51810.548 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20338.274 ops/s
[info]                  ·gc.alloc.rate:                   735.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52269.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 20628.639 ops/s
[info]                  ·gc.alloc.rate:                   745.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51328.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20540.924 ops/s
[info]                  ·gc.alloc.rate:                   742.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51548.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20614.075 ops/s
[info]                  ·gc.alloc.rate:                   745.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51315.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   20528.264 ±(99.9%) 446.465 ops/s [Average]
[info]   (min, avg, max) = (20338.274, 20528.264, 20628.639), stdev = 115.946
[info]   CI (99.9%): [20081.799, 20974.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   742.474 ±(99.9%) 16.169 MB/sec [Average]
[info]   (min, avg, max) = (735.607, 742.474, 745.959), stdev = 4.199
[info]   CI (99.9%): [726.305, 758.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56920.017 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (56920.005, 56920.017, 56920.021), stdev = 0.007
[info]   CI (99.9%): [56919.990, 56920.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.631 ±(99.9%) 5.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 3.116), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 5.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   48.426 ±(99.9%) 410.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.426, 238.922), stdev = 106.494
[info]   CI (99.9%): [≈ 0, 458.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   673.764 ±(99.9%) 6.411 MB/sec [Average]
[info]   (min, avg, max) = (672.371, 673.764, 675.666), stdev = 1.665
[info]   CI (99.9%): [667.353, 680.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   51654.302 ±(99.9%) 1533.887 B/op [Average]
[info]   (min, avg, max) = (51315.025, 51654.302, 52269.003), stdev = 398.346
[info]   CI (99.9%): [50120.415, 53188.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6161.080 ops/s
[info] # Warmup Iteration   2: 15735.387 ops/s
[info] # Warmup Iteration   3: 15832.384 ops/s
[info] # Warmup Iteration   4: 15952.387 ops/s
[info] # Warmup Iteration   5: 16001.646 ops/s
[info] Iteration   1: 15950.056 ops/s
[info]                  ·gc.alloc.rate:                   446.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50479.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15975.633 ops/s
[info]                  ·gc.alloc.rate:                   447.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50397.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15938.527 ops/s
[info]                  ·gc.alloc.rate:                   446.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              44089.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66567.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15977.963 ops/s
[info]                  ·gc.alloc.rate:      447.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16034.276 ops/s
[info]                  ·gc.alloc.rate:                   449.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66169.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   15975.291 ±(99.9%) 142.459 ops/s [Average]
[info]   (min, avg, max) = (15938.527, 15975.291, 16034.276), stdev = 36.996
[info]   CI (99.9%): [15832.833, 16117.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   447.495 ±(99.9%) 4.004 MB/sec [Average]
[info]   (min, avg, max) = (446.443, 447.495, 449.148), stdev = 1.040
[info]   CI (99.9%): [443.491, 451.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.370 ±(99.9%) 2.948 B/op [Average]
[info]   (min, avg, max) = (44088.025, 44088.370, 44089.739), stdev = 0.766
[info]   CI (99.9%): [44085.422, 44091.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.878 ±(99.9%) 24.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.878, 14.389), stdev = 6.435
[info]   CI (99.9%): [≈ 0, 27.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.265 ±(99.9%) 1067.751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.265, 674.102), stdev = 277.292
[info]   CI (99.9%): [≈ 0, 1542.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46723.009 ±(99.9%) 105148.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46723.009, 66567.901), stdev = 27306.778
[info]   CI (99.9%): [≈ 0, 151871.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97562.367 ops/s
[info] # Warmup Iteration   2: 100955.682 ops/s
[info] # Warmup Iteration   3: 101820.355 ops/s
[info] # Warmup Iteration   4: 101326.968 ops/s
[info] # Warmup Iteration   5: 101520.961 ops/s
[info] Iteration   1: 101659.312 ops/s
[info]                  ·gc.alloc.rate:                   255.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7920.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 101454.676 ops/s
[info]                  ·gc.alloc.rate:      254.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 101140.600 ops/s
[info]                  ·gc.alloc.rate:                   253.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7960.955 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101535.309 ops/s
[info]                  ·gc.alloc.rate:      254.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101741.437 ops/s
[info]                  ·gc.alloc.rate:                   255.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7913.548 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   101506.267 ±(99.9%) 894.694 ops/s [Average]
[info]   (min, avg, max) = (101140.600, 101506.267, 101741.437), stdev = 232.349
[info]   CI (99.9%): [100611.572, 102400.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   254.884 ±(99.9%) 2.369 MB/sec [Average]
[info]   (min, avg, max) = (253.926, 254.884, 255.519), stdev = 0.615
[info]   CI (99.9%): [252.515, 257.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.004), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.963 ±(99.9%) 1079.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.963, 511.654), stdev = 280.218
[info]   CI (99.9%): [≈ 0, 1385.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4758.918 ±(99.9%) 16728.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4758.918, 7960.955), stdev = 4344.316
[info]   CI (99.9%): [≈ 0, 21487.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4143.033 ops/s
[info] # Warmup Iteration   2: 14485.075 ops/s
[info] # Warmup Iteration   3: 14939.435 ops/s
[info] # Warmup Iteration   4: 14957.164 ops/s
[info] # Warmup Iteration   5: 14915.534 ops/s
[info] Iteration   1: 15014.105 ops/s
[info]                  ·gc.alloc.rate:                   948.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              99408.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70768.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 14983.064 ops/s
[info]                  ·gc.alloc.rate:                   946.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              99408.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70914.972 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14930.531 ops/s
[info]                  ·gc.alloc.rate:                   942.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              99408.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142473.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14871.259 ops/s
[info]                  ·gc.alloc.rate:                   939.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              99408.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71589.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14979.948 ops/s
[info]                  ·gc.alloc.rate:                   946.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              99408.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142208.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14955.782 ±(99.9%) 215.358 ops/s [Average]
[info]   (min, avg, max) = (14871.259, 14955.782, 15014.105), stdev = 55.928
[info]   CI (99.9%): [14740.423, 15171.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   944.586 ±(99.9%) 13.660 MB/sec [Average]
[info]   (min, avg, max) = (939.197, 944.586, 948.127), stdev = 3.547
[info]   CI (99.9%): [930.927, 958.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99408.139 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (99408.027, 99408.139, 99408.579), stdev = 0.246
[info]   CI (99.9%): [99407.193, 99409.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.876 ±(99.9%) 4.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.876, 2.194), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 5.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   946.292 ±(99.9%) 1427.600 MB/sec [Average]
[info]   (min, avg, max) = (674.972, 946.292, 1353.352), stdev = 370.743
[info]   CI (99.9%): [≈ 0, 2373.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99591.106 ±(99.9%) 150277.118 B/op [Average]
[info]   (min, avg, max) = (70768.581, 99591.106, 142473.763), stdev = 39026.490
[info]   CI (99.9%): [≈ 0, 249868.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45193.456 ops/s
[info] # Warmup Iteration   2: 59503.552 ops/s
[info] # Warmup Iteration   3: 60944.516 ops/s
[info] # Warmup Iteration   4: 62004.284 ops/s
[info] # Warmup Iteration   5: 61123.939 ops/s
[info] Iteration   1: 62224.823 ops/s
[info]                  ·gc.alloc.rate:                   994.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34034.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 62144.857 ops/s
[info]                  ·gc.alloc.rate:                   992.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17022.447 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 61987.866 ops/s
[info]                  ·gc.alloc.rate:                   990.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34131.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62161.007 ops/s
[info]                  ·gc.alloc.rate:                   993.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17018.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 62144.487 ops/s
[info]                  ·gc.alloc.rate:                   992.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17022.173 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   62132.608 ±(99.9%) 336.526 ops/s [Average]
[info]   (min, avg, max) = (61987.866, 62132.608, 62224.823), stdev = 87.395
[info]   CI (99.9%): [61796.082, 62469.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   992.664 ±(99.9%) 4.955 MB/sec [Average]
[info]   (min, avg, max) = (990.644, 992.664, 994.218), stdev = 1.287
[info]   CI (99.9%): [987.709, 997.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25144.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25144.007, 25144.007, 25144.007), stdev = 0.001
[info]   CI (99.9%): [25144.006, 25144.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.528 ±(99.9%) 2.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.528, 1.586), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   941.344 ±(99.9%) 1419.777 MB/sec [Average]
[info]   (min, avg, max) = (672.037, 941.344, 1345.769), stdev = 368.712
[info]   CI (99.9%): [≈ 0, 2361.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23845.725 ±(99.9%) 35985.594 B/op [Average]
[info]   (min, avg, max) = (17018.066, 23845.725, 34131.109), stdev = 9345.345
[info]   CI (99.9%): [≈ 0, 59831.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54736.502 ops/s
[info] # Warmup Iteration   2: 82406.252 ops/s
[info] # Warmup Iteration   3: 84292.357 ops/s
[info] # Warmup Iteration   4: 84596.272 ops/s
[info] # Warmup Iteration   5: 84310.700 ops/s
[info] Iteration   1: 84267.678 ops/s
[info]                  ·gc.alloc.rate:                   1205.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25243.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 84391.378 ops/s
[info]                  ·gc.alloc.rate:                   1207.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25230.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 84324.740 ops/s
[info]                  ·gc.alloc.rate:                   1206.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12632.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 84222.421 ops/s
[info]                  ·gc.alloc.rate:                   1204.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25306.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 84352.794 ops/s
[info]                  ·gc.alloc.rate:                   1206.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25291.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   84311.802 ±(99.9%) 259.140 ops/s [Average]
[info]   (min, avg, max) = (84222.421, 84311.802, 84391.378), stdev = 67.298
[info]   CI (99.9%): [84052.662, 84570.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1205.952 ±(99.9%) 4.189 MB/sec [Average]
[info]   (min, avg, max) = (1204.532, 1205.952, 1207.031), stdev = 1.088
[info]   CI (99.9%): [1201.763, 1210.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22512.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22512.005, 22512.005, 22512.005), stdev = 0.001
[info]   CI (99.9%): [22512.004, 22512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.389 ±(99.9%) 1.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.167), stdev = 0.476
[info]   CI (99.9%): [≈ 0, 2.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.163 ±(99.9%) 1165.027 MB/sec [Average]
[info]   (min, avg, max) = (676.946, 1218.163, 1355.695), stdev = 302.554
[info]   CI (99.9%): [53.136, 2383.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22740.902 ±(99.9%) 21760.306 B/op [Average]
[info]   (min, avg, max) = (12632.098, 22740.902, 25306.635), stdev = 5651.082
[info]   CI (99.9%): [980.596, 44501.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243701.734 ops/s
[info] # Warmup Iteration   2: 246946.939 ops/s
[info] # Warmup Iteration   3: 250132.013 ops/s
[info] # Warmup Iteration   4: 243527.339 ops/s
[info] # Warmup Iteration   5: 243102.939 ops/s
[info] Iteration   1: 249326.115 ops/s
[info]                  ·gc.alloc.rate:                   477.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3229.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 242734.295 ops/s
[info]                  ·gc.alloc.rate:                   465.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3317.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 249398.785 ops/s
[info]                  ·gc.alloc.rate:                   477.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4266.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 250600.108 ops/s
[info]                  ·gc.alloc.rate:      480.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 250112.498 ops/s
[info]                  ·gc.alloc.rate:                   479.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4254.428 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   248434.360 ±(99.9%) 12436.252 ops/s [Average]
[info]   (min, avg, max) = (242734.295, 248434.360, 250600.108), stdev = 3229.655
[info]   CI (99.9%): [235998.109, 260870.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   476.050 ±(99.9%) 23.865 MB/sec [Average]
[info]   (min, avg, max) = (465.100, 476.050, 480.167), stdev = 6.198
[info]   CI (99.9%): [452.184, 499.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.002, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.539 ±(99.9%) 4.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.539, 2.648), stdev = 1.179
[info]   CI (99.9%): [≈ 0, 5.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.404 ±(99.9%) 28.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.404, 16.712), stdev = 7.441
[info]   CI (99.9%): [≈ 0, 32.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   475.057 ±(99.9%) 1070.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 475.057, 676.022), stdev = 277.993
[info]   CI (99.9%): [≈ 0, 1545.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3013.551 ±(99.9%) 6760.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3013.551, 4266.810), stdev = 1755.752
[info]   CI (99.9%): [≈ 0, 9774.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276175.780 ops/s
[info] # Warmup Iteration   2: 291936.353 ops/s
[info] # Warmup Iteration   3: 294513.760 ops/s
[info] # Warmup Iteration   4: 294451.378 ops/s
[info] # Warmup Iteration   5: 294571.057 ops/s
[info] Iteration   1: 294435.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 294576.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 294545.646 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 294386.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 294613.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   294511.652 ±(99.9%) 370.961 ops/s [Average]
[info]   (min, avg, max) = (294386.802, 294511.652, 294613.568), stdev = 96.337
[info]   CI (99.9%): [294140.691, 294882.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53626.872 ops/s
[info] # Warmup Iteration   2: 71798.010 ops/s
[info] # Warmup Iteration   3: 71499.840 ops/s
[info] # Warmup Iteration   4: 73172.428 ops/s
[info] # Warmup Iteration   5: 73803.767 ops/s
[info] Iteration   1: 73818.312 ops/s
[info]                  ·gc.alloc.rate:                   1187.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28575.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 73603.195 ops/s
[info]                  ·gc.alloc.rate:                   1184.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28630.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 73383.722 ops/s
[info]                  ·gc.alloc.rate:                   1180.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28723.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 73448.194 ops/s
[info]                  ·gc.alloc.rate:                   1181.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14352.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 73469.834 ops/s
[info]                  ·gc.alloc.rate:                   1181.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28724.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   73544.651 ±(99.9%) 664.494 ops/s [Average]
[info]   (min, avg, max) = (73383.722, 73544.651, 73818.312), stdev = 172.567
[info]   CI (99.9%): [72880.157, 74209.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1183.167 ±(99.9%) 10.898 MB/sec [Average]
[info]   (min, avg, max) = (1180.489, 1183.167, 1187.525), stdev = 2.830
[info]   CI (99.9%): [1172.269, 1194.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25320.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25320.006, 25320.006, 25320.006), stdev = 0.001
[info]   CI (99.9%): [25320.005, 25320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.247 ±(99.9%) 4.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.247, 2.676), stdev = 1.064
[info]   CI (99.9%): [≈ 0, 5.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205.822 ±(99.9%) 1153.991 MB/sec [Average]
[info]   (min, avg, max) = (669.725, 1205.822, 1340.784), stdev = 299.688
[info]   CI (99.9%): [51.831, 2359.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25800.979 ±(99.9%) 24645.942 B/op [Average]
[info]   (min, avg, max) = (14352.030, 25800.979, 28724.396), stdev = 6400.473
[info]   CI (99.9%): [1155.037, 50446.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102488.388 ops/s
[info] # Warmup Iteration   2: 123819.109 ops/s
[info] # Warmup Iteration   3: 121640.489 ops/s
[info] # Warmup Iteration   4: 124934.434 ops/s
[info] # Warmup Iteration   5: 124803.203 ops/s
[info] Iteration   1: 124724.399 ops/s
[info]                  ·gc.alloc.rate:                   1806.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25435.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 124858.590 ops/s
[info]                  ·gc.alloc.rate:                   1808.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16956.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 124024.404 ops/s
[info]                  ·gc.alloc.rate:                   1796.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25642.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 124489.667 ops/s
[info]                  ·gc.alloc.rate:                   1803.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25588.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124917.617 ops/s
[info]                  ·gc.alloc.rate:                   1809.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17020.267 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   124602.935 ±(99.9%) 1397.240 ops/s [Average]
[info]   (min, avg, max) = (124024.404, 124602.935, 124917.617), stdev = 362.859
[info]   CI (99.9%): [123205.696, 126000.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1804.808 ±(99.9%) 20.061 MB/sec [Average]
[info]   (min, avg, max) = (1796.473, 1804.808, 1809.385), stdev = 5.210
[info]   CI (99.9%): [1784.747, 1824.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.004), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.421 ±(99.9%) 0.553 B/op [Average]
[info]   (min, avg, max) = (0.262, 0.421, 0.526), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1751.055 ±(99.9%) 1417.448 MB/sec [Average]
[info]   (min, avg, max) = (1344.957, 1751.055, 2023.838), stdev = 368.107
[info]   CI (99.9%): [333.606, 3168.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22128.837 ±(99.9%) 18071.702 B/op [Average]
[info]   (min, avg, max) = (16956.665, 22128.837, 25642.960), stdev = 4693.164
[info]   CI (99.9%): [4057.135, 40200.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48214.700 ops/s
[info] # Warmup Iteration   2: 691040.851 ops/s
[info] # Warmup Iteration   3: 656475.129 ops/s
[info] # Warmup Iteration   4: 682857.787 ops/s
[info] # Warmup Iteration   5: 690553.953 ops/s
[info] Iteration   1: 692810.105 ops/s
[info]                  ·gc.alloc.rate:      383.801 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 690933.321 ops/s
[info]                  ·gc.alloc.rate:                   382.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1165.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 689486.825 ops/s
[info]                  ·gc.alloc.rate:                   381.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1167.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 692823.731 ops/s
[info]                  ·gc.alloc.rate:      383.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 666448.911 ops/s
[info]                  ·gc.alloc.rate:                   369.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1591.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   686500.579 ±(99.9%) 43498.158 ops/s [Average]
[info]   (min, avg, max) = (666448.911, 686500.579, 692823.731), stdev = 11296.334
[info]   CI (99.9%): [643002.420, 729998.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   380.360 ±(99.9%) 24.157 MB/sec [Average]
[info]   (min, avg, max) = (369.221, 380.360, 383.857), stdev = 6.273
[info]   CI (99.9%): [356.203, 404.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.507 ±(99.9%) 4.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.507, 2.501), stdev = 1.115
[info]   CI (99.9%): [≈ 0, 4.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.197 ±(99.9%) 10.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.197, 5.906), stdev = 2.633
[info]   CI (99.9%): [≈ 0, 11.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339.423 ±(99.9%) 1220.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.423, 673.764), stdev = 316.836
[info]   CI (99.9%): [≈ 0, 1559.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   784.892 ±(99.9%) 2838.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 784.892, 1591.247), stdev = 737.180
[info]   CI (99.9%): [≈ 0, 3623.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243532.571 ops/s
[info] # Warmup Iteration   2: 369141.005 ops/s
[info] # Warmup Iteration   3: 379702.681 ops/s
[info] # Warmup Iteration   4: 380337.276 ops/s
[info] # Warmup Iteration   5: 376528.747 ops/s
[info] Iteration   1: 369907.212 ops/s
[info]                  ·gc.alloc.rate:                   377.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2176.710 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 380341.549 ops/s
[info]                  ·gc.alloc.rate:                   388.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2117.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 381256.824 ops/s
[info]                  ·gc.alloc.rate:      389.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368868.768 ops/s
[info]                  ·gc.alloc.rate:                   376.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2874.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 381121.866 ops/s
[info]                  ·gc.alloc.rate:      389.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   376299.244 ±(99.9%) 24372.292 ops/s [Average]
[info]   (min, avg, max) = (368868.768, 376299.244, 381256.824), stdev = 6329.407
[info]   CI (99.9%): [351926.952, 400671.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   384.487 ±(99.9%) 24.968 MB/sec [Average]
[info]   (min, avg, max) = (376.902, 384.487, 389.615), stdev = 6.484
[info]   CI (99.9%): [359.519, 409.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.159 ±(99.9%) 1.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.711), stdev = 0.310
[info]   CI (99.9%): [≈ 0, 1.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.416 ±(99.9%) 1220.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.416, 673.871), stdev = 316.845
[info]   CI (99.9%): [≈ 0, 1559.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1433.739 ±(99.9%) 5168.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1433.739, 2874.980), stdev = 1342.316
[info]   CI (99.9%): [≈ 0, 6602.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 735934.736 ops/s
[info] # Warmup Iteration   2: 769112.870 ops/s
[info] # Warmup Iteration   3: 785186.851 ops/s
[info] # Warmup Iteration   4: 782052.364 ops/s
[info] # Warmup Iteration   5: 785536.362 ops/s
[info] Iteration   1: 783168.014 ops/s
[info]                  ·gc.alloc.rate:                   270.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1028.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 785715.837 ops/s
[info]                  ·gc.alloc.rate:      271.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 755025.592 ops/s
[info]                  ·gc.alloc.rate:                   260.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1066.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 782340.394 ops/s
[info]                  ·gc.alloc.rate:      270.410 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 779704.644 ops/s
[info]                  ·gc.alloc.rate:                   269.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1032.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   777190.896 ±(99.9%) 48422.422 ops/s [Average]
[info]   (min, avg, max) = (755025.592, 777190.896, 785715.837), stdev = 12575.149
[info]   CI (99.9%): [728768.474, 825613.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   268.629 ±(99.9%) 16.741 MB/sec [Average]
[info]   (min, avg, max) = (260.969, 268.629, 271.611), stdev = 4.348
[info]   CI (99.9%): [251.888, 285.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.937 ±(99.9%) 1078.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.937, 511.591), stdev = 280.194
[info]   CI (99.9%): [≈ 0, 1385.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   625.440 ±(99.9%) 2199.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 625.440, 1066.432), stdev = 571.138
[info]   CI (99.9%): [≈ 0, 2824.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:58:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48169.438 ops/s
[info] # Warmup Iteration   2: 80801.651 ops/s
[info] # Warmup Iteration   3: 79558.100 ops/s
[info] # Warmup Iteration   4: 80870.796 ops/s
[info] # Warmup Iteration   5: 81236.300 ops/s
[info] Iteration   1: 81482.839 ops/s
[info]                  ·gc.alloc.rate:                   3493.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65630.889 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 81274.642 ops/s
[info]                  ·gc.alloc.rate:                   3483.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4081.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79049.217 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 81391.709 ops/s
[info]                  ·gc.alloc.rate:                   3489.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65823.414 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 80421.563 ops/s
[info]                  ·gc.alloc.rate:                   3447.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66613.085 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 81230.403 ops/s
[info]                  ·gc.alloc.rate:                   3482.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3407.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66012.705 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   81160.231 ±(99.9%) 1635.166 ops/s [Average]
[info]   (min, avg, max) = (80421.563, 81160.231, 81482.839), stdev = 424.648
[info]   CI (99.9%): [79525.064, 82795.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3479.421 ±(99.9%) 71.494 MB/sec [Average]
[info]   (min, avg, max) = (3447.291, 3479.421, 3493.938), stdev = 18.567
[info]   CI (99.9%): [3407.927, 3550.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.005, 67472.005, 67472.005), stdev = 0.001
[info]   CI (99.9%): [67472.005, 67472.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.018 ±(99.9%) 2.443 B/op [Average]
[info]   (min, avg, max) = (1.209, 2.018, 2.814), stdev = 0.634
[info]   CI (99.9%): [≈ 0, 4.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3539.007 ±(99.9%) 1167.558 MB/sec [Average]
[info]   (min, avg, max) = (3398.598, 3539.007, 4081.380), stdev = 303.211
[info]   CI (99.9%): [2371.449, 4706.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68625.862 ±(99.9%) 22481.774 B/op [Average]
[info]   (min, avg, max) = (65630.889, 68625.862, 79049.217), stdev = 5838.445
[info]   CI (99.9%): [46144.088, 91107.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216013.941 ops/s
[info] # Warmup Iteration   2: 289926.670 ops/s
[info] # Warmup Iteration   3: 292912.666 ops/s
[info] # Warmup Iteration   4: 293691.182 ops/s
[info] # Warmup Iteration   5: 294672.521 ops/s
[info] Iteration   1: 294091.222 ops/s
[info]                  ·gc.alloc.rate:                   1532.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7186.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 294562.046 ops/s
[info]                  ·gc.alloc.rate:                   1535.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7175.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 294396.917 ops/s
[info]                  ·gc.alloc.rate:                   1533.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10777.627 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 290674.598 ops/s
[info]                  ·gc.alloc.rate:                   1514.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7285.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 294928.082 ops/s
[info]                  ·gc.alloc.rate:                   1536.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7189.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   293730.573 ±(99.9%) 6680.185 ops/s [Average]
[info]   (min, avg, max) = (290674.598, 293730.573, 294928.082), stdev = 1734.823
[info]   CI (99.9%): [287050.388, 300410.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1530.439 ±(99.9%) 34.774 MB/sec [Average]
[info]   (min, avg, max) = (1514.495, 1530.439, 1536.330), stdev = 9.031
[info]   CI (99.9%): [1495.665, 1565.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8200.001, 8200.001, 8200.001), stdev = 0.001
[info]   CI (99.9%): [8200.001, 8200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.311 ±(99.9%) 0.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.311, 0.446), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 1.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.986 ±(99.9%) 1155.620 MB/sec [Average]
[info]   (min, avg, max) = (1343.131, 1478.986, 2015.833), stdev = 300.111
[info]   CI (99.9%): [323.367, 2634.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7922.996 ±(99.9%) 6147.192 B/op [Average]
[info]   (min, avg, max) = (7175.348, 7922.996, 10777.627), stdev = 1596.406
[info]   CI (99.9%): [1775.803, 14070.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157364.557 ops/s
[info] # Warmup Iteration   2: 1417274.056 ops/s
[info] # Warmup Iteration   3: 1404679.204 ops/s
[info] # Warmup Iteration   4: 1437973.340 ops/s
[info] # Warmup Iteration   5: 1449018.578 ops/s
[info] Iteration   1: 1452779.206 ops/s
[info]                  ·gc.alloc.rate:                   494.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 554.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1453785.664 ops/s
[info]                  ·gc.alloc.rate:      495.163 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1447723.949 ops/s
[info]                  ·gc.alloc.rate:                   492.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 732.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1451065.051 ops/s
[info]                  ·gc.alloc.rate:                   494.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1450296.539 ops/s
[info]                  ·gc.alloc.rate:      493.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1451130.082 ±(99.9%) 9045.426 ops/s [Average]
[info]   (min, avg, max) = (1447723.949, 1451130.082, 1453785.664), stdev = 2349.068
[info]   CI (99.9%): [1442084.656, 1460175.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   494.182 ±(99.9%) 3.279 MB/sec [Average]
[info]   (min, avg, max) = (492.952, 494.182, 495.163), stdev = 0.851
[info]   CI (99.9%): [490.903, 497.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.511 ±(99.9%) 4.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.521), stdev = 1.124
[info]   CI (99.9%): [≈ 0, 4.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.556 ±(99.9%) 4.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 2.742), stdev = 1.222
[info]   CI (99.9%): [≈ 0, 5.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.818 ±(99.9%) 1331.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.818, 673.825), stdev = 345.818
[info]   CI (99.9%): [≈ 0, 1703.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   403.515 ±(99.9%) 1445.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 403.515, 732.508), stdev = 375.411
[info]   CI (99.9%): [≈ 0, 1849.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 867847.566 ops/s
[info] # Warmup Iteration   2: 1288901.293 ops/s
[info] # Warmup Iteration   3: 1311353.640 ops/s
[info] # Warmup Iteration   4: 1310637.905 ops/s
[info] # Warmup Iteration   5: 1306559.350 ops/s
[info] Iteration   1: 1301809.210 ops/s
[info]                  ·gc.alloc.rate:                   760.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 815.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1314667.659 ops/s
[info]                  ·gc.alloc.rate:                   768.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 808.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1310360.112 ops/s
[info]                  ·gc.alloc.rate:                   765.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1304427.893 ops/s
[info]                  ·gc.alloc.rate:                   762.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1630.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1296993.060 ops/s
[info]                  ·gc.alloc.rate:                   757.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 820.845 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1305651.587 ±(99.9%) 26864.357 ops/s [Average]
[info]   (min, avg, max) = (1296993.060, 1305651.587, 1314667.659), stdev = 6976.588
[info]   CI (99.9%): [1278787.230, 1332515.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   763.163 ±(99.9%) 16.012 MB/sec [Average]
[info]   (min, avg, max) = (757.999, 763.163, 768.619), stdev = 4.158
[info]   CI (99.9%): [747.151, 779.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.075), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.439 ±(99.9%) 1164.953 MB/sec [Average]
[info]   (min, avg, max) = (674.030, 810.439, 1351.627), stdev = 302.534
[info]   CI (99.9%): [≈ 0, 1975.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   977.149 ±(99.9%) 1407.061 B/op [Average]
[info]   (min, avg, max) = (808.235, 977.149, 1630.757), stdev = 365.409
[info]   CI (99.9%): [≈ 0, 2384.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:57:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1237490.225 ops/s
[info] # Warmup Iteration   2: 1280875.694 ops/s
[info] # Warmup Iteration   3: 1320651.758 ops/s
[info] # Warmup Iteration   4: 1321584.154 ops/s
[info] # Warmup Iteration   5: 1322518.803 ops/s
[info] Iteration   1: 1319520.528 ops/s
[info]                  ·gc.alloc.rate:                   449.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 610.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1317602.967 ops/s
[info]                  ·gc.alloc.rate:                   448.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 611.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1324178.805 ops/s
[info]                  ·gc.alloc.rate:      450.989 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1314692.392 ops/s
[info]                  ·gc.alloc.rate:                   447.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 807.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1321369.676 ops/s
[info]                  ·gc.alloc.rate:                   450.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 803.745 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1319472.873 ±(99.9%) 13896.434 ops/s [Average]
[info]   (min, avg, max) = (1314692.392, 1319472.873, 1324178.805), stdev = 3608.860
[info]   CI (99.9%): [1305576.439, 1333369.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   449.361 ±(99.9%) 4.734 MB/sec [Average]
[info]   (min, avg, max) = (447.764, 449.361, 450.989), stdev = 1.230
[info]   CI (99.9%): [444.627, 454.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.662 ±(99.9%) 5.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.298), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.793 ±(99.9%) 6.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.948), stdev = 1.764
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.546 ±(99.9%) 1068.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.546, 674.814), stdev = 277.554
[info]   CI (99.9%): [≈ 0, 1543.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   566.567 ±(99.9%) 1276.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 566.567, 807.787), stdev = 331.408
[info]   CI (99.9%): [≈ 0, 1842.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1323643.535 ops/s
[info] # Warmup Iteration   2: 1398282.081 ops/s
[info] # Warmup Iteration   3: 1400703.494 ops/s
[info] # Warmup Iteration   4: 1400659.108 ops/s
[info] # Warmup Iteration   5: 1401220.980 ops/s
[info] Iteration   1: 1400091.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1400380.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1401569.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1400303.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1401067.630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1400682.615 ±(99.9%) 2372.133 ops/s [Average]
[info]   (min, avg, max) = (1400091.751, 1400682.615, 1401569.186), stdev = 616.036
[info]   CI (99.9%): [1398310.482, 1403054.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27092.169 ops/s
[info] # Warmup Iteration   2: 39275.366 ops/s
[info] # Warmup Iteration   3: 39703.676 ops/s
[info] # Warmup Iteration   4: 39744.715 ops/s
[info] # Warmup Iteration   5: 39164.732 ops/s
[info] Iteration   1: 39851.240 ops/s
[info]                  ·gc.alloc.rate:                   1916.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79385.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39637.518 ops/s
[info]                  ·gc.alloc.rate:                   1906.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79916.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39879.237 ops/s
[info]                  ·gc.alloc.rate:                   1918.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79615.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39744.057 ops/s
[info]                  ·gc.alloc.rate:                   1912.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80019.504 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39785.642 ops/s
[info]                  ·gc.alloc.rate:                   1913.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80119.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   39779.539 ±(99.9%) 368.069 ops/s [Average]
[info]   (min, avg, max) = (39637.518, 39779.539, 39879.237), stdev = 95.586
[info]   CI (99.9%): [39411.470, 40147.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1913.382 ±(99.9%) 18.093 MB/sec [Average]
[info]   (min, avg, max) = (1906.208, 1913.382, 1918.091), stdev = 4.699
[info]   CI (99.9%): [1895.289, 1931.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75712.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75712.010, 75712.010, 75712.010), stdev = 0.001
[info]   CI (99.9%): [75712.010, 75712.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.965 ±(99.9%) 5.762 B/op [Average]
[info]   (min, avg, max) = (1.643, 2.965, 4.946), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 8.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2016.967 ±(99.9%) 23.749 MB/sec [Average]
[info]   (min, avg, max) = (2009.985, 2016.967, 2024.985), stdev = 6.168
[info]   CI (99.9%): [1993.218, 2040.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79811.210 ±(99.9%) 1169.300 B/op [Average]
[info]   (min, avg, max) = (79385.756, 79811.210, 80119.502), stdev = 303.664
[info]   CI (99.9%): [78641.910, 80980.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34033.330 ops/s
[info] # Warmup Iteration   2: 42750.277 ops/s
[info] # Warmup Iteration   3: 42949.582 ops/s
[info] # Warmup Iteration   4: 43028.168 ops/s
[info] # Warmup Iteration   5: 43022.043 ops/s
[info] Iteration   1: 43056.495 ops/s
[info]                  ·gc.alloc.rate:                   859.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24664.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 42993.815 ops/s
[info]                  ·gc.alloc.rate:                   858.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49208.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43226.844 ops/s
[info]                  ·gc.alloc.rate:                   863.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24447.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 43104.302 ops/s
[info]                  ·gc.alloc.rate:                   860.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24516.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43215.089 ops/s
[info]                  ·gc.alloc.rate:                   862.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48908.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   43119.309 ±(99.9%) 388.214 ops/s [Average]
[info]   (min, avg, max) = (42993.815, 43119.309, 43226.844), stdev = 100.818
[info]   CI (99.9%): [42731.095, 43507.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   860.885 ±(99.9%) 7.933 MB/sec [Average]
[info]   (min, avg, max) = (858.399, 860.885, 863.214), stdev = 2.060
[info]   CI (99.9%): [852.952, 868.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31424.009, 31424.010, 31424.010), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.609 ±(99.9%) 3.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.609, 1.524), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   940.919 ±(99.9%) 1415.126 MB/sec [Average]
[info]   (min, avg, max) = (671.385, 940.919, 1344.220), stdev = 367.504
[info]   CI (99.9%): [≈ 0, 2356.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34349.260 ±(99.9%) 51708.269 B/op [Average]
[info]   (min, avg, max) = (24447.532, 34349.260, 49208.771), stdev = 13428.473
[info]   CI (99.9%): [≈ 0, 86057.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50706.284 ops/s
[info] # Warmup Iteration   2: 79421.828 ops/s
[info] # Warmup Iteration   3: 81181.694 ops/s
[info] # Warmup Iteration   4: 81445.400 ops/s
[info] # Warmup Iteration   5: 81451.743 ops/s
[info] Iteration   1: 81600.471 ops/s
[info]                  ·gc.alloc.rate:                   858.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13021.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 79636.808 ops/s
[info]                  ·gc.alloc.rate:                   837.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13342.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 80497.427 ops/s
[info]                  ·gc.alloc.rate:                   846.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13212.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80652.513 ops/s
[info]                  ·gc.alloc.rate:                   848.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26387.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 81484.585 ops/s
[info]                  ·gc.alloc.rate:                   857.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13065.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   80774.361 ±(99.9%) 3087.992 ops/s [Average]
[info]   (min, avg, max) = (79636.808, 80774.361, 81600.471), stdev = 801.942
[info]   CI (99.9%): [77686.369, 83862.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   849.849 ±(99.9%) 32.602 MB/sec [Average]
[info]   (min, avg, max) = (837.893, 849.849, 858.731), stdev = 8.467
[info]   CI (99.9%): [817.247, 882.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.006), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.325 ±(99.9%) 2.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.219), stdev = 0.530
[info]   CI (99.9%): [≈ 0, 2.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.896 ±(99.9%) 1164.956 MB/sec [Average]
[info]   (min, avg, max) = (675.080, 810.896, 1352.087), stdev = 302.535
[info]   CI (99.9%): [≈ 0, 1975.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15806.121 ±(99.9%) 22783.358 B/op [Average]
[info]   (min, avg, max) = (13021.918, 15806.121, 26387.936), stdev = 5916.766
[info]   CI (99.9%): [≈ 0, 38589.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245044.255 ops/s
[info] # Warmup Iteration   2: 265037.730 ops/s
[info] # Warmup Iteration   3: 261741.590 ops/s
[info] # Warmup Iteration   4: 266384.527 ops/s
[info] # Warmup Iteration   5: 266216.400 ops/s
[info] Iteration   1: 265934.056 ops/s
[info]                  ·gc.alloc.rate:                   864.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7975.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 266781.663 ops/s
[info]                  ·gc.alloc.rate:                   867.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3969.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 266364.007 ops/s
[info]                  ·gc.alloc.rate:                   866.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3971.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 265773.745 ops/s
[info]                  ·gc.alloc.rate:                   864.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7956.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 266500.019 ops/s
[info]                  ·gc.alloc.rate:                   867.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3965.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   266270.698 ±(99.9%) 1590.775 ops/s [Average]
[info]   (min, avg, max) = (265773.745, 266270.698, 266781.663), stdev = 413.119
[info]   CI (99.9%): [264679.923, 267861.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   866.141 ±(99.9%) 5.323 MB/sec [Average]
[info]   (min, avg, max) = (864.504, 866.141, 867.782), stdev = 1.382
[info]   CI (99.9%): [860.818, 871.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.370), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   941.420 ±(99.9%) 1420.020 MB/sec [Average]
[info]   (min, avg, max) = (671.504, 941.420, 1347.319), stdev = 368.775
[info]   CI (99.9%): [≈ 0, 2361.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5567.607 ±(99.9%) 8430.668 B/op [Average]
[info]   (min, avg, max) = (3965.501, 5567.607, 7975.356), stdev = 2189.418
[info]   CI (99.9%): [≈ 0, 13998.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16597.441 ops/s
[info] # Warmup Iteration   2: 30032.555 ops/s
[info] # Warmup Iteration   3: 29291.300 ops/s
[info] # Warmup Iteration   4: 29897.834 ops/s
[info] # Warmup Iteration   5: 30026.528 ops/s
[info] Iteration   1: 30145.051 ops/s
[info]                  ·gc.alloc.rate:                   1455.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              75992.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70633.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30180.282 ops/s
[info]                  ·gc.alloc.rate:                   1456.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              75992.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70620.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30186.518 ops/s
[info]                  ·gc.alloc.rate:                   1457.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              75992.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70641.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30176.344 ops/s
[info]                  ·gc.alloc.rate:                   1456.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              75992.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70736.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 29993.460 ops/s
[info]                  ·gc.alloc.rate:                   1448.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              75992.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71203.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   30136.331 ±(99.9%) 313.654 ops/s [Average]
[info]   (min, avg, max) = (29993.460, 30136.331, 30186.518), stdev = 81.455
[info]   CI (99.9%): [29822.677, 30449.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1454.905 ±(99.9%) 14.966 MB/sec [Average]
[info]   (min, avg, max) = (1448.078, 1454.905, 1457.314), stdev = 3.887
[info]   CI (99.9%): [1439.939, 1469.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75992.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (75992.014, 75992.014, 75992.015), stdev = 0.001
[info]   CI (99.9%): [75992.012, 75992.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.956 ±(99.9%) 8.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.956, 5.427), stdev = 2.087
[info]   CI (99.9%): [≈ 0, 9.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1354.858 ±(99.9%) 6.262 MB/sec [Average]
[info]   (min, avg, max) = (1352.746, 1354.858, 1356.821), stdev = 1.626
[info]   CI (99.9%): [1348.597, 1361.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   70766.943 ±(99.9%) 955.342 B/op [Average]
[info]   (min, avg, max) = (70620.652, 70766.943, 71203.057), stdev = 248.099
[info]   CI (99.9%): [69811.600, 71722.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44682.186 ops/s
[info] # Warmup Iteration   2: 58792.459 ops/s
[info] # Warmup Iteration   3: 59311.853 ops/s
[info] # Warmup Iteration   4: 59342.185 ops/s
[info] # Warmup Iteration   5: 59556.230 ops/s
[info] Iteration   1: 59716.852 ops/s
[info]                  ·gc.alloc.rate:                   885.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35480.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 59761.237 ops/s
[info]                  ·gc.alloc.rate:                   886.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17701.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 59791.741 ops/s
[info]                  ·gc.alloc.rate:                   887.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17674.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 58568.846 ops/s
[info]                  ·gc.alloc.rate:                   868.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36069.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 59704.788 ops/s
[info]                  ·gc.alloc.rate:                   885.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17682.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   59508.693 ±(99.9%) 2027.529 ops/s [Average]
[info]   (min, avg, max) = (58568.846, 59508.693, 59791.741), stdev = 526.543
[info]   CI (99.9%): [57481.164, 61536.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   882.868 ±(99.9%) 30.159 MB/sec [Average]
[info]   (min, avg, max) = (868.896, 882.868, 887.203), stdev = 7.832
[info]   CI (99.9%): [852.709, 913.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.007), stdev = 0.001
[info]   CI (99.9%): [23352.007, 23352.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.662 ±(99.9%) 1.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 1.119), stdev = 0.464
[info]   CI (99.9%): [≈ 0, 2.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.476 ±(99.9%) 1418.637 MB/sec [Average]
[info]   (min, avg, max) = (670.710, 940.476, 1346.005), stdev = 368.415
[info]   CI (99.9%): [≈ 0, 2359.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24921.780 ±(99.9%) 38159.904 B/op [Average]
[info]   (min, avg, max) = (17674.402, 24921.780, 36069.525), stdev = 9910.006
[info]   CI (99.9%): [≈ 0, 63081.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60561.189 ops/s
[info] # Warmup Iteration   2: 94163.207 ops/s
[info] # Warmup Iteration   3: 95266.512 ops/s
[info] # Warmup Iteration   4: 95204.846 ops/s
[info] # Warmup Iteration   5: 95377.229 ops/s
[info] Iteration   1: 95112.652 ops/s
[info]                  ·gc.alloc.rate:                   1302.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22365.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 95065.372 ops/s
[info]                  ·gc.alloc.rate:                   1302.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22398.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 95320.724 ops/s
[info]                  ·gc.alloc.rate:                   1305.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22360.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 95836.516 ops/s
[info]                  ·gc.alloc.rate:                   1312.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11125.040 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 93030.646 ops/s
[info]                  ·gc.alloc.rate:                   1274.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22933.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   94873.182 ±(99.9%) 4137.215 ops/s [Average]
[info]   (min, avg, max) = (93030.646, 94873.182, 95836.516), stdev = 1074.422
[info]   CI (99.9%): [90735.967, 99010.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1299.614 ±(99.9%) 56.093 MB/sec [Average]
[info]   (min, avg, max) = (1274.646, 1299.614, 1312.749), stdev = 14.567
[info]   CI (99.9%): [1243.521, 1355.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (21559.983, 21560.004, 21560.026), stdev = 0.021
[info]   CI (99.9%): [21559.923, 21560.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.692 ±(99.9%) 1.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.692, 1.033), stdev = 0.421
[info]   CI (99.9%): [≈ 0, 2.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.324 ±(99.9%) 1164.433 MB/sec [Average]
[info]   (min, avg, max) = (677.383, 1218.324, 1355.821), stdev = 302.400
[info]   CI (99.9%): [53.891, 2382.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20236.333 ±(99.9%) 19634.925 B/op [Average]
[info]   (min, avg, max) = (11125.040, 20236.333, 22933.057), stdev = 5099.128
[info]   CI (99.9%): [601.408, 39871.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276512.049 ops/s
[info] # Warmup Iteration   2: 291155.041 ops/s
[info] # Warmup Iteration   3: 275824.328 ops/s
[info] # Warmup Iteration   4: 278404.932 ops/s
[info] # Warmup Iteration   5: 278708.144 ops/s
[info] Iteration   1: 280359.375 ops/s
[info]                  ·gc.alloc.rate:                   893.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3776.820 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 280436.990 ops/s
[info]                  ·gc.alloc.rate:                   894.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3775.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 280505.557 ops/s
[info]                  ·gc.alloc.rate:                   893.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7542.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 280977.161 ops/s
[info]                  ·gc.alloc.rate:                   895.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3761.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 280868.821 ops/s
[info]                  ·gc.alloc.rate:                   895.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3762.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   280629.581 ±(99.9%) 1060.732 ops/s [Average]
[info]   (min, avg, max) = (280359.375, 280629.581, 280977.161), stdev = 275.469
[info]   CI (99.9%): [279568.849, 281690.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   894.365 ±(99.9%) 3.408 MB/sec [Average]
[info]   (min, avg, max) = (893.365, 894.365, 895.512), stdev = 0.885
[info]   CI (99.9%): [890.957, 897.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.117 ±(99.9%) 0.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.467), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.509 ±(99.9%) 1157.063 MB/sec [Average]
[info]   (min, avg, max) = (671.378, 806.509, 1344.033), stdev = 300.486
[info]   CI (99.9%): [≈ 0, 1963.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4523.704 ±(99.9%) 6497.731 B/op [Average]
[info]   (min, avg, max) = (3761.038, 4523.704, 7542.260), stdev = 1687.440
[info]   CI (99.9%): [≈ 0, 11021.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310384.678 ops/s
[info] # Warmup Iteration   2: 320979.054 ops/s
[info] # Warmup Iteration   3: 321660.160 ops/s
[info] # Warmup Iteration   4: 327266.689 ops/s
[info] # Warmup Iteration   5: 319675.989 ops/s
[info] Iteration   1: 327204.146 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 327455.848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 327132.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 327404.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 328188.749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   327477.111 ±(99.9%) 1617.350 ops/s [Average]
[info]   (min, avg, max) = (327132.093, 327477.111, 328188.749), stdev = 420.021
[info]   CI (99.9%): [325859.762, 329094.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:54:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56226.362 ops/s
[info] # Warmup Iteration   2: 71127.875 ops/s
[info] # Warmup Iteration   3: 71638.053 ops/s
[info] # Warmup Iteration   4: 72321.002 ops/s
[info] # Warmup Iteration   5: 72425.838 ops/s
[info] Iteration   1: 70200.750 ops/s
[info]                  ·gc.alloc.rate:                   1041.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15038.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 71802.423 ops/s
[info]                  ·gc.alloc.rate:                   1065.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29349.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 71390.384 ops/s
[info]                  ·gc.alloc.rate:                   1058.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14758.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 72526.438 ops/s
[info]                  ·gc.alloc.rate:                   1075.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29062.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 72793.580 ops/s
[info]                  ·gc.alloc.rate:                   1079.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28977.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   71742.715 ±(99.9%) 3956.945 ops/s [Average]
[info]   (min, avg, max) = (70200.750, 71742.715, 72793.580), stdev = 1027.606
[info]   CI (99.9%): [67785.770, 75699.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1064.167 ±(99.9%) 58.281 MB/sec [Average]
[info]   (min, avg, max) = (1041.511, 1064.167, 1079.716), stdev = 15.135
[info]   CI (99.9%): [1005.887, 1122.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.006, 23344.035), stdev = 0.028
[info]   CI (99.9%): [23343.898, 23344.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.453 ±(99.9%) 3.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.453, 1.807), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.790 ±(99.9%) 1411.761 MB/sec [Average]
[info]   (min, avg, max) = (669.390, 1071.790, 1340.278), stdev = 366.630
[info]   CI (99.9%): [≈ 0, 2483.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23437.280 ±(99.9%) 30022.733 B/op [Average]
[info]   (min, avg, max) = (14758.335, 23437.280, 29349.790), stdev = 7796.808
[info]   CI (99.9%): [≈ 0, 53460.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17747.941 ops/s
[info] # Warmup Iteration   2: 24648.179 ops/s
[info] # Warmup Iteration   3: 24874.106 ops/s
[info] # Warmup Iteration   4: 24880.802 ops/s
[info] # Warmup Iteration   5: 24933.841 ops/s
[info] Iteration   1: 25056.622 ops/s
[info]                  ·gc.alloc.rate:                   1305.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84351.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 25040.658 ops/s
[info]                  ·gc.alloc.rate:                   1304.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84401.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24978.099 ops/s
[info]                  ·gc.alloc.rate:                   1301.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84614.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 25140.720 ops/s
[info]                  ·gc.alloc.rate:                   1309.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84149.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 25061.898 ops/s
[info]                  ·gc.alloc.rate:                   1305.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84501.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   25055.599 ±(99.9%) 223.832 ops/s [Average]
[info]   (min, avg, max) = (24978.099, 25055.599, 25140.720), stdev = 58.129
[info]   CI (99.9%): [24831.767, 25279.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1305.237 ±(99.9%) 12.078 MB/sec [Average]
[info]   (min, avg, max) = (1301.010, 1305.237, 1309.814), stdev = 3.136
[info]   CI (99.9%): [1293.160, 1317.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81984.016, 81984.017, 81984.018), stdev = 0.001
[info]   CI (99.9%): [81984.014, 81984.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.922 ±(99.9%) 6.163 B/op [Average]
[info]   (min, avg, max) = (2.615, 3.922, 6.536), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 10.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.758 ±(99.9%) 4.773 MB/sec [Average]
[info]   (min, avg, max) = (1342.757, 1343.758, 1345.638), stdev = 1.240
[info]   CI (99.9%): [1338.985, 1348.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84403.881 ±(99.9%) 670.991 B/op [Average]
[info]   (min, avg, max) = (84149.621, 84403.881, 84614.707), stdev = 174.254
[info]   CI (99.9%): [83732.890, 85074.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17286.778 ops/s
[info] # Warmup Iteration   2: 28574.318 ops/s
[info] # Warmup Iteration   3: 29585.097 ops/s
[info] # Warmup Iteration   4: 28991.045 ops/s
[info] # Warmup Iteration   5: 29680.715 ops/s
[info] Iteration   1: 29832.959 ops/s
[info]                  ·gc.alloc.rate:                   1168.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35651.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 29762.701 ops/s
[info]                  ·gc.alloc.rate:                   1165.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71506.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 29778.963 ops/s
[info]                  ·gc.alloc.rate:                   1166.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71521.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 29759.278 ops/s
[info]                  ·gc.alloc.rate:                   1165.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71621.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 29823.391 ops/s
[info]                  ·gc.alloc.rate:                   1168.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35751.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   29791.458 ±(99.9%) 132.843 ops/s [Average]
[info]   (min, avg, max) = (29759.278, 29791.458, 29832.959), stdev = 34.499
[info]   CI (99.9%): [29658.616, 29924.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1166.800 ±(99.9%) 5.045 MB/sec [Average]
[info]   (min, avg, max) = (1165.528, 1166.800, 1168.299), stdev = 1.310
[info]   CI (99.9%): [1161.755, 1171.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61648.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (61648.014, 61648.014, 61648.015), stdev = 0.001
[info]   CI (99.9%): [61648.012, 61648.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.100 ±(99.9%) 7.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.100, 4.401), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.499 ±(99.9%) 1427.132 MB/sec [Average]
[info]   (min, avg, max) = (675.643, 1082.499, 1354.097), stdev = 370.622
[info]   CI (99.9%): [≈ 0, 2509.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   57210.629 ±(99.9%) 75606.936 B/op [Average]
[info]   (min, avg, max) = (35651.865, 57210.629, 71621.926), stdev = 19634.881
[info]   CI (99.9%): [≈ 0, 132817.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456929.681 ops/s
[info] # Warmup Iteration   2: 499692.779 ops/s
[info] # Warmup Iteration   3: 504569.468 ops/s
[info] # Warmup Iteration   4: 480618.472 ops/s
[info] # Warmup Iteration   5: 505814.554 ops/s
[info] Iteration   1: 499855.436 ops/s
[info]                  ·gc.alloc.rate:                   1300.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2114.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 505198.156 ops/s
[info]                  ·gc.alloc.rate:                   1314.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4183.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 506602.838 ops/s
[info]                  ·gc.alloc.rate:                   1318.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4174.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 505655.354 ops/s
[info]                  ·gc.alloc.rate:                   1315.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4186.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 506539.866 ops/s
[info]                  ·gc.alloc.rate:                   1318.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4182.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   504770.330 ±(99.9%) 10825.007 ops/s [Average]
[info]   (min, avg, max) = (499855.436, 504770.330, 506602.838), stdev = 2811.220
[info]   CI (99.9%): [493945.323, 515595.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1313.539 ±(99.9%) 28.214 MB/sec [Average]
[info]   (min, avg, max) = (1300.678, 1313.539, 1318.175), stdev = 7.327
[info]   CI (99.9%): [1285.325, 1341.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.207 ±(99.9%) 0.369 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.207, 0.324), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1209.701 ±(99.9%) 1158.831 MB/sec [Average]
[info]   (min, avg, max) = (671.359, 1209.701, 1345.991), stdev = 300.945
[info]   CI (99.9%): [50.870, 2368.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3768.159 ±(99.9%) 3560.324 B/op [Average]
[info]   (min, avg, max) = (2114.196, 3768.159, 4186.036), stdev = 924.605
[info]   CI (99.9%): [207.836, 7328.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9968.557 ops/s
[info] # Warmup Iteration   2: 23953.465 ops/s
[info] # Warmup Iteration   3: 24163.450 ops/s
[info] # Warmup Iteration   4: 23784.833 ops/s
[info] # Warmup Iteration   5: 24047.323 ops/s
[info] Iteration   1: 23724.832 ops/s
[info]                  ·gc.alloc.rate:                   1803.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89749.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24165.396 ops/s
[info]                  ·gc.alloc.rate:                   1837.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132340.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24163.052 ops/s
[info]                  ·gc.alloc.rate:                   1837.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132482.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24163.739 ops/s
[info]                  ·gc.alloc.rate:                   1837.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132633.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24178.472 ops/s
[info]                  ·gc.alloc.rate:                   1838.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88414.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   24079.098 ±(99.9%) 762.970 ops/s [Average]
[info]   (min, avg, max) = (23724.832, 24079.098, 24178.472), stdev = 198.141
[info]   CI (99.9%): [23316.128, 24842.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1830.759 ±(99.9%) 58.335 MB/sec [Average]
[info]   (min, avg, max) = (1803.671, 1830.759, 1838.231), stdev = 15.149
[info]   CI (99.9%): [1772.424, 1889.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119672.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (119672.017, 119672.017, 119672.019), stdev = 0.001
[info]   CI (99.9%): [119672.014, 119672.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.169 ±(99.9%) 7.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.169, 5.423), stdev = 2.056
[info]   CI (99.9%): [≈ 0, 10.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1762.570 ±(99.9%) 1431.326 MB/sec [Average]
[info]   (min, avg, max) = (1352.680, 1762.570, 2036.711), stdev = 371.711
[info]   CI (99.9%): [331.244, 3193.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   115124.184 ±(99.9%) 91560.924 B/op [Average]
[info]   (min, avg, max) = (88414.791, 115124.184, 132633.930), stdev = 23778.081
[info]   CI (99.9%): [23563.260, 206685.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49290.323 ops/s
[info] # Warmup Iteration   2: 70607.192 ops/s
[info] # Warmup Iteration   3: 71157.051 ops/s
[info] # Warmup Iteration   4: 72520.814 ops/s
[info] # Warmup Iteration   5: 72301.296 ops/s
[info] Iteration   1: 72675.150 ops/s
[info]                  ·gc.alloc.rate:                   1538.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29053.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 72416.218 ops/s
[info]                  ·gc.alloc.rate:                   1533.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29172.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 70739.529 ops/s
[info]                  ·gc.alloc.rate:                   1497.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29893.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72470.263 ops/s
[info]                  ·gc.alloc.rate:                   1533.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43826.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 72446.328 ops/s
[info]                  ·gc.alloc.rate:                   1533.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29266.995 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   72149.498 ±(99.9%) 3060.269 ops/s [Average]
[info]   (min, avg, max) = (70739.529, 72149.498, 72675.150), stdev = 794.742
[info]   CI (99.9%): [69089.228, 75209.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1527.181 ±(99.9%) 65.221 MB/sec [Average]
[info]   (min, avg, max) = (1497.150, 1527.181, 1538.560), stdev = 16.938
[info]   CI (99.9%): [1461.960, 1592.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.006), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.723 ±(99.9%) 3.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.723, 2.260), stdev = 0.937
[info]   CI (99.9%): [≈ 0, 4.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1478.601 ±(99.9%) 1160.939 MB/sec [Average]
[info]   (min, avg, max) = (1341.870, 1478.601, 2017.915), stdev = 301.492
[info]   CI (99.9%): [317.662, 2639.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32242.620 ±(99.9%) 24967.375 B/op [Average]
[info]   (min, avg, max) = (29053.380, 32242.620, 43826.895), stdev = 6483.948
[info]   CI (99.9%): [7275.246, 57209.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97115.486 ops/s
[info] # Warmup Iteration   2: 154574.200 ops/s
[info] # Warmup Iteration   3: 150981.984 ops/s
[info] # Warmup Iteration   4: 154470.003 ops/s
[info] # Warmup Iteration   5: 155267.444 ops/s
[info] Iteration   1: 154871.750 ops/s
[info]                  ·gc.alloc.rate:                   1173.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13735.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 155433.223 ops/s
[info]                  ·gc.alloc.rate:                   1177.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6849.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 155276.333 ops/s
[info]                  ·gc.alloc.rate:                   1176.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13716.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 155372.265 ops/s
[info]                  ·gc.alloc.rate:                   1177.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13717.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 155038.648 ops/s
[info]                  ·gc.alloc.rate:                   1174.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13760.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   155198.444 ±(99.9%) 910.547 ops/s [Average]
[info]   (min, avg, max) = (154871.750, 155198.444, 155433.223), stdev = 236.466
[info]   CI (99.9%): [154287.897, 156108.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1176.036 ±(99.9%) 7.070 MB/sec [Average]
[info]   (min, avg, max) = (1173.530, 1176.036, 1177.814), stdev = 1.836
[info]   CI (99.9%): [1168.966, 1183.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11928.003, 11928.003, 11928.003), stdev = 0.001
[info]   CI (99.9%): [11928.002, 11928.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.465 ±(99.9%) 1.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 0.844), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.019 ±(99.9%) 1166.048 MB/sec [Average]
[info]   (min, avg, max) = (676.326, 1218.019, 1355.247), stdev = 302.819
[info]   CI (99.9%): [51.971, 2384.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12355.910 ±(99.9%) 11853.559 B/op [Average]
[info]   (min, avg, max) = (6849.316, 12355.910, 13760.840), stdev = 3078.332
[info]   CI (99.9%): [502.350, 24209.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1223126.616 ops/s
[info] # Warmup Iteration   2: 1320517.020 ops/s
[info] # Warmup Iteration   3: 1314058.364 ops/s
[info] # Warmup Iteration   4: 1320149.200 ops/s
[info] # Warmup Iteration   5: 1320547.918 ops/s
[info] Iteration   1: 1321652.596 ops/s
[info]                  ·gc.alloc.rate:                   1094.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1601.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1312049.974 ops/s
[info]                  ·gc.alloc.rate:                   1086.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 806.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1318906.272 ops/s
[info]                  ·gc.alloc.rate:                   1092.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1320240.456 ops/s
[info]                  ·gc.alloc.rate:                   1094.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1323265.963 ops/s
[info]                  ·gc.alloc.rate:                   1096.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 799.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1319223.052 ±(99.9%) 16655.573 ops/s [Average]
[info]   (min, avg, max) = (1312049.974, 1319223.052, 1323265.963), stdev = 4325.399
[info]   CI (99.9%): [1302567.480, 1335878.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1092.932 ±(99.9%) 13.766 MB/sec [Average]
[info]   (min, avg, max) = (1086.967, 1092.932, 1096.180), stdev = 3.575
[info]   CI (99.9%): [1079.165, 1106.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1075.259 ±(99.9%) 1416.823 MB/sec [Average]
[info]   (min, avg, max) = (672.064, 1075.259, 1344.714), stdev = 367.944
[info]   CI (99.9%): [≈ 0, 2492.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1282.523 ±(99.9%) 1685.530 B/op [Average]
[info]   (min, avg, max) = (799.794, 1282.523, 1602.532), stdev = 437.727
[info]   CI (99.9%): [≈ 0, 2968.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1392868.156 ops/s
[info] # Warmup Iteration   2: 1469960.323 ops/s
[info] # Warmup Iteration   3: 1440393.770 ops/s
[info] # Warmup Iteration   4: 1469976.973 ops/s
[info] # Warmup Iteration   5: 1470778.698 ops/s
[info] Iteration   1: 1472144.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1471471.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1469567.251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1471071.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1471248.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1471100.539 ±(99.9%) 3653.436 ops/s [Average]
[info]   (min, avg, max) = (1469567.251, 1471100.539, 1472144.401), stdev = 948.786
[info]   CI (99.9%): [1467447.104, 1474753.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72828.849 ops/s
[info] # Warmup Iteration   2: 121233.945 ops/s
[info] # Warmup Iteration   3: 125873.606 ops/s
[info] # Warmup Iteration   4: 125309.315 ops/s
[info] # Warmup Iteration   5: 125253.970 ops/s
[info] Iteration   1: 125943.704 ops/s
[info]                  ·gc.alloc.rate:                   1419.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16889.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 125457.784 ops/s
[info]                  ·gc.alloc.rate:                   1414.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25454.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 126001.777 ops/s
[info]                  ·gc.alloc.rate:                   1420.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16915.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 125921.993 ops/s
[info]                  ·gc.alloc.rate:                   1419.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16942.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 125965.043 ops/s
[info]                  ·gc.alloc.rate:                   1420.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16945.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   125858.060 ±(99.9%) 869.050 ops/s [Average]
[info]   (min, avg, max) = (125457.784, 125858.060, 126001.777), stdev = 225.689
[info]   CI (99.9%): [124989.010, 126727.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1418.931 ±(99.9%) 10.483 MB/sec [Average]
[info]   (min, avg, max) = (1414.161, 1418.931, 1420.882), stdev = 2.722
[info]   CI (99.9%): [1408.448, 1429.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17744.003, 17744.003, 17744.003), stdev = 0.001
[info]   CI (99.9%): [17744.003, 17744.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.364 ±(99.9%) 1.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 0.780), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.291 ±(99.9%) 1161.057 MB/sec [Average]
[info]   (min, avg, max) = (1351.337, 1489.291, 2028.660), stdev = 301.523
[info]   CI (99.9%): [328.235, 2650.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18629.612 ±(99.9%) 14691.050 B/op [Average]
[info]   (min, avg, max) = (16889.960, 18629.612, 25454.362), stdev = 3815.219
[info]   CI (99.9%): [3938.562, 33320.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20974.266 ops/s
[info] # Warmup Iteration   2: 35900.375 ops/s
[info] # Warmup Iteration   3: 36881.453 ops/s
[info] # Warmup Iteration   4: 36868.159 ops/s
[info] # Warmup Iteration   5: 37006.085 ops/s
[info] Iteration   1: 37030.884 ops/s
[info]                  ·gc.alloc.rate:                   1329.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57472.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 37007.670 ops/s
[info]                  ·gc.alloc.rate:                   1328.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57550.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 36733.865 ops/s
[info]                  ·gc.alloc.rate:                   1319.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58024.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36999.736 ops/s
[info]                  ·gc.alloc.rate:                   1328.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57663.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 37047.186 ops/s
[info]                  ·gc.alloc.rate:                   1330.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57633.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   36963.868 ±(99.9%) 500.360 ops/s [Average]
[info]   (min, avg, max) = (36733.865, 36963.868, 37047.186), stdev = 129.942
[info]   CI (99.9%): [36463.509, 37464.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1327.446 ±(99.9%) 17.388 MB/sec [Average]
[info]   (min, avg, max) = (1319.454, 1327.446, 1330.336), stdev = 4.516
[info]   CI (99.9%): [1310.059, 1344.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56528.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56528.011, 56528.011, 56528.012), stdev = 0.001
[info]   CI (99.9%): [56528.010, 56528.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.950 ±(99.9%) 6.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.950, 4.426), stdev = 1.703
[info]   CI (99.9%): [≈ 0, 8.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354.225 ±(99.9%) 6.811 MB/sec [Average]
[info]   (min, avg, max) = (1352.017, 1354.225, 1356.346), stdev = 1.769
[info]   CI (99.9%): [1347.415, 1361.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   57668.922 ±(99.9%) 817.189 B/op [Average]
[info]   (min, avg, max) = (57472.508, 57668.922, 58024.307), stdev = 212.221
[info]   CI (99.9%): [56851.732, 58486.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 648394.499 ops/s
[info] # Warmup Iteration   2: 721390.640 ops/s
[info] # Warmup Iteration   3: 745228.821 ops/s
[info] # Warmup Iteration   4: 748495.776 ops/s
[info] # Warmup Iteration   5: 744665.209 ops/s
[info] Iteration   1: 747209.976 ops/s
[info]                  ·gc.alloc.rate:                   1458.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2828.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 749478.124 ops/s
[info]                  ·gc.alloc.rate:                   1462.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2822.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 751516.656 ops/s
[info]                  ·gc.alloc.rate:                   1466.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2816.690 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 751085.832 ops/s
[info]                  ·gc.alloc.rate:                   1465.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2821.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 750867.189 ops/s
[info]                  ·gc.alloc.rate:                   1465.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2824.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   750031.556 ±(99.9%) 6747.670 ops/s [Average]
[info]   (min, avg, max) = (747209.976, 750031.556, 751516.656), stdev = 1752.349
[info]   CI (99.9%): [743283.885, 756779.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1463.884 ±(99.9%) 13.298 MB/sec [Average]
[info]   (min, avg, max) = (1458.276, 1463.884, 1466.740), stdev = 3.454
[info]   CI (99.9%): [1450.586, 1477.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.001, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.131 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (0.087, 0.131, 0.175), stdev = 0.031
[info]   CI (99.9%): [0.012, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1345.128 ±(99.9%) 6.999 MB/sec [Average]
[info]   (min, avg, max) = (1342.788, 1345.128, 1347.533), stdev = 1.818
[info]   CI (99.9%): [1338.130, 1352.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2822.795 ±(99.9%) 17.040 B/op [Average]
[info]   (min, avg, max) = (2816.690, 2822.795, 2828.714), stdev = 4.425
[info]   CI (99.9%): [2805.755, 2839.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12292.819 ops/s
[info] # Warmup Iteration   2: 28149.415 ops/s
[info] # Warmup Iteration   3: 28153.391 ops/s
[info] # Warmup Iteration   4: 28180.047 ops/s
[info] # Warmup Iteration   5: 28230.343 ops/s
[info] Iteration   1: 28303.197 ops/s
[info]                  ·gc.alloc.rate:                   2059.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112917.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28268.675 ops/s
[info]                  ·gc.alloc.rate:                   2057.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113191.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28315.654 ops/s
[info]                  ·gc.alloc.rate:                   2060.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113110.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28324.896 ops/s
[info]                  ·gc.alloc.rate:                   2061.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113185.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28323.521 ops/s
[info]                  ·gc.alloc.rate:                   2061.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              114552.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113304.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   28307.189 ±(99.9%) 89.299 ops/s [Average]
[info]   (min, avg, max) = (28268.675, 28307.189, 28324.896), stdev = 23.191
[info]   CI (99.9%): [28217.890, 28396.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2060.110 ±(99.9%) 6.777 MB/sec [Average]
[info]   (min, avg, max) = (2057.199, 2060.110, 2061.702), stdev = 1.760
[info]   CI (99.9%): [2053.332, 2066.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114552.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (114552.014, 114552.015, 114552.016), stdev = 0.001
[info]   CI (99.9%): [114552.013, 114552.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.473 ±(99.9%) 4.463 B/op [Average]
[info]   (min, avg, max) = (2.313, 3.473, 4.636), stdev = 1.159
[info]   CI (99.9%): [≈ 0, 7.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2034.749 ±(99.9%) 12.650 MB/sec [Average]
[info]   (min, avg, max) = (2030.473, 2034.749, 2038.669), stdev = 3.285
[info]   CI (99.9%): [2022.100, 2047.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   113141.842 ±(99.9%) 551.635 B/op [Average]
[info]   (min, avg, max) = (112917.586, 113141.842, 113304.544), stdev = 143.258
[info]   CI (99.9%): [112590.206, 113693.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234956.374 ops/s
[info] # Warmup Iteration   2: 356935.967 ops/s
[info] # Warmup Iteration   3: 367502.910 ops/s
[info] # Warmup Iteration   4: 357949.067 ops/s
[info] # Warmup Iteration   5: 367537.476 ops/s
[info] Iteration   1: 364802.646 ops/s
[info]                  ·gc.alloc.rate:                   1014.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2912.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 367649.408 ops/s
[info]                  ·gc.alloc.rate:                   1022.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5786.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 366890.854 ops/s
[info]                  ·gc.alloc.rate:                   1019.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2901.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 367556.828 ops/s
[info]                  ·gc.alloc.rate:                   1021.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5794.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 368154.139 ops/s
[info]                  ·gc.alloc.rate:                   1023.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2893.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   367010.775 ±(99.9%) 5058.696 ops/s [Average]
[info]   (min, avg, max) = (364802.646, 367010.775, 368154.139), stdev = 1313.727
[info]   CI (99.9%): [361952.079, 372069.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1020.374 ±(99.9%) 14.073 MB/sec [Average]
[info]   (min, avg, max) = (1014.280, 1020.374, 1023.618), stdev = 3.655
[info]   CI (99.9%): [1006.301, 1034.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.161 ±(99.9%) 0.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.446), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 0.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.576 ±(99.9%) 1426.340 MB/sec [Average]
[info]   (min, avg, max) = (675.097, 946.576, 1353.138), stdev = 370.416
[info]   CI (99.9%): [≈ 0, 2372.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4057.648 ±(99.9%) 6090.541 B/op [Average]
[info]   (min, avg, max) = (2893.197, 4057.648, 5794.569), stdev = 1581.694
[info]   CI (99.9%): [≈ 0, 10148.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1591646.078 ops/s
[info] # Warmup Iteration   2: 1626885.345 ops/s
[info] # Warmup Iteration   3: 1694464.050 ops/s
[info] # Warmup Iteration   4: 1680358.793 ops/s
[info] # Warmup Iteration   5: 1702677.695 ops/s
[info] Iteration   1: 1704517.692 ops/s
[info]                  ·gc.alloc.rate:                   996.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242.496 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1708768.222 ops/s
[info]                  ·gc.alloc.rate:                   998.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 618.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1655304.181 ops/s
[info]                  ·gc.alloc.rate:                   967.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1276.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1711584.940 ops/s
[info]                  ·gc.alloc.rate:                   1000.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1696973.672 ops/s
[info]                  ·gc.alloc.rate:                   992.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1246.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1695429.741 ±(99.9%) 88939.470 ops/s [Average]
[info]   (min, avg, max) = (1655304.181, 1695429.741, 1711584.940), stdev = 23097.298
[info]   CI (99.9%): [1606490.271, 1784369.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   990.985 ±(99.9%) 51.997 MB/sec [Average]
[info]   (min, avg, max) = (967.498, 990.985, 1000.399), stdev = 13.503
[info]   CI (99.9%): [938.989, 1042.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.946 ±(99.9%) 1418.536 MB/sec [Average]
[info]   (min, avg, max) = (671.388, 1074.946, 1345.433), stdev = 368.389
[info]   CI (99.9%): [≈ 0, 2493.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1000.277 ±(99.9%) 1344.941 B/op [Average]
[info]   (min, avg, max) = (617.431, 1000.277, 1276.887), stdev = 349.277
[info]   CI (99.9%): [≈ 0, 2345.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:50:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1817767.414 ops/s
[info] # Warmup Iteration   2: 1918770.960 ops/s
[info] # Warmup Iteration   3: 1925718.778 ops/s
[info] # Warmup Iteration   4: 1917491.035 ops/s
[info] # Warmup Iteration   5: 1817617.576 ops/s
[info] Iteration   1: 1818987.903 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1919220.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1919312.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1918529.927 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1919118.940 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1899033.851 ±(99.9%) 172308.951 ops/s [Average]
[info]   (min, avg, max) = (1818987.903, 1899033.851, 1919312.317), stdev = 44748.087
[info]   CI (99.9%): [1726724.900, 2071342.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135619.606 ops/s
[info] # Warmup Iteration   2: 234762.798 ops/s
[info] # Warmup Iteration   3: 237801.486 ops/s
[info] # Warmup Iteration   4: 238944.329 ops/s
[info] # Warmup Iteration   5: 238607.385 ops/s
[info] Iteration   1: 238084.595 ops/s
[info]                  ·gc.alloc.rate:                   1541.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13413.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 238836.610 ops/s
[info]                  ·gc.alloc.rate:                   1546.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8922.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 239035.220 ops/s
[info]                  ·gc.alloc.rate:                   1548.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8921.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 238903.087 ops/s
[info]                  ·gc.alloc.rate:                   1546.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8932.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 238788.303 ops/s
[info]                  ·gc.alloc.rate:                   1545.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13417.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   238729.563 ±(99.9%) 1433.595 ops/s [Average]
[info]   (min, avg, max) = (238084.595, 238729.563, 239035.220), stdev = 372.300
[info]   CI (99.9%): [237295.968, 240163.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1545.807 ±(99.9%) 9.384 MB/sec [Average]
[info]   (min, avg, max) = (1541.694, 1545.807, 1548.105), stdev = 2.437
[info]   CI (99.9%): [1536.423, 1555.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10192.002, 10192.002, 10192.002), stdev = 0.001
[info]   CI (99.9%): [10192.002, 10192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.412 ±(99.9%) 0.989 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.412, 0.686), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.751 ±(99.9%) 1428.345 MB/sec [Average]
[info]   (min, avg, max) = (1353.696, 1625.751, 2035.245), stdev = 370.937
[info]   CI (99.9%): [197.406, 3054.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10721.402 ±(99.9%) 9469.710 B/op [Average]
[info]   (min, avg, max) = (8921.326, 10721.402, 13417.726), stdev = 2459.254
[info]   CI (99.9%): [1251.693, 20191.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58130.474 ops/s
[info] # Warmup Iteration   2: 81942.171 ops/s
[info] # Warmup Iteration   3: 82263.769 ops/s
[info] # Warmup Iteration   4: 82630.027 ops/s
[info] # Warmup Iteration   5: 82108.549 ops/s
[info] Iteration   1: 82636.211 ops/s
[info]                  ·gc.alloc.rate:                   1550.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              29536.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25499.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 82769.823 ops/s
[info]                  ·gc.alloc.rate:                   1553.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              29536.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38202.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 82967.633 ops/s
[info]                  ·gc.alloc.rate:                   1557.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              29536.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25442.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 82774.753 ops/s
[info]                  ·gc.alloc.rate:                   1553.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              29536.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25534.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 82463.461 ops/s
[info]                  ·gc.alloc.rate:                   1547.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              29536.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25661.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   82722.376 ±(99.9%) 719.378 ops/s [Average]
[info]   (min, avg, max) = (82463.461, 82722.376, 82967.633), stdev = 186.820
[info]   CI (99.9%): [82002.999, 83441.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1552.351 ±(99.9%) 13.571 MB/sec [Average]
[info]   (min, avg, max) = (1547.415, 1552.351, 1557.026), stdev = 3.524
[info]   CI (99.9%): [1538.780, 1565.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29536.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29536.005, 29536.005, 29536.006), stdev = 0.001
[info]   CI (99.9%): [29536.004, 29536.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.635 ±(99.9%) 2.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 1.589), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 3.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1475.256 ±(99.9%) 1148.462 MB/sec [Average]
[info]   (min, avg, max) = (1338.975, 1475.256, 2008.773), stdev = 298.252
[info]   CI (99.9%): [326.794, 2623.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28068.093 ±(99.9%) 21816.938 B/op [Average]
[info]   (min, avg, max) = (25442.961, 28068.093, 38202.351), stdev = 5665.790
[info]   CI (99.9%): [6251.155, 49885.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46482.441 ops/s
[info] # Warmup Iteration   2: 84405.079 ops/s
[info] # Warmup Iteration   3: 83124.780 ops/s
[info] # Warmup Iteration   4: 83325.241 ops/s
[info] # Warmup Iteration   5: 86977.310 ops/s
[info] Iteration   1: 86674.459 ops/s
[info]                  ·gc.alloc.rate:                   978.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24482.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 86691.493 ops/s
[info]                  ·gc.alloc.rate:                   979.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12251.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 86269.339 ops/s
[info]                  ·gc.alloc.rate:                   974.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24634.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 86679.396 ops/s
[info]                  ·gc.alloc.rate:                   978.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12264.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 86813.749 ops/s
[info]                  ·gc.alloc.rate:                   980.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24514.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86625.687 ±(99.9%) 798.359 ops/s [Average]
[info]   (min, avg, max) = (86269.339, 86625.687, 86813.749), stdev = 207.331
[info]   CI (99.9%): [85827.328, 87424.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   978.338 ±(99.9%) 9.311 MB/sec [Average]
[info]   (min, avg, max) = (974.254, 978.338, 980.728), stdev = 2.418
[info]   CI (99.9%): [969.026, 987.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.378 ±(99.9%) 1.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 0.756), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.171 ±(99.9%) 1423.970 MB/sec [Average]
[info]   (min, avg, max) = (674.763, 1080.171, 1352.510), stdev = 369.801
[info]   CI (99.9%): [≈ 0, 2504.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19629.569 ±(99.9%) 25913.280 B/op [Average]
[info]   (min, avg, max) = (12251.246, 19629.569, 24634.773), stdev = 6729.597
[info]   CI (99.9%): [≈ 0, 45542.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90743.418 ops/s
[info] # Warmup Iteration   2: 109253.398 ops/s
[info] # Warmup Iteration   3: 109697.372 ops/s
[info] # Warmup Iteration   4: 109536.437 ops/s
[info] # Warmup Iteration   5: 110731.673 ops/s
[info] Iteration   1: 110238.876 ops/s
[info]                  ·gc.alloc.rate:                   1161.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19135.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 107114.830 ops/s
[info]                  ·gc.alloc.rate:                   1128.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19674.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 110307.943 ops/s
[info]                  ·gc.alloc.rate:                   1161.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19109.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 110354.403 ops/s
[info]                  ·gc.alloc.rate:                   1162.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9552.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 110314.539 ops/s
[info]                  ·gc.alloc.rate:                   1161.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19131.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   109666.118 ±(99.9%) 5494.170 ops/s [Average]
[info]   (min, avg, max) = (107114.830, 109666.118, 110354.403), stdev = 1426.819
[info]   CI (99.9%): [104171.948, 115160.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1155.031 ±(99.9%) 57.214 MB/sec [Average]
[info]   (min, avg, max) = (1128.461, 1155.031, 1162.214), stdev = 14.858
[info]   CI (99.9%): [1097.817, 1212.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.299 ±(99.9%) 0.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.299, 0.594), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 1.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1205.911 ±(99.9%) 1154.022 MB/sec [Average]
[info]   (min, avg, max) = (669.800, 1205.911, 1340.829), stdev = 299.696
[info]   CI (99.9%): [51.889, 2359.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17320.622 ±(99.9%) 16745.486 B/op [Average]
[info]   (min, avg, max) = (9552.979, 17320.622, 19674.014), stdev = 4348.750
[info]   CI (99.9%): [575.135, 34066.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23132.359 ops/s
[info] # Warmup Iteration   2: 47483.762 ops/s
[info] # Warmup Iteration   3: 47833.411 ops/s
[info] # Warmup Iteration   4: 47016.376 ops/s
[info] # Warmup Iteration   5: 47382.757 ops/s
[info] Iteration   1: 48097.382 ops/s
[info]                  ·gc.alloc.rate:                   2297.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66481.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 47953.701 ops/s
[info]                  ·gc.alloc.rate:                   2290.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89042.825 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 47983.019 ops/s
[info]                  ·gc.alloc.rate:                   2291.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66814.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 48074.484 ops/s
[info]                  ·gc.alloc.rate:                   2296.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66729.943 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48103.589 ops/s
[info]                  ·gc.alloc.rate:                   2297.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89008.654 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   48042.435 ±(99.9%) 266.712 ops/s [Average]
[info]   (min, avg, max) = (47953.701, 48042.435, 48103.589), stdev = 69.264
[info]   CI (99.9%): [47775.723, 48309.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2294.640 ±(99.9%) 13.266 MB/sec [Average]
[info]   (min, avg, max) = (2290.192, 2294.640, 2297.681), stdev = 3.445
[info]   CI (99.9%): [2281.374, 2307.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75176.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75176.008, 75176.009, 75176.009), stdev = 0.001
[info]   CI (99.9%): [75176.007, 75176.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.454 ±(99.9%) 3.974 B/op [Average]
[info]   (min, avg, max) = (1.363, 2.454, 3.406), stdev = 1.032
[info]   CI (99.9%): [≈ 0, 6.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2307.945 ±(99.9%) 1435.641 MB/sec [Average]
[info]   (min, avg, max) = (2031.941, 2307.945, 2720.050), stdev = 372.831
[info]   CI (99.9%): [872.304, 3743.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75615.408 ±(99.9%) 47141.581 B/op [Average]
[info]   (min, avg, max) = (66481.453, 75615.408, 89042.825), stdev = 12242.519
[info]   CI (99.9%): [28473.827, 122756.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97927.322 ops/s
[info] # Warmup Iteration   2: 118822.644 ops/s
[info] # Warmup Iteration   3: 122761.103 ops/s
[info] # Warmup Iteration   4: 125092.037 ops/s
[info] # Warmup Iteration   5: 126183.262 ops/s
[info] Iteration   1: 125758.461 ops/s
[info]                  ·gc.alloc.rate:                   556.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6402.652 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 126204.941 ops/s
[info]                  ·gc.alloc.rate:                   558.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8390.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 127133.615 ops/s
[info]                  ·gc.alloc.rate:      562.119 MB/sec
[info]                  ·gc.alloc.rate.norm: 6960.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 126809.694 ops/s
[info]                  ·gc.alloc.rate:                   560.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8349.917 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 127018.117 ops/s
[info]                  ·gc.alloc.rate:                   561.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8303.362 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   126584.966 ±(99.9%) 2250.789 ops/s [Average]
[info]   (min, avg, max) = (125758.461, 126584.966, 127133.615), stdev = 584.523
[info]   CI (99.9%): [124334.177, 128835.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   559.720 ±(99.9%) 9.991 MB/sec [Average]
[info]   (min, avg, max) = (556.040, 559.720, 562.119), stdev = 2.595
[info]   CI (99.9%): [549.729, 569.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6960.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6960.003, 6960.003, 6960.003), stdev = 0.001
[info]   CI (99.9%): [6960.003, 6960.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.859 ±(99.9%) 7.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.859, 4.256), stdev = 1.899
[info]   CI (99.9%): [≈ 0, 8.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.719 ±(99.9%) 91.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.719, 53.077), stdev = 23.680
[info]   CI (99.9%): [≈ 0, 101.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   505.403 ±(99.9%) 1120.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.403, 672.718), stdev = 290.935
[info]   CI (99.9%): [≈ 0, 1625.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6289.240 ±(99.9%) 13921.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6289.240, 8390.269), stdev = 3615.412
[info]   CI (99.9%): [≈ 0, 20210.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116856.039 ops/s
[info] # Warmup Iteration   2: 161498.611 ops/s
[info] # Warmup Iteration   3: 162201.131 ops/s
[info] # Warmup Iteration   4: 164421.379 ops/s
[info] # Warmup Iteration   5: 163539.221 ops/s
[info] Iteration   1: 164714.228 ops/s
[info]                  ·gc.alloc.rate:      244.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 163956.898 ops/s
[info]                  ·gc.alloc.rate:                   243.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4911.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 166726.844 ops/s
[info]                  ·gc.alloc.rate:      247.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 164417.951 ops/s
[info]                  ·gc.alloc.rate:                   243.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4897.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 164723.137 ops/s
[info]                  ·gc.alloc.rate:      244.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   164907.812 ±(99.9%) 4095.399 ops/s [Average]
[info]   (min, avg, max) = (163956.898, 164907.812, 166726.844), stdev = 1063.562
[info]   CI (99.9%): [160812.412, 169003.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   244.746 ±(99.9%) 6.018 MB/sec [Average]
[info]   (min, avg, max) = (243.402, 244.746, 247.434), stdev = 1.563
[info]   CI (99.9%): [238.727, 250.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.199), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.643 ±(99.9%) 1079.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.643, 511.706), stdev = 280.219
[info]   CI (99.9%): [≈ 0, 1283.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1961.618 ±(99.9%) 10343.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1961.618, 4911.004), stdev = 2686.061
[info]   CI (99.9%): [≈ 0, 12304.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635167.069 ops/s
[info] # Warmup Iteration   2: 636295.906 ops/s
[info] # Warmup Iteration   3: 684866.310 ops/s
[info] # Warmup Iteration   4: 679795.416 ops/s
[info] # Warmup Iteration   5: 682796.378 ops/s
[info] Iteration   1: 688667.921 ops/s
[info]                  ·gc.alloc.rate:                   854.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1539.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 686473.874 ops/s
[info]                  ·gc.alloc.rate:                   851.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3075.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 686085.469 ops/s
[info]                  ·gc.alloc.rate:                   850.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1535.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 681403.806 ops/s
[info]                  ·gc.alloc.rate:                   845.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1546.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 686800.416 ops/s
[info]                  ·gc.alloc.rate:                   851.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3068.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   685886.297 ±(99.9%) 10377.234 ops/s [Average]
[info]   (min, avg, max) = (681403.806, 685886.297, 688667.921), stdev = 2694.935
[info]   CI (99.9%): [675509.063, 696263.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   850.677 ±(99.9%) 12.948 MB/sec [Average]
[info]   (min, avg, max) = (845.057, 850.677, 854.097), stdev = 3.363
[info]   CI (99.9%): [837.729, 863.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.067 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   938.585 ±(99.9%) 1412.121 MB/sec [Average]
[info]   (min, avg, max) = (669.395, 938.585, 1341.845), stdev = 366.723
[info]   CI (99.9%): [≈ 0, 2350.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2153.032 ±(99.9%) 3230.468 B/op [Average]
[info]   (min, avg, max) = (1535.743, 2153.032, 3075.867), stdev = 838.942
[info]   CI (99.9%): [≈ 0, 5383.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 671356.626 ops/s
[info] # Warmup Iteration   2: 717549.703 ops/s
[info] # Warmup Iteration   3: 718497.272 ops/s
[info] # Warmup Iteration   4: 717309.998 ops/s
[info] # Warmup Iteration   5: 711030.297 ops/s
[info] Iteration   1: 717976.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 719040.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 716662.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 718492.796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 717838.696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   718002.299 ±(99.9%) 3411.806 ops/s [Average]
[info]   (min, avg, max) = (716662.701, 718002.299, 719040.428), stdev = 886.035
[info]   CI (99.9%): [714590.493, 721414.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157155.472 ops/s
[info] # Warmup Iteration   2: 199474.597 ops/s
[info] # Warmup Iteration   3: 203662.379 ops/s
[info] # Warmup Iteration   4: 202643.912 ops/s
[info] # Warmup Iteration   5: 203360.330 ops/s
[info] Iteration   1: 201966.863 ops/s
[info]                  ·gc.alloc.rate:                   660.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5237.689 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 201552.858 ops/s
[info]                  ·gc.alloc.rate:                   658.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5248.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 200975.927 ops/s
[info]                  ·gc.alloc.rate:                   656.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5237.429 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 200675.436 ops/s
[info]                  ·gc.alloc.rate:                   655.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5245.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 201771.628 ops/s
[info]                  ·gc.alloc.rate:                   659.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5206.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   201388.542 ±(99.9%) 2097.613 ops/s [Average]
[info]   (min, avg, max) = (200675.436, 201388.542, 201966.863), stdev = 544.743
[info]   CI (99.9%): [199290.929, 203486.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   658.125 ±(99.9%) 6.810 MB/sec [Average]
[info]   (min, avg, max) = (655.824, 658.125, 660.001), stdev = 1.769
[info]   CI (99.9%): [651.315, 664.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.958 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.958, 4.688), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.471 ±(99.9%) 62.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.471, 36.541), stdev = 16.252
[info]   CI (99.9%): [≈ 0, 70.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   669.761 ±(99.9%) 8.169 MB/sec [Average]
[info]   (min, avg, max) = (667.368, 669.761, 672.022), stdev = 2.122
[info]   CI (99.9%): [661.592, 677.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5234.967 ±(99.9%) 64.750 B/op [Average]
[info]   (min, avg, max) = (5206.120, 5234.967, 5248.446), stdev = 16.815
[info]   CI (99.9%): [5170.217, 5299.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:47:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94217.071 ops/s
[info] # Warmup Iteration   2: 126936.852 ops/s
[info] # Warmup Iteration   3: 131540.800 ops/s
[info] # Warmup Iteration   4: 131945.976 ops/s
[info] # Warmup Iteration   5: 132795.552 ops/s
[info] Iteration   1: 132297.331 ops/s
[info]                  ·gc.alloc.rate:                   1629.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23944.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 131097.025 ops/s
[info]                  ·gc.alloc.rate:                   1614.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16121.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 132228.840 ops/s
[info]                  ·gc.alloc.rate:                   1628.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24003.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 132281.315 ops/s
[info]                  ·gc.alloc.rate:                   1629.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16017.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 132165.259 ops/s
[info]                  ·gc.alloc.rate:                   1627.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24089.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   132013.954 ±(99.9%) 1983.748 ops/s [Average]
[info]   (min, avg, max) = (131097.025, 132013.954, 132297.331), stdev = 515.173
[info]   CI (99.9%): [130030.206, 133997.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1625.841 ±(99.9%) 24.365 MB/sec [Average]
[info]   (min, avg, max) = (1614.576, 1625.841, 1629.048), stdev = 6.327
[info]   CI (99.9%): [1601.476, 1650.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.003), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.743 ±(99.9%) 2.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.743, 1.734), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 3.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.227 ±(99.9%) 1419.294 MB/sec [Average]
[info]   (min, avg, max) = (1342.867, 1748.227, 2022.739), stdev = 368.586
[info]   CI (99.9%): [328.933, 3167.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20835.376 ±(99.9%) 16754.213 B/op [Average]
[info]   (min, avg, max) = (16017.203, 20835.376, 24089.969), stdev = 4351.016
[info]   CI (99.9%): [4081.163, 37589.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115662.596 ops/s
[info] # Warmup Iteration   2: 176149.622 ops/s
[info] # Warmup Iteration   3: 179005.481 ops/s
[info] # Warmup Iteration   4: 179509.325 ops/s
[info] # Warmup Iteration   5: 179822.253 ops/s
[info] Iteration   1: 177910.665 ops/s
[info]                  ·gc.alloc.rate:                   945.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11945.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 178454.093 ops/s
[info]                  ·gc.alloc.rate:                   948.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5960.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 178175.135 ops/s
[info]                  ·gc.alloc.rate:                   947.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11942.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 178664.847 ops/s
[info]                  ·gc.alloc.rate:                   949.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5956.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 178586.124 ops/s
[info]                  ·gc.alloc.rate:                   949.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5963.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   178358.173 ±(99.9%) 1200.785 ops/s [Average]
[info]   (min, avg, max) = (177910.665, 178358.173, 178664.847), stdev = 311.840
[info]   CI (99.9%): [177157.387, 179558.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   948.198 ±(99.9%) 6.662 MB/sec [Average]
[info]   (min, avg, max) = (945.733, 948.198, 949.953), stdev = 1.730
[info]   CI (99.9%): [941.536, 954.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.368 ±(99.9%) 1.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 0.919), stdev = 0.432
[info]   CI (99.9%): [≈ 0, 2.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.049 ±(99.9%) 1422.959 MB/sec [Average]
[info]   (min, avg, max) = (675.781, 946.049, 1351.697), stdev = 369.538
[info]   CI (99.9%): [≈ 0, 2369.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8353.469 ±(99.9%) 12619.969 B/op [Average]
[info]   (min, avg, max) = (5956.051, 8353.469, 11945.168), stdev = 3277.366
[info]   CI (99.9%): [≈ 0, 20973.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 433400.929 ops/s
[info] # Warmup Iteration   2: 482517.326 ops/s
[info] # Warmup Iteration   3: 483644.830 ops/s
[info] # Warmup Iteration   4: 484613.812 ops/s
[info] # Warmup Iteration   5: 471800.899 ops/s
[info] Iteration   1: 485685.670 ops/s
[info]                  ·gc.alloc.rate:                   942.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2180.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 486591.796 ops/s
[info]                  ·gc.alloc.rate:                   944.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4350.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 486770.671 ops/s
[info]                  ·gc.alloc.rate:                   945.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2173.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 487064.792 ops/s
[info]                  ·gc.alloc.rate:                   946.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4336.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 486390.772 ops/s
[info]                  ·gc.alloc.rate:                   944.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2174.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   486500.740 ±(99.9%) 1996.903 ops/s [Average]
[info]   (min, avg, max) = (485685.670, 486500.740, 487064.792), stdev = 518.589
[info]   CI (99.9%): [484503.837, 488497.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   944.648 ±(99.9%) 4.606 MB/sec [Average]
[info]   (min, avg, max) = (942.886, 944.648, 946.153), stdev = 1.196
[info]   CI (99.9%): [940.041, 949.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.269), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.831 ±(99.9%) 1415.977 MB/sec [Average]
[info]   (min, avg, max) = (672.058, 940.831, 1344.837), stdev = 367.725
[info]   CI (99.9%): [≈ 0, 2356.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3042.926 ±(99.9%) 4570.524 B/op [Average]
[info]   (min, avg, max) = (2173.235, 3042.926, 4350.240), stdev = 1186.950
[info]   CI (99.9%): [≈ 0, 7613.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28936.417 ops/s
[info] # Warmup Iteration   2: 68770.308 ops/s
[info] # Warmup Iteration   3: 67644.734 ops/s
[info] # Warmup Iteration   4: 69684.790 ops/s
[info] # Warmup Iteration   5: 69930.580 ops/s
[info] Iteration   1: 69968.451 ops/s
[info]                  ·gc.alloc.rate:                   2953.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61060.421 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 69711.622 ops/s
[info]                  ·gc.alloc.rate:                   2943.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76686.924 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 70031.706 ops/s
[info]                  ·gc.alloc.rate:                   2956.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61138.490 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 70013.898 ops/s
[info]                  ·gc.alloc.rate:                   2955.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61184.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 69632.701 ops/s
[info]                  ·gc.alloc.rate:                   2940.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76937.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   69871.676 ±(99.9%) 715.041 ops/s [Average]
[info]   (min, avg, max) = (69632.701, 69871.676, 70031.706), stdev = 185.694
[info]   CI (99.9%): [69156.635, 70586.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2949.869 ±(99.9%) 29.361 MB/sec [Average]
[info]   (min, avg, max) = (2940.187, 2949.869, 2956.615), stdev = 7.625
[info]   CI (99.9%): [2920.507, 2979.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.006), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.313 ±(99.9%) 1.514 B/op [Average]
[info]   (min, avg, max) = (0.937, 1.313, 1.880), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 2.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2991.423 ±(99.9%) 1438.067 MB/sec [Average]
[info]   (min, avg, max) = (2714.120, 2991.423, 3404.318), stdev = 373.461
[info]   CI (99.9%): [1553.356, 4429.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67401.464 ±(99.9%) 33082.002 B/op [Average]
[info]   (min, avg, max) = (61060.421, 67401.464, 76937.329), stdev = 8591.291
[info]   CI (99.9%): [34319.462, 100483.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137690.993 ops/s
[info] # Warmup Iteration   2: 181309.111 ops/s
[info] # Warmup Iteration   3: 178719.637 ops/s
[info] # Warmup Iteration   4: 180266.667 ops/s
[info] # Warmup Iteration   5: 179126.811 ops/s
[info] Iteration   1: 180409.234 ops/s
[info]                  ·gc.alloc.rate:                   618.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4462.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 181023.810 ops/s
[info]                  ·gc.alloc.rate:                   620.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5860.878 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 180629.805 ops/s
[info]                  ·gc.alloc.rate:                   618.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5873.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 180894.619 ops/s
[info]                  ·gc.alloc.rate:                   619.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5847.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 181001.291 ops/s
[info]                  ·gc.alloc.rate:                   620.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5844.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   180791.752 ±(99.9%) 1020.395 ops/s [Average]
[info]   (min, avg, max) = (180409.234, 180791.752, 181023.810), stdev = 264.993
[info]   CI (99.9%): [179771.356, 181812.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   619.410 ±(99.9%) 3.387 MB/sec [Average]
[info]   (min, avg, max) = (618.221, 619.410, 620.214), stdev = 0.880
[info]   CI (99.9%): [616.023, 622.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.002, 5392.002, 5392.002), stdev = 0.001
[info]   CI (99.9%): [5392.002, 5392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.713 ±(99.9%) 6.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 3.504), stdev = 1.560
[info]   CI (99.9%): [≈ 0, 6.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.202 ±(99.9%) 52.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.202, 30.466), stdev = 13.565
[info]   CI (99.9%): [≈ 0, 58.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.819 ±(99.9%) 277.985 MB/sec [Average]
[info]   (min, avg, max) = (511.691, 640.819, 674.146), stdev = 72.192
[info]   CI (99.9%): [362.834, 918.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5577.832 ±(99.9%) 2400.469 B/op [Average]
[info]   (min, avg, max) = (4462.866, 5577.832, 5873.660), stdev = 623.394
[info]   CI (99.9%): [3177.363, 7978.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217010.274 ops/s
[info] # Warmup Iteration   2: 308824.425 ops/s
[info] # Warmup Iteration   3: 294826.483 ops/s
[info] # Warmup Iteration   4: 297085.206 ops/s
[info] # Warmup Iteration   5: 310002.376 ops/s
[info] Iteration   1: 309560.954 ops/s
[info]                  ·gc.alloc.rate:                   305.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2601.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 308661.810 ops/s
[info]                  ·gc.alloc.rate:                   304.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2608.559 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 309499.825 ops/s
[info]                  ·gc.alloc.rate:      305.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 308521.044 ops/s
[info]                  ·gc.alloc.rate:                   304.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2609.784 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 310492.195 ops/s
[info]                  ·gc.alloc.rate:      306.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   309347.166 ±(99.9%) 3063.798 ops/s [Average]
[info]   (min, avg, max) = (308521.044, 309347.166, 310492.195), stdev = 795.659
[info]   CI (99.9%): [306283.368, 312410.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   305.043 ±(99.9%) 2.803 MB/sec [Average]
[info]   (min, avg, max) = (304.279, 305.043, 306.118), stdev = 0.728
[info]   CI (99.9%): [302.240, 307.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.973 ±(99.9%) 1079.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.973, 511.725), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1386.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1563.874 ±(99.9%) 5497.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1563.874, 2609.784), stdev = 1427.619
[info]   CI (99.9%): [≈ 0, 7061.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1027281.825 ops/s
[info] # Warmup Iteration   2: 1115543.915 ops/s
[info] # Warmup Iteration   3: 1123575.996 ops/s
[info] # Warmup Iteration   4: 1111160.008 ops/s
[info] # Warmup Iteration   5: 1123974.161 ops/s
[info] Iteration   1: 1126415.667 ops/s
[info]                  ·gc.alloc.rate:                   835.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 942.846 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1125729.291 ops/s
[info]                  ·gc.alloc.rate:                   835.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1881.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1128468.523 ops/s
[info]                  ·gc.alloc.rate:                   837.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.490 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1128458.221 ops/s
[info]                  ·gc.alloc.rate:                   837.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1127694.412 ops/s
[info]                  ·gc.alloc.rate:                   836.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 937.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1127353.223 ±(99.9%) 4754.217 ops/s [Average]
[info]   (min, avg, max) = (1125729.291, 1127353.223, 1128468.523), stdev = 1234.655
[info]   CI (99.9%): [1122599.006, 1132107.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   836.613 ±(99.9%) 3.569 MB/sec [Average]
[info]   (min, avg, max) = (835.561, 836.613, 837.568), stdev = 0.927
[info]   CI (99.9%): [833.043, 840.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.047, 0.087), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.962 ±(99.9%) 1159.918 MB/sec [Average]
[info]   (min, avg, max) = (671.369, 806.962, 1345.808), stdev = 301.227
[info]   CI (99.9%): [≈ 0, 1966.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1126.844 ±(99.9%) 1623.962 B/op [Average]
[info]   (min, avg, max) = (936.489, 1126.844, 1881.256), stdev = 421.738
[info]   CI (99.9%): [≈ 0, 2750.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1116503.188 ops/s
[info] # Warmup Iteration   2: 1182354.129 ops/s
[info] # Warmup Iteration   3: 1187066.022 ops/s
[info] # Warmup Iteration   4: 1184341.010 ops/s
[info] # Warmup Iteration   5: 1124710.127 ops/s
[info] Iteration   1: 1081884.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1187301.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1184596.194 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1188014.184 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1187393.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1165838.003 ±(99.9%) 180787.542 ops/s [Average]
[info]   (min, avg, max) = (1081884.401, 1165838.003, 1188014.184), stdev = 46949.950
[info]   CI (99.9%): [985050.461, 1346625.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175178.199 ops/s
[info] # Warmup Iteration   2: 289592.190 ops/s
[info] # Warmup Iteration   3: 292137.937 ops/s
[info] # Warmup Iteration   4: 291395.873 ops/s
[info] # Warmup Iteration   5: 285255.002 ops/s
[info] Iteration   1: 290655.012 ops/s
[info]                  ·gc.alloc.rate:                   793.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3648.629 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 293062.661 ops/s
[info]                  ·gc.alloc.rate:                   799.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7247.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 292869.890 ops/s
[info]                  ·gc.alloc.rate:                   799.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3630.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 292881.653 ops/s
[info]                  ·gc.alloc.rate:                   799.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3629.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 293106.204 ops/s
[info]                  ·gc.alloc.rate:                   800.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3628.656 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   292515.084 ±(99.9%) 4024.517 ops/s [Average]
[info]   (min, avg, max) = (290655.012, 292515.084, 293106.204), stdev = 1045.154
[info]   CI (99.9%): [288490.567, 296539.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   798.422 ±(99.9%) 10.908 MB/sec [Average]
[info]   (min, avg, max) = (793.394, 798.422, 800.212), stdev = 2.833
[info]   CI (99.9%): [787.514, 809.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.002), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.134 ±(99.9%) 0.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.335), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.988 ±(99.9%) 1161.011 MB/sec [Average]
[info]   (min, avg, max) = (673.836, 809.988, 1349.345), stdev = 301.511
[info]   CI (99.9%): [≈ 0, 1970.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4357.025 ±(99.9%) 6223.049 B/op [Average]
[info]   (min, avg, max) = (3628.656, 4357.025, 7247.966), stdev = 1616.106
[info]   CI (99.9%): [≈ 0, 10580.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3321.731 ops/s
[info] # Warmup Iteration   2: 5214.082 ops/s
[info] # Warmup Iteration   3: 5341.030 ops/s
[info] # Warmup Iteration   4: 5369.516 ops/s
[info] # Warmup Iteration   5: 5347.284 ops/s
[info] Iteration   1: 5283.801 ops/s
[info]                  ·gc.alloc.rate:                   1033.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              307976.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 396812.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5339.837 ops/s
[info]                  ·gc.alloc.rate:                   1044.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              307976.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195933.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5277.065 ops/s
[info]                  ·gc.alloc.rate:                   1032.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              307976.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 396468.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5337.709 ops/s
[info]                  ·gc.alloc.rate:                   1044.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              307976.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392013.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5335.441 ops/s
[info]                  ·gc.alloc.rate:                   1043.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              307976.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196079.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5314.771 ±(99.9%) 121.197 ops/s [Average]
[info]   (min, avg, max) = (5277.065, 5314.771, 5339.837), stdev = 31.474
[info]   CI (99.9%): [5193.574, 5435.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1039.934 ±(99.9%) 23.631 MB/sec [Average]
[info]   (min, avg, max) = (1032.573, 1039.934, 1044.850), stdev = 6.137
[info]   CI (99.9%): [1016.303, 1063.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   307976.080 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (307976.076, 307976.080, 307976.083), stdev = 0.004
[info]   CI (99.9%): [307976.066, 307976.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.711 ±(99.9%) 21.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.711, 12.414), stdev = 5.544
[info]   CI (99.9%): [≈ 0, 25.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1064.031 ±(99.9%) 1403.724 MB/sec [Average]
[info]   (min, avg, max) = (664.664, 1064.031, 1332.140), stdev = 364.543
[info]   CI (99.9%): [≈ 0, 2467.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   315461.373 ±(99.9%) 419963.829 B/op [Average]
[info]   (min, avg, max) = (195933.130, 315461.373, 396812.110), stdev = 109063.273
[info]   CI (99.9%): [≈ 0, 735425.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2478.466 ops/s
[info] # Warmup Iteration   2: 5115.140 ops/s
[info] # Warmup Iteration   3: 5323.460 ops/s
[info] # Warmup Iteration   4: 5295.694 ops/s
[info] # Warmup Iteration   5: 5303.247 ops/s
[info] Iteration   1: 5308.700 ops/s
[info]                  ·gc.alloc.rate:                   986.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              292424.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398103.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5283.415 ops/s
[info]                  ·gc.alloc.rate:                   981.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              292424.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200290.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5187.574 ops/s
[info]                  ·gc.alloc.rate:                   963.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              292424.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408295.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5340.187 ops/s
[info]                  ·gc.alloc.rate:                   992.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              292424.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198448.210 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5331.921 ops/s
[info]                  ·gc.alloc.rate:                   990.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              292424.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398156.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5290.359 ±(99.9%) 237.053 ops/s [Average]
[info]   (min, avg, max) = (5187.574, 5290.359, 5340.187), stdev = 61.562
[info]   CI (99.9%): [5053.306, 5527.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   982.890 ±(99.9%) 44.142 MB/sec [Average]
[info]   (min, avg, max) = (963.781, 982.890, 992.138), stdev = 11.463
[info]   CI (99.9%): [938.748, 1027.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292424.078 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (292424.076, 292424.078, 292424.083), stdev = 0.003
[info]   CI (99.9%): [292424.067, 292424.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.682 ±(99.9%) 21.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.682, 12.268), stdev = 5.488
[info]   CI (99.9%): [≈ 0, 24.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1076.582 ±(99.9%) 1419.424 MB/sec [Average]
[info]   (min, avg, max) = (672.276, 1076.582, 1348.970), stdev = 368.620
[info]   CI (99.9%): [≈ 0, 2496.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   320658.922 ±(99.9%) 426656.000 B/op [Average]
[info]   (min, avg, max) = (198448.210, 320658.922, 408295.974), stdev = 110801.208
[info]   CI (99.9%): [≈ 0, 747314.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32017.205 ops/s
[info] # Warmup Iteration   2: 39535.567 ops/s
[info] # Warmup Iteration   3: 39509.208 ops/s
[info] # Warmup Iteration   4: 39333.411 ops/s
[info] # Warmup Iteration   5: 39619.311 ops/s
[info] Iteration   1: 39591.994 ops/s
[info]                  ·gc.alloc.rate:                   650.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26638.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39662.758 ops/s
[info]                  ·gc.alloc.rate:                   651.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26591.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 39493.217 ops/s
[info]                  ·gc.alloc.rate:                   648.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26546.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39722.881 ops/s
[info]                  ·gc.alloc.rate:                   652.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26393.878 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39668.296 ops/s
[info]                  ·gc.alloc.rate:                   651.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26402.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   39627.829 ±(99.9%) 340.608 ops/s [Average]
[info]   (min, avg, max) = (39493.217, 39627.829, 39722.881), stdev = 88.455
[info]   CI (99.9%): [39287.221, 39968.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   650.587 ±(99.9%) 5.478 MB/sec [Average]
[info]   (min, avg, max) = (648.356, 650.587, 652.090), stdev = 1.423
[info]   CI (99.9%): [645.109, 656.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (25840.010, 25840.011, 25840.011), stdev = 0.001
[info]   CI (99.9%): [25840.009, 25840.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1.122 ±(99.9%) 9.526 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.122, 5.547), stdev = 2.474
[info]   CI (99.9%): [≈ 0, 10.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.590 ±(99.9%) 378.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.590, 220.464), stdev = 98.319
[info]   CI (99.9%): [≈ 0, 423.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   667.574 ±(99.9%) 9.092 MB/sec [Average]
[info]   (min, avg, max) = (665.425, 667.574, 670.260), stdev = 2.361
[info]   CI (99.9%): [658.481, 676.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26514.792 ±(99.9%) 428.344 B/op [Average]
[info]   (min, avg, max) = (26393.878, 26514.792, 26638.740), stdev = 111.239
[info]   CI (99.9%): [26086.448, 26943.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2103.893 ops/s
[info] # Warmup Iteration   2: 4562.513 ops/s
[info] # Warmup Iteration   3: 4570.797 ops/s
[info] # Warmup Iteration   4: 4645.429 ops/s
[info] # Warmup Iteration   5: 4653.026 ops/s
[info] Iteration   1: 4678.090 ops/s
[info]                  ·gc.alloc.rate:                   1191.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226231.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4678.969 ops/s
[info]                  ·gc.alloc.rate:                   1192.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 452814.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4666.680 ops/s
[info]                  ·gc.alloc.rate:                   1189.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454652.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4659.060 ops/s
[info]                  ·gc.alloc.rate:                   1187.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 455995.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4685.822 ops/s
[info]                  ·gc.alloc.rate:                   1193.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226852.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4673.724 ±(99.9%) 41.186 ops/s [Average]
[info]   (min, avg, max) = (4659.060, 4673.724, 4685.822), stdev = 10.696
[info]   CI (99.9%): [4632.538, 4714.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1190.855 ±(99.9%) 10.719 MB/sec [Average]
[info]   (min, avg, max) = (1187.021, 1190.855, 1193.982), stdev = 2.784
[info]   CI (99.9%): [1180.136, 1201.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401024.091 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (401024.087, 401024.091, 401024.101), stdev = 0.006
[info]   CI (99.9%): [401024.068, 401024.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.400 ±(99.9%) 12.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.400, 7.002), stdev = 3.131
[info]   CI (99.9%): [≈ 0, 13.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1078.376 ±(99.9%) 1421.749 MB/sec [Average]
[info]   (min, avg, max) = (672.417, 1078.376, 1349.735), stdev = 369.224
[info]   CI (99.9%): [≈ 0, 2500.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   363309.262 ±(99.9%) 480777.095 B/op [Average]
[info]   (min, avg, max) = (226231.561, 363309.262, 455995.550), stdev = 124856.285
[info]   CI (99.9%): [≈ 0, 844086.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10156.628 ops/s
[info] # Warmup Iteration   2: 14208.251 ops/s
[info] # Warmup Iteration   3: 14141.591 ops/s
[info] # Warmup Iteration   4: 14536.063 ops/s
[info] # Warmup Iteration   5: 13827.392 ops/s
[info] Iteration   1: 14624.174 ops/s
[info]                  ·gc.alloc.rate:                   819.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71687.701 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14632.864 ops/s
[info]                  ·gc.alloc.rate:                   819.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71643.618 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14422.330 ops/s
[info]                  ·gc.alloc.rate:                   808.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              88203.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72546.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14657.963 ops/s
[info]                  ·gc.alloc.rate:                   821.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142685.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14685.259 ops/s
[info]                  ·gc.alloc.rate:                   822.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71175.808 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14604.518 ±(99.9%) 402.746 ops/s [Average]
[info]   (min, avg, max) = (14422.330, 14604.518, 14685.259), stdev = 104.592
[info]   CI (99.9%): [14201.772, 15007.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   818.318 ±(99.9%) 22.339 MB/sec [Average]
[info]   (min, avg, max) = (808.180, 818.318, 822.709), stdev = 5.801
[info]   CI (99.9%): [795.978, 840.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88197.541 ±(99.9%) 48.010 B/op [Average]
[info]   (min, avg, max) = (88184.028, 88197.541, 88208.030), stdev = 12.468
[info]   CI (99.9%): [88149.531, 88245.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.803 ±(99.9%) 9.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.803, 4.543), stdev = 2.469
[info]   CI (99.9%): [≈ 0, 11.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   797.906 ±(99.9%) 1142.727 MB/sec [Average]
[info]   (min, avg, max) = (664.031, 797.906, 1328.769), stdev = 296.763
[info]   CI (99.9%): [≈ 0, 1940.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85947.723 ±(99.9%) 122146.745 B/op [Average]
[info]   (min, avg, max) = (71175.808, 85947.723, 142685.296), stdev = 31721.122
[info]   CI (99.9%): [≈ 0, 208094.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9795.692 ops/s
[info] # Warmup Iteration   2: 16645.828 ops/s
[info] # Warmup Iteration   3: 16584.668 ops/s
[info] # Warmup Iteration   4: 15914.992 ops/s
[info] # Warmup Iteration   5: 16637.209 ops/s
[info] Iteration   1: 16681.602 ops/s
[info]                  ·gc.alloc.rate:                   868.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63379.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16668.546 ops/s
[info]                  ·gc.alloc.rate:                   867.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63429.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16664.841 ops/s
[info]                  ·gc.alloc.rate:                   867.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127006.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16644.903 ops/s
[info]                  ·gc.alloc.rate:                   866.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63709.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16097.166 ops/s
[info]                  ·gc.alloc.rate:                   838.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65877.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16551.412 ±(99.9%) 979.108 ops/s [Average]
[info]   (min, avg, max) = (16097.166, 16551.412, 16681.602), stdev = 254.271
[info]   CI (99.9%): [15572.304, 17530.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   861.715 ±(99.9%) 50.504 MB/sec [Average]
[info]   (min, avg, max) = (838.285, 861.715, 868.456), stdev = 13.116
[info]   CI (99.9%): [811.211, 912.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944.003 ±(99.9%) 0.352 B/op [Average]
[info]   (min, avg, max) = (81943.907, 81944.003, 81944.126), stdev = 0.091
[info]   CI (99.9%): [81943.651, 81944.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.980 ±(99.9%) 9.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.980, 5.897), stdev = 2.408
[info]   CI (99.9%): [≈ 0, 11.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   807.137 ±(99.9%) 1157.094 MB/sec [Average]
[info]   (min, avg, max) = (671.671, 807.137, 1344.672), stdev = 300.494
[info]   CI (99.9%): [≈ 0, 1964.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   76680.545 ±(99.9%) 108404.124 B/op [Average]
[info]   (min, avg, max) = (63379.616, 76680.545, 127006.716), stdev = 28152.207
[info]   CI (99.9%): [≈ 0, 185084.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243162.211 ops/s
[info] # Warmup Iteration   2: 263213.277 ops/s
[info] # Warmup Iteration   3: 256075.730 ops/s
[info] # Warmup Iteration   4: 256041.900 ops/s
[info] # Warmup Iteration   5: 248078.218 ops/s
[info] Iteration   1: 252245.874 ops/s
[info]                  ·gc.alloc.rate:                   913.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4160.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 254328.817 ops/s
[info]                  ·gc.alloc.rate:                   921.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8244.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 254426.866 ops/s
[info]                  ·gc.alloc.rate:                   922.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4116.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 253540.938 ops/s
[info]                  ·gc.alloc.rate:                   918.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4126.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 251959.364 ops/s
[info]                  ·gc.alloc.rate:                   913.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8309.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   253300.372 ±(99.9%) 4430.261 ops/s [Average]
[info]   (min, avg, max) = (251959.364, 253300.372, 254426.866), stdev = 1150.525
[info]   CI (99.9%): [248870.111, 257730.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   918.007 ±(99.9%) 16.561 MB/sec [Average]
[info]   (min, avg, max) = (913.071, 918.007, 922.331), stdev = 4.301
[info]   CI (99.9%): [901.446, 934.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5704.002, 5704.002, 5704.002), stdev = 0.001
[info]   CI (99.9%): [5704.001, 5704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.207 ±(99.9%) 0.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 0.520), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   931.895 ±(99.9%) 1403.597 MB/sec [Average]
[info]   (min, avg, max) = (664.795, 931.895, 1332.292), stdev = 364.510
[info]   CI (99.9%): [≈ 0, 2335.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5791.479 ±(99.9%) 8737.175 B/op [Average]
[info]   (min, avg, max) = (4116.539, 5791.479, 8309.186), stdev = 2269.017
[info]   CI (99.9%): [≈ 0, 14528.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279600.914 ops/s
[info] # Warmup Iteration   2: 285916.227 ops/s
[info] # Warmup Iteration   3: 297511.774 ops/s
[info] # Warmup Iteration   4: 297275.289 ops/s
[info] # Warmup Iteration   5: 293592.190 ops/s
[info] Iteration   1: 294153.919 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 293960.306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 285699.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 296567.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 290196.473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   292115.631 ±(99.9%) 16362.217 ops/s [Average]
[info]   (min, avg, max) = (285699.831, 292115.631, 296567.624), stdev = 4249.216
[info]   CI (99.9%): [275753.413, 308477.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10442.810 ops/s
[info] # Warmup Iteration   2: 15275.821 ops/s
[info] # Warmup Iteration   3: 15251.057 ops/s
[info] # Warmup Iteration   4: 15378.263 ops/s
[info] # Warmup Iteration   5: 15445.140 ops/s
[info] Iteration   1: 15414.400 ops/s
[info]                  ·gc.alloc.rate:                   879.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136164.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15473.412 ops/s
[info]                  ·gc.alloc.rate:                   883.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67615.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15379.640 ops/s
[info]                  ·gc.alloc.rate:                                  878.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89839.153 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.170 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    14.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     900.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                92175.987 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        50.000 ms
[info] Iteration   4: 15109.324 ops/s
[info]                  ·gc.alloc.rate:                   862.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69040.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 15497.890 ops/s
[info]                  ·gc.alloc.rate:                   884.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67307.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15374.933 ±(99.9%) 599.467 ops/s [Average]
[info]   (min, avg, max) = (15109.324, 15374.933, 15497.890), stdev = 155.680
[info]   CI (99.9%): [14775.466, 15974.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   877.536 ±(99.9%) 34.262 MB/sec [Average]
[info]   (min, avg, max) = (862.302, 877.536, 884.410), stdev = 8.898
[info]   CI (99.9%): [843.273, 911.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89839.857 ±(99.9%) 30.828 B/op [Average]
[info]   (min, avg, max) = (89832.028, 89839.857, 89848.033), stdev = 8.006
[info]   CI (99.9%): [89809.030, 89870.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.488 ±(99.9%) 30.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.488, 17.441), stdev = 7.800
[info]   CI (99.9%): [≈ 0, 33.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.257 ±(99.9%) 25.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.257, 14.911), stdev = 6.564
[info]   CI (99.9%): [≈ 0, 29.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   844.827 ±(99.9%) 1123.499 MB/sec [Average]
[info]   (min, avg, max) = (662.652, 844.827, 1333.262), stdev = 291.769
[info]   CI (99.9%): [≈ 0, 1968.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86460.633 ±(99.9%) 114368.359 B/op [Average]
[info]   (min, avg, max) = (67307.472, 86460.633, 136164.568), stdev = 29701.100
[info]   CI (99.9%): [≈ 0, 200828.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 10.600, 50.000), stdev = 22.030
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 890147.789 ops/s
[info] # Warmup Iteration   2: 940077.238 ops/s
[info] # Warmup Iteration   3: 943865.799 ops/s
[info] # Warmup Iteration   4: 944045.621 ops/s
[info] # Warmup Iteration   5: 942499.520 ops/s
[info] Iteration   1: 943329.007 ops/s
[info]                  ·gc.alloc.rate:      38.352 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 944172.555 ops/s
[info]                  ·gc.alloc.rate:      38.388 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 940994.417 ops/s
[info]                  ·gc.alloc.rate:      38.259 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 943058.026 ops/s
[info]                  ·gc.alloc.rate:      38.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 943538.953 ops/s
[info]                  ·gc.alloc.rate:      38.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   943018.592 ±(99.9%) 4635.832 ops/s [Average]
[info]   (min, avg, max) = (940994.417, 943018.592, 944172.555), stdev = 1203.911
[info]   CI (99.9%): [938382.760, 947654.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   38.342 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (38.259, 38.342, 38.388), stdev = 0.049
[info]   CI (99.9%): [38.152, 38.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36181.955 ops/s
[info] # Warmup Iteration   2: 73411.004 ops/s
[info] # Warmup Iteration   3: 73919.183 ops/s
[info] # Warmup Iteration   4: 73335.833 ops/s
[info] # Warmup Iteration   5: 73825.593 ops/s
[info] Iteration   1: 74109.805 ops/s
[info]                  ·gc.alloc.rate:                   3343.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72116.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 74020.382 ops/s
[info]                  ·gc.alloc.rate:                   3338.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72293.119 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 73674.698 ops/s
[info]                  ·gc.alloc.rate:                   3323.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72689.505 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73941.230 ops/s
[info]                  ·gc.alloc.rate:                   3335.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72452.483 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73486.831 ops/s
[info]                  ·gc.alloc.rate:                   3314.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58319.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   73846.589 ±(99.9%) 995.628 ops/s [Average]
[info]   (min, avg, max) = (73486.831, 73846.589, 74109.805), stdev = 258.562
[info]   CI (99.9%): [72850.961, 74842.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3331.217 ±(99.9%) 45.064 MB/sec [Average]
[info]   (min, avg, max) = (3314.906, 3331.217, 3343.075), stdev = 11.703
[info]   CI (99.9%): [3286.153, 3376.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71008.006, 71008.006, 71008.006), stdev = 0.001
[info]   CI (99.9%): [71008.005, 71008.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.033, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.572 ±(99.9%) 1.843 B/op [Average]
[info]   (min, avg, max) = (2.215, 2.572, 3.098), stdev = 0.479
[info]   CI (99.9%): [0.729, 4.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3264.581 ±(99.9%) 1166.832 MB/sec [Average]
[info]   (min, avg, max) = (2722.548, 3264.581, 3403.709), stdev = 303.023
[info]   CI (99.9%): [2097.749, 4431.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69574.177 ±(99.9%) 24240.755 B/op [Average]
[info]   (min, avg, max) = (58319.212, 69574.177, 72689.505), stdev = 6295.247
[info]   CI (99.9%): [45333.421, 93814.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 716249.861 ops/s
[info] # Warmup Iteration   2: 1113251.393 ops/s
[info] # Warmup Iteration   3: 1137551.133 ops/s
[info] # Warmup Iteration   4: 1138735.269 ops/s
[info] # Warmup Iteration   5: 1138571.727 ops/s
[info] Iteration   1: 1123419.539 ops/s
[info]                  ·gc.alloc.rate:                   645.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 943.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1098868.365 ops/s
[info]                  ·gc.alloc.rate:                   631.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 965.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1138791.584 ops/s
[info]                  ·gc.alloc.rate:                   654.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 932.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1138569.628 ops/s
[info]                  ·gc.alloc.rate:                   653.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 932.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1138893.272 ops/s
[info]                  ·gc.alloc.rate:                   654.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 933.409 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1127708.478 ±(99.9%) 67139.557 ops/s [Average]
[info]   (min, avg, max) = (1098868.365, 1127708.478, 1138893.272), stdev = 17435.930
[info]   CI (99.9%): [1060568.921, 1194848.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   647.667 ±(99.9%) 38.643 MB/sec [Average]
[info]   (min, avg, max) = (631.093, 647.667, 654.169), stdev = 10.036
[info]   CI (99.9%): [609.024, 686.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.292), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.448 ±(99.9%) 2.932 MB/sec [Average]
[info]   (min, avg, max) = (673.650, 674.448, 675.451), stdev = 0.761
[info]   CI (99.9%): [671.516, 677.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   941.554 ±(99.9%) 53.842 B/op [Average]
[info]   (min, avg, max) = (932.574, 941.554, 965.052), stdev = 13.983
[info]   CI (99.9%): [887.712, 995.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 680995.526 ops/s
[info] # Warmup Iteration   2: 694089.707 ops/s
[info] # Warmup Iteration   3: 682146.196 ops/s
[info] # Warmup Iteration   4: 692884.147 ops/s
[info] # Warmup Iteration   5: 693225.248 ops/s
[info] Iteration   1: 664499.104 ops/s
[info]                  ·gc.alloc.rate:                   178.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1211.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 692053.696 ops/s
[info]                  ·gc.alloc.rate:      186.441 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 689646.487 ops/s
[info]                  ·gc.alloc.rate:                   185.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1167.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 692962.950 ops/s
[info]                  ·gc.alloc.rate:      186.650 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 692859.970 ops/s
[info]                  ·gc.alloc.rate:      186.635 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   686404.441 ±(99.9%) 47433.175 ops/s [Average]
[info]   (min, avg, max) = (664499.104, 686404.441, 692962.950), stdev = 12318.245
[info]   CI (99.9%): [638971.266, 733837.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   184.915 ±(99.9%) 12.801 MB/sec [Average]
[info]   (min, avg, max) = (178.996, 184.915, 186.650), stdev = 3.324
[info]   CI (99.9%): [172.114, 197.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.656 ±(99.9%) 1079.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.656, 511.741), stdev = 280.237
[info]   CI (99.9%): [≈ 0, 1283.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   475.841 ±(99.9%) 2509.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 475.841, 1211.716), stdev = 651.759
[info]   CI (99.9%): [≈ 0, 2985.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1322286.852 ops/s
[info] # Warmup Iteration   2: 1409318.967 ops/s
[info] # Warmup Iteration   3: 1427650.602 ops/s
[info] # Warmup Iteration   4: 1443087.070 ops/s
[info] # Warmup Iteration   5: 1371655.727 ops/s
[info] Iteration   1: 1442676.063 ops/s
[info]                  ·gc.alloc.rate:      14.664 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1442783.251 ops/s
[info]                  ·gc.alloc.rate:      14.667 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1441941.392 ops/s
[info]                  ·gc.alloc.rate:      14.659 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1435319.589 ops/s
[info]                  ·gc.alloc.rate:      14.590 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1435258.206 ops/s
[info]                  ·gc.alloc.rate:      14.589 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1439595.700 ±(99.9%) 15190.580 ops/s [Average]
[info]   (min, avg, max) = (1435258.206, 1439595.700, 1442783.251), stdev = 3944.945
[info]   CI (99.9%): [1424405.121, 1454786.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   14.634 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (14.589, 14.634, 14.667), stdev = 0.040
[info]   CI (99.9%): [14.478, 14.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21350.722 ops/s
[info] # Warmup Iteration   2: 44019.413 ops/s
[info] # Warmup Iteration   3: 44754.459 ops/s
[info] # Warmup Iteration   4: 44901.090 ops/s
[info] # Warmup Iteration   5: 44977.724 ops/s
[info] Iteration   1: 44055.426 ops/s
[info]                  ·gc.alloc.rate:                   1856.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72521.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 44958.552 ops/s
[info]                  ·gc.alloc.rate:                   1893.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71158.868 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44964.427 ops/s
[info]                  ·gc.alloc.rate:                   1894.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71227.813 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45043.613 ops/s
[info]                  ·gc.alloc.rate:                   1897.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47435.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 45036.880 ops/s
[info]                  ·gc.alloc.rate:                   1897.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71205.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   44811.779 ±(99.9%) 1635.200 ops/s [Average]
[info]   (min, avg, max) = (44055.426, 44811.779, 45043.613), stdev = 424.656
[info]   CI (99.9%): [43176.580, 46446.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1887.905 ±(99.9%) 68.873 MB/sec [Average]
[info]   (min, avg, max) = (1856.069, 1887.905, 1897.664), stdev = 17.886
[info]   CI (99.9%): [1819.032, 1956.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66312.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66312.009, 66312.009, 66312.009), stdev = 0.001
[info]   CI (99.9%): [66312.009, 66312.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.193 ±(99.9%) 2.805 B/op [Average]
[info]   (min, avg, max) = (1.455, 2.193, 2.915), stdev = 0.728
[info]   CI (99.9%): [≈ 0, 4.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.405 ±(99.9%) 1164.478 MB/sec [Average]
[info]   (min, avg, max) = (1357.460, 1898.405, 2037.660), stdev = 302.411
[info]   CI (99.9%): [733.927, 3062.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66709.845 ±(99.9%) 41549.231 B/op [Average]
[info]   (min, avg, max) = (47435.082, 66709.845, 72521.965), stdev = 10790.203
[info]   CI (99.9%): [25160.614, 108259.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373885.912 ops/s
[info] # Warmup Iteration   2: 632151.161 ops/s
[info] # Warmup Iteration   3: 639316.185 ops/s
[info] # Warmup Iteration   4: 654238.250 ops/s
[info] # Warmup Iteration   5: 643826.461 ops/s
[info] Iteration   1: 659534.609 ops/s
[info]                  ·gc.alloc.rate:                   2095.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4810.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 645928.250 ops/s
[info]                  ·gc.alloc.rate:                   2052.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4919.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 648876.134 ops/s
[info]                  ·gc.alloc.rate:                   2061.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4905.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 646210.471 ops/s
[info]                  ·gc.alloc.rate:                   2052.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4934.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 659637.535 ops/s
[info]                  ·gc.alloc.rate:                   2095.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4840.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   652037.400 ±(99.9%) 26902.102 ops/s [Average]
[info]   (min, avg, max) = (645928.250, 652037.400, 659637.535), stdev = 6986.391
[info]   CI (99.9%): [625135.298, 678939.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2071.621 ±(99.9%) 84.599 MB/sec [Average]
[info]   (min, avg, max) = (2052.677, 2071.621, 2095.407), stdev = 21.970
[info]   CI (99.9%): [1987.022, 2156.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5000.001, 5000.001, 5000.001), stdev = 0.001
[info]   CI (99.9%): [5000.001, 5000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.202), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2022.549 ±(99.9%) 19.229 MB/sec [Average]
[info]   (min, avg, max) = (2015.807, 2022.549, 2028.404), stdev = 4.994
[info]   CI (99.9%): [2003.320, 2041.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4882.008 ±(99.9%) 207.642 B/op [Average]
[info]   (min, avg, max) = (4810.062, 4882.008, 4934.519), stdev = 53.924
[info]   CI (99.9%): [4674.366, 5089.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.936 ops/s
[info] # Warmup Iteration   2: 5197136.482 ops/s
[info] # Warmup Iteration   3: 5283999.332 ops/s
[info] # Warmup Iteration   4: 5452782.036 ops/s
[info] # Warmup Iteration   5: 5512558.395 ops/s
[info] Iteration   1: 5469524.803 ops/s
[info]                  ·gc.alloc.rate:                   333.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5164529.081 ops/s
[info]                  ·gc.alloc.rate:                   314.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5519625.699 ops/s
[info]                  ·gc.alloc.rate:      336.648 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5502451.592 ops/s
[info]                  ·gc.alloc.rate:                   335.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5523473.904 ops/s
[info]                  ·gc.alloc.rate:      336.843 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5435921.016 ±(99.9%) 589919.079 ops/s [Average]
[info]   (min, avg, max) = (5164529.081, 5435921.016, 5523473.904), stdev = 153200.111
[info]   CI (99.9%): [4846001.937, 6025840.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   331.559 ±(99.9%) 35.989 MB/sec [Average]
[info]   (min, avg, max) = (314.996, 331.559, 336.843), stdev = 9.346
[info]   CI (99.9%): [295.570, 367.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.958 ±(99.9%) 1079.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.958, 511.650), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1385.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   89.887 ±(99.9%) 316.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.887, 155.904), stdev = 82.141
[info]   CI (99.9%): [≈ 0, 406.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293918.896 ops/s
[info] # Warmup Iteration   2: 940507.051 ops/s
[info] # Warmup Iteration   3: 964234.002 ops/s
[info] # Warmup Iteration   4: 970603.674 ops/s
[info] # Warmup Iteration   5: 958480.443 ops/s
[info] Iteration   1: 956444.451 ops/s
[info]                  ·gc.alloc.rate:                   1186.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2221.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 973355.795 ops/s
[info]                  ·gc.alloc.rate:                   1206.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2185.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 973203.973 ops/s
[info]                  ·gc.alloc.rate:                   1206.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2187.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 974586.592 ops/s
[info]                  ·gc.alloc.rate:                   1208.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2186.494 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 976195.367 ops/s
[info]                  ·gc.alloc.rate:                   1210.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1091.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   970757.236 ±(99.9%) 31154.070 ops/s [Average]
[info]   (min, avg, max) = (956444.451, 970757.236, 976195.367), stdev = 8090.613
[info]   CI (99.9%): [939603.165, 1001911.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1203.871 ±(99.9%) 38.409 MB/sec [Average]
[info]   (min, avg, max) = (1186.233, 1203.871, 1210.638), stdev = 9.975
[info]   CI (99.9%): [1165.462, 1242.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.101 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.202), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.060 ±(99.9%) 1162.356 MB/sec [Average]
[info]   (min, avg, max) = (677.081, 1217.060, 1353.742), stdev = 301.860
[info]   CI (99.9%): [54.704, 2379.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1974.720 ±(99.9%) 1901.662 B/op [Average]
[info]   (min, avg, max) = (1091.707, 1974.720, 2221.896), stdev = 493.855
[info]   CI (99.9%): [73.058, 3876.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6455350.092 ops/s
[info] # Warmup Iteration   2: 7737830.364 ops/s
[info] # Warmup Iteration   3: 8027434.156 ops/s
[info] # Warmup Iteration   4: 8071733.476 ops/s
[info] # Warmup Iteration   5: 7707301.751 ops/s
[info] Iteration   1: 8042325.149 ops/s
[info]                  ·gc.alloc.rate:                   367.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8053298.034 ops/s
[info]                  ·gc.alloc.rate:      368.358 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8013978.187 ops/s
[info]                  ·gc.alloc.rate:                   366.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.468 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8015054.895 ops/s
[info]                  ·gc.alloc.rate:                   366.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8056927.878 ops/s
[info]                  ·gc.alloc.rate:      368.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8036316.828 ±(99.9%) 79391.494 ops/s [Average]
[info]   (min, avg, max) = (8013978.187, 8036316.828, 8056927.878), stdev = 20617.719
[info]   CI (99.9%): [7956925.334, 8115708.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   367.588 ±(99.9%) 3.622 MB/sec [Average]
[info]   (min, avg, max) = (366.563, 367.588, 368.544), stdev = 0.941
[info]   CI (99.9%): [363.966, 371.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.904 ±(99.9%) 1078.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.904, 511.523), stdev = 280.164
[info]   CI (99.9%): [≈ 0, 1385.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   60.208 ±(99.9%) 211.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.208, 100.468), stdev = 54.962
[info]   CI (99.9%): [≈ 0, 271.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34585.831 ops/s
[info] # Warmup Iteration   2: 292031.817 ops/s
[info] # Warmup Iteration   3: 298887.025 ops/s
[info] # Warmup Iteration   4: 303960.884 ops/s
[info] # Warmup Iteration   5: 308298.557 ops/s
[info] Iteration   1: 307607.184 ops/s
[info]                  ·gc.alloc.rate:                   1716.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10376.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 308612.133 ops/s
[info]                  ·gc.alloc.rate:                   1722.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6901.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 307622.934 ops/s
[info]                  ·gc.alloc.rate:                   1716.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10394.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 308889.975 ops/s
[info]                  ·gc.alloc.rate:                   1723.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6910.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 308299.241 ops/s
[info]                  ·gc.alloc.rate:                   1720.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10392.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   308206.293 ±(99.9%) 2228.726 ops/s [Average]
[info]   (min, avg, max) = (307607.184, 308206.293, 308889.975), stdev = 578.793
[info]   CI (99.9%): [305977.567, 310435.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1719.848 ±(99.9%) 12.508 MB/sec [Average]
[info]   (min, avg, max) = (1716.430, 1719.848, 1723.701), stdev = 3.248
[info]   CI (99.9%): [1707.340, 1732.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8784.001, 8784.001, 8784.001), stdev = 0.001
[info]   CI (99.9%): [8784.001, 8784.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.022, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.298 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (0.212, 0.298, 0.320), stdev = 0.048
[info]   CI (99.9%): [0.113, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1760.663 ±(99.9%) 1427.665 MB/sec [Average]
[info]   (min, avg, max) = (1353.054, 1760.663, 2035.288), stdev = 370.760
[info]   CI (99.9%): [332.998, 3188.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8994.934 ±(99.9%) 7343.398 B/op [Average]
[info]   (min, avg, max) = (6901.544, 8994.934, 10394.392), stdev = 1907.057
[info]   CI (99.9%): [1651.536, 16338.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2360.476 ops/s
[info] # Warmup Iteration   2: 3735.741 ops/s
[info] # Warmup Iteration   3: 3661.193 ops/s
[info] # Warmup Iteration   4: 3825.266 ops/s
[info] # Warmup Iteration   5: 3818.078 ops/s
[info] Iteration   1: 3813.700 ops/s
[info]                  ·gc.alloc.rate:                   1800.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838723.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3761.067 ops/s
[info]                  ·gc.alloc.rate:                   1776.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567351.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3823.678 ops/s
[info]                  ·gc.alloc.rate:                   1805.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837764.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3827.040 ops/s
[info]                  ·gc.alloc.rate:                   1807.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837655.540 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3825.688 ops/s
[info]                  ·gc.alloc.rate:                   1807.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1359.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558948.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3810.235 ±(99.9%) 107.739 ops/s [Average]
[info]   (min, avg, max) = (3761.067, 3810.235, 3827.040), stdev = 27.980
[info]   CI (99.9%): [3702.495, 3917.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1799.646 ±(99.9%) 50.409 MB/sec [Average]
[info]   (min, avg, max) = (1776.711, 1799.646, 1807.352), stdev = 13.091
[info]   CI (99.9%): [1749.237, 1850.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312.112 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (743312.107, 743312.112, 743312.115), stdev = 0.004
[info]   CI (99.9%): [743312.096, 743312.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 0.568 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.333), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   65.191 ±(99.9%) 234.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.191, 137.428), stdev = 60.814
[info]   CI (99.9%): [≈ 0, 299.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1763.882 ±(99.9%) 1428.219 MB/sec [Average]
[info]   (min, avg, max) = (1356.119, 1763.882, 2036.747), stdev = 370.904
[info]   CI (99.9%): [335.663, 3192.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   728088.593 ±(99.9%) 579897.809 B/op [Average]
[info]   (min, avg, max) = (558948.273, 728088.593, 838723.372), stdev = 150597.619
[info]   CI (99.9%): [148190.783, 1307986.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:39:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2216.787 ops/s
[info] # Warmup Iteration   2: 5053.251 ops/s
[info] # Warmup Iteration   3: 5278.655 ops/s
[info] # Warmup Iteration   4: 5296.044 ops/s
[info] # Warmup Iteration   5: 5293.131 ops/s
[info] Iteration   1: 5315.927 ops/s
[info]                  ·gc.alloc.rate:                   2196.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600890.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5244.103 ops/s
[info]                  ·gc.alloc.rate:                   2166.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 609853.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5295.108 ops/s
[info]                  ·gc.alloc.rate:                   2188.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 806429.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5313.962 ops/s
[info]                  ·gc.alloc.rate:                   2195.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 603187.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5322.164 ops/s
[info]                  ·gc.alloc.rate:                   2199.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 602675.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5298.252 ±(99.9%) 122.874 ops/s [Average]
[info]   (min, avg, max) = (5244.103, 5298.252, 5322.164), stdev = 31.910
[info]   CI (99.9%): [5175.379, 5421.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2189.527 ±(99.9%) 51.433 MB/sec [Average]
[info]   (min, avg, max) = (2166.779, 2189.527, 2199.979), stdev = 13.357
[info]   CI (99.9%): [2138.093, 2240.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650392.079 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (650392.077, 650392.079, 650392.084), stdev = 0.004
[info]   CI (99.9%): [650392.066, 650392.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.594 ±(99.9%) 19.788 B/op [Average]
[info]   (min, avg, max) = (6.187, 13.594, 18.492), stdev = 5.139
[info]   CI (99.9%): [≈ 0, 33.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2169.948 ±(99.9%) 1170.779 MB/sec [Average]
[info]   (min, avg, max) = (2029.275, 2169.948, 2713.805), stdev = 304.048
[info]   CI (99.9%): [999.168, 3340.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   644607.203 ±(99.9%) 348580.485 B/op [Average]
[info]   (min, avg, max) = (600890.440, 644607.203, 806429.390), stdev = 90525.245
[info]   CI (99.9%): [296026.718, 993187.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38133.182 ops/s
[info] # Warmup Iteration   2: 43248.884 ops/s
[info] # Warmup Iteration   3: 42710.461 ops/s
[info] # Warmup Iteration   4: 43418.710 ops/s
[info] # Warmup Iteration   5: 43500.469 ops/s
[info] Iteration   1: 43471.915 ops/s
[info]                  ·gc.alloc.rate:                   723.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24478.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43497.967 ops/s
[info]                  ·gc.alloc.rate:                   723.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24463.399 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43329.765 ops/s
[info]                  ·gc.alloc.rate:                   720.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48972.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43455.185 ops/s
[info]                  ·gc.alloc.rate:                   722.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24392.221 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43449.327 ops/s
[info]                  ·gc.alloc.rate:                   722.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24395.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   43440.832 ±(99.9%) 249.882 ops/s [Average]
[info]   (min, avg, max) = (43329.765, 43440.832, 43497.967), stdev = 64.894
[info]   CI (99.9%): [43190.950, 43690.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   722.651 ±(99.9%) 4.111 MB/sec [Average]
[info]   (min, avg, max) = (720.851, 722.651, 723.681), stdev = 1.068
[info]   CI (99.9%): [718.540, 726.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26184.009, 26184.010, 26184.010), stdev = 0.001
[info]   CI (99.9%): [26184.008, 26184.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.557 ±(99.9%) 4.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 2.741), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20.154 ±(99.9%) 170.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.154, 99.261), stdev = 44.224
[info]   CI (99.9%): [≈ 0, 190.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   809.428 ±(99.9%) 1159.801 MB/sec [Average]
[info]   (min, avg, max) = (673.382, 809.428, 1348.220), stdev = 301.197
[info]   CI (99.9%): [≈ 0, 1969.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29340.444 ±(99.9%) 42259.577 B/op [Average]
[info]   (min, avg, max) = (24392.221, 29340.444, 48972.421), stdev = 10974.678
[info]   CI (99.9%): [≈ 0, 71600.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2741.299 ops/s
[info] # Warmup Iteration   2: 4053.702 ops/s
[info] # Warmup Iteration   3: 4090.754 ops/s
[info] # Warmup Iteration   4: 4131.362 ops/s
[info] # Warmup Iteration   5: 4021.408 ops/s
[info] Iteration   1: 4133.362 ops/s
[info]                  ·gc.alloc.rate:                   759.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256183.299 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4153.153 ops/s
[info]                  ·gc.alloc.rate:                   763.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255202.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4154.116 ops/s
[info]                  ·gc.alloc.rate:                   763.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255140.875 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4145.473 ops/s
[info]                  ·gc.alloc.rate:                   762.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 511895.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4134.752 ops/s
[info]                  ·gc.alloc.rate:                   760.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256819.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4144.171 ±(99.9%) 37.867 ops/s [Average]
[info]   (min, avg, max) = (4133.362, 4144.171, 4154.116), stdev = 9.834
[info]   CI (99.9%): [4106.304, 4182.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   762.013 ±(99.9%) 7.270 MB/sec [Average]
[info]   (min, avg, max) = (759.931, 762.013, 763.859), stdev = 1.888
[info]   CI (99.9%): [754.743, 769.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289416.102 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (289416.098, 289416.102, 289416.106), stdev = 0.004
[info]   CI (99.9%): [289416.085, 289416.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.166 ±(99.9%) 16.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.166, 7.926), stdev = 4.335
[info]   CI (99.9%): [≈ 0, 19.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   808.483 ±(99.9%) 1161.932 MB/sec [Average]
[info]   (min, avg, max) = (672.671, 808.483, 1348.268), stdev = 301.750
[info]   CI (99.9%): [≈ 0, 1970.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   307048.348 ±(99.9%) 440956.757 B/op [Average]
[info]   (min, avg, max) = (255140.875, 307048.348, 511895.278), stdev = 114515.070
[info]   CI (99.9%): [≈ 0, 748005.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f7c6d30b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2040.897 ops/s
[info] # Warmup Iteration   2: 4202.822 ops/s
[info] # Warmup Iteration   3: 4393.777 ops/s
[info] # Warmup Iteration   4: 4294.276 ops/s
[info] # Warmup Iteration   5: 4425.135 ops/s
[info] Iteration   1: 4451.148 ops/s
[info]                  ·gc.alloc.rate:                   545.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              192757.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180886.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4439.317 ops/s
[info]                  ·gc.alloc.rate:                   543.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              192757.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238827.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4426.122 ops/s
[info]                  ·gc.alloc.rate:                   542.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              192756.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239583.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4424.268 ops/s
[info]                  ·gc.alloc.rate:                   541.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              192758.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239755.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4429.958 ops/s
[info]                  ·gc.alloc.rate:      542.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 192757.787 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4434.162 ±(99.9%) 42.848 ops/s [Average]
[info]   (min, avg, max) = (4424.268, 4434.162, 4451.148), stdev = 11.128
[info]   CI (99.9%): [4391.314, 4477.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   543.046 ±(99.9%) 5.217 MB/sec [Average]
[info]   (min, avg, max) = (541.851, 543.046, 545.098), stdev = 1.355
[info]   CI (99.9%): [537.829, 548.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   192757.455 ±(99.9%) 2.057 B/op [Average]
[info]   (min, avg, max) = (192756.630, 192757.455, 192758.037), stdev = 0.534
[info]   CI (99.9%): [192755.398, 192759.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.179 ±(99.9%) 1.477 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.865), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63.577 ±(99.9%) 523.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.577, 306.805), stdev = 136.003
[info]   CI (99.9%): [≈ 0, 587.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.593 ±(99.9%) 1123.551 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.593, 673.963), stdev = 291.783
[info]   CI (99.9%): [≈ 0, 1630.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   179810.641 ±(99.9%) 399160.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 179810.641, 239755.742), stdev = 103660.777
[info]   CI (99.9%): [≈ 0, 578971.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6053.241 ops/s
[info] # Warmup Iteration   2: 6483.114 ops/s
[info] # Warmup Iteration   3: 6372.698 ops/s
[info] # Warmup Iteration   4: 6484.848 ops/s
[info] # Warmup Iteration   5: 6490.975 ops/s
[info] Iteration   1: 6473.659 ops/s
[info]                  ·gc.alloc.rate:                   172.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124371.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6482.716 ops/s
[info]                  ·gc.alloc.rate:      173.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6509.176 ops/s
[info]                  ·gc.alloc.rate:      173.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.072 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6301.059 ops/s
[info]                  ·gc.alloc.rate:                   168.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127765.567 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6484.775 ops/s
[info]                  ·gc.alloc.rate:      173.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6450.277 ±(99.9%) 325.170 ops/s [Average]
[info]   (min, avg, max) = (6301.059, 6450.277, 6509.176), stdev = 84.446
[info]   CI (99.9%): [6125.107, 6775.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   172.345 ±(99.9%) 8.707 MB/sec [Average]
[info]   (min, avg, max) = (168.351, 172.345, 173.930), stdev = 2.261
[info]   CI (99.9%): [163.638, 181.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056.065 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (42056.063, 42056.065, 42056.072), stdev = 0.004
[info]   CI (99.9%): [42056.049, 42056.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.029 ±(99.9%) 8.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.029, 5.143), stdev = 2.300
[info]   CI (99.9%): [≈ 0, 9.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.585 ±(99.9%) 1078.716 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.585, 511.475), stdev = 280.139
[info]   CI (99.9%): [≈ 0, 1283.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   50427.441 ±(99.9%) 265929.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50427.441, 127765.567), stdev = 69061.043
[info]   CI (99.9%): [≈ 0, 316356.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6062.200 ops/s
[info] # Warmup Iteration   2: 6595.996 ops/s
[info] # Warmup Iteration   3: 6612.537 ops/s
[info] # Warmup Iteration   4: 6569.817 ops/s
[info] # Warmup Iteration   5: 6636.221 ops/s
[info] Iteration   1: 6640.524 ops/s
[info]                  ·gc.alloc.rate:      128.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6643.639 ops/s
[info]                  ·gc.alloc.rate:      128.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6624.566 ops/s
[info]                  ·gc.alloc.rate:                   128.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              30552.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121537.333 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6650.657 ops/s
[info]                  ·gc.alloc.rate:      129.101 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6640.003 ops/s
[info]                  ·gc.alloc.rate:      128.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.092 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6639.878 ±(99.9%) 36.794 ops/s [Average]
[info]   (min, avg, max) = (6624.566, 6639.878, 6650.657), stdev = 9.555
[info]   CI (99.9%): [6603.084, 6676.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   128.887 ±(99.9%) 0.732 MB/sec [Average]
[info]   (min, avg, max) = (128.580, 128.887, 129.101), stdev = 0.190
[info]   CI (99.9%): [128.156, 129.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552.067 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (30552.061, 30552.067, 30552.092), stdev = 0.013
[info]   CI (99.9%): [30552.016, 30552.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.300 ±(99.9%) 880.831 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.300, 511.498), stdev = 228.749
[info]   CI (99.9%): [≈ 0, 983.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   24307.467 ±(99.9%) 209294.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24307.467, 121537.333), stdev = 54353.148
[info]   CI (99.9%): [≈ 0, 233602.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5571.236 ops/s
[info] # Warmup Iteration   2: 7875.825 ops/s
[info] # Warmup Iteration   3: 8235.227 ops/s
[info] # Warmup Iteration   4: 8277.010 ops/s
[info] # Warmup Iteration   5: 8299.358 ops/s
[info] Iteration   1: 8288.771 ops/s
[info]                  ·gc.alloc.rate:                   1930.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382197.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8324.377 ops/s
[info]                  ·gc.alloc.rate:                   1939.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 381094.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8307.435 ops/s
[info]                  ·gc.alloc.rate:                   1934.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              366549.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382648.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8312.312 ops/s
[info]                  ·gc.alloc.rate:                   1936.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383094.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8315.301 ops/s
[info]                  ·gc.alloc.rate:                   1936.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 383649.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8309.639 ±(99.9%) 50.820 ops/s [Average]
[info]   (min, avg, max) = (8288.771, 8309.639, 8324.377), stdev = 13.198
[info]   CI (99.9%): [8258.819, 8360.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1935.291 ±(99.9%) 12.496 MB/sec [Average]
[info]   (min, avg, max) = (1930.274, 1935.291, 1939.106), stdev = 3.245
[info]   CI (99.9%): [1922.796, 1947.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366554.674 ±(99.9%) 47.700 B/op [Average]
[info]   (min, avg, max) = (366544.049, 366554.674, 366568.049), stdev = 12.388
[info]   CI (99.9%): [366506.973, 366602.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.079), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.100 ±(99.9%) 22.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.100, 14.960), stdev = 5.894
[info]   CI (99.9%): [≈ 0, 29.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2019.671 ±(99.9%) 21.436 MB/sec [Average]
[info]   (min, avg, max) = (2012.705, 2019.671, 2026.680), stdev = 5.567
[info]   CI (99.9%): [1998.235, 2041.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   382536.872 ±(99.9%) 3732.871 B/op [Average]
[info]   (min, avg, max) = (381094.280, 382536.872, 383649.966), stdev = 969.415
[info]   CI (99.9%): [378804.002, 386269.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 926.334 ops/s
[info] # Warmup Iteration   2: 11444.043 ops/s
[info] # Warmup Iteration   3: 11320.452 ops/s
[info] # Warmup Iteration   4: 11492.906 ops/s
[info] # Warmup Iteration   5: 11183.756 ops/s
[info] Iteration   1: 11510.309 ops/s
[info]                  ·gc.alloc.rate:      265.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11408.461 ops/s
[info]                  ·gc.alloc.rate:                   263.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70572.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11462.380 ops/s
[info]                  ·gc.alloc.rate:      264.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11442.490 ops/s
[info]                  ·gc.alloc.rate:                   263.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70363.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11440.138 ops/s
[info]                  ·gc.alloc.rate:      263.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11452.756 ±(99.9%) 144.484 ops/s [Average]
[info]   (min, avg, max) = (11408.461, 11452.756, 11510.309), stdev = 37.522
[info]   CI (99.9%): [11308.272, 11597.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   264.018 ±(99.9%) 3.243 MB/sec [Average]
[info]   (min, avg, max) = (263.077, 264.018, 265.338), stdev = 0.842
[info]   CI (99.9%): [260.775, 267.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.038 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (36280.035, 36280.038, 36280.045), stdev = 0.004
[info]   CI (99.9%): [36280.023, 36280.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.552 ±(99.9%) 13.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.552, 7.759), stdev = 3.470
[info]   CI (99.9%): [≈ 0, 14.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   204.653 ±(99.9%) 1079.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.653, 511.744), stdev = 280.232
[info]   CI (99.9%): [≈ 0, 1283.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   28187.195 ±(99.9%) 148623.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28187.195, 70572.813), stdev = 38596.977
[info]   CI (99.9%): [≈ 0, 176810.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7385.344 ops/s
[info] # Warmup Iteration   2: 15021.041 ops/s
[info] # Warmup Iteration   3: 15509.456 ops/s
[info] # Warmup Iteration   4: 15532.943 ops/s
[info] # Warmup Iteration   5: 15493.430 ops/s
[info] Iteration   1: 15092.184 ops/s
[info]                  ·gc.alloc.rate:                   383.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53349.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15547.945 ops/s
[info]                  ·gc.alloc.rate:                   395.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51784.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15558.459 ops/s
[info]                  ·gc.alloc.rate:      395.343 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 15525.029 ops/s
[info]                  ·gc.alloc.rate:                   394.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68304.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15469.578 ops/s
[info]                  ·gc.alloc.rate:      393.132 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15438.639 ±(99.9%) 757.403 ops/s [Average]
[info]   (min, avg, max) = (15092.184, 15438.639, 15558.459), stdev = 196.695
[info]   CI (99.9%): [14681.236, 16196.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   392.307 ±(99.9%) 19.243 MB/sec [Average]
[info]   (min, avg, max) = (383.500, 392.307, 395.343), stdev = 4.997
[info]   CI (99.9%): [373.064, 411.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.029 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (39992.026, 39992.029, 39992.033), stdev = 0.003
[info]   CI (99.9%): [39992.018, 39992.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.500), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.563 ±(99.9%) 86.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.563, 50.646), stdev = 22.427
[info]   CI (99.9%): [≈ 0, 96.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.384 ±(99.9%) 1219.905 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.384, 673.731), stdev = 316.806
[info]   CI (99.9%): [≈ 0, 1559.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   34687.745 ±(99.9%) 124435.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34687.745, 68304.651), stdev = 32315.389
[info]   CI (99.9%): [≈ 0, 159122.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19734.528 ops/s
[info] # Warmup Iteration   2: 22638.367 ops/s
[info] # Warmup Iteration   3: 23034.474 ops/s
[info] # Warmup Iteration   4: 23043.722 ops/s
[info] # Warmup Iteration   5: 22960.074 ops/s
[info] Iteration   1: 23024.153 ops/s
[info]                  ·gc.alloc.rate:                   431.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34972.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23180.623 ops/s
[info]                  ·gc.alloc.rate:      434.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23131.755 ops/s
[info]                  ·gc.alloc.rate:                   433.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34805.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23128.473 ops/s
[info]                  ·gc.alloc.rate:                   433.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45921.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23213.857 ops/s
[info]                  ·gc.alloc.rate:      435.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23135.772 ±(99.9%) 276.584 ops/s [Average]
[info]   (min, avg, max) = (23024.153, 23135.772, 23213.857), stdev = 71.828
[info]   CI (99.9%): [22859.189, 23412.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   433.631 ±(99.9%) 5.174 MB/sec [Average]
[info]   (min, avg, max) = (431.562, 433.631, 435.068), stdev = 1.344
[info]   CI (99.9%): [428.457, 438.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.018, 29496.019), stdev = 0.001
[info]   CI (99.9%): [29496.016, 29496.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.682 ±(99.9%) 5.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 3.364), stdev = 1.499
[info]   CI (99.9%): [≈ 0, 6.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46.394 ±(99.9%) 392.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.394, 228.902), stdev = 102.034
[info]   CI (99.9%): [≈ 0, 439.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.616 ±(99.9%) 1221.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.616, 674.779), stdev = 317.098
[info]   CI (99.9%): [≈ 0, 1560.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23139.929 ±(99.9%) 83168.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23139.929, 45921.382), stdev = 21598.661
[info]   CI (99.9%): [≈ 0, 106308.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 963.173 ops/s
[info] # Warmup Iteration   2: 2441.011 ops/s
[info] # Warmup Iteration   3: 2439.829 ops/s
[info] # Warmup Iteration   4: 2467.750 ops/s
[info] # Warmup Iteration   5: 2460.517 ops/s
[info] Iteration   1: 2473.185 ops/s
[info]                  ·gc.alloc.rate:                   1523.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              969488.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859120.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2466.515 ops/s
[info]                  ·gc.alloc.rate:                   1519.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              969488.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862408.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2471.028 ops/s
[info]                  ·gc.alloc.rate:                   1521.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              969488.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861512.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2470.714 ops/s
[info]                  ·gc.alloc.rate:                   1521.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              969488.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1293752.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2415.988 ops/s
[info]                  ·gc.alloc.rate:                   1488.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              969488.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 882851.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2459.486 ±(99.9%) 94.094 ops/s [Average]
[info]   (min, avg, max) = (2415.988, 2459.486, 2473.185), stdev = 24.436
[info]   CI (99.9%): [2365.392, 2553.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1514.937 ±(99.9%) 57.708 MB/sec [Average]
[info]   (min, avg, max) = (1488.271, 1514.937, 1523.381), stdev = 14.987
[info]   CI (99.9%): [1457.229, 1572.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   969488.168 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (969488.165, 969488.168, 969488.178), stdev = 0.006
[info]   CI (99.9%): [969488.147, 969488.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.953 ±(99.9%) 45.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.953, 26.511), stdev = 11.856
[info]   CI (99.9%): [≈ 0, 53.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1488.000 ±(99.9%) 1168.768 MB/sec [Average]
[info]   (min, avg, max) = (1349.957, 1488.000, 2030.951), stdev = 303.525
[info]   CI (99.9%): [319.232, 2656.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   951928.941 ±(99.9%) 736716.468 B/op [Average]
[info]   (min, avg, max) = (859120.272, 951928.941, 1293752.751), stdev = 191322.927
[info]   CI (99.9%): [215212.472, 1688645.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:36:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5657.016 ops/s
[info] # Warmup Iteration   2: 7967.078 ops/s
[info] # Warmup Iteration   3: 8214.013 ops/s
[info] # Warmup Iteration   4: 8266.674 ops/s
[info] # Warmup Iteration   5: 8250.933 ops/s
[info] Iteration   1: 7974.457 ops/s
[info]                  ·gc.alloc.rate:                                  1474.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             291048.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    53.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     1464.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                289018.501 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        29.000 ms
[info] Iteration   2: 8272.761 ops/s
[info]                  ·gc.alloc.rate:                   1529.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              291048.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255333.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8255.800 ops/s
[info]                  ·gc.alloc.rate:                   1527.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              291056.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256112.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8252.413 ops/s
[info]                  ·gc.alloc.rate:                   1526.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              291096.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384799.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8272.564 ops/s
[info]                  ·gc.alloc.rate:                   1530.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              291096.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256346.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8205.599 ±(99.9%) 498.853 ops/s [Average]
[info]   (min, avg, max) = (7974.457, 8205.599, 8272.761), stdev = 129.550
[info]   CI (99.9%): [7706.746, 8704.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1517.631 ±(99.9%) 92.655 MB/sec [Average]
[info]   (min, avg, max) = (1474.705, 1517.631, 1530.382), stdev = 24.062
[info]   CI (99.9%): [1424.976, 1610.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   291068.914 ±(99.9%) 96.276 B/op [Average]
[info]   (min, avg, max) = (291048.051, 291068.914, 291096.049), stdev = 25.003
[info]   CI (99.9%): [290972.638, 291165.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.766 ±(99.9%) 32.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.766, 18.830), stdev = 8.421
[info]   CI (99.9%): [≈ 0, 36.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.271), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17.029 ±(99.9%) 83.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.029, 53.408), stdev = 21.650
[info]   CI (99.9%): [≈ 0, 100.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1503.079 ±(99.9%) 1125.160 MB/sec [Average]
[info]   (min, avg, max) = (1342.102, 1503.079, 2017.451), stdev = 292.201
[info]   CI (99.9%): [377.918, 2628.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   288322.107 ±(99.9%) 214883.253 B/op [Average]
[info]   (min, avg, max) = (255333.008, 288322.107, 384799.698), stdev = 55804.498
[info]   CI (99.9%): [73438.854, 503205.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.400, 29.000), stdev = 12.095
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4893.715 ops/s
[info] # Warmup Iteration   2: 53809.351 ops/s
[info] # Warmup Iteration   3: 54784.349 ops/s
[info] # Warmup Iteration   4: 54198.345 ops/s
[info] # Warmup Iteration   5: 55115.096 ops/s
[info] Iteration   1: 55448.631 ops/s
[info]                  ·gc.alloc.rate:                   518.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14521.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 55452.139 ops/s
[info]                  ·gc.alloc.rate:      518.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 55671.425 ops/s
[info]                  ·gc.alloc.rate:                   520.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19057.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 55913.283 ops/s
[info]                  ·gc.alloc.rate:                   522.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18975.697 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 55865.230 ops/s
[info]                  ·gc.alloc.rate:                   522.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18935.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   55670.142 ±(99.9%) 847.517 ops/s [Average]
[info]   (min, avg, max) = (55448.631, 55670.142, 55913.283), stdev = 220.097
[info]   CI (99.9%): [54822.625, 56517.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   520.386 ±(99.9%) 8.179 MB/sec [Average]
[info]   (min, avg, max) = (518.263, 520.386, 522.740), stdev = 2.124
[info]   CI (99.9%): [512.206, 528.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.007, 14712.007, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.583 ±(99.9%) 4.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.871), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16.470 ±(99.9%) 139.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.470, 81.180), stdev = 36.177
[info]   CI (99.9%): [≈ 0, 155.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.407 ±(99.9%) 1123.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.407, 674.235), stdev = 291.649
[info]   CI (99.9%): [≈ 0, 1629.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   14297.911 ±(99.9%) 31666.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14297.911, 19057.486), stdev = 8223.764
[info]   CI (99.9%): [≈ 0, 45964.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f7c6d30b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 20425.738 ops/s
[info] # Warmup Iteration   2: 39873.195 ops/s
[info] # Warmup Iteration   3: 40814.615 ops/s
[info] # Warmup Iteration   4: 40922.986 ops/s
[info] # Warmup Iteration   5: 41033.233 ops/s
[info] Iteration   1: 41084.430 ops/s
[info]                  ·gc.alloc.rate:                   611.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25811.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41090.202 ops/s
[info]                  ·gc.alloc.rate:                   611.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25808.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 41016.970 ops/s
[info]                  ·gc.alloc.rate:                   610.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25866.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 40907.564 ops/s
[info]                  ·gc.alloc.rate:      608.981 MB/sec
[info]                  ·gc.alloc.rate.norm: 23432.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41051.815 ops/s
[info]                  ·gc.alloc.rate:                   611.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25844.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   41030.196 ±(99.9%) 287.015 ops/s [Average]
[info]   (min, avg, max) = (40907.564, 41030.196, 41090.202), stdev = 74.537
[info]   CI (99.9%): [40743.181, 41317.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   610.787 ±(99.9%) 4.202 MB/sec [Average]
[info]   (min, avg, max) = (608.981, 610.787, 611.647), stdev = 1.091
[info]   CI (99.9%): [606.585, 614.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.871 ±(99.9%) 0.418 B/op [Average]
[info]   (min, avg, max) = (23431.755, 23431.871, 23432.036), stdev = 0.109
[info]   CI (99.9%): [23431.453, 23432.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 1.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.730), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.914 ±(99.9%) 47.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.914, 27.974), stdev = 12.338
[info]   CI (99.9%): [≈ 0, 53.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.091 ±(99.9%) 1160.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.091, 674.076), stdev = 301.361
[info]   CI (99.9%): [≈ 0, 1699.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20666.037 ±(99.9%) 44485.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20666.037, 25866.153), stdev = 11552.691
[info]   CI (99.9%): [≈ 0, 65151.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67339.273 ops/s
[info] # Warmup Iteration   2: 69636.569 ops/s
[info] # Warmup Iteration   3: 74344.832 ops/s
[info] # Warmup Iteration   4: 74744.868 ops/s
[info] # Warmup Iteration   5: 74832.010 ops/s
[info] Iteration   1: 74744.092 ops/s
[info]                  ·gc.alloc.rate:                   561.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10772.609 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 74853.176 ops/s
[info]                  ·gc.alloc.rate:                   562.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14188.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 74795.100 ops/s
[info]                  ·gc.alloc.rate:                   562.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14199.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 74902.801 ops/s
[info]                  ·gc.alloc.rate:      563.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74870.887 ops/s
[info]                  ·gc.alloc.rate:                   562.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14128.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   74833.211 ±(99.9%) 243.958 ops/s [Average]
[info]   (min, avg, max) = (74744.092, 74833.211, 74902.801), stdev = 63.355
[info]   CI (99.9%): [74589.253, 75077.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.618 ±(99.9%) 1.900 MB/sec [Average]
[info]   (min, avg, max) = (561.922, 562.618, 563.206), stdev = 0.493
[info]   CI (99.9%): [560.718, 564.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.681 ±(99.9%) 5.796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.373), stdev = 1.505
[info]   CI (99.9%): [≈ 0, 6.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.315 ±(99.9%) 121.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.315, 70.930), stdev = 31.649
[info]   CI (99.9%): [≈ 0, 136.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.684 ±(99.9%) 1123.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.684, 674.902), stdev = 291.838
[info]   CI (99.9%): [≈ 0, 1630.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10657.821 ±(99.9%) 23631.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10657.821, 14199.686), stdev = 6137.123
[info]   CI (99.9%): [≈ 0, 34289.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88410.290 ops/s
[info] # Warmup Iteration   2: 99387.520 ops/s
[info] # Warmup Iteration   3: 94421.254 ops/s
[info] # Warmup Iteration   4: 99355.998 ops/s
[info] # Warmup Iteration   5: 99369.599 ops/s
[info] Iteration   1: 99561.390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 94699.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 99410.289 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 99648.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 99717.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   98607.469 ±(99.9%) 8422.970 ops/s [Average]
[info]   (min, avg, max) = (94699.876, 98607.469, 99717.212), stdev = 2187.419
[info]   CI (99.9%): [90184.498, 107030.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2509.769 ops/s
[info] # Warmup Iteration   2: 5374.545 ops/s
[info] # Warmup Iteration   3: 5482.945 ops/s
[info] # Warmup Iteration   4: 5534.352 ops/s
[info] # Warmup Iteration   5: 5510.724 ops/s
[info] Iteration   1: 5498.091 ops/s
[info]                  ·gc.alloc.rate:                   1630.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              466880.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386804.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5490.189 ops/s
[info]                  ·gc.alloc.rate:                   1628.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              466879.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387583.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5507.979 ops/s
[info]                  ·gc.alloc.rate:                   1633.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              466880.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 579951.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5516.392 ops/s
[info]                  ·gc.alloc.rate:                   1636.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              466879.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386517.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5507.019 ops/s
[info]                  ·gc.alloc.rate:                   1633.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              466879.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581495.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5503.934 ±(99.9%) 38.705 ops/s [Average]
[info]   (min, avg, max) = (5490.189, 5503.934, 5516.392), stdev = 10.052
[info]   CI (99.9%): [5465.228, 5542.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1632.488 ±(99.9%) 11.510 MB/sec [Average]
[info]   (min, avg, max) = (1628.392, 1632.488, 1636.261), stdev = 2.989
[info]   CI (99.9%): [1620.979, 1643.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   466879.948 ±(99.9%) 1.937 B/op [Average]
[info]   (min, avg, max) = (466879.574, 466879.948, 466880.742), stdev = 0.503
[info]   CI (99.9%): [466878.011, 466881.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.681 ±(99.9%) 49.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.681, 35.799), stdev = 12.934
[info]   CI (99.9%): [≈ 0, 66.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1624.225 ±(99.9%) 1432.638 MB/sec [Average]
[info]   (min, avg, max) = (1351.127, 1624.225, 2034.273), stdev = 372.051
[info]   CI (99.9%): [191.588, 3056.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   464470.499 ±(99.9%) 408654.088 B/op [Average]
[info]   (min, avg, max) = (386517.503, 464470.499, 581495.169), stdev = 106126.169
[info]   CI (99.9%): [55816.410, 873124.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3628360.437 ops/s
[info] # Warmup Iteration   2: 5091730.664 ops/s
[info] # Warmup Iteration   3: 5207215.092 ops/s
[info] # Warmup Iteration   4: 5260809.195 ops/s
[info] # Warmup Iteration   5: 5267503.506 ops/s
[info] Iteration   1: 5282434.691 ops/s
[info]                  ·gc.alloc.rate:                   3275.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 805.195 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5229982.792 ops/s
[info]                  ·gc.alloc.rate:                   3243.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3386.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1019.043 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5294706.912 ops/s
[info]                  ·gc.alloc.rate:                   3283.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1008.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5285758.792 ops/s
[info]                  ·gc.alloc.rate:                   3278.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1011.773 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5214233.999 ops/s
[info]                  ·gc.alloc.rate:                   3233.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1026.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   5261423.437 ±(99.9%) 140915.012 ops/s [Average]
[info]   (min, avg, max) = (5214233.999, 5261423.437, 5294706.912), stdev = 36595.181
[info]   CI (99.9%): [5120508.425, 5402338.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3262.583 ±(99.9%) 86.831 MB/sec [Average]
[info]   (min, avg, max) = (3233.575, 3262.583, 3283.019), stdev = 22.550
[info]   CI (99.9%): [3175.752, 3349.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.020, 0.025), stdev = 0.005
[info]   CI (99.9%): [≈ 10⁻⁴, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3255.786 ±(99.9%) 1192.278 MB/sec [Average]
[info]   (min, avg, max) = (2701.993, 3255.786, 3400.617), stdev = 309.631
[info]   CI (99.9%): [2063.508, 4448.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   974.165 ±(99.9%) 364.702 B/op [Average]
[info]   (min, avg, max) = (805.195, 974.165, 1026.419), stdev = 94.712
[info]   CI (99.9%): [609.463, 1338.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.916 ops/s
[info] # Warmup Iteration   2: 40135573.866 ops/s
[info] # Warmup Iteration   3: 39019212.530 ops/s
[info] # Warmup Iteration   4: 41923722.341 ops/s
[info] # Warmup Iteration   5: 42694561.674 ops/s
[info] Iteration   1: 42739635.122 ops/s
[info]                  ·gc.alloc.rate:                   434.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42744452.350 ops/s
[info]                  ·gc.alloc.rate:                   434.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42943900.867 ops/s
[info]                  ·gc.alloc.rate:      436.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42802758.964 ops/s
[info]                  ·gc.alloc.rate:                   435.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.775 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42898087.205 ops/s
[info]                  ·gc.alloc.rate:                   436.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.720 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   42825766.902 ±(99.9%) 353683.085 ops/s [Average]
[info]   (min, avg, max) = (42739635.122, 42825766.902, 42943900.867), stdev = 91850.374
[info]   CI (99.9%): [42472083.816, 43179449.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   435.363 ±(99.9%) 3.722 MB/sec [Average]
[info]   (min, avg, max) = (434.431, 435.363, 436.594), stdev = 0.967
[info]   CI (99.9%): [431.641, 439.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.523 ±(99.9%) 4.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 2.579), stdev = 1.150
[info]   CI (99.9%): [≈ 0, 4.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   474.138 ±(99.9%) 1067.366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.138, 673.816), stdev = 277.192
[info]   CI (99.9%): [≈ 0, 1541.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   17.434 ±(99.9%) 39.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.434, 24.775), stdev = 10.184
[info]   CI (99.9%): [≈ 0, 56.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3714056.174 ops/s
[info] # Warmup Iteration   2: 8822669.468 ops/s
[info] # Warmup Iteration   3: 8908960.507 ops/s
[info] # Warmup Iteration   4: 8919698.648 ops/s
[info] # Warmup Iteration   5: 8943719.525 ops/s
[info] Iteration   1: 8962643.356 ops/s
[info]                  ·gc.alloc.rate:                   3371.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3390.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8908888.430 ops/s
[info]                  ·gc.alloc.rate:                   3351.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 599.957 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8945299.427 ops/s
[info]                  ·gc.alloc.rate:                   3363.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.217 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8948248.955 ops/s
[info]                  ·gc.alloc.rate:                   3366.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.594 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8945794.996 ops/s
[info]                  ·gc.alloc.rate:                   3364.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.840 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8942175.033 ±(99.9%) 76692.335 ops/s [Average]
[info]   (min, avg, max) = (8908888.430, 8942175.033, 8962643.356), stdev = 19916.756
[info]   CI (99.9%): [8865482.698, 9018867.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3363.503 ±(99.9%) 28.931 MB/sec [Average]
[info]   (min, avg, max) = (3351.112, 3363.503, 3371.274), stdev = 7.513
[info]   CI (99.9%): [3334.572, 3392.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
[info]   CI (99.9%): [0.002, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3398.745 ±(99.9%) 21.341 MB/sec [Average]
[info]   (min, avg, max) = (3390.739, 3398.745, 3404.292), stdev = 5.542
[info]   CI (99.9%): [3377.403, 3420.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   598.205 ±(99.9%) 6.498 B/op [Average]
[info]   (min, avg, max) = (595.418, 598.205, 599.957), stdev = 1.687
[info]   CI (99.9%): [591.707, 604.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50015387.452 ops/s
[info] # Warmup Iteration   2: 49313141.144 ops/s
[info] # Warmup Iteration   3: 52398968.745 ops/s
[info] # Warmup Iteration   4: 52681648.233 ops/s
[info] # Warmup Iteration   5: 52701457.908 ops/s
[info] Iteration   1: 52672565.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52688139.267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52662317.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 43511085.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52579706.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   50822762.851 ±(99.9%) 15739768.209 ops/s [Average]
[info]   (min, avg, max) = (43511085.182, 50822762.851, 52688139.267), stdev = 4087567.820
[info]   CI (99.9%): [35082994.642, 66562531.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26838841.198 ops/s
[info] # Warmup Iteration   2: 33231426.982 ops/s
[info] # Warmup Iteration   3: 36033611.244 ops/s
[info] # Warmup Iteration   4: 36103063.688 ops/s
[info] # Warmup Iteration   5: 35715466.090 ops/s
[info] Iteration   1: 36139234.475 ops/s
[info]                  ·gc.alloc.rate:                   1285.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36177755.255 ops/s
[info]                  ·gc.alloc.rate:                   1287.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 36177294.038 ops/s
[info]                  ·gc.alloc.rate:                   1287.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36091640.632 ops/s
[info]                  ·gc.alloc.rate:                   1283.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36217576.650 ops/s
[info]                  ·gc.alloc.rate:                   1288.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   36160700.210 ±(99.9%) 182968.019 ops/s [Average]
[info]   (min, avg, max) = (36091640.632, 36160700.210, 36217576.650), stdev = 47516.214
[info]   CI (99.9%): [35977732.191, 36343668.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1286.462 ±(99.9%) 6.683 MB/sec [Average]
[info]   (min, avg, max) = (1283.952, 1286.462, 1288.564), stdev = 1.736
[info]   CI (99.9%): [1279.779, 1293.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   1344.611 ±(99.9%) 3.324 MB/sec [Average]
[info]   (min, avg, max) = (1344.086, 1344.611, 1346.082), stdev = 0.863
[info]   CI (99.9%): [1341.288, 1347.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58.531 ±(99.9%) 0.273 B/op [Average]
[info]   (min, avg, max) = (58.481, 58.531, 58.650), stdev = 0.071
[info]   CI (99.9%): [58.258, 58.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4090569.958 ops/s
[info] # Warmup Iteration   2: 7190198.432 ops/s
[info] # Warmup Iteration   3: 7418097.988 ops/s
[info] # Warmup Iteration   4: 7460336.594 ops/s
[info] # Warmup Iteration   5: 7426506.392 ops/s
[info] Iteration   1: 7440173.635 ops/s
[info]                  ·gc.alloc.rate:                   3592.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4049.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 856.832 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7432353.886 ops/s
[info]                  ·gc.alloc.rate:                   3588.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7459936.191 ops/s
[info]                  ·gc.alloc.rate:                   3602.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 715.830 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7457502.659 ops/s
[info]                  ·gc.alloc.rate:                   3600.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.046 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7296888.913 ops/s
[info]                  ·gc.alloc.rate:                   3523.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4081.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 880.429 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7417371.057 ±(99.9%) 263162.186 ops/s [Average]
[info]   (min, avg, max) = (7296888.913, 7417371.057, 7459936.191), stdev = 68342.384
[info]   CI (99.9%): [7154208.871, 7680533.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3581.291 ±(99.9%) 127.106 MB/sec [Average]
[info]   (min, avg, max) = (3523.174, 3581.291, 3602.486), stdev = 33.009
[info]   CI (99.9%): [3454.185, 3708.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.018, 0.022), stdev = 0.004
[info]   CI (99.9%): [0.001, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3661.361 ±(99.9%) 1421.621 MB/sec [Average]
[info]   (min, avg, max) = (3385.589, 3661.361, 4081.452), stdev = 369.191
[info]   CI (99.9%): [2239.740, 5082.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   777.440 ±(99.9%) 322.159 B/op [Average]
[info]   (min, avg, max) = (715.830, 777.440, 880.429), stdev = 83.664
[info]   CI (99.9%): [455.281, 1099.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14626037.850 ops/s
[info] # Warmup Iteration   2: 21003094.712 ops/s
[info] # Warmup Iteration   3: 21377978.805 ops/s
[info] # Warmup Iteration   4: 21607750.405 ops/s
[info] # Warmup Iteration   5: 21390120.087 ops/s
[info] Iteration   1: 21204052.237 ops/s
[info]                  ·gc.alloc.rate:                   1940.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21623819.864 ops/s
[info]                  ·gc.alloc.rate:                   1978.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21602982.530 ops/s
[info]                  ·gc.alloc.rate:                   1976.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21618368.355 ops/s
[info]                  ·gc.alloc.rate:                   1978.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.332 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21605476.138 ops/s
[info]                  ·gc.alloc.rate:                   1976.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   21530939.825 ±(99.9%) 704446.228 ops/s [Average]
[info]   (min, avg, max) = (21204052.237, 21530939.825, 21623819.864), stdev = 182942.448
[info]   CI (99.9%): [20826493.597, 22235386.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1970.164 ±(99.9%) 63.888 MB/sec [Average]
[info]   (min, avg, max) = (1940.520, 1970.164, 1978.477), stdev = 16.591
[info]   CI (99.9%): [1906.277, 2034.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1886.631 ±(99.9%) 1166.171 MB/sec [Average]
[info]   (min, avg, max) = (1344.936, 1886.631, 2027.903), stdev = 302.851
[info]   CI (99.9%): [720.460, 3052.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   137.943 ±(99.9%) 86.297 B/op [Average]
[info]   (min, avg, max) = (97.889, 137.943, 149.564), stdev = 22.411
[info]   CI (99.9%): [51.646, 224.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.924 ops/s
[info] # Warmup Iteration   2: 54167419.766 ops/s
[info] # Warmup Iteration   3: 54946429.266 ops/s
[info] # Warmup Iteration   4: 57706118.009 ops/s
[info] # Warmup Iteration   5: 57529746.190 ops/s
[info] Iteration   1: 57601153.298 ops/s
[info]                  ·gc.alloc.rate:                   1756.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57910948.080 ops/s
[info]                  ·gc.alloc.rate:                   1766.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 57838587.623 ops/s
[info]                  ·gc.alloc.rate:                   1763.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57841786.340 ops/s
[info]                  ·gc.alloc.rate:                   1764.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 57771680.989 ops/s
[info]                  ·gc.alloc.rate:                   1761.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   57792831.266 ±(99.9%) 454105.064 ops/s [Average]
[info]   (min, avg, max) = (57601153.298, 57792831.266, 57910948.080), stdev = 117929.643
[info]   CI (99.9%): [57338726.202, 58246936.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1762.516 ±(99.9%) 14.305 MB/sec [Average]
[info]   (min, avg, max) = (1756.577, 1762.516, 1766.364), stdev = 3.715
[info]   CI (99.9%): [1748.212, 1776.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁵, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1751.549 ±(99.9%) 1417.838 MB/sec [Average]
[info]   (min, avg, max) = (1345.746, 1751.549, 2024.087), stdev = 368.208
[info]   CI (99.9%): [333.710, 3169.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   47.708 ±(99.9%) 38.744 B/op [Average]
[info]   (min, avg, max) = (36.570, 47.708, 55.104), stdev = 10.062
[info]   CI (99.9%): [8.963, 86.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4829467.406 ops/s
[info] # Warmup Iteration   2: 14044867.232 ops/s
[info] # Warmup Iteration   3: 14139394.501 ops/s
[info] # Warmup Iteration   4: 14127715.624 ops/s
[info] # Warmup Iteration   5: 14027249.548 ops/s
[info] Iteration   1: 14131254.598 ops/s
[info]                  ·gc.alloc.rate:                   2800.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14124055.726 ops/s
[info]                  ·gc.alloc.rate:                   2799.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14089584.227 ops/s
[info]                  ·gc.alloc.rate:                   2792.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.822 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14112666.848 ops/s
[info]                  ·gc.alloc.rate:                   2797.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14106425.487 ops/s
[info]                  ·gc.alloc.rate:                   2796.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   14112797.377 ±(99.9%) 62295.034 ops/s [Average]
[info]   (min, avg, max) = (14089584.227, 14112797.377, 14131254.598), stdev = 16177.823
[info]   CI (99.9%): [14050502.343, 14175092.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2797.361 ±(99.9%) 12.400 MB/sec [Average]
[info]   (min, avg, max) = (2792.695, 2797.361, 2800.994), stdev = 3.220
[info]   CI (99.9%): [2784.961, 2809.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2718.703 ±(99.9%) 13.957 MB/sec [Average]
[info]   (min, avg, max) = (2713.499, 2718.703, 2722.717), stdev = 3.625
[info]   CI (99.9%): [2704.746, 2732.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   303.228 ±(99.9%) 2.657 B/op [Average]
[info]   (min, avg, max) = (302.254, 303.228, 303.822), stdev = 0.690
[info]   CI (99.9%): [300.570, 305.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35875318.878 ops/s
[info] # Warmup Iteration   2: 46732145.263 ops/s
[info] # Warmup Iteration   3: 48242006.649 ops/s
[info] # Warmup Iteration   4: 48451700.318 ops/s
[info] # Warmup Iteration   5: 47856719.666 ops/s
[info] Iteration   1: 48583097.818 ops/s
[info]                  ·gc.alloc.rate:                   987.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 48398393.405 ops/s
[info]                  ·gc.alloc.rate:                   984.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 48475393.558 ops/s
[info]                  ·gc.alloc.rate:                   985.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.822 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 48387916.103 ops/s
[info]                  ·gc.alloc.rate:                   983.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.679 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 48448655.588 ops/s
[info]                  ·gc.alloc.rate:                   984.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   48458691.294 ±(99.9%) 301370.563 ops/s [Average]
[info]   (min, avg, max) = (48387916.103, 48458691.294, 48583097.818), stdev = 78264.978
[info]   CI (99.9%): [48157320.732, 48760061.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   985.245 ±(99.9%) 5.889 MB/sec [Average]
[info]   (min, avg, max) = (983.749, 985.245, 987.742), stdev = 1.529
[info]   CI (99.9%): [979.356, 991.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.990 ±(99.9%) 1416.956 MB/sec [Average]
[info]   (min, avg, max) = (672.002, 940.990, 1345.395), stdev = 367.979
[info]   CI (99.9%): [≈ 0, 2357.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30.573 ±(99.9%) 46.169 B/op [Average]
[info]   (min, avg, max) = (21.796, 30.573, 43.736), stdev = 11.990
[info]   CI (99.9%): [≈ 0, 76.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36598080.500 ops/s
[info] # Warmup Iteration   2: 46528995.625 ops/s
[info] # Warmup Iteration   3: 51079782.325 ops/s
[info] # Warmup Iteration   4: 52263971.963 ops/s
[info] # Warmup Iteration   5: 51617914.133 ops/s
[info] Iteration   1: 52247096.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52321792.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52296726.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 51949716.779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52258663.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   52214799.193 ±(99.9%) 582057.337 ops/s [Average]
[info]   (min, avg, max) = (51949716.779, 52214799.193, 52321792.358), stdev = 151158.442
[info]   CI (99.9%): [51632741.856, 52796856.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43041247.958 ops/s
[info] # Warmup Iteration   2: 40135811.952 ops/s
[info] # Warmup Iteration   3: 40962156.793 ops/s
[info] # Warmup Iteration   4: 40791145.608 ops/s
[info] # Warmup Iteration   5: 40782739.357 ops/s
[info] Iteration   1: 40997848.109 ops/s
[info]                  ·gc.alloc.rate:                   2083.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40977816.422 ops/s
[info]                  ·gc.alloc.rate:                   2082.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40766344.134 ops/s
[info]                  ·gc.alloc.rate:                   2072.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41027269.964 ops/s
[info]                  ·gc.alloc.rate:                   2085.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.863 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40984676.433 ops/s
[info]                  ·gc.alloc.rate:                   2083.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40950791.012 ±(99.9%) 403687.476 ops/s [Average]
[info]   (min, avg, max) = (40766344.134, 40950791.012, 41027269.964), stdev = 104836.356
[info]   CI (99.9%): [40547103.536, 41354478.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2081.524 ±(99.9%) 19.638 MB/sec [Average]
[info]   (min, avg, max) = (2072.588, 2081.524, 2085.399), stdev = 5.100
[info]   CI (99.9%): [2061.886, 2101.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   2026.125 ±(99.9%) 19.493 MB/sec [Average]
[info]   (min, avg, max) = (2019.438, 2026.125, 2031.877), stdev = 5.062
[info]   CI (99.9%): [2006.632, 2045.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   77.871 ±(99.9%) 1.052 B/op [Average]
[info]   (min, avg, max) = (77.534, 77.871, 78.235), stdev = 0.273
[info]   CI (99.9%): [76.820, 78.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720928.138 ops/s
[info] # Warmup Iteration   2: 2456761.696 ops/s
[info] # Warmup Iteration   3: 2524159.303 ops/s
[info] # Warmup Iteration   4: 2531523.944 ops/s
[info] # Warmup Iteration   5: 2532165.426 ops/s
[info] Iteration   1: 2528821.721 ops/s
[info]                  ·gc.alloc.rate:                   2069.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2682.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1669.914 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2534687.004 ops/s
[info]                  ·gc.alloc.rate:                   2073.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1252.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2534852.663 ops/s
[info]                  ·gc.alloc.rate:                   2074.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1254.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2534208.798 ops/s
[info]                  ·gc.alloc.rate:                   2073.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1257.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2536087.236 ops/s
[info]                  ·gc.alloc.rate:                   2075.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1258.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2533731.484 ±(99.9%) 10900.321 ops/s [Average]
[info]   (min, avg, max) = (2528821.721, 2533731.484, 2536087.236), stdev = 2830.779
[info]   CI (99.9%): [2522831.164, 2544631.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2073.324 ±(99.9%) 9.026 MB/sec [Average]
[info]   (min, avg, max) = (2069.297, 2073.324, 2075.248), stdev = 2.344
[info]   CI (99.9%): [2064.298, 2082.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.039, 0.052), stdev = 0.009
[info]   CI (99.9%): [0.004, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2154.299 ±(99.9%) 1137.930 MB/sec [Average]
[info]   (min, avg, max) = (2016.068, 2154.299, 2682.879), stdev = 295.517
[info]   CI (99.9%): [1016.368, 3292.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1338.464 ±(99.9%) 713.537 B/op [Average]
[info]   (min, avg, max) = (1252.076, 1338.464, 1669.914), stdev = 185.303
[info]   CI (99.9%): [624.928, 2052.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135251.605 ops/s
[info] # Warmup Iteration   2: 153251.077 ops/s
[info] # Warmup Iteration   3: 155761.019 ops/s
[info] # Warmup Iteration   4: 155422.331 ops/s
[info] # Warmup Iteration   5: 155771.280 ops/s
[info] Iteration   1: 155947.408 ops/s
[info]                  ·gc.alloc.rate:                   2861.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27247.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 156015.008 ops/s
[info]                  ·gc.alloc.rate:                   2863.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27296.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 155930.173 ops/s
[info]                  ·gc.alloc.rate:                   2860.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27358.074 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 155866.598 ops/s
[info]                  ·gc.alloc.rate:                   2858.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34270.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 155390.931 ops/s
[info]                  ·gc.alloc.rate:                   2850.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27533.916 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   155830.024 ±(99.9%) 966.826 ops/s [Average]
[info]   (min, avg, max) = (155390.931, 155830.024, 156015.008), stdev = 251.082
[info]   CI (99.9%): [154863.198, 156796.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2858.705 ±(99.9%) 19.437 MB/sec [Average]
[info]   (min, avg, max) = (2850.104, 2858.705, 2863.032), stdev = 5.048
[info]   CI (99.9%): [2839.268, 2878.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.002, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.757 ±(99.9%) 0.921 B/op [Average]
[info]   (min, avg, max) = (0.422, 0.757, 1.051), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2845.752 ±(99.9%) 1179.087 MB/sec [Average]
[info]   (min, avg, max) = (2700.368, 2845.752, 3393.390), stdev = 306.205
[info]   CI (99.9%): [1666.666, 4024.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28741.262 ±(99.9%) 11909.380 B/op [Average]
[info]   (min, avg, max) = (27247.702, 28741.262, 34270.487), stdev = 3092.828
[info]   CI (99.9%): [16831.882, 40650.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7472.621 ops/s
[info] # Warmup Iteration   2: 16910.216 ops/s
[info] # Warmup Iteration   3: 17494.470 ops/s
[info] # Warmup Iteration   4: 17513.428 ops/s
[info] # Warmup Iteration   5: 17668.248 ops/s
[info] Iteration   1: 17715.690 ops/s
[info]                  ·gc.alloc.rate:                   1377.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120072.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17666.565 ops/s
[info]                  ·gc.alloc.rate:                   1374.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120494.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17758.339 ops/s
[info]                  ·gc.alloc.rate:                   1381.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119951.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 17767.986 ops/s
[info]                  ·gc.alloc.rate:                   1381.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119986.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17737.176 ops/s
[info]                  ·gc.alloc.rate:                   1379.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120284.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   17729.151 ±(99.9%) 155.495 ops/s [Average]
[info]   (min, avg, max) = (17666.565, 17729.151, 17767.986), stdev = 40.382
[info]   CI (99.9%): [17573.656, 17884.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1378.816 ±(99.9%) 12.095 MB/sec [Average]
[info]   (min, avg, max) = (1374.028, 1378.816, 1381.909), stdev = 3.141
[info]   CI (99.9%): [1366.721, 1390.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122416.025 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (122416.023, 122416.025, 122416.029), stdev = 0.002
[info]   CI (99.9%): [122416.015, 122416.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.324 ±(99.9%) 10.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.324, 7.397), stdev = 2.743
[info]   CI (99.9%): [≈ 0, 13.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.378 ±(99.9%) 6.003 MB/sec [Average]
[info]   (min, avg, max) = (1351.335, 1353.378, 1355.243), stdev = 1.559
[info]   CI (99.9%): [1347.375, 1359.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   120157.946 ±(99.9%) 878.883 B/op [Average]
[info]   (min, avg, max) = (119951.947, 120157.946, 120494.260), stdev = 228.243
[info]   CI (99.9%): [119279.063, 121036.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73756.686 ops/s
[info] # Warmup Iteration   2: 120570.083 ops/s
[info] # Warmup Iteration   3: 124188.487 ops/s
[info] # Warmup Iteration   4: 124201.960 ops/s
[info] # Warmup Iteration   5: 122302.021 ops/s
[info] Iteration   1: 124218.402 ops/s
[info]                  ·gc.alloc.rate:                   1379.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17120.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 124227.531 ops/s
[info]                  ·gc.alloc.rate:                   1380.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17132.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 124221.150 ops/s
[info]                  ·gc.alloc.rate:                   1380.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17149.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 122235.229 ops/s
[info]                  ·gc.alloc.rate:                   1357.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17441.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124270.533 ops/s
[info]                  ·gc.alloc.rate:                   1380.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17168.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   123834.569 ±(99.9%) 3443.661 ops/s [Average]
[info]   (min, avg, max) = (122235.229, 123834.569, 124270.533), stdev = 894.308
[info]   CI (99.9%): [120390.908, 127278.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1375.808 ±(99.9%) 38.363 MB/sec [Average]
[info]   (min, avg, max) = (1357.992, 1375.808, 1380.541), stdev = 9.963
[info]   CI (99.9%): [1337.444, 1414.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.004), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.635 ±(99.9%) 1.155 B/op [Average]
[info]   (min, avg, max) = (0.264, 0.635, 1.055), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.291 ±(99.9%) 6.659 MB/sec [Average]
[info]   (min, avg, max) = (1350.892, 1353.291, 1355.328), stdev = 1.729
[info]   CI (99.9%): [1346.632, 1359.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17202.560 ±(99.9%) 519.107 B/op [Average]
[info]   (min, avg, max) = (17120.659, 17202.560, 17441.529), stdev = 134.811
[info]   CI (99.9%): [16683.452, 17721.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456242.365 ops/s
[info] # Warmup Iteration   2: 481104.988 ops/s
[info] # Warmup Iteration   3: 476314.183 ops/s
[info] # Warmup Iteration   4: 483933.161 ops/s
[info] # Warmup Iteration   5: 488112.250 ops/s
[info] Iteration   1: 486808.951 ops/s
[info]                  ·gc.alloc.rate:                   1006.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4350.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 487588.022 ops/s
[info]                  ·gc.alloc.rate:                   1008.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2169.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 478828.196 ops/s
[info]                  ·gc.alloc.rate:                   990.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4416.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 487961.403 ops/s
[info]                  ·gc.alloc.rate:                   1009.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2165.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 488510.872 ops/s
[info]                  ·gc.alloc.rate:                   1010.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4330.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   485939.489 ±(99.9%) 15491.876 ops/s [Average]
[info]   (min, avg, max) = (478828.196, 485939.489, 488510.872), stdev = 4023.191
[info]   CI (99.9%): [470447.613, 501431.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1005.257 ±(99.9%) 32.201 MB/sec [Average]
[info]   (min, avg, max) = (990.471, 1005.257, 1010.495), stdev = 8.363
[info]   CI (99.9%): [973.055, 1037.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.122 ±(99.9%) 0.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.342), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1075.323 ±(99.9%) 1418.289 MB/sec [Average]
[info]   (min, avg, max) = (671.364, 1075.323, 1345.446), stdev = 368.325
[info]   CI (99.9%): [≈ 0, 2493.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3486.559 ±(99.9%) 4637.780 B/op [Average]
[info]   (min, avg, max) = (2165.702, 3486.559, 4416.269), stdev = 1204.417
[info]   CI (99.9%): [≈ 0, 8124.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 487474.566 ops/s
[info] # Warmup Iteration   2: 534065.268 ops/s
[info] # Warmup Iteration   3: 534771.420 ops/s
[info] # Warmup Iteration   4: 538813.767 ops/s
[info] # Warmup Iteration   5: 540067.395 ops/s
[info] Iteration   1: 539489.365 ops/s
[info]                  ·gc.alloc.rate:                   526.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1492.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 538924.013 ops/s
[info]                  ·gc.alloc.rate:      525.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 540334.711 ops/s
[info]                  ·gc.alloc.rate:                   527.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1965.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 541770.900 ops/s
[info]                  ·gc.alloc.rate:                   528.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1960.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 540497.320 ops/s
[info]                  ·gc.alloc.rate:                   527.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1958.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   540203.262 ±(99.9%) 4177.267 ops/s [Average]
[info]   (min, avg, max) = (538924.013, 540203.262, 541770.900), stdev = 1084.823
[info]   CI (99.9%): [536025.994, 544380.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   527.157 ±(99.9%) 4.095 MB/sec [Average]
[info]   (min, avg, max) = (525.912, 527.157, 528.698), stdev = 1.064
[info]   CI (99.9%): [523.062, 531.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.254), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.946 ±(99.9%) 16.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.946, 9.479), stdev = 4.212
[info]   CI (99.9%): [≈ 0, 18.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   506.734 ±(99.9%) 1123.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.734, 674.723), stdev = 291.884
[info]   CI (99.9%): [≈ 0, 1630.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1475.442 ±(99.9%) 3270.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1475.442, 1965.508), stdev = 849.445
[info]   CI (99.9%): [≈ 0, 4746.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11745.646 ops/s
[info] # Warmup Iteration   2: 20897.906 ops/s
[info] # Warmup Iteration   3: 20919.159 ops/s
[info] # Warmup Iteration   4: 20869.587 ops/s
[info] # Warmup Iteration   5: 21077.120 ops/s
[info] Iteration   1: 20939.734 ops/s
[info]                  ·gc.alloc.rate:                   457.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38450.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21116.480 ops/s
[info]                  ·gc.alloc.rate:      461.853 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21067.968 ops/s
[info]                  ·gc.alloc.rate:                   460.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50333.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21100.111 ops/s
[info]                  ·gc.alloc.rate:                   461.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50257.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21171.790 ops/s
[info]                  ·gc.alloc.rate:      463.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   21079.217 ±(99.9%) 333.348 ops/s [Average]
[info]   (min, avg, max) = (20939.734, 21079.217, 21171.790), stdev = 86.569
[info]   CI (99.9%): [20745.869, 21412.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   461.045 ±(99.9%) 7.461 MB/sec [Average]
[info]   (min, avg, max) = (457.941, 461.045, 463.137), stdev = 1.938
[info]   CI (99.9%): [453.584, 468.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34424.178 ±(99.9%) 1.356 B/op [Average]
[info]   (min, avg, max) = (34424.019, 34424.178, 34424.807), stdev = 0.352
[info]   CI (99.9%): [34422.822, 34425.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.333), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.600 ±(99.9%) 41.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.600, 24.881), stdev = 10.807
[info]   CI (99.9%): [≈ 0, 47.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   371.805 ±(99.9%) 1331.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.805, 673.851), stdev = 345.814
[info]   CI (99.9%): [≈ 0, 1703.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27808.362 ±(99.9%) 99508.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27808.362, 50333.838), stdev = 25841.951
[info]   CI (99.9%): [≈ 0, 127316.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316868.335 ops/s
[info] # Warmup Iteration   2: 383873.669 ops/s
[info] # Warmup Iteration   3: 390500.810 ops/s
[info] # Warmup Iteration   4: 390379.181 ops/s
[info] # Warmup Iteration   5: 387518.820 ops/s
[info] Iteration   1: 391064.257 ops/s
[info]                  ·gc.alloc.rate:                   2653.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10852.265 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 392213.041 ops/s
[info]                  ·gc.alloc.rate:                   2662.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10842.222 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 391130.145 ops/s
[info]                  ·gc.alloc.rate:                   2653.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10898.515 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 390309.425 ops/s
[info]                  ·gc.alloc.rate:                   2648.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10937.888 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 391392.152 ops/s
[info]                  ·gc.alloc.rate:                   2655.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10923.783 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   391221.804 ±(99.9%) 2637.920 ops/s [Average]
[info]   (min, avg, max) = (390309.425, 391221.804, 392213.041), stdev = 685.059
[info]   CI (99.9%): [388583.884, 393859.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2654.627 ±(99.9%) 19.393 MB/sec [Average]
[info]   (min, avg, max) = (2648.159, 2654.627, 2662.111), stdev = 5.036
[info]   CI (99.9%): [2635.234, 2674.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.318 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (0.251, 0.318, 0.336), stdev = 0.037
[info]   CI (99.9%): [0.174, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2707.046 ±(99.9%) 30.682 MB/sec [Average]
[info]   (min, avg, max) = (2696.069, 2707.046, 2716.340), stdev = 7.968
[info]   CI (99.9%): [2676.363, 2737.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10890.935 ±(99.9%) 163.475 B/op [Average]
[info]   (min, avg, max) = (10842.222, 10890.935, 10937.888), stdev = 42.454
[info]   CI (99.9%): [10727.460, 11054.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192660.478 ops/s
[info] # Warmup Iteration   2: 329795.996 ops/s
[info] # Warmup Iteration   3: 330306.382 ops/s
[info] # Warmup Iteration   4: 329311.503 ops/s
[info] # Warmup Iteration   5: 330317.195 ops/s
[info] Iteration   1: 331310.591 ops/s
[info]                  ·gc.alloc.rate:                   877.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3205.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 331368.275 ops/s
[info]                  ·gc.alloc.rate:                   877.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3205.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 330398.375 ops/s
[info]                  ·gc.alloc.rate:                   874.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6434.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 331577.192 ops/s
[info]                  ·gc.alloc.rate:                   878.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3209.343 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 330556.813 ops/s
[info]                  ·gc.alloc.rate:                   875.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3219.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   331042.250 ±(99.9%) 2032.730 ops/s [Average]
[info]   (min, avg, max) = (330398.375, 331042.250, 331577.192), stdev = 527.894
[info]   CI (99.9%): [329009.519, 333074.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   876.655 ±(99.9%) 5.799 MB/sec [Average]
[info]   (min, avg, max) = (874.906, 876.655, 878.392), stdev = 1.506
[info]   CI (99.9%): [870.856, 882.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.099 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.099, 0.198), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.514 ±(99.9%) 1162.935 MB/sec [Average]
[info]   (min, avg, max) = (674.684, 810.514, 1350.765), stdev = 302.010
[info]   CI (99.9%): [≈ 0, 1973.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3854.829 ±(99.9%) 5553.986 B/op [Average]
[info]   (min, avg, max) = (3205.068, 3854.829, 6434.967), stdev = 1442.352
[info]   CI (99.9%): [≈ 0, 9408.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431080.509 ops/s
[info] # Warmup Iteration   2: 445802.877 ops/s
[info] # Warmup Iteration   3: 443871.718 ops/s
[info] # Warmup Iteration   4: 447659.532 ops/s
[info] # Warmup Iteration   5: 442862.491 ops/s
[info] Iteration   1: 448727.261 ops/s
[info]                  ·gc.alloc.rate:                   884.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2359.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 449247.666 ops/s
[info]                  ·gc.alloc.rate:                   886.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2357.027 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 431947.795 ops/s
[info]                  ·gc.alloc.rate:                   851.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2448.969 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 432396.759 ops/s
[info]                  ·gc.alloc.rate:                   852.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4890.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 448322.931 ops/s
[info]                  ·gc.alloc.rate:                   884.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2357.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   442128.482 ±(99.9%) 35025.553 ops/s [Average]
[info]   (min, avg, max) = (431947.795, 442128.482, 449247.666), stdev = 9096.025
[info]   CI (99.9%): [407102.929, 477154.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   871.876 ±(99.9%) 69.125 MB/sec [Average]
[info]   (min, avg, max) = (851.762, 871.876, 886.042), stdev = 17.951
[info]   CI (99.9%): [802.751, 941.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.303), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.454 ±(99.9%) 1155.841 MB/sec [Average]
[info]   (min, avg, max) = (671.401, 806.454, 1343.411), stdev = 300.168
[info]   CI (99.9%): [≈ 0, 1962.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2882.653 ±(99.9%) 4324.306 B/op [Average]
[info]   (min, avg, max) = (2357.027, 2882.653, 4890.314), stdev = 1123.008
[info]   CI (99.9%): [≈ 0, 7206.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67817.911 ops/s
[info] # Warmup Iteration   2: 110365.810 ops/s
[info] # Warmup Iteration   3: 110068.765 ops/s
[info] # Warmup Iteration   4: 111219.489 ops/s
[info] # Warmup Iteration   5: 111262.984 ops/s
[info] Iteration   1: 111608.429 ops/s
[info]                  ·gc.alloc.rate:                   4040.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4075.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57476.101 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 111191.339 ops/s
[info]                  ·gc.alloc.rate:                   4025.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4080.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57767.055 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 111096.195 ops/s
[info]                  ·gc.alloc.rate:                   4022.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57865.225 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 111209.885 ops/s
[info]                  ·gc.alloc.rate:                   4027.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57836.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 111439.317 ops/s
[info]                  ·gc.alloc.rate:                   4035.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4089.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57743.601 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   111309.033 ±(99.9%) 806.787 ops/s [Average]
[info]   (min, avg, max) = (111096.195, 111309.033, 111608.429), stdev = 209.520
[info]   CI (99.9%): [110502.246, 112115.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4030.161 ±(99.9%) 29.969 MB/sec [Average]
[info]   (min, avg, max) = (4022.037, 4030.161, 4040.969), stdev = 7.783
[info]   CI (99.9%): [4000.192, 4060.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.004), stdev = 0.001
[info]   CI (99.9%): [56984.003, 56984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.118 ±(99.9%) 0.944 B/op [Average]
[info]   (min, avg, max) = (0.882, 1.118, 1.468), stdev = 0.245
[info]   CI (99.9%): [0.175, 2.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   4083.447 ±(99.9%) 20.546 MB/sec [Average]
[info]   (min, avg, max) = (4075.866, 4083.447, 4089.133), stdev = 5.336
[info]   CI (99.9%): [4062.901, 4103.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57737.652 ±(99.9%) 594.396 B/op [Average]
[info]   (min, avg, max) = (57476.101, 57737.652, 57865.225), stdev = 154.363
[info]   CI (99.9%): [57143.257, 58332.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258285.307 ops/s
[info] # Warmup Iteration   2: 313282.210 ops/s
[info] # Warmup Iteration   3: 321660.033 ops/s
[info] # Warmup Iteration   4: 323572.208 ops/s
[info] # Warmup Iteration   5: 324880.793 ops/s
[info] Iteration   1: 324750.841 ops/s
[info]                  ·gc.alloc.rate:                   495.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2479.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 324933.829 ops/s
[info]                  ·gc.alloc.rate:                   495.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2477.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 322597.754 ops/s
[info]                  ·gc.alloc.rate:                   491.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3288.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 325747.394 ops/s
[info]                  ·gc.alloc.rate:                   496.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3257.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 325789.268 ops/s
[info]                  ·gc.alloc.rate:      496.745 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   324763.817 ±(99.9%) 4998.380 ops/s [Average]
[info]   (min, avg, max) = (322597.754, 324763.817, 325789.268), stdev = 1298.063
[info]   CI (99.9%): [319765.438, 329762.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   495.202 ±(99.9%) 7.644 MB/sec [Average]
[info]   (min, avg, max) = (491.915, 495.202, 496.786), stdev = 1.985
[info]   CI (99.9%): [487.558, 502.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.001), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.703 ±(99.9%) 5.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 3.475), stdev = 1.549
[info]   CI (99.9%): [≈ 0, 6.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.431 ±(99.9%) 29.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.431, 16.953), stdev = 7.559
[info]   CI (99.9%): [≈ 0, 32.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.265 ±(99.9%) 1067.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.265, 674.200), stdev = 277.312
[info]   CI (99.9%): [≈ 0, 1542.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2300.651 ±(99.9%) 5183.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2300.651, 3288.824), stdev = 1346.073
[info]   CI (99.9%): [≈ 0, 7483.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445956.003 ops/s
[info] # Warmup Iteration   2: 691196.124 ops/s
[info] # Warmup Iteration   3: 691526.637 ops/s
[info] # Warmup Iteration   4: 722578.325 ops/s
[info] # Warmup Iteration   5: 722573.851 ops/s
[info] Iteration   1: 722651.881 ops/s
[info]                  ·gc.alloc.rate:                   529.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1114.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 720076.962 ops/s
[info]                  ·gc.alloc.rate:                   527.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1472.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 723679.448 ops/s
[info]                  ·gc.alloc.rate:                   529.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1465.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 722924.970 ops/s
[info]                  ·gc.alloc.rate:                   529.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1469.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 725296.159 ops/s
[info]                  ·gc.alloc.rate:      530.808 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   722925.884 ±(99.9%) 7300.372 ops/s [Average]
[info]   (min, avg, max) = (720076.962, 722925.884, 725296.159), stdev = 1895.883
[info]   CI (99.9%): [715625.512, 730226.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   529.121 ±(99.9%) 5.185 MB/sec [Average]
[info]   (min, avg, max) = (527.080, 529.121, 530.808), stdev = 1.346
[info]   CI (99.9%): [523.936, 534.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.271), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.136 ±(99.9%) 0.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.591), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.770 ±(99.9%) 1123.960 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.770, 674.707), stdev = 291.889
[info]   CI (99.9%): [≈ 0, 1630.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1104.268 ±(99.9%) 2449.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1104.268, 1472.709), stdev = 636.145
[info]   CI (99.9%): [≈ 0, 3553.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1973523.372 ops/s
[info] # Warmup Iteration   2: 2190488.526 ops/s
[info] # Warmup Iteration   3: 1945899.877 ops/s
[info] # Warmup Iteration   4: 1989833.954 ops/s
[info] # Warmup Iteration   5: 2008492.651 ops/s
[info] Iteration   1: 2005347.052 ops/s
[info]                  ·gc.alloc.rate:                   927.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2005947.701 ops/s
[info]                  ·gc.alloc.rate:                   927.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1055.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2007321.597 ops/s
[info]                  ·gc.alloc.rate:                   928.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.975 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2006803.196 ops/s
[info]                  ·gc.alloc.rate:                   928.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2007752.108 ops/s
[info]                  ·gc.alloc.rate:                   928.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2006634.331 ±(99.9%) 3791.870 ops/s [Average]
[info]   (min, avg, max) = (2005347.052, 2006634.331, 2007752.108), stdev = 984.737
[info]   CI (99.9%): [2002842.461, 2010426.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   928.094 ±(99.9%) 1.885 MB/sec [Average]
[info]   (min, avg, max) = (927.416, 928.094, 928.567), stdev = 0.490
[info]   CI (99.9%): [926.209, 929.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.098), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.880 ±(99.9%) 1416.254 MB/sec [Average]
[info]   (min, avg, max) = (672.022, 940.880, 1344.820), stdev = 367.797
[info]   CI (99.9%): [≈ 0, 2357.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   738.056 ±(99.9%) 1111.285 B/op [Average]
[info]   (min, avg, max) = (526.889, 738.056, 1055.207), stdev = 288.597
[info]   CI (99.9%): [≈ 0, 1849.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2230286.313 ops/s
[info] # Warmup Iteration   2: 2397073.903 ops/s
[info] # Warmup Iteration   3: 2382622.454 ops/s
[info] # Warmup Iteration   4: 2390260.595 ops/s
[info] # Warmup Iteration   5: 2388906.832 ops/s
[info] Iteration   1: 2306896.651 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2395273.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2396608.953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2373153.236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2394904.568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2373367.305 ±(99.9%) 147915.435 ops/s [Average]
[info]   (min, avg, max) = (2306896.651, 2373367.305, 2396608.953), stdev = 38413.169
[info]   CI (99.9%): [2225451.870, 2521282.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318494.491 ops/s
[info] # Warmup Iteration   2: 378817.135 ops/s
[info] # Warmup Iteration   3: 382278.010 ops/s
[info] # Warmup Iteration   4: 383830.975 ops/s
[info] # Warmup Iteration   5: 383842.494 ops/s
[info] Iteration   1: 384253.136 ops/s
[info]                  ·gc.alloc.rate:                   552.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2095.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 383844.436 ops/s
[info]                  ·gc.alloc.rate:                   552.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2761.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 385073.530 ops/s
[info]                  ·gc.alloc.rate:                   553.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2752.718 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 385119.521 ops/s
[info]                  ·gc.alloc.rate:      553.958 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 384922.003 ops/s
[info]                  ·gc.alloc.rate:                   553.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2742.846 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   384642.525 ±(99.9%) 2178.227 ops/s [Average]
[info]   (min, avg, max) = (383844.436, 384642.525, 385119.521), stdev = 565.679
[info]   CI (99.9%): [382464.299, 386820.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   553.280 ±(99.9%) 3.151 MB/sec [Average]
[info]   (min, avg, max) = (552.086, 553.280, 553.958), stdev = 0.818
[info]   CI (99.9%): [550.129, 556.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.810 ±(99.9%) 6.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.992), stdev = 1.778
[info]   CI (99.9%): [≈ 0, 7.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.323 ±(99.9%) 28.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.323, 16.369), stdev = 7.293
[info]   CI (99.9%): [≈ 0, 31.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.855 ±(99.9%) 1121.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.855, 673.466), stdev = 291.243
[info]   CI (99.9%): [≈ 0, 1627.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2070.499 ±(99.9%) 4589.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2070.499, 2761.509), stdev = 1191.906
[info]   CI (99.9%): [≈ 0, 6660.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37898.030 ops/s
[info] # Warmup Iteration   2: 48623.653 ops/s
[info] # Warmup Iteration   3: 49181.045 ops/s
[info] # Warmup Iteration   4: 49816.452 ops/s
[info] # Warmup Iteration   5: 49767.413 ops/s
[info] Iteration   1: 50082.895 ops/s
[info]                  ·gc.alloc.rate:                   1688.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42210.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 49892.111 ops/s
[info]                  ·gc.alloc.rate:                   1681.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63600.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 50038.456 ops/s
[info]                  ·gc.alloc.rate:                   1686.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42324.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 49769.176 ops/s
[info]                  ·gc.alloc.rate:                   1677.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63946.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 50077.844 ops/s
[info]                  ·gc.alloc.rate:                   1687.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42414.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   49972.096 ±(99.9%) 528.804 ops/s [Average]
[info]   (min, avg, max) = (49769.176, 49972.096, 50082.895), stdev = 137.329
[info]   CI (99.9%): [49443.292, 50500.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1684.099 ±(99.9%) 18.359 MB/sec [Average]
[info]   (min, avg, max) = (1677.092, 1684.099, 1688.062), stdev = 4.768
[info]   CI (99.9%): [1665.740, 1702.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (53040.008, 53040.008, 53040.009), stdev = 0.001
[info]   CI (99.9%): [53040.007, 53040.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.050 ±(99.9%) 4.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.050, 2.627), stdev = 1.099
[info]   CI (99.9%): [≈ 0, 5.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.325 ±(99.9%) 1418.861 MB/sec [Average]
[info]   (min, avg, max) = (1343.402, 1615.325, 2021.959), stdev = 368.474
[info]   CI (99.9%): [196.463, 3034.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   50899.259 ±(99.9%) 45257.842 B/op [Average]
[info]   (min, avg, max) = (42210.558, 50899.259, 63946.810), stdev = 11753.318
[info]   CI (99.9%): [5641.417, 96157.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47873.228 ops/s
[info] # Warmup Iteration   2: 86219.322 ops/s
[info] # Warmup Iteration   3: 86670.183 ops/s
[info] # Warmup Iteration   4: 87405.089 ops/s
[info] # Warmup Iteration   5: 87485.240 ops/s
[info] Iteration   1: 87181.388 ops/s
[info]                  ·gc.alloc.rate:                   1567.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36629.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 87226.707 ops/s
[info]                  ·gc.alloc.rate:                   1568.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24428.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 86856.512 ops/s
[info]                  ·gc.alloc.rate:                   1561.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24550.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 87462.579 ops/s
[info]                  ·gc.alloc.rate:                   1572.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36601.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 87561.595 ops/s
[info]                  ·gc.alloc.rate:                   1574.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24401.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   87257.756 ±(99.9%) 1058.163 ops/s [Average]
[info]   (min, avg, max) = (86856.512, 87257.756, 87561.595), stdev = 274.802
[info]   CI (99.9%): [86199.593, 88315.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1569.073 ±(99.9%) 19.132 MB/sec [Average]
[info]   (min, avg, max) = (1561.781, 1569.073, 1574.429), stdev = 4.968
[info]   CI (99.9%): [1549.941, 1588.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28304.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28304.005, 28304.005, 28304.005), stdev = 0.001
[info]   CI (99.9%): [28304.004, 28304.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.525 ±(99.9%) 1.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.525, 1.127), stdev = 0.428
[info]   CI (99.9%): [≈ 0, 2.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.716 ±(99.9%) 1425.941 MB/sec [Average]
[info]   (min, avg, max) = (1353.823, 1625.716, 2034.000), stdev = 370.312
[info]   CI (99.9%): [199.775, 3051.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29322.214 ±(99.9%) 25637.480 B/op [Average]
[info]   (min, avg, max) = (24401.638, 29322.214, 36629.270), stdev = 6657.972
[info]   CI (99.9%): [3684.734, 54959.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87911.534 ops/s
[info] # Warmup Iteration   2: 99222.186 ops/s
[info] # Warmup Iteration   3: 100386.447 ops/s
[info] # Warmup Iteration   4: 100941.830 ops/s
[info] # Warmup Iteration   5: 101245.832 ops/s
[info] Iteration   1: 100499.813 ops/s
[info]                  ·gc.alloc.rate:                   1541.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31556.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 101074.969 ops/s
[info]                  ·gc.alloc.rate:                   1549.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20936.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 101286.361 ops/s
[info]                  ·gc.alloc.rate:                   1553.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20908.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 101192.549 ops/s
[info]                  ·gc.alloc.rate:                   1551.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20949.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 101072.995 ops/s
[info]                  ·gc.alloc.rate:                   1549.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31497.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   101025.337 ±(99.9%) 1182.159 ops/s [Average]
[info]   (min, avg, max) = (100499.813, 101025.337, 101286.361), stdev = 307.003
[info]   CI (99.9%): [99843.179, 102207.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1549.145 ±(99.9%) 17.926 MB/sec [Average]
[info]   (min, avg, max) = (1541.203, 1549.145, 1553.187), stdev = 4.655
[info]   CI (99.9%): [1531.219, 1567.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.004, 24136.004, 24136.004), stdev = 0.001
[info]   CI (99.9%): [24136.004, 24136.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.520 ±(99.9%) 1.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.520, 1.304), stdev = 0.494
[info]   CI (99.9%): [≈ 0, 2.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1614.853 ±(99.9%) 1419.785 MB/sec [Average]
[info]   (min, avg, max) = (1344.453, 1614.853, 2022.451), stdev = 368.714
[info]   CI (99.9%): [195.068, 3034.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25169.765 ±(99.9%) 22346.095 B/op [Average]
[info]   (min, avg, max) = (20908.381, 25169.765, 31556.592), stdev = 5803.210
[info]   CI (99.9%): [2823.670, 47515.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7980.099 ops/s
[info] # Warmup Iteration   2: 18600.363 ops/s
[info] # Warmup Iteration   3: 18594.786 ops/s
[info] # Warmup Iteration   4: 18538.322 ops/s
[info] # Warmup Iteration   5: 18641.689 ops/s
[info] Iteration   1: 18224.689 ops/s
[info]                  ·gc.alloc.rate:                   1269.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116661.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18648.941 ops/s
[info]                  ·gc.alloc.rate:                   1299.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114066.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 18683.287 ops/s
[info]                  ·gc.alloc.rate:                   1302.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113958.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18692.309 ops/s
[info]                  ·gc.alloc.rate:                   1302.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114028.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18710.464 ops/s
[info]                  ·gc.alloc.rate:                   1303.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              109696.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113968.344 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   18591.938 ±(99.9%) 795.204 ops/s [Average]
[info]   (min, avg, max) = (18224.689, 18591.938, 18710.464), stdev = 206.512
[info]   CI (99.9%): [17796.734, 19387.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1295.633 ±(99.9%) 55.579 MB/sec [Average]
[info]   (min, avg, max) = (1269.963, 1295.633, 1303.862), stdev = 14.434
[info]   CI (99.9%): [1240.054, 1351.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109696.024 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (109696.022, 109696.024, 109696.027), stdev = 0.002
[info]   CI (99.9%): [109696.015, 109696.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.780 ±(99.9%) 9.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.780, 5.393), stdev = 2.527
[info]   CI (99.9%): [≈ 0, 11.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1352.681 ±(99.9%) 6.607 MB/sec [Average]
[info]   (min, avg, max) = (1350.607, 1352.681, 1354.643), stdev = 1.716
[info]   CI (99.9%): [1346.073, 1359.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   114536.587 ±(99.9%) 4577.923 B/op [Average]
[info]   (min, avg, max) = (113958.575, 114536.587, 116661.846), stdev = 1188.872
[info]   CI (99.9%): [109958.664, 119114.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71648.578 ops/s
[info] # Warmup Iteration   2: 122225.069 ops/s
[info] # Warmup Iteration   3: 122342.969 ops/s
[info] # Warmup Iteration   4: 122377.389 ops/s
[info] # Warmup Iteration   5: 122325.257 ops/s
[info] Iteration   1: 122199.690 ops/s
[info]                  ·gc.alloc.rate:                   1125.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17391.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 122269.440 ops/s
[info]                  ·gc.alloc.rate:                   1126.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17394.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 122191.079 ops/s
[info]                  ·gc.alloc.rate:                   1125.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8704.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 122006.421 ops/s
[info]                  ·gc.alloc.rate:                   1123.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17452.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 122312.119 ops/s
[info]                  ·gc.alloc.rate:                   1126.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17425.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   122195.750 ±(99.9%) 450.931 ops/s [Average]
[info]   (min, avg, max) = (122006.421, 122195.750, 122312.119), stdev = 117.105
[info]   CI (99.9%): [121744.819, 122646.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1125.342 ±(99.9%) 3.972 MB/sec [Average]
[info]   (min, avg, max) = (1123.618, 1125.342, 1126.244), stdev = 1.032
[info]   CI (99.9%): [1121.370, 1129.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.004), stdev = 0.001
[info]   CI (99.9%): [14496.003, 14496.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.429 ±(99.9%) 1.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 0.804), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.759 ±(99.9%) 1164.430 MB/sec [Average]
[info]   (min, avg, max) = (675.818, 1216.759, 1353.873), stdev = 302.399
[info]   CI (99.9%): [52.330, 2381.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15673.741 ±(99.9%) 15001.457 B/op [Average]
[info]   (min, avg, max) = (8704.813, 15673.741, 17452.779), stdev = 3895.831
[info]   CI (99.9%): [672.283, 30675.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442672.356 ops/s
[info] # Warmup Iteration   2: 485441.461 ops/s
[info] # Warmup Iteration   3: 484158.926 ops/s
[info] # Warmup Iteration   4: 484531.438 ops/s
[info] # Warmup Iteration   5: 486494.747 ops/s
[info] Iteration   1: 487746.517 ops/s
[info]                  ·gc.alloc.rate:                   537.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1650.712 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 489719.934 ops/s
[info]                  ·gc.alloc.rate:                   540.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2168.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 491750.753 ops/s
[info]                  ·gc.alloc.rate:      542.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 491316.102 ops/s
[info]                  ·gc.alloc.rate:                   541.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2161.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 491397.324 ops/s
[info]                  ·gc.alloc.rate:                   542.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2154.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   490386.126 ±(99.9%) 6432.112 ops/s [Average]
[info]   (min, avg, max) = (487746.517, 490386.126, 491750.753), stdev = 1670.399
[info]   CI (99.9%): [483954.015, 496818.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   540.939 ±(99.9%) 7.292 MB/sec [Average]
[info]   (min, avg, max) = (537.895, 540.939, 542.552), stdev = 1.894
[info]   CI (99.9%): [533.646, 548.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.310), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.167 ±(99.9%) 18.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.167, 10.634), stdev = 4.734
[info]   CI (99.9%): [≈ 0, 20.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.798 ±(99.9%) 1124.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.798, 674.997), stdev = 291.939
[info]   CI (99.9%): [≈ 0, 1630.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1627.155 ±(99.9%) 3604.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1627.155, 2168.682), stdev = 936.143
[info]   CI (99.9%): [≈ 0, 5231.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 486097.487 ops/s
[info] # Warmup Iteration   2: 522647.443 ops/s
[info] # Warmup Iteration   3: 524988.175 ops/s
[info] # Warmup Iteration   4: 526891.994 ops/s
[info] # Warmup Iteration   5: 503595.775 ops/s
[info] Iteration   1: 498435.513 ops/s
[info]                  ·gc.alloc.rate:      5.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 525957.553 ops/s
[info]                  ·gc.alloc.rate:      5.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 524271.442 ops/s
[info]                  ·gc.alloc.rate:      5.329 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 524050.435 ops/s
[info]                  ·gc.alloc.rate:      5.328 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 526077.039 ops/s
[info]                  ·gc.alloc.rate:      5.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   519758.396 ±(99.9%) 46039.328 ops/s [Average]
[info]   (min, avg, max) = (498435.513, 519758.396, 526077.039), stdev = 11956.267
[info]   CI (99.9%): [473719.068, 565797.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.284 ±(99.9%) 0.467 MB/sec [Average]
[info]   (min, avg, max) = (5.067, 5.284, 5.348), stdev = 0.121
[info]   CI (99.9%): [4.817, 5.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11946.143 ops/s
[info] # Warmup Iteration   2: 21038.516 ops/s
[info] # Warmup Iteration   3: 21026.036 ops/s
[info] # Warmup Iteration   4: 21196.713 ops/s
[info] # Warmup Iteration   5: 20222.193 ops/s
[info] Iteration   1: 21152.384 ops/s
[info]                  ·gc.alloc.rate:                   403.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38061.554 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21239.075 ops/s
[info]                  ·gc.alloc.rate:                   405.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37909.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21219.231 ops/s
[info]                  ·gc.alloc.rate:      405.058 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21174.896 ops/s
[info]                  ·gc.alloc.rate:                   404.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50079.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21183.925 ops/s
[info]                  ·gc.alloc.rate:                   404.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50060.633 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21193.902 ±(99.9%) 134.313 ops/s [Average]
[info]   (min, avg, max) = (21152.384, 21193.902, 21239.075), stdev = 34.881
[info]   CI (99.9%): [21059.589, 21328.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   404.629 ±(99.9%) 2.515 MB/sec [Average]
[info]   (min, avg, max) = (403.848, 404.629, 405.508), stdev = 0.653
[info]   CI (99.9%): [402.114, 407.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30048.175 ±(99.9%) 1.340 B/op [Average]
[info]   (min, avg, max) = (30048.019, 30048.175, 30048.798), stdev = 0.348
[info]   CI (99.9%): [30046.835, 30049.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.333), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.260 ±(99.9%) 42.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.260, 24.755), stdev = 10.918
[info]   CI (99.9%): [≈ 0, 47.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   474.150 ±(99.9%) 1067.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.150, 673.930), stdev = 277.194
[info]   CI (99.9%): [≈ 0, 1541.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35222.197 ±(99.9%) 79308.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35222.197, 50079.542), stdev = 20596.148
[info]   CI (99.9%): [≈ 0, 114530.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1285617.270 ops/s
[info] # Warmup Iteration   2: 2232314.855 ops/s
[info] # Warmup Iteration   3: 2312860.602 ops/s
[info] # Warmup Iteration   4: 2288124.683 ops/s
[info] # Warmup Iteration   5: 2309403.657 ops/s
[info] Iteration   1: 2310737.662 ops/s
[info]                  ·gc.alloc.rate:                   3123.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3374.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.737 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2329727.586 ops/s
[info]                  ·gc.alloc.rate:                   3150.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1827.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2320204.906 ops/s
[info]                  ·gc.alloc.rate:                   3136.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.828 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2283715.386 ops/s
[info]                  ·gc.alloc.rate:                   3087.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2339.990 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2304159.636 ops/s
[info]                  ·gc.alloc.rate:                   3114.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1857.368 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2309709.035 ±(99.9%) 67205.304 ops/s [Average]
[info]   (min, avg, max) = (2283715.386, 2309709.035, 2329727.586), stdev = 17453.004
[info]   CI (99.9%): [2242503.732, 2376914.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3122.620 ±(99.9%) 91.228 MB/sec [Average]
[info]   (min, avg, max) = (3087.571, 3122.620, 3150.086), stdev = 23.692
[info]   CI (99.9%): [3031.392, 3213.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2128.000, 2128.000, 2128.000), stdev = 0.001
[info]   CI (99.9%): [2128.000, 2128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.043, 0.057), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3116.564 ±(99.9%) 1421.384 MB/sec [Average]
[info]   (min, avg, max) = (2705.918, 3116.564, 3395.153), stdev = 369.129
[info]   CI (99.9%): [1695.180, 4537.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2124.574 ±(99.9%) 993.898 B/op [Average]
[info]   (min, avg, max) = (1827.948, 2124.574, 2339.990), stdev = 258.112
[info]   CI (99.9%): [1130.676, 3118.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.937 ops/s
[info] # Warmup Iteration   2: 889192.257 ops/s
[info] # Warmup Iteration   3: 912162.480 ops/s
[info] # Warmup Iteration   4: 891805.634 ops/s
[info] # Warmup Iteration   5: 912594.543 ops/s
[info] Iteration   1: 885656.216 ops/s
[info]                  ·gc.alloc.rate:                   562.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 909.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 889657.026 ops/s
[info]                  ·gc.alloc.rate:                   565.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 891156.967 ops/s
[info]                  ·gc.alloc.rate:                   566.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1189.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 892801.464 ops/s
[info]                  ·gc.alloc.rate:                   567.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1184.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 882165.895 ops/s
[info]                  ·gc.alloc.rate:      560.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   888287.514 ±(99.9%) 16660.767 ops/s [Average]
[info]   (min, avg, max) = (882165.895, 888287.514, 892801.464), stdev = 4326.748
[info]   CI (99.9%): [871626.747, 904948.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   564.439 ±(99.9%) 10.517 MB/sec [Average]
[info]   (min, avg, max) = (560.540, 564.439, 567.246), stdev = 2.731
[info]   CI (99.9%): [553.922, 574.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.501 ±(99.9%) 4.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.501, 2.484), stdev = 1.109
[info]   CI (99.9%): [≈ 0, 4.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.886 ±(99.9%) 7.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.886, 4.393), stdev = 1.960
[info]   CI (99.9%): [≈ 0, 8.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.170 ±(99.9%) 1122.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.170, 673.686), stdev = 291.465
[info]   CI (99.9%): [≈ 0, 1628.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   894.962 ±(99.9%) 1982.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 894.962, 1191.400), stdev = 514.731
[info]   CI (99.9%): [≈ 0, 2877.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36141.378 ops/s
[info] # Warmup Iteration   2: 305837.478 ops/s
[info] # Warmup Iteration   3: 300220.121 ops/s
[info] # Warmup Iteration   4: 294172.801 ops/s
[info] # Warmup Iteration   5: 307842.108 ops/s
[info] Iteration   1: 308868.092 ops/s
[info]                  ·gc.alloc.rate:                   588.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              3000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2606.861 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 308383.912 ops/s
[info]                  ·gc.alloc.rate:                   587.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              3000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3438.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 310452.817 ops/s
[info]                  ·gc.alloc.rate:                   591.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              3000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3415.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 309160.499 ops/s
[info]                  ·gc.alloc.rate:                   589.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              3000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3435.230 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 309493.961 ops/s
[info]                  ·gc.alloc.rate:                   589.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              3000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3431.357 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   309271.856 ±(99.9%) 2987.581 ops/s [Average]
[info]   (min, avg, max) = (308383.912, 309271.856, 310452.817), stdev = 775.865
[info]   CI (99.9%): [306284.275, 312259.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   589.440 ±(99.9%) 5.719 MB/sec [Average]
[info]   (min, avg, max) = (587.773, 589.440, 591.709), stdev = 1.485
[info]   CI (99.9%): [583.721, 595.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3000.001, 3000.001, 3000.001), stdev = 0.001
[info]   CI (99.9%): [3000.001, 3000.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.229), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.276 ±(99.9%) 1.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 1.169), stdev = 0.502
[info]   CI (99.9%): [≈ 0, 2.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   641.666 ±(99.9%) 280.233 MB/sec [Average]
[info]   (min, avg, max) = (511.484, 641.666, 674.714), stdev = 72.776
[info]   CI (99.9%): [361.433, 921.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3265.599 ±(99.9%) 1418.386 B/op [Average]
[info]   (min, avg, max) = (2606.861, 3265.599, 3438.785), stdev = 368.350
[info]   CI (99.9%): [1847.213, 4683.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 710875.221 ops/s
[info] # Warmup Iteration   2: 782115.083 ops/s
[info] # Warmup Iteration   3: 777918.016 ops/s
[info] # Warmup Iteration   4: 786996.652 ops/s
[info] # Warmup Iteration   5: 789370.206 ops/s
[info] Iteration   1: 790998.360 ops/s
[info]                  ·gc.alloc.rate:                   595.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 765662.141 ops/s
[info]                  ·gc.alloc.rate:                   576.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1387.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 796862.138 ops/s
[info]                  ·gc.alloc.rate:                   599.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1332.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 795214.354 ops/s
[info]                  ·gc.alloc.rate:                   598.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1331.590 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 794937.103 ops/s
[info]                  ·gc.alloc.rate:                   598.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1332.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   788734.819 ±(99.9%) 50352.898 ops/s [Average]
[info]   (min, avg, max) = (765662.141, 788734.819, 796862.138), stdev = 13076.488
[info]   CI (99.9%): [738381.922, 839087.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   593.402 ±(99.9%) 37.736 MB/sec [Average]
[info]   (min, avg, max) = (576.095, 593.402, 599.461), stdev = 9.800
[info]   CI (99.9%): [555.666, 631.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.661 ±(99.9%) 5.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.661, 3.219), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 6.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.356 ±(99.9%) 11.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.356, 6.617), stdev = 2.941
[info]   CI (99.9%): [≈ 0, 12.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.395 ±(99.9%) 279.175 MB/sec [Average]
[info]   (min, avg, max) = (511.714, 641.395, 674.881), stdev = 72.501
[info]   CI (99.9%): [362.220, 920.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1280.270 ±(99.9%) 572.099 B/op [Average]
[info]   (min, avg, max) = (1017.920, 1280.270, 1387.029), stdev = 148.572
[info]   CI (99.9%): [708.171, 1852.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4107345.755 ops/s
[info] # Warmup Iteration   2: 4329968.659 ops/s
[info] # Warmup Iteration   3: 4444516.233 ops/s
[info] # Warmup Iteration   4: 4362142.686 ops/s
[info] # Warmup Iteration   5: 4457117.088 ops/s
[info] Iteration   1: 4447778.167 ops/s
[info]                  ·gc.alloc.rate:                   1424.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 713.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4466622.197 ops/s
[info]                  ·gc.alloc.rate:                   1430.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4457581.161 ops/s
[info]                  ·gc.alloc.rate:                   1427.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 475.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4463405.426 ops/s
[info]                  ·gc.alloc.rate:                   1429.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4462320.985 ops/s
[info]                  ·gc.alloc.rate:                   1428.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 475.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4459541.587 ±(99.9%) 28231.461 ops/s [Average]
[info]   (min, avg, max) = (4447778.167, 4459541.587, 4466622.197), stdev = 7331.621
[info]   CI (99.9%): [4431310.126, 4487773.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1428.014 ±(99.9%) 9.126 MB/sec [Average]
[info]   (min, avg, max) = (1424.047, 1428.014, 1430.210), stdev = 2.370
[info]   CI (99.9%): [1418.889, 1437.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.026, 0.037), stdev = 0.007
[info]   CI (99.9%): [0.001, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1480.192 ±(99.9%) 1153.430 MB/sec [Average]
[info]   (min, avg, max) = (1344.136, 1480.192, 2016.023), stdev = 299.542
[info]   CI (99.9%): [326.762, 2633.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   522.548 ±(99.9%) 411.074 B/op [Average]
[info]   (min, avg, max) = (473.668, 522.548, 713.513), stdev = 106.755
[info]   CI (99.9%): [111.474, 933.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8462434.222 ops/s
[info] # Warmup Iteration   2: 8977092.455 ops/s
[info] # Warmup Iteration   3: 8939178.249 ops/s
[info] # Warmup Iteration   4: 9306390.831 ops/s
[info] # Warmup Iteration   5: 9239995.177 ops/s
[info] Iteration   1: 9347686.287 ops/s
[info]                  ·gc.alloc.rate:                   760.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9290820.749 ops/s
[info]                  ·gc.alloc.rate:                   755.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 9384597.111 ops/s
[info]                  ·gc.alloc.rate:                   763.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9379016.954 ops/s
[info]                  ·gc.alloc.rate:                   762.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 9367901.743 ops/s
[info]                  ·gc.alloc.rate:                   761.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9354004.569 ±(99.9%) 146460.829 ops/s [Average]
[info]   (min, avg, max) = (9290820.749, 9354004.569, 9384597.111), stdev = 38035.412
[info]   CI (99.9%): [9207543.740, 9500465.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   760.655 ±(99.9%) 12.023 MB/sec [Average]
[info]   (min, avg, max) = (755.477, 760.655, 763.140), stdev = 3.122
[info]   CI (99.9%): [748.632, 772.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   672.837 ±(99.9%) 4.083 MB/sec [Average]
[info]   (min, avg, max) = (672.016, 672.837, 674.652), stdev = 1.060
[info]   CI (99.9%): [668.755, 676.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   113.224 ±(99.9%) 2.071 B/op [Average]
[info]   (min, avg, max) = (112.785, 113.224, 113.973), stdev = 0.538
[info]   CI (99.9%): [111.153, 115.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21481.435 ops/s
[info] # Warmup Iteration   2: 187748.789 ops/s
[info] # Warmup Iteration   3: 188224.695 ops/s
[info] # Warmup Iteration   4: 193939.586 ops/s
[info] # Warmup Iteration   5: 194361.166 ops/s
[info] Iteration   1: 193784.770 ops/s
[info]                  ·gc.alloc.rate:                   1309.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10971.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 194462.568 ops/s
[info]                  ·gc.alloc.rate:                   1314.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10944.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 194062.625 ops/s
[info]                  ·gc.alloc.rate:                   1311.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10971.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 194573.959 ops/s
[info]                  ·gc.alloc.rate:                   1315.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10954.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 194243.048 ops/s
[info]                  ·gc.alloc.rate:                   1313.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5489.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   194225.394 ±(99.9%) 1215.706 ops/s [Average]
[info]   (min, avg, max) = (193784.770, 194225.394, 194573.959), stdev = 315.715
[info]   CI (99.9%): [193009.688, 195441.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1312.910 ±(99.9%) 8.326 MB/sec [Average]
[info]   (min, avg, max) = (1309.828, 1312.910, 1315.293), stdev = 2.162
[info]   CI (99.9%): [1304.584, 1321.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10640.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10640.002, 10640.002, 10640.002), stdev = 0.001
[info]   CI (99.9%): [10640.002, 10640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.270 ±(99.9%) 0.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 0.674), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.415 ±(99.9%) 1162.261 MB/sec [Average]
[info]   (min, avg, max) = (677.480, 1217.415, 1354.156), stdev = 301.835
[info]   CI (99.9%): [55.155, 2379.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9866.337 ±(99.9%) 9422.124 B/op [Average]
[info]   (min, avg, max) = (5489.248, 9866.337, 10971.962), stdev = 2446.896
[info]   CI (99.9%): [444.214, 19288.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 887915.188 ops/s
[info] # Warmup Iteration   2: 934663.574 ops/s
[info] # Warmup Iteration   3: 936205.636 ops/s
[info] # Warmup Iteration   4: 935540.982 ops/s
[info] # Warmup Iteration   5: 936137.703 ops/s
[info] Iteration   1: 935230.721 ops/s
[info]                  ·gc.alloc.rate:      52.291 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 936384.141 ops/s
[info]                  ·gc.alloc.rate:      52.347 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 935825.555 ops/s
[info]                  ·gc.alloc.rate:      52.316 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 935787.028 ops/s
[info]                  ·gc.alloc.rate:      52.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 920592.855 ops/s
[info]                  ·gc.alloc.rate:                   51.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              88.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874.621 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   932764.060 ±(99.9%) 26246.504 ops/s [Average]
[info]   (min, avg, max) = (920592.855, 932764.060, 936384.141), stdev = 6816.134
[info]   CI (99.9%): [906517.556, 959010.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   52.148 ±(99.9%) 1.468 MB/sec [Average]
[info]   (min, avg, max) = (51.467, 52.148, 52.347), stdev = 0.381
[info]   CI (99.9%): [50.680, 53.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.304 ±(99.9%) 880.868 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.304, 511.520), stdev = 228.759
[info]   CI (99.9%): [≈ 0, 983.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   174.924 ±(99.9%) 1506.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 174.924, 874.621), stdev = 391.142
[info]   CI (99.9%): [≈ 0, 1681.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31162.082 ops/s
[info] # Warmup Iteration   2: 62999.391 ops/s
[info] # Warmup Iteration   3: 63000.970 ops/s
[info] # Warmup Iteration   4: 64649.924 ops/s
[info] # Warmup Iteration   5: 63995.416 ops/s
[info] Iteration   1: 64736.989 ops/s
[info]                  ·gc.alloc.rate:                   3007.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65992.482 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 64636.685 ops/s
[info]                  ·gc.alloc.rate:                   3002.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66176.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 64026.098 ops/s
[info]                  ·gc.alloc.rate:                   2974.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83591.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 64657.239 ops/s
[info]                  ·gc.alloc.rate:                   3003.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66269.718 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 64553.420 ops/s
[info]                  ·gc.alloc.rate:                   2998.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82987.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   64522.086 ±(99.9%) 1096.874 ops/s [Average]
[info]   (min, avg, max) = (64026.098, 64522.086, 64736.989), stdev = 284.855
[info]   CI (99.9%): [63425.212, 65618.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2997.369 ±(99.9%) 50.305 MB/sec [Average]
[info]   (min, avg, max) = (2974.702, 2997.369, 3007.331), stdev = 13.064
[info]   CI (99.9%): [2947.064, 3047.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.006, 73120.006, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.005, 73120.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.625 ±(99.9%) 2.905 B/op [Average]
[info]   (min, avg, max) = (0.508, 1.625, 2.534), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 4.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2991.562 ±(99.9%) 1442.404 MB/sec [Average]
[info]   (min, avg, max) = (2714.185, 2991.562, 3403.051), stdev = 374.588
[info]   CI (99.9%): [1549.158, 4433.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73003.580 ±(99.9%) 36167.913 B/op [Average]
[info]   (min, avg, max) = (65992.482, 73003.580, 83591.993), stdev = 9392.692
[info]   CI (99.9%): [36835.668, 109171.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730324.689 ops/s
[info] # Warmup Iteration   2: 1063466.332 ops/s
[info] # Warmup Iteration   3: 1059676.231 ops/s
[info] # Warmup Iteration   4: 1076219.170 ops/s
[info] # Warmup Iteration   5: 1075565.034 ops/s
[info] Iteration   1: 1068844.582 ops/s
[info]                  ·gc.alloc.rate:                   614.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 992.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1075855.250 ops/s
[info]                  ·gc.alloc.rate:                   617.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 985.687 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1076302.333 ops/s
[info]                  ·gc.alloc.rate:                   618.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 986.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1076427.285 ops/s
[info]                  ·gc.alloc.rate:                   618.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 986.628 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1075001.266 ops/s
[info]                  ·gc.alloc.rate:                   617.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 988.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1074486.143 ±(99.9%) 12333.126 ops/s [Average]
[info]   (min, avg, max) = (1068844.582, 1074486.143, 1076427.285), stdev = 3202.874
[info]   CI (99.9%): [1062153.018, 1086819.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   617.241 ±(99.9%) 6.971 MB/sec [Average]
[info]   (min, avg, max) = (614.078, 617.241, 618.471), stdev = 1.810
[info]   CI (99.9%): [610.271, 624.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.187), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.086 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.276), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.612 ±(99.9%) 2.676 MB/sec [Average]
[info]   (min, avg, max) = (673.807, 674.612, 675.445), stdev = 0.695
[info]   CI (99.9%): [671.937, 677.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   988.031 ±(99.9%) 10.063 B/op [Average]
[info]   (min, avg, max) = (985.687, 988.031, 992.191), stdev = 2.613
[info]   CI (99.9%): [977.968, 998.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679225.119 ops/s
[info] # Warmup Iteration   2: 692146.401 ops/s
[info] # Warmup Iteration   3: 666309.537 ops/s
[info] # Warmup Iteration   4: 693555.360 ops/s
[info] # Warmup Iteration   5: 692921.909 ops/s
[info] Iteration   1: 684997.525 ops/s
[info]                  ·gc.alloc.rate:                   191.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1175.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 692979.854 ops/s
[info]                  ·gc.alloc.rate:      193.717 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687548.168 ops/s
[info]                  ·gc.alloc.rate:                   192.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1171.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 693502.106 ops/s
[info]                  ·gc.alloc.rate:      193.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 693140.543 ops/s
[info]                  ·gc.alloc.rate:      193.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   690433.639 ±(99.9%) 15049.973 ops/s [Average]
[info]   (min, avg, max) = (684997.525, 690433.639, 693502.106), stdev = 3908.430
[info]   CI (99.9%): [675383.667, 705483.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   192.993 ±(99.9%) 4.212 MB/sec [Average]
[info]   (min, avg, max) = (191.473, 192.993, 193.845), stdev = 1.094
[info]   CI (99.9%): [188.781, 197.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.001, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.604 ±(99.9%) 1078.818 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.604, 511.514), stdev = 280.166
[info]   CI (99.9%): [≈ 0, 1283.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   469.308 ±(99.9%) 2474.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 469.308, 1175.450), stdev = 642.628
[info]   CI (99.9%): [≈ 0, 2943.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 875598.002 ops/s
[info] # Warmup Iteration   2: 920613.160 ops/s
[info] # Warmup Iteration   3: 922705.810 ops/s
[info] # Warmup Iteration   4: 922250.124 ops/s
[info] # Warmup Iteration   5: 922752.831 ops/s
[info] Iteration   1: 923071.030 ops/s
[info]                  ·gc.alloc.rate:      9.382 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 923023.926 ops/s
[info]                  ·gc.alloc.rate:      9.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 922438.682 ops/s
[info]                  ·gc.alloc.rate:      9.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 923083.636 ops/s
[info]                  ·gc.alloc.rate:      9.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 922430.238 ops/s
[info]                  ·gc.alloc.rate:      9.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   922809.502 ±(99.9%) 1321.158 ops/s [Average]
[info]   (min, avg, max) = (922430.238, 922809.502, 923083.636), stdev = 343.101
[info]   CI (99.9%): [921488.344, 924130.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.381 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (9.376, 9.381, 9.386), stdev = 0.004
[info]   CI (99.9%): [9.365, 9.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24157.216 ops/s
[info] # Warmup Iteration   2: 46362.809 ops/s
[info] # Warmup Iteration   3: 46451.349 ops/s
[info] # Warmup Iteration   4: 46358.933 ops/s
[info] # Warmup Iteration   5: 46058.837 ops/s
[info] Iteration   1: 46634.388 ops/s
[info]                  ·gc.alloc.rate:                   1973.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68531.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 46597.694 ops/s
[info]                  ·gc.alloc.rate:                   1971.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68687.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 46604.192 ops/s
[info]                  ·gc.alloc.rate:                   1972.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68744.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 46636.762 ops/s
[info]                  ·gc.alloc.rate:                   1973.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68745.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46773.315 ops/s
[info]                  ·gc.alloc.rate:                   1979.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68588.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   46649.270 ±(99.9%) 275.377 ops/s [Average]
[info]   (min, avg, max) = (46597.694, 46649.270, 46773.315), stdev = 71.515
[info]   CI (99.9%): [46373.893, 46924.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1973.815 ±(99.9%) 11.746 MB/sec [Average]
[info]   (min, avg, max) = (1971.576, 1973.815, 1979.122), stdev = 3.050
[info]   CI (99.9%): [1962.069, 1985.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66600.009, 66600.009, 66600.009), stdev = 0.001
[info]   CI (99.9%): [66600.008, 66600.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.528 ±(99.9%) 4.530 B/op [Average]
[info]   (min, avg, max) = (0.703, 2.528, 3.515), stdev = 1.176
[info]   CI (99.9%): [≈ 0, 7.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2034.845 ±(99.9%) 11.761 MB/sec [Average]
[info]   (min, avg, max) = (2030.402, 2034.845, 2038.216), stdev = 3.054
[info]   CI (99.9%): [2023.084, 2046.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68659.334 ±(99.9%) 368.810 B/op [Average]
[info]   (min, avg, max) = (68531.514, 68659.334, 68745.078), stdev = 95.779
[info]   CI (99.9%): [68290.523, 69028.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228042.265 ops/s
[info] # Warmup Iteration   2: 252565.144 ops/s
[info] # Warmup Iteration   3: 246143.235 ops/s
[info] # Warmup Iteration   4: 252671.271 ops/s
[info] # Warmup Iteration   5: 253540.221 ops/s
[info] Iteration   1: 253152.184 ops/s
[info]                  ·gc.alloc.rate:                   990.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8365.780 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 253419.446 ops/s
[info]                  ·gc.alloc.rate:                   991.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4170.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 253121.777 ops/s
[info]                  ·gc.alloc.rate:                   990.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8350.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 253507.349 ops/s
[info]                  ·gc.alloc.rate:                   992.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4168.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 252265.279 ops/s
[info]                  ·gc.alloc.rate:                   987.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8382.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   253093.207 ±(99.9%) 1893.977 ops/s [Average]
[info]   (min, avg, max) = (252265.279, 253093.207, 253507.349), stdev = 491.860
[info]   CI (99.9%): [251199.230, 254987.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   990.549 ±(99.9%) 7.064 MB/sec [Average]
[info]   (min, avg, max) = (987.515, 990.549, 992.167), stdev = 1.835
[info]   CI (99.9%): [983.485, 997.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 0.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.388), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.998 ±(99.9%) 1418.525 MB/sec [Average]
[info]   (min, avg, max) = (671.446, 1074.998, 1345.467), stdev = 368.386
[info]   CI (99.9%): [≈ 0, 2493.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6687.628 ±(99.9%) 8851.563 B/op [Average]
[info]   (min, avg, max) = (4168.762, 6687.628, 8382.889), stdev = 2298.723
[info]   CI (99.9%): [≈ 0, 15539.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10690.117 ops/s
[info] # Warmup Iteration   2: 27273.868 ops/s
[info] # Warmup Iteration   3: 27190.176 ops/s
[info] # Warmup Iteration   4: 27422.986 ops/s
[info] # Warmup Iteration   5: 26869.432 ops/s
[info] Iteration   1: 27432.736 ops/s
[info]                  ·gc.alloc.rate:                   1497.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77537.837 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27231.929 ops/s
[info]                  ·gc.alloc.rate:                   1486.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78189.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27470.288 ops/s
[info]                  ·gc.alloc.rate:                   1499.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77586.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27522.120 ops/s
[info]                  ·gc.alloc.rate:                   1502.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77483.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27461.042 ops/s
[info]                  ·gc.alloc.rate:                   1499.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              85936.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116616.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   27423.623 ±(99.9%) 430.984 ops/s [Average]
[info]   (min, avg, max) = (27231.929, 27423.623, 27522.120), stdev = 111.925
[info]   CI (99.9%): [26992.639, 27854.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1497.252 ±(99.9%) 23.710 MB/sec [Average]
[info]   (min, avg, max) = (1486.723, 1497.252, 1502.710), stdev = 6.157
[info]   CI (99.9%): [1473.542, 1520.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85936.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85936.015, 85936.015, 85936.016), stdev = 0.001
[info]   CI (99.9%): [85936.013, 85936.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.625 ±(99.9%) 10.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.625, 5.963), stdev = 2.721
[info]   CI (99.9%): [≈ 0, 13.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.533 ±(99.9%) 1173.536 MB/sec [Average]
[info]   (min, avg, max) = (1351.321, 1489.533, 2034.706), stdev = 304.764
[info]   CI (99.9%): [315.997, 2663.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85482.730 ±(99.9%) 67027.062 B/op [Average]
[info]   (min, avg, max) = (77483.237, 85482.730, 116616.617), stdev = 17406.715
[info]   CI (99.9%): [18455.668, 152509.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80236.755 ops/s
[info] # Warmup Iteration   2: 138883.302 ops/s
[info] # Warmup Iteration   3: 140333.513 ops/s
[info] # Warmup Iteration   4: 140271.118 ops/s
[info] # Warmup Iteration   5: 139757.388 ops/s
[info] Iteration   1: 139895.178 ops/s
[info]                  ·gc.alloc.rate:                   1709.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22822.662 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 140267.263 ops/s
[info]                  ·gc.alloc.rate:                   1714.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15195.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 140085.028 ops/s
[info]                  ·gc.alloc.rate:                   1711.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22841.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 140140.296 ops/s
[info]                  ·gc.alloc.rate:                   1712.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22854.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 139969.391 ops/s
[info]                  ·gc.alloc.rate:                   1710.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15264.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   140071.431 ±(99.9%) 560.513 ops/s [Average]
[info]   (min, avg, max) = (139895.178, 140071.431, 140267.263), stdev = 145.563
[info]   CI (99.9%): [139510.918, 140631.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1711.464 ±(99.9%) 7.765 MB/sec [Average]
[info]   (min, avg, max) = (1709.188, 1711.464, 1714.413), stdev = 2.016
[info]   CI (99.9%): [1703.699, 1719.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19232.003, 19232.003, 19232.003), stdev = 0.001
[info]   CI (99.9%): [19232.003, 19232.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.328 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (0.234, 0.328, 0.468), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1761.511 ±(99.9%) 1425.648 MB/sec [Average]
[info]   (min, avg, max) = (1354.561, 1761.511, 2034.674), stdev = 370.236
[info]   CI (99.9%): [335.863, 3187.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19795.795 ±(99.9%) 16049.470 B/op [Average]
[info]   (min, avg, max) = (15195.237, 19795.795, 22854.817), stdev = 4167.997
[info]   CI (99.9%): [3746.325, 35845.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318957.502 ops/s
[info] # Warmup Iteration   2: 343593.108 ops/s
[info] # Warmup Iteration   3: 353330.343 ops/s
[info] # Warmup Iteration   4: 353937.490 ops/s
[info] # Warmup Iteration   5: 349275.173 ops/s
[info] Iteration   1: 353483.469 ops/s
[info]                  ·gc.alloc.rate:                   1683.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8974.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 354046.989 ops/s
[info]                  ·gc.alloc.rate:                   1686.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5978.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 354377.009 ops/s
[info]                  ·gc.alloc.rate:                   1687.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8971.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 354218.065 ops/s
[info]                  ·gc.alloc.rate:                   1686.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5990.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 353994.991 ops/s
[info]                  ·gc.alloc.rate:                   1686.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9001.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   354024.105 ±(99.9%) 1299.871 ops/s [Average]
[info]   (min, avg, max) = (353483.469, 354024.105, 354377.009), stdev = 337.572
[info]   CI (99.9%): [352724.233, 355323.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1685.973 ±(99.9%) 6.542 MB/sec [Average]
[info]   (min, avg, max) = (1683.191, 1685.973, 1687.671), stdev = 1.699
[info]   CI (99.9%): [1679.431, 1692.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.315 ±(99.9%) 0.541 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.315, 0.463), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1750.513 ±(99.9%) 1420.436 MB/sec [Average]
[info]   (min, avg, max) = (1344.772, 1750.513, 2024.646), stdev = 368.883
[info]   CI (99.9%): [330.077, 3170.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7783.323 ±(99.9%) 6323.140 B/op [Average]
[info]   (min, avg, max) = (5978.664, 7783.323, 9001.587), stdev = 1642.099
[info]   CI (99.9%): [1460.183, 14106.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373923.028 ops/s
[info] # Warmup Iteration   2: 421374.129 ops/s
[info] # Warmup Iteration   3: 424870.770 ops/s
[info] # Warmup Iteration   4: 425504.715 ops/s
[info] # Warmup Iteration   5: 422282.996 ops/s
[info] Iteration   1: 425528.110 ops/s
[info]                  ·gc.alloc.rate:                   1457.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4966.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 425170.388 ops/s
[info]                  ·gc.alloc.rate:                   1456.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4973.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 425455.563 ops/s
[info]                  ·gc.alloc.rate:                   1457.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4975.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 425740.563 ops/s
[info]                  ·gc.alloc.rate:                   1458.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4976.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 424990.739 ops/s
[info]                  ·gc.alloc.rate:                   1455.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4990.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   425377.073 ±(99.9%) 1144.021 ops/s [Average]
[info]   (min, avg, max) = (424990.739, 425377.073, 425740.563), stdev = 297.099
[info]   CI (99.9%): [424233.051, 426521.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1457.152 ±(99.9%) 3.940 MB/sec [Average]
[info]   (min, avg, max) = (1455.823, 1457.152, 1458.426), stdev = 1.023
[info]   CI (99.9%): [1453.212, 1461.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.216 ±(99.9%) 0.387 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.216, 0.308), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1344.888 ±(99.9%) 7.365 MB/sec [Average]
[info]   (min, avg, max) = (1342.676, 1344.888, 1347.382), stdev = 1.913
[info]   CI (99.9%): [1337.523, 1352.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4976.585 ±(99.9%) 33.122 B/op [Average]
[info]   (min, avg, max) = (4966.776, 4976.585, 4990.365), stdev = 8.602
[info]   CI (99.9%): [4943.462, 5009.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23117.581 ops/s
[info] # Warmup Iteration   2: 48170.512 ops/s
[info] # Warmup Iteration   3: 49100.328 ops/s
[info] # Warmup Iteration   4: 48999.239 ops/s
[info] # Warmup Iteration   5: 48991.696 ops/s
[info] Iteration   1: 49041.349 ops/s
[info]                  ·gc.alloc.rate:                   1230.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              39480.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43353.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 49096.275 ops/s
[info]                  ·gc.alloc.rate:                   1231.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              39480.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43327.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 49252.221 ops/s
[info]                  ·gc.alloc.rate:                   1235.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              39480.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21615.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 49051.251 ops/s
[info]                  ·gc.alloc.rate:                   1230.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              39480.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43432.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 49016.038 ops/s
[info]                  ·gc.alloc.rate:                   1229.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              39480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43492.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   49091.427 ±(99.9%) 363.695 ops/s [Average]
[info]   (min, avg, max) = (49016.038, 49091.427, 49252.221), stdev = 94.450
[info]   CI (99.9%): [48727.732, 49455.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1231.279 ±(99.9%) 9.306 MB/sec [Average]
[info]   (min, avg, max) = (1229.318, 1231.279, 1235.403), stdev = 2.417
[info]   CI (99.9%): [1221.973, 1240.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39480.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39480.008, 39480.008, 39480.009), stdev = 0.001
[info]   CI (99.9%): [39480.007, 39480.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.935 ±(99.9%) 5.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.935, 2.674), stdev = 1.302
[info]   CI (99.9%): [≈ 0, 5.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.241 ±(99.9%) 1164.230 MB/sec [Average]
[info]   (min, avg, max) = (676.393, 1217.241, 1354.268), stdev = 302.347
[info]   CI (99.9%): [53.011, 2381.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39044.492 ±(99.9%) 37517.790 B/op [Average]
[info]   (min, avg, max) = (21615.625, 39044.492, 43492.826), stdev = 9743.251
[info]   CI (99.9%): [1526.702, 76562.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59317.571 ops/s
[info] # Warmup Iteration   2: 74411.129 ops/s
[info] # Warmup Iteration   3: 74720.657 ops/s
[info] # Warmup Iteration   4: 74429.499 ops/s
[info] # Warmup Iteration   5: 75206.016 ops/s
[info] Iteration   1: 75230.908 ops/s
[info]                  ·gc.alloc.rate:                   1554.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28093.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 75091.253 ops/s
[info]                  ·gc.alloc.rate:                   1551.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42250.213 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 75242.500 ops/s
[info]                  ·gc.alloc.rate:                   1554.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28132.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 74529.765 ops/s
[info]                  ·gc.alloc.rate:                   1540.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28437.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 75193.240 ops/s
[info]                  ·gc.alloc.rate:                   1553.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42336.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   75057.533 ±(99.9%) 1158.980 ops/s [Average]
[info]   (min, avg, max) = (74529.765, 75057.533, 75242.500), stdev = 300.983
[info]   CI (99.9%): [73898.554, 76216.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1551.132 ±(99.9%) 23.691 MB/sec [Average]
[info]   (min, avg, max) = (1540.375, 1551.132, 1554.989), stdev = 6.152
[info]   CI (99.9%): [1527.441, 1574.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32528.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32528.005, 32528.006, 32528.006), stdev = 0.001
[info]   CI (99.9%): [32528.005, 32528.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.698 ±(99.9%) 2.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.698, 1.742), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 3.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.440 ±(99.9%) 1422.034 MB/sec [Average]
[info]   (min, avg, max) = (1342.749, 1614.440, 2022.501), stdev = 369.298
[info]   CI (99.9%): [192.406, 3036.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33849.942 ±(99.9%) 29684.439 B/op [Average]
[info]   (min, avg, max) = (28093.576, 33849.942, 42336.498), stdev = 7708.955
[info]   CI (99.9%): [4165.503, 63534.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66441.481 ops/s
[info] # Warmup Iteration   2: 122925.586 ops/s
[info] # Warmup Iteration   3: 123286.990 ops/s
[info] # Warmup Iteration   4: 125530.221 ops/s
[info] # Warmup Iteration   5: 122299.847 ops/s
[info] Iteration   1: 125697.000 ops/s
[info]                  ·gc.alloc.rate:                   621.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8436.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 125419.236 ops/s
[info]                  ·gc.alloc.rate:                   620.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8455.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 125171.151 ops/s
[info]                  ·gc.alloc.rate:                   619.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8484.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 124892.235 ops/s
[info]                  ·gc.alloc.rate:                   617.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8503.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 124516.709 ops/s
[info]                  ·gc.alloc.rate:                   615.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8537.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   125139.266 ±(99.9%) 1763.609 ops/s [Average]
[info]   (min, avg, max) = (124516.709, 125139.266, 125697.000), stdev = 458.004
[info]   CI (99.9%): [123375.658, 126902.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   618.911 ±(99.9%) 8.901 MB/sec [Average]
[info]   (min, avg, max) = (615.776, 618.911, 621.678), stdev = 2.311
[info]   CI (99.9%): [610.011, 627.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7784.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7784.003, 7784.003, 7784.004), stdev = 0.001
[info]   CI (99.9%): [7784.003, 7784.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.291), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.887 ±(99.9%) 6.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 3.649), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.528 ±(99.9%) 2.517 MB/sec [Average]
[info]   (min, avg, max) = (673.815, 674.528, 675.403), stdev = 0.654
[info]   CI (99.9%): [672.010, 677.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8483.602 ±(99.9%) 152.884 B/op [Average]
[info]   (min, avg, max) = (8436.818, 8483.602, 8537.741), stdev = 39.704
[info]   CI (99.9%): [8330.718, 8636.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204141.364 ops/s
[info] # Warmup Iteration   2: 221892.819 ops/s
[info] # Warmup Iteration   3: 218921.820 ops/s
[info] # Warmup Iteration   4: 228495.380 ops/s
[info] # Warmup Iteration   5: 228165.743 ops/s
[info] Iteration   1: 228469.760 ops/s
[info]                  ·gc.alloc.rate:                   940.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4634.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 228491.084 ops/s
[info]                  ·gc.alloc.rate:                   940.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9259.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 228569.755 ops/s
[info]                  ·gc.alloc.rate:                   940.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4623.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 228730.478 ops/s
[info]                  ·gc.alloc.rate:                   941.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4620.368 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 228916.927 ops/s
[info]                  ·gc.alloc.rate:                   942.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9236.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   228635.601 ±(99.9%) 722.626 ops/s [Average]
[info]   (min, avg, max) = (228469.760, 228635.601, 228916.927), stdev = 187.664
[info]   CI (99.9%): [227912.975, 229358.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   941.331 ±(99.9%) 2.966 MB/sec [Average]
[info]   (min, avg, max) = (940.670, 941.331, 942.544), stdev = 0.770
[info]   CI (99.9%): [938.365, 944.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.429), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.675 ±(99.9%) 1417.165 MB/sec [Average]
[info]   (min, avg, max) = (671.352, 940.675, 1344.143), stdev = 368.033
[info]   CI (99.9%): [≈ 0, 2357.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6474.949 ±(99.9%) 9748.043 B/op [Average]
[info]   (min, avg, max) = (4620.368, 6474.949, 9259.415), stdev = 2531.536
[info]   CI (99.9%): [≈ 0, 16222.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6833.061 ops/s
[info] # Warmup Iteration   2: 17207.731 ops/s
[info] # Warmup Iteration   3: 17759.492 ops/s
[info] # Warmup Iteration   4: 17726.193 ops/s
[info] # Warmup Iteration   5: 17691.286 ops/s
[info] Iteration   1: 17778.395 ops/s
[info]                  ·gc.alloc.rate:                   1017.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119476.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17711.010 ops/s
[info]                  ·gc.alloc.rate:                   1014.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60023.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 17812.395 ops/s
[info]                  ·gc.alloc.rate:                   1019.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119382.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17816.183 ops/s
[info]                  ·gc.alloc.rate:                   1020.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119457.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17838.466 ops/s
[info]                  ·gc.alloc.rate:                   1021.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59681.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   17791.290 ±(99.9%) 191.584 ops/s [Average]
[info]   (min, avg, max) = (17711.010, 17791.290, 17838.466), stdev = 49.754
[info]   CI (99.9%): [17599.706, 17982.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1018.696 ±(99.9%) 11.051 MB/sec [Average]
[info]   (min, avg, max) = (1014.079, 1018.696, 1021.374), stdev = 2.870
[info]   CI (99.9%): [1007.645, 1029.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90128.025 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (90128.023, 90128.025, 90128.029), stdev = 0.002
[info]   CI (99.9%): [90128.015, 90128.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.682 ±(99.9%) 13.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.682, 9.196), stdev = 3.439
[info]   CI (99.9%): [≈ 0, 16.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.846 ±(99.9%) 1423.639 MB/sec [Average]
[info]   (min, avg, max) = (675.356, 1080.846, 1352.152), stdev = 369.715
[info]   CI (99.9%): [≈ 0, 2504.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   95604.179 ±(99.9%) 125673.976 B/op [Average]
[info]   (min, avg, max) = (59681.029, 95604.179, 119476.687), stdev = 32637.132
[info]   CI (99.9%): [≈ 0, 221278.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94803.131 ops/s
[info] # Warmup Iteration   2: 169051.840 ops/s
[info] # Warmup Iteration   3: 171712.265 ops/s
[info] # Warmup Iteration   4: 171685.199 ops/s
[info] # Warmup Iteration   5: 171268.883 ops/s
[info] Iteration   1: 166774.517 ops/s
[info]                  ·gc.alloc.rate:                   1073.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12736.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 171842.772 ops/s
[info]                  ·gc.alloc.rate:                   1105.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6183.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 172498.291 ops/s
[info]                  ·gc.alloc.rate:                   1109.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12331.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 172946.418 ops/s
[info]                  ·gc.alloc.rate:                   1112.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12311.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 172370.076 ops/s
[info]                  ·gc.alloc.rate:                   1108.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6179.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   171286.415 ±(99.9%) 9829.581 ops/s [Average]
[info]   (min, avg, max) = (166774.517, 171286.415, 172946.418), stdev = 2552.711
[info]   CI (99.9%): [161456.833, 181115.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1102.104 ±(99.9%) 63.310 MB/sec [Average]
[info]   (min, avg, max) = (1073.060, 1102.104, 1112.914), stdev = 16.441
[info]   CI (99.9%): [1038.794, 1165.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10128.002, 10128.002, 10128.003), stdev = 0.001
[info]   CI (99.9%): [10128.002, 10128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.346 ±(99.9%) 1.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 0.589), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.066 ±(99.9%) 1424.554 MB/sec [Average]
[info]   (min, avg, max) = (675.000, 1081.066, 1352.880), stdev = 369.952
[info]   CI (99.9%): [≈ 0, 2505.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9948.462 ±(99.9%) 13258.272 B/op [Average]
[info]   (min, avg, max) = (6179.364, 9948.462, 12736.224), stdev = 3443.131
[info]   CI (99.9%): [≈ 0, 23206.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485240.545 ops/s
[info] # Warmup Iteration   2: 530430.888 ops/s
[info] # Warmup Iteration   3: 525737.738 ops/s
[info] # Warmup Iteration   4: 529232.159 ops/s
[info] # Warmup Iteration   5: 510901.239 ops/s
[info] Iteration   1: 531074.075 ops/s
[info]                  ·gc.alloc.rate:                   591.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1516.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 529926.845 ops/s
[info]                  ·gc.alloc.rate:                   589.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2004.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 533585.572 ops/s
[info]                  ·gc.alloc.rate:                   593.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1990.256 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 533357.529 ops/s
[info]                  ·gc.alloc.rate:                   593.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1985.251 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 533044.163 ops/s
[info]                  ·gc.alloc.rate:                   593.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1986.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   532197.637 ±(99.9%) 6211.128 ops/s [Average]
[info]   (min, avg, max) = (529926.845, 532197.637, 533585.572), stdev = 1613.010
[info]   CI (99.9%): [525986.509, 538408.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   592.373 ±(99.9%) 6.826 MB/sec [Average]
[info]   (min, avg, max) = (589.884, 592.373, 593.868), stdev = 1.773
[info]   CI (99.9%): [585.547, 599.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.678 ±(99.9%) 5.563 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.678, 3.262), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.014 ±(99.9%) 16.523 B/op [Average]
[info]   (min, avg, max) = (0.061, 2.014, 9.689), stdev = 4.291
[info]   CI (99.9%): [≈ 0, 18.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.268 ±(99.9%) 279.279 MB/sec [Average]
[info]   (min, avg, max) = (511.538, 641.268, 674.772), stdev = 72.528
[info]   CI (99.9%): [361.989, 920.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1896.428 ±(99.9%) 819.131 B/op [Average]
[info]   (min, avg, max) = (1516.131, 1896.428, 2004.123), stdev = 212.726
[info]   CI (99.9%): [1077.297, 2715.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 535477.822 ops/s
[info] # Warmup Iteration   2: 568595.631 ops/s
[info] # Warmup Iteration   3: 569144.376 ops/s
[info] # Warmup Iteration   4: 570454.409 ops/s
[info] # Warmup Iteration   5: 561623.216 ops/s
[info] Iteration   1: 567571.118 ops/s
[info]                  ·gc.alloc.rate:      11.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 569167.776 ops/s
[info]                  ·gc.alloc.rate:      11.570 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 569267.110 ops/s
[info]                  ·gc.alloc.rate:      11.576 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 567630.520 ops/s
[info]                  ·gc.alloc.rate:      11.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 566293.161 ops/s
[info]                  ·gc.alloc.rate:      11.513 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   567985.937 ±(99.9%) 4794.799 ops/s [Average]
[info]   (min, avg, max) = (566293.161, 567985.937, 569267.110), stdev = 1245.194
[info]   CI (99.9%): [563191.137, 572780.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.548 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (11.513, 11.548, 11.576), stdev = 0.026
[info]   CI (99.9%): [11.450, 11.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11236.267 ops/s
[info] # Warmup Iteration   2: 21156.023 ops/s
[info] # Warmup Iteration   3: 21181.658 ops/s
[info] # Warmup Iteration   4: 21141.793 ops/s
[info] # Warmup Iteration   5: 21357.993 ops/s
[info] Iteration   1: 20655.055 ops/s
[info]                  ·gc.alloc.rate:      423.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264.817 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21338.314 ops/s
[info]                  ·gc.alloc.rate:                   437.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37733.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 21353.889 ops/s
[info]                  ·gc.alloc.rate:                   437.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49659.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21362.922 ops/s
[info]                  ·gc.alloc.rate:      437.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21393.350 ops/s
[info]                  ·gc.alloc.rate:                   438.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49569.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21220.706 ±(99.9%) 1220.056 ops/s [Average]
[info]   (min, avg, max) = (20655.055, 21220.706, 21393.350), stdev = 316.845
[info]   CI (99.9%): [20000.650, 22440.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   435.009 ±(99.9%) 24.946 MB/sec [Average]
[info]   (min, avg, max) = (423.443, 435.009, 438.539), stdev = 6.478
[info]   CI (99.9%): [410.064, 459.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32264.179 ±(99.9%) 1.374 B/op [Average]
[info]   (min, avg, max) = (32264.019, 32264.179, 32264.817), stdev = 0.357
[info]   CI (99.9%): [32262.805, 32265.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.271), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.989 ±(99.9%) 34.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.989, 19.945), stdev = 8.920
[info]   CI (99.9%): [≈ 0, 38.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   371.813 ±(99.9%) 1331.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.813, 673.756), stdev = 345.813
[info]   CI (99.9%): [≈ 0, 1703.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27392.510 ±(99.9%) 98083.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27392.510, 49659.829), stdev = 25471.933
[info]   CI (99.9%): [≈ 0, 125475.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60913.086 ops/s
[info] # Warmup Iteration   2: 74649.932 ops/s
[info] # Warmup Iteration   3: 75300.134 ops/s
[info] # Warmup Iteration   4: 75027.975 ops/s
[info] # Warmup Iteration   5: 75208.608 ops/s
[info] Iteration   1: 75677.845 ops/s
[info]                  ·gc.alloc.rate:                   1323.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27929.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 75942.411 ops/s
[info]                  ·gc.alloc.rate:                   1328.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27831.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 75701.810 ops/s
[info]                  ·gc.alloc.rate:                   1323.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27933.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 75729.342 ops/s
[info]                  ·gc.alloc.rate:                   1324.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27936.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 75725.527 ops/s
[info]                  ·gc.alloc.rate:                   1324.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27965.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   75755.387 ±(99.9%) 410.375 ops/s [Average]
[info]   (min, avg, max) = (75677.845, 75755.387, 75942.411), stdev = 106.573
[info]   CI (99.9%): [75345.012, 76165.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1324.837 ±(99.9%) 7.252 MB/sec [Average]
[info]   (min, avg, max) = (1323.444, 1324.837, 1328.131), stdev = 1.883
[info]   CI (99.9%): [1317.585, 1332.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27528.005, 27528.005, 27528.005), stdev = 0.001
[info]   CI (99.9%): [27528.005, 27528.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.038 ±(99.9%) 2.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.038, 1.726), stdev = 0.655
[info]   CI (99.9%): [≈ 0, 3.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.663 ±(99.9%) 4.309 MB/sec [Average]
[info]   (min, avg, max) = (1342.730, 1343.663, 1345.415), stdev = 1.119
[info]   CI (99.9%): [1339.354, 1347.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27919.233 ±(99.9%) 197.153 B/op [Average]
[info]   (min, avg, max) = (27831.337, 27919.233, 27965.719), stdev = 51.200
[info]   CI (99.9%): [27722.080, 28116.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78268.447 ops/s
[info] # Warmup Iteration   2: 144150.635 ops/s
[info] # Warmup Iteration   3: 146405.201 ops/s
[info] # Warmup Iteration   4: 146320.924 ops/s
[info] # Warmup Iteration   5: 146875.452 ops/s
[info] Iteration   1: 146920.702 ops/s
[info]                  ·gc.alloc.rate:                   628.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7217.902 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 146843.825 ops/s
[info]                  ·gc.alloc.rate:                   627.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7221.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 146747.896 ops/s
[info]                  ·gc.alloc.rate:                   627.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7236.880 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 146494.841 ops/s
[info]                  ·gc.alloc.rate:                   626.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7249.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 146466.571 ops/s
[info]                  ·gc.alloc.rate:                   626.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7258.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   146694.767 ±(99.9%) 789.456 ops/s [Average]
[info]   (min, avg, max) = (146466.571, 146694.767, 146920.702), stdev = 205.019
[info]   CI (99.9%): [145905.311, 147484.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   627.029 ±(99.9%) 3.471 MB/sec [Average]
[info]   (min, avg, max) = (626.009, 627.029, 628.093), stdev = 0.901
[info]   CI (99.9%): [623.558, 630.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.002, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.229), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.580 ±(99.9%) 4.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.580, 2.453), stdev = 1.053
[info]   CI (99.9%): [≈ 0, 4.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.452 ±(99.9%) 2.694 MB/sec [Average]
[info]   (min, avg, max) = (673.663, 674.452, 675.353), stdev = 0.700
[info]   CI (99.9%): [671.759, 677.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7236.871 ±(99.9%) 67.017 B/op [Average]
[info]   (min, avg, max) = (7217.902, 7236.871, 7258.315), stdev = 17.404
[info]   CI (99.9%): [7169.855, 7303.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194435.720 ops/s
[info] # Warmup Iteration   2: 213213.643 ops/s
[info] # Warmup Iteration   3: 209733.932 ops/s
[info] # Warmup Iteration   4: 214736.478 ops/s
[info] # Warmup Iteration   5: 214452.819 ops/s
[info] Iteration   1: 214948.830 ops/s
[info]                  ·gc.alloc.rate:                   765.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4940.845 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 207096.496 ops/s
[info]                  ·gc.alloc.rate:                   737.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5113.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 210336.825 ops/s
[info]                  ·gc.alloc.rate:                   749.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5034.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 215143.834 ops/s
[info]                  ·gc.alloc.rate:                   766.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4911.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 214970.630 ops/s
[info]                  ·gc.alloc.rate:                   765.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4915.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   212499.323 ±(99.9%) 14012.300 ops/s [Average]
[info]   (min, avg, max) = (207096.496, 212499.323, 215143.834), stdev = 3638.950
[info]   CI (99.9%): [198487.023, 226511.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   757.088 ±(99.9%) 49.902 MB/sec [Average]
[info]   (min, avg, max) = (737.847, 757.088, 766.531), stdev = 12.959
[info]   CI (99.9%): [707.186, 806.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.305), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.573 ±(99.9%) 5.217 MB/sec [Average]
[info]   (min, avg, max) = (671.356, 672.573, 674.678), stdev = 1.355
[info]   CI (99.9%): [667.356, 677.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4983.167 ±(99.9%) 338.258 B/op [Average]
[info]   (min, avg, max) = (4911.979, 4983.167, 5113.005), stdev = 87.844
[info]   CI (99.9%): [4644.909, 5321.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25511.671 ops/s
[info] # Warmup Iteration   2: 41995.047 ops/s
[info] # Warmup Iteration   3: 40792.913 ops/s
[info] # Warmup Iteration   4: 41275.744 ops/s
[info] # Warmup Iteration   5: 42159.894 ops/s
[info] Iteration   1: 42109.746 ops/s
[info]                  ·gc.alloc.rate:                   1745.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50415.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42122.239 ops/s
[info]                  ·gc.alloc.rate:                   1746.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75700.069 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 42108.268 ops/s
[info]                  ·gc.alloc.rate:                   1746.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50554.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42143.413 ops/s
[info]                  ·gc.alloc.rate:                   1747.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75847.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41993.825 ops/s
[info]                  ·gc.alloc.rate:                   1740.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76221.489 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   42095.498 ±(99.9%) 225.471 ops/s [Average]
[info]   (min, avg, max) = (41993.825, 42095.498, 42143.413), stdev = 58.554
[info]   CI (99.9%): [41870.028, 42320.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1745.284 ±(99.9%) 10.137 MB/sec [Average]
[info]   (min, avg, max) = (1740.698, 1745.284, 1747.155), stdev = 2.632
[info]   CI (99.9%): [1735.147, 1755.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.010), stdev = 0.001
[info]   CI (99.9%): [65248.008, 65248.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.401 ±(99.9%) 5.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.401, 3.110), stdev = 1.391
[info]   CI (99.9%): [≈ 0, 6.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1758.544 ±(99.9%) 1432.973 MB/sec [Average]
[info]   (min, avg, max) = (1348.730, 1758.544, 2033.450), stdev = 372.139
[info]   CI (99.9%): [325.570, 3191.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65747.723 ±(99.9%) 53656.070 B/op [Average]
[info]   (min, avg, max) = (50415.899, 65747.723, 76221.489), stdev = 13934.311
[info]   CI (99.9%): [12091.653, 119403.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193226.441 ops/s
[info] # Warmup Iteration   2: 260067.569 ops/s
[info] # Warmup Iteration   3: 262022.530 ops/s
[info] # Warmup Iteration   4: 263236.363 ops/s
[info] # Warmup Iteration   5: 262086.880 ops/s
[info] Iteration   1: 262198.525 ops/s
[info]                  ·gc.alloc.rate:                   1237.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8061.232 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 263139.718 ops/s
[info]                  ·gc.alloc.rate:                   1242.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8024.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 256659.713 ops/s
[info]                  ·gc.alloc.rate:                   1212.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4117.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 258525.102 ops/s
[info]                  ·gc.alloc.rate:                   1220.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8177.806 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 263068.490 ops/s
[info]                  ·gc.alloc.rate:                   1242.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8042.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   260718.310 ±(99.9%) 11367.550 ops/s [Average]
[info]   (min, avg, max) = (256659.713, 260718.310, 263139.718), stdev = 2952.117
[info]   CI (99.9%): [249350.760, 272085.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1231.077 ±(99.9%) 52.967 MB/sec [Average]
[info]   (min, avg, max) = (1212.350, 1231.077, 1242.427), stdev = 13.755
[info]   CI (99.9%): [1178.110, 1284.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7432.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7432.002, 7432.002, 7432.002), stdev = 0.001
[info]   CI (99.9%): [7432.001, 7432.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.276 ±(99.9%) 0.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 0.498), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208.610 ±(99.9%) 1155.807 MB/sec [Average]
[info]   (min, avg, max) = (671.671, 1208.610, 1344.110), stdev = 300.160
[info]   CI (99.9%): [52.803, 2364.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7284.670 ±(99.9%) 6821.459 B/op [Average]
[info]   (min, avg, max) = (4117.509, 7284.670, 8177.806), stdev = 1771.511
[info]   CI (99.9%): [463.211, 14106.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284893.496 ops/s
[info] # Warmup Iteration   2: 504777.050 ops/s
[info] # Warmup Iteration   3: 511637.149 ops/s
[info] # Warmup Iteration   4: 517089.974 ops/s
[info] # Warmup Iteration   5: 516342.235 ops/s
[info] Iteration   1: 516007.231 ops/s
[info]                  ·gc.alloc.rate:                   414.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1560.399 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 514804.874 ops/s
[info]                  ·gc.alloc.rate:                   413.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1564.051 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 516617.484 ops/s
[info]                  ·gc.alloc.rate:      414.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 515847.752 ops/s
[info]                  ·gc.alloc.rate:                   414.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2055.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 515471.002 ops/s
[info]                  ·gc.alloc.rate:                   413.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2057.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   515749.669 ±(99.9%) 2582.627 ops/s [Average]
[info]   (min, avg, max) = (514804.874, 515749.669, 516617.484), stdev = 670.700
[info]   CI (99.9%): [513167.042, 518332.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   414.142 ±(99.9%) 2.060 MB/sec [Average]
[info]   (min, avg, max) = (413.404, 414.142, 414.848), stdev = 0.535
[info]   CI (99.9%): [412.082, 416.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.312), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.203 ±(99.9%) 1.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 0.953), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.075 ±(99.9%) 1067.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.075, 673.677), stdev = 277.140
[info]   CI (99.9%): [≈ 0, 1541.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1447.496 ±(99.9%) 3257.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1447.496, 2057.272), stdev = 846.077
[info]   CI (99.9%): [≈ 0, 4705.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 572673.097 ops/s
[info] # Warmup Iteration   2: 604599.482 ops/s
[info] # Warmup Iteration   3: 616951.239 ops/s
[info] # Warmup Iteration   4: 611310.796 ops/s
[info] # Warmup Iteration   5: 601277.635 ops/s
[info] Iteration   1: 616091.005 ops/s
[info]                  ·gc.alloc.rate:      325.705 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 613464.793 ops/s
[info]                  ·gc.alloc.rate:                   324.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1312.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 613031.763 ops/s
[info]                  ·gc.alloc.rate:                   324.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1313.469 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 614097.326 ops/s
[info]                  ·gc.alloc.rate:      324.594 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 612628.118 ops/s
[info]                  ·gc.alloc.rate:                   323.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1314.267 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   613862.601 ±(99.9%) 5235.095 ops/s [Average]
[info]   (min, avg, max) = (612628.118, 613862.601, 616091.005), stdev = 1359.538
[info]   CI (99.9%): [608627.506, 619097.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   324.498 ±(99.9%) 2.803 MB/sec [Average]
[info]   (min, avg, max) = (323.883, 324.498, 325.705), stdev = 0.728
[info]   CI (99.9%): [321.695, 327.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.011 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.949 ±(99.9%) 1078.968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.949, 511.620), stdev = 280.204
[info]   CI (99.9%): [≈ 0, 1385.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   788.061 ±(99.9%) 2770.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 788.061, 1314.267), stdev = 719.398
[info]   CI (99.9%): [≈ 0, 3558.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627256.241 ops/s
[info] # Warmup Iteration   2: 686721.901 ops/s
[info] # Warmup Iteration   3: 708579.744 ops/s
[info] # Warmup Iteration   4: 709146.684 ops/s
[info] # Warmup Iteration   5: 707468.809 ops/s
[info] Iteration   1: 708228.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 709098.092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 708927.994 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 709362.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 708257.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   708775.050 ±(99.9%) 1963.182 ops/s [Average]
[info]   (min, avg, max) = (708228.561, 708775.050, 709362.945), stdev = 509.832
[info]   CI (99.9%): [706811.868, 710738.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23353.839 ops/s
[info] # Warmup Iteration   2: 34041.165 ops/s
[info] # Warmup Iteration   3: 33544.305 ops/s
[info] # Warmup Iteration   4: 34478.245 ops/s
[info] # Warmup Iteration   5: 33396.304 ops/s
[info] Iteration   1: 34399.568 ops/s
[info]                  ·gc.alloc.rate:                   1775.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91919.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34482.129 ops/s
[info]                  ·gc.alloc.rate:                   1779.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91835.531 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34497.110 ops/s
[info]                  ·gc.alloc.rate:                   1780.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61283.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34567.431 ops/s
[info]                  ·gc.alloc.rate:                   1784.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91895.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33852.953 ops/s
[info]                  ·gc.alloc.rate:                   1747.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94021.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   34359.838 ±(99.9%) 1115.033 ops/s [Average]
[info]   (min, avg, max) = (33852.953, 34359.838, 34567.431), stdev = 289.571
[info]   CI (99.9%): [33244.805, 35474.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1773.495 ±(99.9%) 57.700 MB/sec [Average]
[info]   (min, avg, max) = (1747.276, 1773.495, 1784.292), stdev = 14.985
[info]   CI (99.9%): [1715.795, 1831.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81248.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81248.012, 81248.012, 81248.013), stdev = 0.001
[info]   CI (99.9%): [81248.010, 81248.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.524 ±(99.9%) 3.265 B/op [Average]
[info]   (min, avg, max) = (0.948, 1.524, 2.850), stdev = 0.848
[info]   CI (99.9%): [≈ 0, 4.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1880.715 ±(99.9%) 1157.425 MB/sec [Average]
[info]   (min, avg, max) = (1343.103, 1880.715, 2021.978), stdev = 300.580
[info]   CI (99.9%): [723.290, 3038.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86191.088 ±(99.9%) 53734.666 B/op [Average]
[info]   (min, avg, max) = (61283.178, 86191.088, 94021.582), stdev = 13954.722
[info]   CI (99.9%): [32456.422, 139925.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328789.558 ops/s
[info] # Warmup Iteration   2: 669104.925 ops/s
[info] # Warmup Iteration   3: 679617.006 ops/s
[info] # Warmup Iteration   4: 685284.610 ops/s
[info] # Warmup Iteration   5: 686726.916 ops/s
[info] Iteration   1: 685438.022 ops/s
[info]                  ·gc.alloc.rate:                   2093.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4628.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 687625.632 ops/s
[info]                  ·gc.alloc.rate:                   2100.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4621.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 686331.848 ops/s
[info]                  ·gc.alloc.rate:                   2096.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4637.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 687227.537 ops/s
[info]                  ·gc.alloc.rate:                   2099.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4639.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 686371.233 ops/s
[info]                  ·gc.alloc.rate:                   2096.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              4808.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6204.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   686598.854 ±(99.9%) 3290.076 ops/s [Average]
[info]   (min, avg, max) = (685438.022, 686598.854, 687625.632), stdev = 854.422
[info]   CI (99.9%): [683308.778, 689888.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2097.171 ±(99.9%) 10.096 MB/sec [Average]
[info]   (min, avg, max) = (2093.561, 2097.171, 2100.290), stdev = 2.622
[info]   CI (99.9%): [2087.075, 2107.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4808.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4808.001, 4808.001, 4808.001), stdev = 0.001
[info]   CI (99.9%): [4808.001, 4808.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.124, 0.238), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2157.461 ±(99.9%) 1179.357 MB/sec [Average]
[info]   (min, avg, max) = (2015.354, 2157.461, 2705.299), stdev = 306.275
[info]   CI (99.9%): [978.104, 3336.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4946.332 ±(99.9%) 2708.164 B/op [Average]
[info]   (min, avg, max) = (4621.306, 4946.332, 6204.366), stdev = 703.302
[info]   CI (99.9%): [2238.168, 7654.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495782.508 ops/s
[info] # Warmup Iteration   2: 1526641.050 ops/s
[info] # Warmup Iteration   3: 1537612.433 ops/s
[info] # Warmup Iteration   4: 1502758.149 ops/s
[info] # Warmup Iteration   5: 1546776.474 ops/s
[info] Iteration   1: 1529689.120 ops/s
[info]                  ·gc.alloc.rate:                   1158.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1389.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1550590.364 ops/s
[info]                  ·gc.alloc.rate:                   1174.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1371.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1550624.755 ops/s
[info]                  ·gc.alloc.rate:                   1174.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 686.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1519600.012 ops/s
[info]                  ·gc.alloc.rate:                   1151.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1401.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1550484.779 ops/s
[info]                  ·gc.alloc.rate:                   1174.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1374.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1540197.806 ±(99.9%) 56371.176 ops/s [Average]
[info]   (min, avg, max) = (1519600.012, 1540197.806, 1550624.755), stdev = 14639.415
[info]   CI (99.9%): [1483826.630, 1596568.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1166.478 ±(99.9%) 42.109 MB/sec [Average]
[info]   (min, avg, max) = (1151.259, 1166.478, 1174.421), stdev = 10.936
[info]   CI (99.9%): [1124.369, 1208.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.085), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.140 ±(99.9%) 1164.564 MB/sec [Average]
[info]   (min, avg, max) = (676.139, 1217.140, 1354.058), stdev = 302.434
[info]   CI (99.9%): [52.576, 2381.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1244.803 ±(99.9%) 1203.204 B/op [Average]
[info]   (min, avg, max) = (686.260, 1244.803, 1401.920), stdev = 312.468
[info]   CI (99.9%): [41.599, 2448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6527777.534 ops/s
[info] # Warmup Iteration   2: 7150848.025 ops/s
[info] # Warmup Iteration   3: 6857560.484 ops/s
[info] # Warmup Iteration   4: 7176115.767 ops/s
[info] # Warmup Iteration   5: 7155842.168 ops/s
[info] Iteration   1: 7174219.918 ops/s
[info]                  ·gc.alloc.rate:      218.853 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7158369.868 ops/s
[info]                  ·gc.alloc.rate:                   218.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.480 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7187297.160 ops/s
[info]                  ·gc.alloc.rate:      219.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7185648.554 ops/s
[info]                  ·gc.alloc.rate:      219.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6837030.448 ops/s
[info]                  ·gc.alloc.rate:                   208.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7108513.189 ±(99.9%) 586078.632 ops/s [Average]
[info]   (min, avg, max) = (6837030.448, 7108513.189, 7187297.160), stdev = 152202.759
[info]   CI (99.9%): [6522434.558, 7694591.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   216.822 ±(99.9%) 17.795 MB/sec [Average]
[info]   (min, avg, max) = (208.578, 216.822, 219.190), stdev = 4.621
[info]   CI (99.9%): [199.027, 234.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.674 ±(99.9%) 1079.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.674, 511.731), stdev = 280.261
[info]   CI (99.9%): [≈ 0, 1283.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.049 ±(99.9%) 242.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.049, 117.765), stdev = 63.083
[info]   CI (99.9%): [≈ 0, 288.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44997.133 ops/s
[info] # Warmup Iteration   2: 234480.650 ops/s
[info] # Warmup Iteration   3: 233846.494 ops/s
[info] # Warmup Iteration   4: 232276.277 ops/s
[info] # Warmup Iteration   5: 237526.572 ops/s
[info] Iteration   1: 237219.728 ops/s
[info]                  ·gc.alloc.rate:                   1661.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13455.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 237639.303 ops/s
[info]                  ·gc.alloc.rate:                   1664.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8964.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 237329.050 ops/s
[info]                  ·gc.alloc.rate:                   1662.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8982.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 237248.731 ops/s
[info]                  ·gc.alloc.rate:                   1661.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13490.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 237321.909 ops/s
[info]                  ·gc.alloc.rate:                   1662.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8998.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   237351.744 ±(99.9%) 644.726 ops/s [Average]
[info]   (min, avg, max) = (237219.728, 237351.744, 237639.303), stdev = 167.433
[info]   CI (99.9%): [236707.019, 237996.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1662.289 ±(99.9%) 4.251 MB/sec [Average]
[info]   (min, avg, max) = (1661.295, 1662.289, 1664.134), stdev = 1.104
[info]   CI (99.9%): [1658.039, 1666.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11024.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11024.002, 11024.002, 11024.002), stdev = 0.001
[info]   CI (99.9%): [11024.002, 11024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.331 ±(99.9%) 0.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 0.552), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.139 ±(99.9%) 1425.111 MB/sec [Average]
[info]   (min, avg, max) = (1353.307, 1625.139, 2033.443), stdev = 370.097
[info]   CI (99.9%): [200.027, 3050.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10778.533 ±(99.9%) 9471.759 B/op [Average]
[info]   (min, avg, max) = (8964.941, 10778.533, 13490.927), stdev = 2459.786
[info]   CI (99.9%): [1306.774, 20250.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422841.721 ops/s
[info] # Warmup Iteration   2: 919609.377 ops/s
[info] # Warmup Iteration   3: 941981.570 ops/s
[info] # Warmup Iteration   4: 918144.808 ops/s
[info] # Warmup Iteration   5: 938269.980 ops/s
[info] Iteration   1: 938399.385 ops/s
[info]                  ·gc.alloc.rate:                   1402.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2250.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 914948.946 ops/s
[info]                  ·gc.alloc.rate:                   1367.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2307.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 939128.713 ops/s
[info]                  ·gc.alloc.rate:                   1403.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3375.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 940886.354 ops/s
[info]                  ·gc.alloc.rate:                   1406.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2248.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 939021.807 ops/s
[info]                  ·gc.alloc.rate:                   1403.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2255.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   934477.041 ±(99.9%) 42186.239 ops/s [Average]
[info]   (min, avg, max) = (914948.946, 934477.041, 940886.354), stdev = 10955.632
[info]   CI (99.9%): [892290.802, 976663.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1396.517 ±(99.9%) 62.271 MB/sec [Average]
[info]   (min, avg, max) = (1367.723, 1396.517, 1406.325), stdev = 16.172
[info]   CI (99.9%): [1334.246, 1458.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.112 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.112, 0.175), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.420 ±(99.9%) 1154.488 MB/sec [Average]
[info]   (min, avg, max) = (1341.472, 1477.420, 2013.741), stdev = 299.817
[info]   CI (99.9%): [322.932, 2631.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2487.413 ±(99.9%) 1913.645 B/op [Average]
[info]   (min, avg, max) = (2248.618, 2487.413, 3375.330), stdev = 496.968
[info]   CI (99.9%): [573.767, 4401.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f7c6d30b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 812431.857 ops/s
[info] # Warmup Iteration   2: 2387616.855 ops/s
[info] # Warmup Iteration   3: 2473991.019 ops/s
[info] # Warmup Iteration   4: 2437481.824 ops/s
[info] # Warmup Iteration   5: 2478266.278 ops/s
[info] Iteration   1: 2493968.512 ops/s
[info]                  ·gc.alloc.rate:                   1026.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2499156.155 ops/s
[info]                  ·gc.alloc.rate:                   1029.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2493617.398 ops/s
[info]                  ·gc.alloc.rate:                   1026.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2498628.834 ops/s
[info]                  ·gc.alloc.rate:                   1029.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2468395.468 ops/s
[info]                  ·gc.alloc.rate:                   1016.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2490753.273 ±(99.9%) 49125.725 ops/s [Average]
[info]   (min, avg, max) = (2468395.468, 2490753.273, 2499156.155), stdev = 12757.795
[info]   CI (99.9%): [2441627.548, 2539878.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1025.588 ±(99.9%) 20.831 MB/sec [Average]
[info]   (min, avg, max) = (1016.145, 1025.588, 1029.232), stdev = 5.410
[info]   CI (99.9%): [1004.757, 1046.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.066), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.636 ±(99.9%) 1423.631 MB/sec [Average]
[info]   (min, avg, max) = (675.305, 1080.636, 1352.069), stdev = 369.712
[info]   CI (99.9%): [≈ 0, 2504.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   683.390 ±(99.9%) 906.941 B/op [Average]
[info]   (min, avg, max) = (425.169, 683.390, 862.220), stdev = 235.530
[info]   CI (99.9%): [≈ 0, 1590.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4195347.130 ops/s
[info] # Warmup Iteration   2: 5783527.999 ops/s
[info] # Warmup Iteration   3: 5829367.940 ops/s
[info] # Warmup Iteration   4: 5846866.386 ops/s
[info] # Warmup Iteration   5: 5813779.963 ops/s
[info] Iteration   1: 5834244.635 ops/s
[info]                  ·gc.alloc.rate:                   652.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.036 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5847489.515 ops/s
[info]                  ·gc.alloc.rate:                   653.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.624 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5845669.429 ops/s
[info]                  ·gc.alloc.rate:                   653.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5831324.024 ops/s
[info]                  ·gc.alloc.rate:                   651.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5843151.362 ops/s
[info]                  ·gc.alloc.rate:      653.348 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5840375.793 ±(99.9%) 27623.977 ops/s [Average]
[info]   (min, avg, max) = (5831324.024, 5840375.793, 5847489.515), stdev = 7173.859
[info]   CI (99.9%): [5812751.816, 5867999.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   653.055 ±(99.9%) 3.173 MB/sec [Average]
[info]   (min, avg, max) = (651.976, 653.055, 653.911), stdev = 0.824
[info]   CI (99.9%): [649.881, 656.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.258), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.179 ±(99.9%) 1.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.879), stdev = 0.391
[info]   CI (99.9%): [≈ 0, 1.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.992 ±(99.9%) 1160.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.992, 674.808), stdev = 301.308
[info]   CI (99.9%): [≈ 0, 1699.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   145.276 ±(99.9%) 312.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.276, 182.036), stdev = 81.213
[info]   CI (99.9%): [≈ 0, 457.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4284967.359 ops/s
[info] # Warmup Iteration   2: 5831524.198 ops/s
[info] # Warmup Iteration   3: 5844991.295 ops/s
[info] # Warmup Iteration   4: 5641279.279 ops/s
[info] # Warmup Iteration   5: 5831729.725 ops/s
[info] Iteration   1: 5849724.127 ops/s
[info]                  ·gc.alloc.rate:                   356.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.646 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5916429.113 ops/s
[info]                  ·gc.alloc.rate:      360.906 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5774341.416 ops/s
[info]                  ·gc.alloc.rate:                   352.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5787333.137 ops/s
[info]                  ·gc.alloc.rate:                   352.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5896162.465 ops/s
[info]                  ·gc.alloc.rate:      359.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5844798.051 ±(99.9%) 243991.792 ops/s [Average]
[info]   (min, avg, max) = (5774341.416, 5844798.051, 5916429.113), stdev = 63363.894
[info]   CI (99.9%): [5600806.259, 6088789.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   356.487 ±(99.9%) 15.007 MB/sec [Average]
[info]   (min, avg, max) = (352.150, 356.487, 360.906), stdev = 3.897
[info]   CI (99.9%): [341.481, 371.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.009 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.923 ±(99.9%) 1078.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.923, 511.625), stdev = 280.181
[info]   CI (99.9%): [≈ 0, 1385.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   83.242 ±(99.9%) 292.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.242, 139.438), stdev = 75.992
[info]   CI (99.9%): [≈ 0, 375.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58183.637 ops/s
[info] # Warmup Iteration   2: 325653.264 ops/s
[info] # Warmup Iteration   3: 332583.649 ops/s
[info] # Warmup Iteration   4: 338239.307 ops/s
[info] # Warmup Iteration   5: 332998.567 ops/s
[info] Iteration   1: 330128.554 ops/s
[info]                  ·gc.alloc.rate:                   1681.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9671.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 337172.530 ops/s
[info]                  ·gc.alloc.rate:                   1717.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6318.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 337724.168 ops/s
[info]                  ·gc.alloc.rate:                   1719.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9472.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 339130.647 ops/s
[info]                  ·gc.alloc.rate:                   1727.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6294.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 336080.253 ops/s
[info]                  ·gc.alloc.rate:                   1711.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9536.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   336047.230 ±(99.9%) 13424.575 ops/s [Average]
[info]   (min, avg, max) = (330128.554, 336047.230, 339130.647), stdev = 3486.320
[info]   CI (99.9%): [322622.655, 349471.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1711.415 ±(99.9%) 68.216 MB/sec [Average]
[info]   (min, avg, max) = (1681.269, 1711.415, 1727.039), stdev = 17.715
[info]   CI (99.9%): [1643.199, 1779.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.254 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.254, 0.389), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1761.359 ±(99.9%) 1429.454 MB/sec [Average]
[info]   (min, avg, max) = (1353.389, 1761.359, 2036.601), stdev = 371.225
[info]   CI (99.9%): [331.905, 3190.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8258.523 ±(99.9%) 6868.720 B/op [Average]
[info]   (min, avg, max) = (6294.040, 8258.523, 9671.546), stdev = 1783.785
[info]   CI (99.9%): [1389.803, 15127.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53909.647 ops/s
[info] # Warmup Iteration   2: 66431.037 ops/s
[info] # Warmup Iteration   3: 67709.082 ops/s
[info] # Warmup Iteration   4: 68390.195 ops/s
[info] # Warmup Iteration   5: 68267.498 ops/s
[info] Iteration   1: 66891.801 ops/s
[info]                  ·gc.alloc.rate:                   1911.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47428.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 68335.486 ops/s
[info]                  ·gc.alloc.rate:                   1954.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46501.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 61481.369 ops/s
[info]                  ·gc.alloc.rate:                   1757.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34506.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68313.208 ops/s
[info]                  ·gc.alloc.rate:                   1953.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46646.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 68445.658 ops/s
[info]                  ·gc.alloc.rate:                   1956.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46633.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   66693.504 ±(99.9%) 11486.812 ops/s [Average]
[info]   (min, avg, max) = (61481.369, 66693.504, 68445.658), stdev = 2983.089
[info]   CI (99.9%): [55206.693, 78180.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1906.691 ±(99.9%) 328.966 MB/sec [Average]
[info]   (min, avg, max) = (1757.503, 1906.691, 1956.766), stdev = 85.431
[info]   CI (99.9%): [1577.724, 2235.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44992.006, 44992.006, 44992.007), stdev = 0.001
[info]   CI (99.9%): [44992.005, 44992.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.059 ±(99.9%) 3.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.059, 2.398), stdev = 0.922
[info]   CI (99.9%): [≈ 0, 4.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1887.228 ±(99.9%) 1161.082 MB/sec [Average]
[info]   (min, avg, max) = (1347.905, 1887.228, 2028.157), stdev = 301.529
[info]   CI (99.9%): [726.146, 3048.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   44343.118 ±(99.9%) 21221.238 B/op [Average]
[info]   (min, avg, max) = (34506.319, 44343.118, 47428.155), stdev = 5511.088
[info]   CI (99.9%): [23121.881, 65564.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46731.185 ops/s
[info] # Warmup Iteration   2: 83666.568 ops/s
[info] # Warmup Iteration   3: 83648.779 ops/s
[info] # Warmup Iteration   4: 84820.565 ops/s
[info] # Warmup Iteration   5: 84653.421 ops/s
[info] Iteration   1: 84709.396 ops/s
[info]                  ·gc.alloc.rate:                   1305.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25112.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 85033.549 ops/s
[info]                  ·gc.alloc.rate:                   1310.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12514.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 84781.606 ops/s
[info]                  ·gc.alloc.rate:                   1306.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25127.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 84870.809 ops/s
[info]                  ·gc.alloc.rate:                   1307.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25112.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 84847.086 ops/s
[info]                  ·gc.alloc.rate:                   1307.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              24256.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25144.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   84848.489 ±(99.9%) 465.943 ops/s [Average]
[info]   (min, avg, max) = (84709.396, 84848.489, 85033.549), stdev = 121.004
[info]   CI (99.9%): [84382.546, 85314.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1307.554 ±(99.9%) 7.100 MB/sec [Average]
[info]   (min, avg, max) = (1305.277, 1307.554, 1310.273), stdev = 1.844
[info]   CI (99.9%): [1300.454, 1314.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24256.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24256.005, 24256.005, 24256.005), stdev = 0.001
[info]   CI (99.9%): [24256.004, 24256.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.464 ±(99.9%) 1.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.464, 0.774), stdev = 0.423
[info]   CI (99.9%): [≈ 0, 2.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.130 ±(99.9%) 1166.982 MB/sec [Average]
[info]   (min, avg, max) = (676.004, 1218.130, 1355.626), stdev = 303.062
[info]   CI (99.9%): [51.148, 2385.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22602.366 ±(99.9%) 21715.358 B/op [Average]
[info]   (min, avg, max) = (12514.311, 22602.366, 25144.670), stdev = 5639.410
[info]   CI (99.9%): [887.008, 44317.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147431.638 ops/s
[info] # Warmup Iteration   2: 160429.047 ops/s
[info] # Warmup Iteration   3: 163109.133 ops/s
[info] # Warmup Iteration   4: 161790.149 ops/s
[info] # Warmup Iteration   5: 163034.824 ops/s
[info] Iteration   1: 159538.035 ops/s
[info]                  ·gc.alloc.rate:                   2343.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26574.843 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 163086.240 ops/s
[info]                  ·gc.alloc.rate:                   2395.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19536.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 162405.803 ops/s
[info]                  ·gc.alloc.rate:                   2385.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26209.881 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 162823.533 ops/s
[info]                  ·gc.alloc.rate:                   2391.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26193.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 162991.197 ops/s
[info]                  ·gc.alloc.rate:                   2395.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19650.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   162168.962 ±(99.9%) 5751.464 ops/s [Average]
[info]   (min, avg, max) = (159538.035, 162168.962, 163086.240), stdev = 1493.637
[info]   CI (99.9%): [156417.498, 167920.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2382.135 ±(99.9%) 84.991 MB/sec [Average]
[info]   (min, avg, max) = (2343.313, 2382.135, 2395.503), stdev = 22.072
[info]   CI (99.9%): [2297.144, 2467.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23120.003, 23120.003, 23120.003), stdev = 0.001
[info]   CI (99.9%): [23120.002, 23120.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.564 ±(99.9%) 1.145 B/op [Average]
[info]   (min, avg, max) = (0.205, 0.564, 1.006), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2433.353 ±(99.9%) 1418.528 MB/sec [Average]
[info]   (min, avg, max) = (2024.189, 2433.353, 2709.294), stdev = 368.387
[info]   CI (99.9%): [1014.825, 3851.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23632.886 ±(99.9%) 14213.056 B/op [Average]
[info]   (min, avg, max) = (19536.288, 23632.886, 26574.843), stdev = 3691.085
[info]   CI (99.9%): [9419.830, 37845.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30697.099 ops/s
[info] # Warmup Iteration   2: 50513.300 ops/s
[info] # Warmup Iteration   3: 50941.385 ops/s
[info] # Warmup Iteration   4: 51441.179 ops/s
[info] # Warmup Iteration   5: 51510.584 ops/s
[info] Iteration   1: 51662.794 ops/s
[info]                  ·gc.alloc.rate:                   2715.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82695.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 51806.479 ops/s
[info]                  ·gc.alloc.rate:                   2723.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82566.633 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 51102.638 ops/s
[info]                  ·gc.alloc.rate:                   2687.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83782.685 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 51607.593 ops/s
[info]                  ·gc.alloc.rate:                   2713.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83006.849 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 51600.115 ops/s
[info]                  ·gc.alloc.rate:                   2712.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83057.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   51555.924 ±(99.9%) 1026.559 ops/s [Average]
[info]   (min, avg, max) = (51102.638, 51555.924, 51806.479), stdev = 266.594
[info]   CI (99.9%): [50529.365, 52582.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2710.806 ±(99.9%) 52.243 MB/sec [Average]
[info]   (min, avg, max) = (2687.864, 2710.806, 2723.927), stdev = 13.567
[info]   CI (99.9%): [2658.563, 2763.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (82760.008, 82760.008, 82760.009), stdev = 0.001
[info]   CI (99.9%): [82760.007, 82760.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.270 ±(99.9%) 2.437 B/op [Average]
[info]   (min, avg, max) = (0.635, 1.270, 1.905), stdev = 0.633
[info]   CI (99.9%): [≈ 0, 3.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2719.317 ±(99.9%) 13.794 MB/sec [Average]
[info]   (min, avg, max) = (2713.870, 2719.317, 2722.616), stdev = 3.582
[info]   CI (99.9%): [2705.523, 2733.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83021.714 ±(99.9%) 1820.644 B/op [Average]
[info]   (min, avg, max) = (82566.633, 83021.714, 83782.685), stdev = 472.816
[info]   CI (99.9%): [81201.069, 84842.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184854.331 ops/s
[info] # Warmup Iteration   2: 247648.574 ops/s
[info] # Warmup Iteration   3: 252892.410 ops/s
[info] # Warmup Iteration   4: 253377.059 ops/s
[info] # Warmup Iteration   5: 253470.024 ops/s
[info] Iteration   1: 254144.893 ops/s
[info]                  ·gc.alloc.rate:                   1215.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              7528.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4158.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 253662.157 ops/s
[info]                  ·gc.alloc.rate:                   1213.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              7528.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8328.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 253002.961 ops/s
[info]                  ·gc.alloc.rate:                   1210.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              7528.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8350.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 252954.886 ops/s
[info]                  ·gc.alloc.rate:                   1210.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              7528.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8358.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 253414.303 ops/s
[info]                  ·gc.alloc.rate:                   1212.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              7528.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8348.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   253435.840 ±(99.9%) 1899.290 ops/s [Average]
[info]   (min, avg, max) = (252954.886, 253435.840, 254144.893), stdev = 493.240
[info]   CI (99.9%): [251536.550, 255335.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1212.281 ±(99.9%) 8.697 MB/sec [Average]
[info]   (min, avg, max) = (1210.099, 1212.281, 1215.443), stdev = 2.259
[info]   CI (99.9%): [1203.584, 1220.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7528.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7528.002, 7528.002, 7528.002), stdev = 0.001
[info]   CI (99.9%): [7528.001, 7528.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.207 ±(99.9%) 0.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 0.517), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208.830 ±(99.9%) 1156.921 MB/sec [Average]
[info]   (min, avg, max) = (671.373, 1208.830, 1344.401), stdev = 300.449
[info]   CI (99.9%): [51.909, 2365.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7508.765 ±(99.9%) 7212.396 B/op [Average]
[info]   (min, avg, max) = (4158.233, 7508.765, 8358.052), stdev = 1873.036
[info]   CI (99.9%): [296.368, 14721.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335395.486 ops/s
[info] # Warmup Iteration   2: 573465.519 ops/s
[info] # Warmup Iteration   3: 577320.116 ops/s
[info] # Warmup Iteration   4: 574515.521 ops/s
[info] # Warmup Iteration   5: 576039.170 ops/s
[info] Iteration   1: 575007.917 ops/s
[info]                  ·gc.alloc.rate:                   496.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1400.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 574533.293 ops/s
[info]                  ·gc.alloc.rate:                   496.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1846.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 573918.354 ops/s
[info]                  ·gc.alloc.rate:      495.875 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 573259.427 ops/s
[info]                  ·gc.alloc.rate:                   495.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1850.776 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 561730.060 ops/s
[info]                  ·gc.alloc.rate:                   485.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1890.634 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   571689.810 ±(99.9%) 21587.827 ops/s [Average]
[info]   (min, avg, max) = (561730.060, 571689.810, 575007.917), stdev = 5606.290
[info]   CI (99.9%): [550101.983, 593277.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   493.945 ±(99.9%) 18.555 MB/sec [Average]
[info]   (min, avg, max) = (485.382, 493.945, 496.777), stdev = 4.819
[info]   CI (99.9%): [475.389, 512.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1360.001, 1360.001), stdev = 0.001
[info]   CI (99.9%): [1360.001, 1360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.333), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.194 ±(99.9%) 1.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.912), stdev = 0.402
[info]   CI (99.9%): [≈ 0, 1.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.864 ±(99.9%) 1124.317 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.864, 674.765), stdev = 291.982
[info]   CI (99.9%): [≈ 0, 1631.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1397.678 ±(99.9%) 3106.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1397.678, 1890.634), stdev = 806.757
[info]   CI (99.9%): [≈ 0, 4504.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 740589.583 ops/s
[info] # Warmup Iteration   2: 773738.840 ops/s
[info] # Warmup Iteration   3: 795654.138 ops/s
[info] # Warmup Iteration   4: 784064.085 ops/s
[info] # Warmup Iteration   5: 800332.092 ops/s
[info] Iteration   1: 802721.476 ops/s
[info]                  ·gc.alloc.rate:                   432.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1003.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 804868.352 ops/s
[info]                  ·gc.alloc.rate:      433.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 804237.911 ops/s
[info]                  ·gc.alloc.rate:                   433.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1001.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 803094.769 ops/s
[info]                  ·gc.alloc.rate:                   432.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1322.445 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 793349.802 ops/s
[info]                  ·gc.alloc.rate:      427.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   801654.462 ±(99.9%) 18182.184 ops/s [Average]
[info]   (min, avg, max) = (793349.802, 801654.462, 804868.352), stdev = 4721.855
[info]   CI (99.9%): [783472.278, 819836.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   431.900 ±(99.9%) 9.896 MB/sec [Average]
[info]   (min, avg, max) = (427.389, 431.900, 433.696), stdev = 2.570
[info]   CI (99.9%): [422.003, 441.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.317), stdev = 1.481
[info]   CI (99.9%): [≈ 0, 6.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.309 ±(99.9%) 11.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.309, 6.500), stdev = 2.902
[info]   CI (99.9%): [≈ 0, 12.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.574 ±(99.9%) 1220.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.574, 674.741), stdev = 317.064
[info]   CI (99.9%): [≈ 0, 1560.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   665.351 ±(99.9%) 2392.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 665.351, 1322.445), stdev = 621.296
[info]   CI (99.9%): [≈ 0, 3057.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 612903.041 ops/s
[info] # Warmup Iteration   2: 630834.368 ops/s
[info] # Warmup Iteration   3: 618015.923 ops/s
[info] # Warmup Iteration   4: 618849.985 ops/s
[info] # Warmup Iteration   5: 618304.456 ops/s
[info] Iteration   1: 614179.821 ops/s
[info]                  ·gc.alloc.rate:      6.243 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 618096.523 ops/s
[info]                  ·gc.alloc.rate:      6.283 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 618007.712 ops/s
[info]                  ·gc.alloc.rate:      6.282 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 618588.942 ops/s
[info]                  ·gc.alloc.rate:      6.288 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 618367.247 ops/s
[info]                  ·gc.alloc.rate:      6.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   617448.049 ±(99.9%) 7090.210 ops/s [Average]
[info]   (min, avg, max) = (614179.821, 617448.049, 618588.942), stdev = 1841.305
[info]   CI (99.9%): [610357.839, 624538.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.276 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (6.243, 6.276, 6.288), stdev = 0.019
[info]   CI (99.9%): [6.203, 6.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23246.327 ops/s
[info] # Warmup Iteration   2: 33921.171 ops/s
[info] # Warmup Iteration   3: 34340.871 ops/s
[info] # Warmup Iteration   4: 34279.821 ops/s
[info] # Warmup Iteration   5: 34693.109 ops/s
[info] Iteration   1: 34570.542 ops/s
[info]                  ·gc.alloc.rate:                   1784.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91462.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34586.829 ops/s
[info]                  ·gc.alloc.rate:                   1785.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91556.783 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34650.393 ops/s
[info]                  ·gc.alloc.rate:                   1789.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61010.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34625.443 ops/s
[info]                  ·gc.alloc.rate:                   1787.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91741.317 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34601.197 ops/s
[info]                  ·gc.alloc.rate:                   1785.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91986.730 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   34606.881 ±(99.9%) 121.656 ops/s [Average]
[info]   (min, avg, max) = (34570.542, 34606.881, 34650.393), stdev = 31.594
[info]   CI (99.9%): [34485.225, 34728.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1786.365 ±(99.9%) 7.010 MB/sec [Average]
[info]   (min, avg, max) = (1784.363, 1786.365, 1789.065), stdev = 1.821
[info]   CI (99.9%): [1779.354, 1793.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81248.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81248.012, 81248.012, 81248.013), stdev = 0.001
[info]   CI (99.9%): [81248.010, 81248.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.082 ±(99.9%) 3.046 B/op [Average]
[info]   (min, avg, max) = (0.947, 2.082, 2.840), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 5.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1880.785 ±(99.9%) 1156.831 MB/sec [Average]
[info]   (min, avg, max) = (1343.447, 1880.785, 2021.974), stdev = 300.425
[info]   CI (99.9%): [723.953, 3037.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85551.675 ±(99.9%) 52831.563 B/op [Average]
[info]   (min, avg, max) = (61010.864, 85551.675, 91986.730), stdev = 13720.189
[info]   CI (99.9%): [32720.112, 138383.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4481352.027 ops/s
[info] # Warmup Iteration   2: 5229026.796 ops/s
[info] # Warmup Iteration   3: 5250417.127 ops/s
[info] # Warmup Iteration   4: 5211856.911 ops/s
[info] # Warmup Iteration   5: 5253343.671 ops/s
[info] Iteration   1: 5208352.237 ops/s
[info]                  ·gc.alloc.rate:                   3838.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4065.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1228.603 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5262058.224 ops/s
[info]                  ·gc.alloc.rate:                   3878.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1015.398 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5215516.090 ops/s
[info]                  ·gc.alloc.rate:                   3843.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1231.033 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5255196.211 ops/s
[info]                  ·gc.alloc.rate:                   3872.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.894 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5274982.132 ops/s
[info]                  ·gc.alloc.rate:                   3887.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1015.727 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5243220.979 ±(99.9%) 113747.411 ops/s [Average]
[info]   (min, avg, max) = (5208352.237, 5243220.979, 5274982.132), stdev = 29539.841
[info]   CI (99.9%): [5129473.568, 5356968.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3864.149 ±(99.9%) 84.053 MB/sec [Average]
[info]   (min, avg, max) = (3838.667, 3864.149, 3887.326), stdev = 21.828
[info]   CI (99.9%): [3780.096, 3948.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.024, 0.031), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3805.217 ±(99.9%) 1426.251 MB/sec [Average]
[info]   (min, avg, max) = (3395.242, 3805.217, 4082.635), stdev = 370.393
[info]   CI (99.9%): [2378.966, 5231.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1142.731 ±(99.9%) 447.160 B/op [Average]
[info]   (min, avg, max) = (1015.398, 1142.731, 1231.033), stdev = 116.126
[info]   CI (99.9%): [695.570, 1589.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721186.620 ops/s
[info] # Warmup Iteration   2: 7185646.067 ops/s
[info] # Warmup Iteration   3: 7475364.126 ops/s
[info] # Warmup Iteration   4: 7653066.971 ops/s
[info] # Warmup Iteration   5: 7488204.249 ops/s
[info] Iteration   1: 7691788.956 ops/s
[info]                  ·gc.alloc.rate:                   821.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7665769.173 ops/s
[info]                  ·gc.alloc.rate:                   818.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7689723.446 ops/s
[info]                  ·gc.alloc.rate:                   820.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7652293.070 ops/s
[info]                  ·gc.alloc.rate:                   816.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7678307.518 ops/s
[info]                  ·gc.alloc.rate:                   819.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7675576.432 ±(99.9%) 64108.887 ops/s [Average]
[info]   (min, avg, max) = (7652293.070, 7675576.432, 7691788.956), stdev = 16648.874
[info]   CI (99.9%): [7611467.546, 7739685.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   819.303 ±(99.9%) 6.974 MB/sec [Average]
[info]   (min, avg, max) = (816.784, 819.303, 821.074), stdev = 1.811
[info]   CI (99.9%): [812.328, 826.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.009), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   806.857 ±(99.9%) 1156.595 MB/sec [Average]
[info]   (min, avg, max) = (672.077, 806.857, 1344.163), stdev = 300.364
[info]   CI (99.9%): [≈ 0, 1963.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   165.533 ±(99.9%) 238.808 B/op [Average]
[info]   (min, avg, max) = (137.566, 165.533, 276.474), stdev = 62.018
[info]   CI (99.9%): [≈ 0, 404.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2824414.356 ops/s
[info] # Warmup Iteration   2: 4460085.295 ops/s
[info] # Warmup Iteration   3: 4588684.031 ops/s
[info] # Warmup Iteration   4: 4605365.521 ops/s
[info] # Warmup Iteration   5: 4497643.353 ops/s
[info] Iteration   1: 4620251.040 ops/s
[info]                  ·gc.alloc.rate:                   2395.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 921.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4619718.249 ops/s
[info]                  ·gc.alloc.rate:                   2394.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 692.289 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4553024.473 ops/s
[info]                  ·gc.alloc.rate:                   2360.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 937.785 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4628644.801 ops/s
[info]                  ·gc.alloc.rate:                   2399.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 692.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4604081.727 ops/s
[info]                  ·gc.alloc.rate:                   2386.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 929.263 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4605144.058 ±(99.9%) 117278.701 ops/s [Average]
[info]   (min, avg, max) = (4553024.473, 4605144.058, 4628644.801), stdev = 30456.906
[info]   CI (99.9%): [4487865.357, 4722422.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2387.554 ±(99.9%) 60.725 MB/sec [Average]
[info]   (min, avg, max) = (2360.594, 2387.554, 2399.563), stdev = 15.770
[info]   CI (99.9%): [2326.829, 2448.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.031, 0.035), stdev = 0.006
[info]   CI (99.9%): [0.007, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2440.931 ±(99.9%) 1429.610 MB/sec [Average]
[info]   (min, avg, max) = (2031.708, 2440.931, 2718.156), stdev = 371.265
[info]   CI (99.9%): [1011.321, 3870.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   834.649 ±(99.9%) 500.292 B/op [Average]
[info]   (min, avg, max) = (692.289, 834.649, 937.785), stdev = 129.924
[info]   CI (99.9%): [334.357, 1334.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7753420.584 ops/s
[info] # Warmup Iteration   2: 8222645.967 ops/s
[info] # Warmup Iteration   3: 8263828.280 ops/s
[info] # Warmup Iteration   4: 8275144.310 ops/s
[info] # Warmup Iteration   5: 8297596.532 ops/s
[info] Iteration   1: 8273903.175 ops/s
[info]                  ·gc.alloc.rate:                   883.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8313257.404 ops/s
[info]                  ·gc.alloc.rate:                   887.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 8303413.290 ops/s
[info]                  ·gc.alloc.rate:                   886.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254.533 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8319298.013 ops/s
[info]                  ·gc.alloc.rate:                   887.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8311787.222 ops/s
[info]                  ·gc.alloc.rate:                   887.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   8304331.821 ±(99.9%) 69043.187 ops/s [Average]
[info]   (min, avg, max) = (8273903.175, 8304331.821, 8319298.013), stdev = 17930.296
[info]   CI (99.9%): [8235288.634, 8373375.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   886.437 ±(99.9%) 7.491 MB/sec [Average]
[info]   (min, avg, max) = (883.040, 886.437, 887.952), stdev = 1.945
[info]   CI (99.9%): [878.946, 893.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.343 ±(99.9%) 1156.374 MB/sec [Average]
[info]   (min, avg, max) = (671.396, 806.343, 1343.547), stdev = 300.307
[info]   CI (99.9%): [≈ 0, 1962.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   152.811 ±(99.9%) 218.968 B/op [Average]
[info]   (min, avg, max) = (127.029, 152.811, 254.533), stdev = 56.865
[info]   CI (99.9%): [≈ 0, 371.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4122199.319 ops/s
[info] # Warmup Iteration   2: 5435800.547 ops/s
[info] # Warmup Iteration   3: 5536150.005 ops/s
[info] # Warmup Iteration   4: 5519211.303 ops/s
[info] # Warmup Iteration   5: 5504463.135 ops/s
[info] Iteration   1: 5514273.542 ops/s
[info]                  ·gc.alloc.rate:                   2970.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 768.905 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5509618.056 ops/s
[info]                  ·gc.alloc.rate:                   2968.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3377.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5515416.836 ops/s
[info]                  ·gc.alloc.rate:                   2971.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 772.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5506128.741 ops/s
[info]                  ·gc.alloc.rate:                   2966.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5509420.384 ops/s
[info]                  ·gc.alloc.rate:                   2968.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 776.155 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5510971.512 ±(99.9%) 14707.568 ops/s [Average]
[info]   (min, avg, max) = (5506128.741, 5510971.512, 5515416.836), stdev = 3819.509
[info]   CI (99.9%): [5496263.944, 5525679.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2969.051 ±(99.9%) 7.192 MB/sec [Average]
[info]   (min, avg, max) = (2966.549, 2969.051, 2971.015), stdev = 1.868
[info]   CI (99.9%): [2961.858, 2976.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.020, 0.024), stdev = 0.003
[info]   CI (99.9%): [0.008, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2977.490 ±(99.9%) 1431.572 MB/sec [Average]
[info]   (min, avg, max) = (2693.673, 2977.490, 3391.262), stdev = 371.775
[info]   CI (99.9%): [1545.918, 4409.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   850.448 ±(99.9%) 410.360 B/op [Average]
[info]   (min, avg, max) = (768.905, 850.448, 969.406), stdev = 106.569
[info]   CI (99.9%): [440.088, 1260.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2516389.903 ops/s
[info] # Warmup Iteration   2: 3221228.083 ops/s
[info] # Warmup Iteration   3: 3279758.975 ops/s
[info] # Warmup Iteration   4: 3281278.529 ops/s
[info] # Warmup Iteration   5: 3333365.370 ops/s
[info] Iteration   1: 3348909.290 ops/s
[info]                  ·gc.alloc.rate:                   799.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3347656.936 ops/s
[info]                  ·gc.alloc.rate:                   799.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3341287.500 ops/s
[info]                  ·gc.alloc.rate:                   798.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3337716.702 ops/s
[info]                  ·gc.alloc.rate:                   797.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3340254.142 ops/s
[info]                  ·gc.alloc.rate:                   798.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3343164.914 ±(99.9%) 18751.530 ops/s [Average]
[info]   (min, avg, max) = (3337716.702, 3343164.914, 3348909.290), stdev = 4869.713
[info]   CI (99.9%): [3324413.384, 3361916.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   798.702 ±(99.9%) 4.216 MB/sec [Average]
[info]   (min, avg, max) = (797.314, 798.702, 799.905), stdev = 1.095
[info]   CI (99.9%): [794.486, 802.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.039), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806.608 ±(99.9%) 1154.818 MB/sec [Average]
[info]   (min, avg, max) = (671.423, 806.608, 1343.087), stdev = 299.903
[info]   CI (99.9%): [≈ 0, 1961.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   379.771 ±(99.9%) 544.604 B/op [Average]
[info]   (min, avg, max) = (316.004, 379.771, 632.772), stdev = 141.432
[info]   CI (99.9%): [≈ 0, 924.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112660.576 ops/s
[info] # Warmup Iteration   2: 7224335.880 ops/s
[info] # Warmup Iteration   3: 7015897.474 ops/s
[info] # Warmup Iteration   4: 7276162.368 ops/s
[info] # Warmup Iteration   5: 7345796.760 ops/s
[info] Iteration   1: 7344596.801 ops/s
[info]                  ·gc.alloc.rate:                   709.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7348734.769 ops/s
[info]                  ·gc.alloc.rate:                   709.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7116644.051 ops/s
[info]                  ·gc.alloc.rate:                   687.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.637 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 7351781.224 ops/s
[info]                  ·gc.alloc.rate:                   710.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7337222.928 ops/s
[info]                  ·gc.alloc.rate:                   708.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7299795.955 ±(99.9%) 394808.335 ops/s [Average]
[info]   (min, avg, max) = (7116644.051, 7299795.955, 7351781.224), stdev = 102530.471
[info]   CI (99.9%): [6904987.619, 7694604.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   704.983 ±(99.9%) 38.344 MB/sec [Average]
[info]   (min, avg, max) = (687.205, 704.983, 710.143), stdev = 9.958
[info]   CI (99.9%): [666.639, 743.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.531), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.110 ±(99.9%) 0.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.542), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.782 ±(99.9%) 3.642 MB/sec [Average]
[info]   (min, avg, max) = (671.998, 672.782, 673.896), stdev = 0.946
[info]   CI (99.9%): [669.141, 676.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   145.080 ±(99.9%) 7.691 B/op [Average]
[info]   (min, avg, max) = (143.890, 145.080, 148.637), stdev = 1.997
[info]   CI (99.9%): [137.389, 152.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1425202.599 ops/s
[info] # Warmup Iteration   2: 1901346.476 ops/s
[info] # Warmup Iteration   3: 1961799.600 ops/s
[info] # Warmup Iteration   4: 1921764.669 ops/s
[info] # Warmup Iteration   5: 1955376.845 ops/s
[info] Iteration   1: 1961526.754 ops/s
[info]                  ·gc.alloc.rate:                   608.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1951412.976 ops/s
[info]                  ·gc.alloc.rate:                   605.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 541.288 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1959919.405 ops/s
[info]                  ·gc.alloc.rate:                   607.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 539.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1956899.740 ops/s
[info]                  ·gc.alloc.rate:                   606.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1966714.846 ops/s
[info]                  ·gc.alloc.rate:                   609.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1959294.744 ±(99.9%) 21807.048 ops/s [Average]
[info]   (min, avg, max) = (1951412.976, 1959294.744, 1966714.846), stdev = 5663.221
[info]   CI (99.9%): [1937487.696, 1981101.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   607.454 ±(99.9%) 6.665 MB/sec [Average]
[info]   (min, avg, max) = (605.094, 607.454, 609.721), stdev = 1.731
[info]   CI (99.9%): [600.789, 614.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.034), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   671.670 ±(99.9%) 2.409 MB/sec [Average]
[info]   (min, avg, max) = (671.167, 671.670, 672.703), stdev = 0.626
[info]   CI (99.9%): [669.261, 674.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   539.591 ±(99.9%) 4.720 B/op [Average]
[info]   (min, avg, max) = (538.410, 539.591, 541.288), stdev = 1.226
[info]   CI (99.9%): [534.871, 544.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8632295.855 ops/s
[info] # Warmup Iteration   2: 9190302.061 ops/s
[info] # Warmup Iteration   3: 9192266.620 ops/s
[info] # Warmup Iteration   4: 9354638.429 ops/s
[info] # Warmup Iteration   5: 9041122.496 ops/s
[info] Iteration   1: 9461560.189 ops/s
[info]                  ·gc.alloc.rate:                   913.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9464636.748 ops/s
[info]                  ·gc.alloc.rate:                   914.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 9422234.555 ops/s
[info]                  ·gc.alloc.rate:                   909.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9342505.983 ops/s
[info]                  ·gc.alloc.rate:                   902.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9448290.599 ops/s
[info]                  ·gc.alloc.rate:                   912.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.849 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9427845.615 ±(99.9%) 194663.229 ops/s [Average]
[info]   (min, avg, max) = (9342505.983, 9427845.615, 9464636.748), stdev = 50553.422
[info]   CI (99.9%): [9233182.386, 9622508.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   910.525 ±(99.9%) 18.649 MB/sec [Average]
[info]   (min, avg, max) = (902.366, 910.525, 914.136), stdev = 4.843
[info]   CI (99.9%): [891.876, 929.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.582 ±(99.9%) 1157.482 MB/sec [Average]
[info]   (min, avg, max) = (671.384, 806.582, 1344.300), stdev = 300.594
[info]   CI (99.9%): [≈ 0, 1964.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134.664 ±(99.9%) 193.494 B/op [Average]
[info]   (min, avg, max) = (111.849, 134.664, 224.549), stdev = 50.250
[info]   CI (99.9%): [≈ 0, 328.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8765831.258 ops/s
[info] # Warmup Iteration   2: 9183387.171 ops/s
[info] # Warmup Iteration   3: 9224984.855 ops/s
[info] # Warmup Iteration   4: 9225419.495 ops/s
[info] # Warmup Iteration   5: 9225609.151 ops/s
[info] Iteration   1: 9223438.526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9227990.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9226477.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9218316.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9223135.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9223871.914 ±(99.9%) 14322.707 ops/s [Average]
[info]   (min, avg, max) = (9218316.978, 9223871.914, 9227990.788), stdev = 3719.562
[info]   CI (99.9%): [9209549.207, 9238194.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2719003.382 ops/s
[info] # Warmup Iteration   2: 3352189.506 ops/s
[info] # Warmup Iteration   3: 3427730.463 ops/s
[info] # Warmup Iteration   4: 3520770.403 ops/s
[info] # Warmup Iteration   5: 3505365.425 ops/s
[info] Iteration   1: 3530742.316 ops/s
[info]                  ·gc.alloc.rate:                   1130.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 597.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3511922.380 ops/s
[info]                  ·gc.alloc.rate:                   1124.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3524455.116 ops/s
[info]                  ·gc.alloc.rate:                   1128.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 597.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3521529.788 ops/s
[info]                  ·gc.alloc.rate:                   1127.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3525097.791 ops/s
[info]                  ·gc.alloc.rate:                   1128.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.327 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3522749.478 ±(99.9%) 26610.075 ops/s [Average]
[info]   (min, avg, max) = (3511922.380, 3522749.478, 3530742.316), stdev = 6910.552
[info]   CI (99.9%): [3496139.403, 3549359.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1128.061 ±(99.9%) 8.407 MB/sec [Average]
[info]   (min, avg, max) = (1124.619, 1128.061, 1130.597), stdev = 2.183
[info]   CI (99.9%): [1119.654, 1136.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.718 ±(99.9%) 1412.350 MB/sec [Average]
[info]   (min, avg, max) = (669.477, 1071.718, 1340.223), stdev = 366.783
[info]   CI (99.9%): [≈ 0, 2484.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   478.683 ±(99.9%) 629.233 B/op [Average]
[info]   (min, avg, max) = (299.327, 478.683, 598.703), stdev = 163.410
[info]   CI (99.9%): [≈ 0, 1107.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588763.241 ops/s
[info] # Warmup Iteration   2: 796320.557 ops/s
[info] # Warmup Iteration   3: 840459.917 ops/s
[info] # Warmup Iteration   4: 845348.310 ops/s
[info] # Warmup Iteration   5: 844468.792 ops/s
[info] Iteration   1: 845011.108 ops/s
[info]                  ·gc.alloc.rate:                   1481.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3751.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 848684.175 ops/s
[info]                  ·gc.alloc.rate:                   1488.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2491.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 844668.401 ops/s
[info]                  ·gc.alloc.rate:                   1481.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2504.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 846816.964 ops/s
[info]                  ·gc.alloc.rate:                   1484.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2502.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 829583.960 ops/s
[info]                  ·gc.alloc.rate:                   1455.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2556.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   842952.922 ±(99.9%) 29432.010 ops/s [Average]
[info]   (min, avg, max) = (829583.960, 842952.922, 848684.175), stdev = 7643.400
[info]   CI (99.9%): [813520.912, 872384.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1478.195 ±(99.9%) 50.724 MB/sec [Average]
[info]   (min, avg, max) = (1455.153, 1478.195, 1488.102), stdev = 13.173
[info]   CI (99.9%): [1427.471, 1528.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.000, 2760.000, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.000, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.108 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.194), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479.191 ±(99.9%) 1151.292 MB/sec [Average]
[info]   (min, avg, max) = (1343.456, 1479.191, 2014.026), stdev = 298.987
[info]   CI (99.9%): [327.899, 2630.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2761.477 ±(99.9%) 2134.351 B/op [Average]
[info]   (min, avg, max) = (2491.724, 2761.477, 3751.986), stdev = 554.284
[info]   CI (99.9%): [627.126, 4895.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.928 ops/s
[info] # Warmup Iteration   2: 1818299.799 ops/s
[info] # Warmup Iteration   3: 1825984.811 ops/s
[info] # Warmup Iteration   4: 1847103.228 ops/s
[info] # Warmup Iteration   5: 1775151.715 ops/s
[info] Iteration   1: 1852648.841 ops/s
[info]                  ·gc.alloc.rate:                   518.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.609 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1862034.960 ops/s
[info]                  ·gc.alloc.rate:      520.520 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1859122.422 ops/s
[info]                  ·gc.alloc.rate:                   519.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 570.396 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1859543.373 ops/s
[info]                  ·gc.alloc.rate:                   519.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 570.288 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1859818.431 ops/s
[info]                  ·gc.alloc.rate:                   519.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 569.357 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1858633.605 ±(99.9%) 13594.607 ops/s [Average]
[info]   (min, avg, max) = (1852648.841, 1858633.605, 1862034.960), stdev = 3530.476
[info]   CI (99.9%): [1845038.998, 1872228.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   519.602 ±(99.9%) 3.453 MB/sec [Average]
[info]   (min, avg, max) = (518.104, 519.602, 520.520), stdev = 0.897
[info]   CI (99.9%): [516.150, 523.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.499 ±(99.9%) 4.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.499, 2.493), stdev = 1.115
[info]   CI (99.9%): [≈ 0, 4.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.422 ±(99.9%) 3.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.422, 2.111), stdev = 0.944
[info]   CI (99.9%): [≈ 0, 4.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.384 ±(99.9%) 1122.852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.384, 673.754), stdev = 291.601
[info]   CI (99.9%): [≈ 0, 1629.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   428.930 ±(99.9%) 950.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 428.930, 570.396), stdev = 246.844
[info]   CI (99.9%): [≈ 0, 1379.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 534229.220 ops/s
[info] # Warmup Iteration   2: 1013450.322 ops/s
[info] # Warmup Iteration   3: 1105717.472 ops/s
[info] # Warmup Iteration   4: 1106324.869 ops/s
[info] # Warmup Iteration   5: 1107997.902 ops/s
[info] Iteration   1: 1107563.869 ops/s
[info]                  ·gc.alloc.rate:                   816.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 953.707 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1103207.038 ops/s
[info]                  ·gc.alloc.rate:                   813.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1916.868 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1101484.642 ops/s
[info]                  ·gc.alloc.rate:                   811.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.354 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1101358.681 ops/s
[info]                  ·gc.alloc.rate:                   811.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1104985.208 ops/s
[info]                  ·gc.alloc.rate:                   814.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 959.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1103719.888 ±(99.9%) 10043.440 ops/s [Average]
[info]   (min, avg, max) = (1101358.681, 1103719.888, 1107563.869), stdev = 2608.250
[info]   CI (99.9%): [1093676.447, 1113763.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   813.401 ±(99.9%) 7.357 MB/sec [Average]
[info]   (min, avg, max) = (811.685, 813.401, 816.169), stdev = 1.910
[info]   CI (99.9%): [806.045, 820.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.030 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.089), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   806.690 ±(99.9%) 1155.497 MB/sec [Average]
[info]   (min, avg, max) = (671.022, 806.690, 1343.485), stdev = 300.079
[info]   CI (99.9%): [≈ 0, 1962.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1150.526 ±(99.9%) 1649.654 B/op [Average]
[info]   (min, avg, max) = (953.707, 1150.526, 1916.868), stdev = 428.410
[info]   CI (99.9%): [≈ 0, 2800.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2334949.281 ops/s
[info] # Warmup Iteration   2: 2545024.162 ops/s
[info] # Warmup Iteration   3: 2579442.919 ops/s
[info] # Warmup Iteration   4: 2560171.518 ops/s
[info] # Warmup Iteration   5: 2542545.285 ops/s
[info] Iteration   1: 2592514.844 ops/s
[info]                  ·gc.alloc.rate:                   724.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2593932.317 ops/s
[info]                  ·gc.alloc.rate:                   725.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2590258.052 ops/s
[info]                  ·gc.alloc.rate:                   724.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 817.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2594706.475 ops/s
[info]                  ·gc.alloc.rate:                   725.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2591869.835 ops/s
[info]                  ·gc.alloc.rate:                   724.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2592656.305 ±(99.9%) 6730.802 ops/s [Average]
[info]   (min, avg, max) = (2590258.052, 2592656.305, 2594706.475), stdev = 1747.968
[info]   CI (99.9%): [2585925.502, 2599387.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   724.735 ±(99.9%) 1.871 MB/sec [Average]
[info]   (min, avg, max) = (724.079, 724.735, 725.322), stdev = 0.486
[info]   CI (99.9%): [722.864, 726.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.654 ±(99.9%) 5.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.206), stdev = 1.427
[info]   CI (99.9%): [≈ 0, 6.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.397 ±(99.9%) 3.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.397, 1.946), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 3.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.792 ±(99.9%) 1157.415 MB/sec [Average]
[info]   (min, avg, max) = (672.023, 807.792, 1345.475), stdev = 300.577
[info]   CI (99.9%): [≈ 0, 1965.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   490.500 ±(99.9%) 704.123 B/op [Average]
[info]   (min, avg, max) = (407.694, 490.500, 817.603), stdev = 182.858
[info]   CI (99.9%): [≈ 0, 1194.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 747142.593 ops/s
[info] # Warmup Iteration   2: 1298832.008 ops/s
[info] # Warmup Iteration   3: 1303615.637 ops/s
[info] # Warmup Iteration   4: 1273867.463 ops/s
[info] # Warmup Iteration   5: 1273093.724 ops/s
[info] Iteration   1: 1295703.925 ops/s
[info]                  ·gc.alloc.rate:                   921.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1632.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1300866.094 ops/s
[info]                  ·gc.alloc.rate:                   925.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810.769 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1300295.038 ops/s
[info]                  ·gc.alloc.rate:                   925.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1295962.959 ops/s
[info]                  ·gc.alloc.rate:                   922.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1626.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1297559.504 ops/s
[info]                  ·gc.alloc.rate:                   923.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1298077.504 ±(99.9%) 9246.998 ops/s [Average]
[info]   (min, avg, max) = (1295703.925, 1298077.504, 1300866.094), stdev = 2401.416
[info]   CI (99.9%): [1288830.506, 1307324.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   923.572 ±(99.9%) 6.502 MB/sec [Average]
[info]   (min, avg, max) = (921.816, 923.572, 925.548), stdev = 1.689
[info]   CI (99.9%): [917.070, 930.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.056 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.126), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   938.128 ±(99.9%) 1416.112 MB/sec [Average]
[info]   (min, avg, max) = (669.286, 938.128, 1343.222), stdev = 367.760
[info]   CI (99.9%): [≈ 0, 2354.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1138.218 ±(99.9%) 1725.210 B/op [Average]
[info]   (min, avg, max) = (810.311, 1138.218, 1632.007), stdev = 448.032
[info]   CI (99.9%): [≈ 0, 2863.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1007039.590 ops/s
[info] # Warmup Iteration   2: 1739752.162 ops/s
[info] # Warmup Iteration   3: 1763423.264 ops/s
[info] # Warmup Iteration   4: 1809888.438 ops/s
[info] # Warmup Iteration   5: 1809695.044 ops/s
[info] Iteration   1: 1806604.628 ops/s
[info]                  ·gc.alloc.rate:                   1515.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1754.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1808684.820 ops/s
[info]                  ·gc.alloc.rate:                   1517.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1168.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1808948.081 ops/s
[info]                  ·gc.alloc.rate:                   1516.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1169.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1809569.874 ops/s
[info]                  ·gc.alloc.rate:                   1517.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1169.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1807524.333 ops/s
[info]                  ·gc.alloc.rate:                   1515.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1759.806 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1808266.347 ±(99.9%) 4576.826 ops/s [Average]
[info]   (min, avg, max) = (1806604.628, 1808266.347, 1809569.874), stdev = 1188.587
[info]   CI (99.9%): [1803689.522, 1812843.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1516.472 ±(99.9%) 4.023 MB/sec [Average]
[info]   (min, avg, max) = (1515.035, 1516.472, 1517.577), stdev = 1.045
[info]   CI (99.9%): [1512.448, 1520.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.054 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.054, 0.072), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1613.279 ±(99.9%) 1420.865 MB/sec [Average]
[info]   (min, avg, max) = (1343.046, 1613.279, 2020.775), stdev = 368.994
[info]   CI (99.9%): [192.414, 3034.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1404.433 ±(99.9%) 1240.583 B/op [Average]
[info]   (min, avg, max) = (1168.636, 1404.433, 1759.806), stdev = 322.175
[info]   CI (99.9%): [163.850, 2645.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.926 ops/s
[info] # Warmup Iteration   2: 2452128.947 ops/s
[info] # Warmup Iteration   3: 2557478.583 ops/s
[info] # Warmup Iteration   4: 2574257.922 ops/s
[info] # Warmup Iteration   5: 2581101.877 ops/s
[info] Iteration   1: 2547763.452 ops/s
[info]                  ·gc.alloc.rate:                   660.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2453916.613 ops/s
[info]                  ·gc.alloc.rate:                   636.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2454278.555 ops/s
[info]                  ·gc.alloc.rate:                   636.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2450625.630 ops/s
[info]                  ·gc.alloc.rate:                   635.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2448020.286 ops/s
[info]                  ·gc.alloc.rate:                   634.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2470920.907 ±(99.9%) 165703.317 ops/s [Average]
[info]   (min, avg, max) = (2448020.286, 2470920.907, 2547763.452), stdev = 43032.625
[info]   CI (99.9%): [2305217.590, 2636624.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   640.547 ±(99.9%) 42.780 MB/sec [Average]
[info]   (min, avg, max) = (634.651, 640.547, 660.386), stdev = 11.110
[info]   CI (99.9%): [597.766, 683.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.516 ±(99.9%) 4.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.516, 2.537), stdev = 1.130
[info]   CI (99.9%): [≈ 0, 4.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.319 ±(99.9%) 2.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.568), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.797 ±(99.9%) 3.332 MB/sec [Average]
[info]   (min, avg, max) = (672.155, 672.797, 673.752), stdev = 0.865
[info]   CI (99.9%): [669.465, 676.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   428.638 ±(99.9%) 26.728 B/op [Average]
[info]   (min, avg, max) = (416.249, 428.638, 432.157), stdev = 6.941
[info]   CI (99.9%): [401.910, 455.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1379387.090 ops/s
[info] # Warmup Iteration   2: 2906286.992 ops/s
[info] # Warmup Iteration   3: 2954557.576 ops/s
[info] # Warmup Iteration   4: 2911055.618 ops/s
[info] # Warmup Iteration   5: 2920482.488 ops/s
[info] Iteration   1: 2954558.046 ops/s
[info]                  ·gc.alloc.rate:                   1396.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2971742.732 ops/s
[info]                  ·gc.alloc.rate:                   1404.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 713.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2969706.197 ops/s
[info]                  ·gc.alloc.rate:                   1403.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 715.246 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2933865.348 ops/s
[info]                  ·gc.alloc.rate:                   1386.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 724.694 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2963739.422 ops/s
[info]                  ·gc.alloc.rate:                   1400.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 718.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2958722.349 ±(99.9%) 59359.841 ops/s [Average]
[info]   (min, avg, max) = (2933865.348, 2958722.349, 2971742.732), stdev = 15415.562
[info]   CI (99.9%): [2899362.508, 3018082.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1398.489 ±(99.9%) 28.365 MB/sec [Average]
[info]   (min, avg, max) = (1386.697, 1398.489, 1404.822), stdev = 7.366
[info]   CI (99.9%): [1370.124, 1426.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.040, 0.045), stdev = 0.010
[info]   CI (99.9%): [0.002, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1349.229 ±(99.9%) 9.056 MB/sec [Average]
[info]   (min, avg, max) = (1345.966, 1349.229, 1351.966), stdev = 2.352
[info]   CI (99.9%): [1340.172, 1358.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   717.810 ±(99.9%) 16.108 B/op [Average]
[info]   (min, avg, max) = (713.873, 717.810, 724.694), stdev = 4.183
[info]   CI (99.9%): [701.702, 733.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1986102.333 ops/s
[info] # Warmup Iteration   2: 2731263.327 ops/s
[info] # Warmup Iteration   3: 2741540.322 ops/s
[info] # Warmup Iteration   4: 2732215.650 ops/s
[info] # Warmup Iteration   5: 2743037.513 ops/s
[info] Iteration   1: 2740539.842 ops/s
[info]                  ·gc.alloc.rate:                   710.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2744842.229 ops/s
[info]                  ·gc.alloc.rate:                   711.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2745441.591 ops/s
[info]                  ·gc.alloc.rate:                   711.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385.710 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2742483.580 ops/s
[info]                  ·gc.alloc.rate:                   711.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2745948.987 ops/s
[info]                  ·gc.alloc.rate:                   711.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2743851.246 ±(99.9%) 8769.765 ops/s [Average]
[info]   (min, avg, max) = (2740539.842, 2743851.246, 2745948.987), stdev = 2277.480
[info]   CI (99.9%): [2735081.481, 2752621.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   711.259 ±(99.9%) 2.269 MB/sec [Average]
[info]   (min, avg, max) = (710.341, 711.259, 711.783), stdev = 0.589
[info]   CI (99.9%): [708.990, 713.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.676 ±(99.9%) 5.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.295), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.388 ±(99.9%) 3.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.892), stdev = 0.841
[info]   CI (99.9%): [≈ 0, 3.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.453 ±(99.9%) 4.729 MB/sec [Average]
[info]   (min, avg, max) = (672.092, 673.453, 674.777), stdev = 1.228
[info]   CI (99.9%): [668.724, 678.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   386.314 ±(99.9%) 3.579 B/op [Average]
[info]   (min, avg, max) = (385.249, 386.314, 387.549), stdev = 0.930
[info]   CI (99.9%): [382.735, 389.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1994674.383 ops/s
[info] # Warmup Iteration   2: 2603575.551 ops/s
[info] # Warmup Iteration   3: 2672120.603 ops/s
[info] # Warmup Iteration   4: 2669036.327 ops/s
[info] # Warmup Iteration   5: 2653836.242 ops/s
[info] Iteration   1: 2655616.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2669180.476 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2670414.629 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2669474.166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2670932.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2667123.593 ±(99.9%) 24917.999 ops/s [Average]
[info]   (min, avg, max) = (2655616.620, 2667123.593, 2670932.074), stdev = 6471.125
[info]   CI (99.9%): [2642205.594, 2692041.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1749943.889 ops/s
[info] # Warmup Iteration   2: 2426719.323 ops/s
[info] # Warmup Iteration   3: 2513621.104 ops/s
[info] # Warmup Iteration   4: 2514067.298 ops/s
[info] # Warmup Iteration   5: 2548351.677 ops/s
[info] Iteration   1: 2546319.065 ops/s
[info]                  ·gc.alloc.rate:                   1229.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2556754.154 ops/s
[info]                  ·gc.alloc.rate:                   1234.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2480605.005 ops/s
[info]                  ·gc.alloc.rate:                   1197.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 850.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2475964.619 ops/s
[info]                  ·gc.alloc.rate:                   1195.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2554400.653 ops/s
[info]                  ·gc.alloc.rate:                   1233.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 826.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2522808.699 ±(99.9%) 157342.540 ops/s [Average]
[info]   (min, avg, max) = (2475964.619, 2522808.699, 2556754.154), stdev = 40861.358
[info]   CI (99.9%): [2365466.159, 2680151.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1218.047 ±(99.9%) 75.862 MB/sec [Average]
[info]   (min, avg, max) = (1195.452, 1218.047, 1234.378), stdev = 19.701
[info]   CI (99.9%): [1142.184, 1293.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.040), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1206.573 ±(99.9%) 1155.061 MB/sec [Average]
[info]   (min, avg, max) = (669.980, 1206.573, 1342.087), stdev = 299.966
[info]   CI (99.9%): [51.511, 2361.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   753.782 ±(99.9%) 732.603 B/op [Average]
[info]   (min, avg, max) = (414.204, 753.782, 852.340), stdev = 190.255
[info]   CI (99.9%): [21.179, 1486.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6370.540 ops/s
[info] # Warmup Iteration   2: 9858.018 ops/s
[info] # Warmup Iteration   3: 11436.022 ops/s
[info] # Warmup Iteration   4: 11381.046 ops/s
[info] # Warmup Iteration   5: 11887.418 ops/s
[info] Iteration   1: 12679.678 ops/s
[info]                  ·gc.alloc.rate:                   1845.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              229071.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249824.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12749.731 ops/s
[info]                  ·gc.alloc.rate:                   1855.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              229104.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248680.162 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12805.327 ops/s
[info]                  ·gc.alloc.rate:                   1864.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              229104.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165293.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 12770.716 ops/s
[info]                  ·gc.alloc.rate:                   1859.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              229104.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248947.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12738.326 ops/s
[info]                  ·gc.alloc.rate:                   1854.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              229093.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249964.652 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12748.755 ±(99.9%) 178.173 ops/s [Average]
[info]   (min, avg, max) = (12679.678, 12748.755, 12805.327), stdev = 46.271
[info]   CI (99.9%): [12570.582, 12926.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1855.671 ±(99.9%) 26.796 MB/sec [Average]
[info]   (min, avg, max) = (1845.263, 1855.671, 1864.010), stdev = 6.959
[info]   CI (99.9%): [1828.875, 1882.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229095.234 ±(99.9%) 55.256 B/op [Average]
[info]   (min, avg, max) = (229071.018, 229095.234, 229104.043), stdev = 14.350
[info]   CI (99.9%): [229039.977, 229150.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.227), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.819 ±(99.9%) 40.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.819, 28.109), stdev = 10.406
[info]   CI (99.9%): [≈ 0, 52.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1882.976 ±(99.9%) 1158.495 MB/sec [Average]
[info]   (min, avg, max) = (1344.840, 1882.976, 2022.923), stdev = 300.858
[info]   CI (99.9%): [724.480, 3041.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   232541.972 ±(99.9%) 144773.647 B/op [Average]
[info]   (min, avg, max) = (165293.172, 232541.972, 249964.652), stdev = 37597.256
[info]   CI (99.9%): [87768.324, 377315.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4865.654 ops/s
[info] # Warmup Iteration   2: 15563.383 ops/s
[info] # Warmup Iteration   3: 15550.322 ops/s
[info] # Warmup Iteration   4: 15885.365 ops/s
[info] # Warmup Iteration   5: 15886.722 ops/s
[info] Iteration   1: 15864.941 ops/s
[info]                  ·gc.alloc.rate:                   218.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              21696.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50750.338 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15911.871 ops/s
[info]                  ·gc.alloc.rate:      219.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 21696.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15939.126 ops/s
[info]                  ·gc.alloc.rate:                   219.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              21690.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50511.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16049.540 ops/s
[info]                  ·gc.alloc.rate:      221.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 21680.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15960.255 ops/s
[info]                  ·gc.alloc.rate:                   219.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              21680.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50448.310 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15945.146 ±(99.9%) 263.302 ops/s [Average]
[info]   (min, avg, max) = (15864.941, 15945.146, 16049.540), stdev = 68.379
[info]   CI (99.9%): [15681.844, 16208.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   219.712 ±(99.9%) 3.389 MB/sec [Average]
[info]   (min, avg, max) = (218.658, 219.712, 221.072), stdev = 0.880
[info]   CI (99.9%): [216.323, 223.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21688.439 ±(99.9%) 31.008 B/op [Average]
[info]   (min, avg, max) = (21680.026, 21688.439, 21696.026), stdev = 8.053
[info]   CI (99.9%): [21657.431, 21719.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.413 ±(99.9%) 3.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.413, 2.065), stdev = 0.924
[info]   CI (99.9%): [≈ 0, 3.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.898 ±(99.9%) 1078.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.898, 511.516), stdev = 280.159
[info]   CI (99.9%): [≈ 0, 1385.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   30342.049 ±(99.9%) 106657.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30342.049, 50750.338), stdev = 27698.603
[info]   CI (99.9%): [≈ 0, 136999.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18866.211 ops/s
[info] # Warmup Iteration   2: 22795.409 ops/s
[info] # Warmup Iteration   3: 35274.081 ops/s
[info] # Warmup Iteration   4: 36259.588 ops/s
[info] # Warmup Iteration   5: 36671.834 ops/s
[info] Iteration   1: 36340.396 ops/s
[info]                  ·gc.alloc.rate:                   336.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22156.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36566.099 ops/s
[info]                  ·gc.alloc.rate:                   338.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22019.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 36841.695 ops/s
[info]                  ·gc.alloc.rate:      341.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36851.135 ops/s
[info]                  ·gc.alloc.rate:                   341.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21849.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 36730.513 ops/s
[info]                  ·gc.alloc.rate:                   340.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21921.449 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36665.968 ±(99.9%) 828.792 ops/s [Average]
[info]   (min, avg, max) = (36340.396, 36665.968, 36851.135), stdev = 215.235
[info]   CI (99.9%): [35837.175, 37494.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   339.567 ±(99.9%) 7.712 MB/sec [Average]
[info]   (min, avg, max) = (336.527, 339.567, 341.319), stdev = 2.003
[info]   CI (99.9%): [331.855, 347.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.011, 14576.012), stdev = 0.001
[info]   CI (99.9%): [14576.010, 14576.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 0.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.435), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   409.281 ±(99.9%) 881.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 409.281, 511.638), stdev = 228.795
[info]   CI (99.9%): [≈ 0, 1290.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17589.471 ±(99.9%) 37865.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17589.471, 22156.671), stdev = 9833.488
[info]   CI (99.9%): [≈ 0, 55454.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022.543 ops/s
[info] # Warmup Iteration   2: 3298.682 ops/s
[info] # Warmup Iteration   3: 3165.373 ops/s
[info] # Warmup Iteration   4: 3590.647 ops/s
[info] # Warmup Iteration   5: 3728.456 ops/s
[info] Iteration   1: 3788.718 ops/s
[info]                  ·gc.alloc.rate:                   1235.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 560254.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3777.500 ops/s
[info]                  ·gc.alloc.rate:                   1232.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562302.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3796.973 ops/s
[info]                  ·gc.alloc.rate:                   1238.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559903.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3837.205 ops/s
[info]                  ·gc.alloc.rate:                   1251.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277170.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3801.436 ops/s
[info]                  ·gc.alloc.rate:                   1239.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              513144.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 560141.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3800.366 ±(99.9%) 86.710 ops/s [Average]
[info]   (min, avg, max) = (3777.500, 3800.366, 3837.205), stdev = 22.518
[info]   CI (99.9%): [3713.657, 3887.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1239.494 ±(99.9%) 28.412 MB/sec [Average]
[info]   (min, avg, max) = (1232.045, 1239.494, 1251.591), stdev = 7.379
[info]   CI (99.9%): [1211.082, 1267.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513144.109 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (513144.106, 513144.109, 513144.116), stdev = 0.004
[info]   CI (99.9%): [513144.094, 513144.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.460 ±(99.9%) 18.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.460, 8.671), stdev = 4.737
[info]   CI (99.9%): [≈ 0, 21.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1215.955 ±(99.9%) 1162.232 MB/sec [Average]
[info]   (min, avg, max) = (676.037, 1215.955, 1353.326), stdev = 301.828
[info]   CI (99.9%): [53.724, 2378.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   503954.418 ±(99.9%) 488183.550 B/op [Average]
[info]   (min, avg, max) = (277170.493, 503954.418, 562302.002), stdev = 126779.718
[info]   CI (99.9%): [15770.868, 992137.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 2.049
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_f7c6d30b/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 26904.722 ops/s
[info] # Warmup Iteration   2: 60087.782 ops/s
[info] # Warmup Iteration   3: 60012.813 ops/s
[info] # Warmup Iteration   4: 60061.204 ops/s
[info] # Warmup Iteration   5: 60088.200 ops/s
[info] Iteration   1: 59770.772 ops/s
[info]                  ·gc.alloc.rate:                   763.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17741.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59788.912 ops/s
[info]                  ·gc.alloc.rate:                   763.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17744.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 59675.554 ops/s
[info]                  ·gc.alloc.rate:                   761.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17779.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59600.165 ops/s
[info]                  ·gc.alloc.rate:                   761.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17801.693 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 59579.823 ops/s
[info]                  ·gc.alloc.rate:                   760.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35631.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   59683.045 ±(99.9%) 367.751 ops/s [Average]
[info]   (min, avg, max) = (59579.823, 59683.045, 59788.912), stdev = 95.504
[info]   CI (99.9%): [59315.294, 60050.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   762.157 ±(99.9%) 4.655 MB/sec [Average]
[info]   (min, avg, max) = (760.721, 762.157, 763.510), stdev = 1.209
[info]   CI (99.9%): [757.502, 766.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.012 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (20099.985, 20100.012, 20100.040), stdev = 0.020
[info]   CI (99.9%): [20099.936, 20100.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.549 ±(99.9%) 2.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 1.100), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 2.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   808.911 ±(99.9%) 1161.601 MB/sec [Average]
[info]   (min, avg, max) = (673.710, 808.911, 1348.544), stdev = 301.664
[info]   CI (99.9%): [≈ 0, 1970.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21339.799 ±(99.9%) 30764.621 B/op [Average]
[info]   (min, avg, max) = (17741.705, 21339.799, 35631.736), stdev = 7989.474
[info]   CI (99.9%): [≈ 0, 52104.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71195.527 ops/s
[info] # Warmup Iteration   2: 86529.388 ops/s
[info] # Warmup Iteration   3: 87091.798 ops/s
[info] # Warmup Iteration   4: 86316.781 ops/s
[info] # Warmup Iteration   5: 86812.245 ops/s
[info] Iteration   1: 86978.525 ops/s
[info]                  ·gc.alloc.rate:                   570.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9257.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 85868.390 ops/s
[info]                  ·gc.alloc.rate:                   562.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12368.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 87365.202 ops/s
[info]                  ·gc.alloc.rate:                   572.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12155.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 87475.666 ops/s
[info]                  ·gc.alloc.rate:                   573.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12092.961 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 87717.796 ops/s
[info]                  ·gc.alloc.rate:      575.236 MB/sec
[info]                  ·gc.alloc.rate.norm: 10320.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   87081.116 ±(99.9%) 2805.270 ops/s [Average]
[info]   (min, avg, max) = (85868.390, 87081.116, 87717.796), stdev = 728.520
[info]   CI (99.9%): [84275.846, 89886.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   570.979 ±(99.9%) 18.534 MB/sec [Average]
[info]   (min, avg, max) = (562.995, 570.979, 575.236), stdev = 4.813
[info]   CI (99.9%): [552.444, 589.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.688 ±(99.9%) 5.833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.688, 3.397), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12.605 ±(99.9%) 106.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.605, 62.274), stdev = 27.768
[info]   CI (99.9%): [≈ 0, 119.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.622 ±(99.9%) 1123.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.622, 674.732), stdev = 291.805
[info]   CI (99.9%): [≈ 0, 1630.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9174.846 ±(99.9%) 20356.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9174.846, 12368.220), stdev = 5286.406
[info]   CI (99.9%): [≈ 0, 29530.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78493.061 ops/s
[info] # Warmup Iteration   2: 93783.897 ops/s
[info] # Warmup Iteration   3: 92014.406 ops/s
[info] # Warmup Iteration   4: 94339.036 ops/s
[info] # Warmup Iteration   5: 94055.162 ops/s
[info] Iteration   1: 93990.029 ops/s
[info]                  ·gc.alloc.rate:      13.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 94176.445 ops/s
[info]                  ·gc.alloc.rate:      13.402 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 94160.928 ops/s
[info]                  ·gc.alloc.rate:      13.399 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 94193.663 ops/s
[info]                  ·gc.alloc.rate:      13.407 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 94166.771 ops/s
[info]                  ·gc.alloc.rate:      13.401 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   94137.567 ±(99.9%) 321.155 ops/s [Average]
[info]   (min, avg, max) = (93990.029, 94137.567, 94193.663), stdev = 83.403
[info]   CI (99.9%): [93816.412, 94458.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   13.397 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (13.376, 13.397, 13.407), stdev = 0.012
[info]   CI (99.9%): [13.350, 13.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.004, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323008.480 ops/s
[info] # Warmup Iteration   2: 388718.595 ops/s
[info] # Warmup Iteration   3: 390038.349 ops/s
[info] # Warmup Iteration   4: 390026.722 ops/s
[info] # Warmup Iteration   5: 398789.599 ops/s
[info] Iteration   1: 398265.341 ops/s
[info]                  ·gc.alloc.rate:                   2133.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7972.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 398034.266 ops/s
[info]                  ·gc.alloc.rate:                   2132.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7990.312 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 398137.891 ops/s
[info]                  ·gc.alloc.rate:                   2132.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10670.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 397805.486 ops/s
[info]                  ·gc.alloc.rate:                   2130.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8025.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 398312.362 ops/s
[info]                  ·gc.alloc.rate:                   2134.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8025.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   398111.069 ±(99.9%) 780.451 ops/s [Average]
[info]   (min, avg, max) = (397805.486, 398111.069, 398312.362), stdev = 202.681
[info]   CI (99.9%): [397330.618, 398891.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2132.779 ±(99.9%) 4.806 MB/sec [Average]
[info]   (min, avg, max) = (2130.998, 2132.779, 2134.402), stdev = 1.248
[info]   CI (99.9%): [2127.973, 2137.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.247 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (0.165, 0.247, 0.412), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2159.287 ±(99.9%) 1161.904 MB/sec [Average]
[info]   (min, avg, max) = (2017.061, 2159.287, 2698.963), stdev = 301.743
[info]   CI (99.9%): [997.384, 3321.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8536.800 ±(99.9%) 4593.489 B/op [Average]
[info]   (min, avg, max) = (7972.536, 8536.800, 10670.358), stdev = 1192.914
[info]   CI (99.9%): [3943.311, 13130.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227890.275 ops/s
[info] # Warmup Iteration   2: 420034.767 ops/s
[info] # Warmup Iteration   3: 420738.173 ops/s
[info] # Warmup Iteration   4: 421821.937 ops/s
[info] # Warmup Iteration   5: 436783.151 ops/s
[info] Iteration   1: 436753.763 ops/s
[info]                  ·gc.alloc.rate:                   532.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1843.553 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 438012.518 ops/s
[info]                  ·gc.alloc.rate:                   534.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2421.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 438872.353 ops/s
[info]                  ·gc.alloc.rate:                   535.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2416.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 439923.863 ops/s
[info]                  ·gc.alloc.rate:      536.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 438914.752 ops/s
[info]                  ·gc.alloc.rate:                   535.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2419.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   438495.450 ±(99.9%) 4566.274 ops/s [Average]
[info]   (min, avg, max) = (436753.763, 438495.450, 439923.863), stdev = 1185.847
[info]   CI (99.9%): [433929.176, 443061.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   534.848 ±(99.9%) 5.638 MB/sec [Average]
[info]   (min, avg, max) = (532.693, 534.848, 536.610), stdev = 1.464
[info]   CI (99.9%): [529.209, 540.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.418 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.250), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.209 ±(99.9%) 1.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.209, 0.898), stdev = 0.390
[info]   CI (99.9%): [≈ 0, 1.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.711 ±(99.9%) 1123.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.711, 674.655), stdev = 291.873
[info]   CI (99.9%): [≈ 0, 1630.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1820.127 ±(99.9%) 4033.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1820.127, 2421.098), stdev = 1047.553
[info]   CI (99.9%): [≈ 0, 5853.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1079237.289 ops/s
[info] # Warmup Iteration   2: 1151745.575 ops/s
[info] # Warmup Iteration   3: 1186738.670 ops/s
[info] # Warmup Iteration   4: 1186112.027 ops/s
[info] # Warmup Iteration   5: 1127480.099 ops/s
[info] Iteration   1: 1189459.048 ops/s
[info]                  ·gc.alloc.rate:      622.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1181973.377 ops/s
[info]                  ·gc.alloc.rate:                   618.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 898.550 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1185653.951 ops/s
[info]                  ·gc.alloc.rate:                   620.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1184733.213 ops/s
[info]                  ·gc.alloc.rate:                   620.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 893.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1184397.544 ops/s
[info]                  ·gc.alloc.rate:                   620.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 894.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1185243.427 ±(99.9%) 10476.485 ops/s [Average]
[info]   (min, avg, max) = (1181973.377, 1185243.427, 1189459.048), stdev = 2720.710
[info]   CI (99.9%): [1174766.941, 1195719.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   620.501 ±(99.9%) 5.458 MB/sec [Average]
[info]   (min, avg, max) = (618.885, 620.501, 622.751), stdev = 1.417
[info]   CI (99.9%): [615.043, 625.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.252), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.888 ±(99.9%) 7.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.888, 4.330), stdev = 1.924
[info]   CI (99.9%): [≈ 0, 8.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.997 ±(99.9%) 1160.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.997, 674.878), stdev = 301.311
[info]   CI (99.9%): [≈ 0, 1699.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   716.418 ±(99.9%) 1542.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 716.418, 898.550), stdev = 400.494
[info]   CI (99.9%): [≈ 0, 2258.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69391.255 ops/s
[info] # Warmup Iteration   2: 110083.420 ops/s
[info] # Warmup Iteration   3: 112258.810 ops/s
[info] # Warmup Iteration   4: 112928.570 ops/s
[info] # Warmup Iteration   5: 111172.547 ops/s
[info] Iteration   1: 111878.111 ops/s
[info]                  ·gc.alloc.rate:                   3888.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4074.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57323.866 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 112764.476 ops/s
[info]                  ·gc.alloc.rate:                   3918.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4079.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56954.175 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 112735.584 ops/s
[info]                  ·gc.alloc.rate:                   3918.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57024.114 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 112748.754 ops/s
[info]                  ·gc.alloc.rate:                   3918.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47524.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 112797.733 ops/s
[info]                  ·gc.alloc.rate:                   3920.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4088.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57049.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   112584.932 ±(99.9%) 1524.107 ops/s [Average]
[info]   (min, avg, max) = (111878.111, 112584.932, 112797.733), stdev = 395.806
[info]   CI (99.9%): [111060.824, 114109.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3912.725 ±(99.9%) 52.972 MB/sec [Average]
[info]   (min, avg, max) = (3888.153, 3912.725, 3920.133), stdev = 13.757
[info]   CI (99.9%): [3859.752, 3965.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.003, 54704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.756 ±(99.9%) 1.273 B/op [Average]
[info]   (min, avg, max) = (0.293, 0.756, 1.162), stdev = 0.331
[info]   CI (99.9%): [≈ 0, 2.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3946.198 ±(99.9%) 1166.769 MB/sec [Average]
[info]   (min, avg, max) = (3404.242, 3946.198, 4088.181), stdev = 303.006
[info]   CI (99.9%): [2779.429, 5112.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55175.192 ±(99.9%) 16477.041 B/op [Average]
[info]   (min, avg, max) = (47524.758, 55175.192, 57323.866), stdev = 4279.035
[info]   CI (99.9%): [38698.152, 71652.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303897.986 ops/s
[info] # Warmup Iteration   2: 401637.678 ops/s
[info] # Warmup Iteration   3: 399150.139 ops/s
[info] # Warmup Iteration   4: 403541.683 ops/s
[info] # Warmup Iteration   5: 406613.304 ops/s
[info] Iteration   1: 403459.240 ops/s
[info]                  ·gc.alloc.rate:                   641.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2629.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 403638.829 ops/s
[info]                  ·gc.alloc.rate:                   642.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2628.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 404619.230 ops/s
[info]                  ·gc.alloc.rate:      643.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 2504.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 405457.716 ops/s
[info]                  ·gc.alloc.rate:                   645.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2609.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 405681.349 ops/s
[info]                  ·gc.alloc.rate:                   645.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2607.492 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   404571.273 ±(99.9%) 3911.020 ops/s [Average]
[info]   (min, avg, max) = (403459.240, 404571.273, 405681.349), stdev = 1015.680
[info]   CI (99.9%): [400660.253, 408482.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   643.630 ±(99.9%) 6.468 MB/sec [Average]
[info]   (min, avg, max) = (641.807, 643.630, 645.509), stdev = 1.680
[info]   CI (99.9%): [637.162, 650.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2504.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2504.001, 2504.001, 2504.001), stdev = 0.001
[info]   CI (99.9%): [2504.001, 2504.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.707 ±(99.9%) 5.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.707, 3.492), stdev = 1.557
[info]   CI (99.9%): [≈ 0, 6.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.757 ±(99.9%) 23.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.757, 13.625), stdev = 6.075
[info]   CI (99.9%): [≈ 0, 26.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   538.473 ±(99.9%) 1159.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.473, 674.036), stdev = 301.017
[info]   CI (99.9%): [≈ 0, 1697.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2094.963 ±(99.9%) 4509.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2094.963, 2629.742), stdev = 1171.166
[info]   CI (99.9%): [≈ 0, 6604.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435719.161 ops/s
[info] # Warmup Iteration   2: 678424.303 ops/s
[info] # Warmup Iteration   3: 721422.704 ops/s
[info] # Warmup Iteration   4: 713239.467 ops/s
[info] # Warmup Iteration   5: 719915.215 ops/s
[info] Iteration   1: 719963.954 ops/s
[info]                  ·gc.alloc.rate:      548.854 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 720479.863 ops/s
[info]                  ·gc.alloc.rate:                   549.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1471.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 718923.096 ops/s
[info]                  ·gc.alloc.rate:                   548.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1475.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 720110.035 ops/s
[info]                  ·gc.alloc.rate:                   549.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1474.766 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 719697.700 ops/s
[info]                  ·gc.alloc.rate:                   548.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1475.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   719834.930 ±(99.9%) 2244.089 ops/s [Average]
[info]   (min, avg, max) = (718923.096, 719834.930, 720479.863), stdev = 582.783
[info]   CI (99.9%): [717590.841, 722079.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   548.862 ±(99.9%) 1.885 MB/sec [Average]
[info]   (min, avg, max) = (548.120, 548.862, 549.482), stdev = 0.490
[info]   CI (99.9%): [546.976, 550.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.000, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.399 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.250), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.146 ±(99.9%) 0.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.546), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.480 ±(99.9%) 1161.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.480, 674.939), stdev = 301.579
[info]   CI (99.9%): [≈ 0, 1700.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1179.486 ±(99.9%) 2538.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1179.486, 1475.708), stdev = 659.355
[info]   CI (99.9%): [≈ 0, 3718.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1790522.096 ops/s
[info] # Warmup Iteration   2: 1971988.945 ops/s
[info] # Warmup Iteration   3: 1946051.925 ops/s
[info] # Warmup Iteration   4: 2009327.917 ops/s
[info] # Warmup Iteration   5: 1901927.975 ops/s
[info] Iteration   1: 1982722.179 ops/s
[info]                  ·gc.alloc.rate:                   916.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 534.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1979631.079 ops/s
[info]                  ·gc.alloc.rate:                   915.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 534.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1979977.058 ops/s
[info]                  ·gc.alloc.rate:                   915.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1068.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1979891.839 ops/s
[info]                  ·gc.alloc.rate:                   915.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1982341.263 ops/s
[info]                  ·gc.alloc.rate:                   916.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1066.724 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1980912.684 ±(99.9%) 5735.762 ops/s [Average]
[info]   (min, avg, max) = (1979631.079, 1980912.684, 1982722.179), stdev = 1489.559
[info]   CI (99.9%): [1975176.922, 1986648.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   916.210 ±(99.9%) 2.548 MB/sec [Average]
[info]   (min, avg, max) = (915.614, 916.210, 916.937), stdev = 0.662
[info]   CI (99.9%): [913.661, 918.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.915 ±(99.9%) 1416.390 MB/sec [Average]
[info]   (min, avg, max) = (671.455, 940.915, 1344.159), stdev = 367.832
[info]   CI (99.9%): [≈ 0, 2357.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   747.598 ±(99.9%) 1124.982 B/op [Average]
[info]   (min, avg, max) = (533.762, 747.598, 1068.549), stdev = 292.154
[info]   CI (99.9%): [≈ 0, 1872.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1778197.393 ops/s
[info] # Warmup Iteration   2: 1900479.385 ops/s
[info] # Warmup Iteration   3: 1907926.596 ops/s
[info] # Warmup Iteration   4: 1906957.003 ops/s
[info] # Warmup Iteration   5: 1908213.788 ops/s
[info] Iteration   1: 1906702.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1908768.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1908075.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1904983.967 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1908399.000 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1907385.797 ±(99.9%) 5980.594 ops/s [Average]
[info]   (min, avg, max) = (1904983.967, 1907385.797, 1908768.352), stdev = 1553.141
[info]   CI (99.9%): [1901405.203, 1913366.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182657.141 ops/s
[info] # Warmup Iteration   2: 226406.450 ops/s
[info] # Warmup Iteration   3: 237489.887 ops/s
[info] # Warmup Iteration   4: 234890.423 ops/s
[info] # Warmup Iteration   5: 243295.882 ops/s
[info] Iteration   1: 251984.616 ops/s
[info]                  ·gc.alloc.rate:                   372.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3195.343 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 241760.902 ops/s
[info]                  ·gc.alloc.rate:      357.601 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 243758.068 ops/s
[info]                  ·gc.alloc.rate:                   360.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3303.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 240013.835 ops/s
[info]                  ·gc.alloc.rate:                   355.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3354.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 238936.628 ops/s
[info]                  ·gc.alloc.rate:      353.394 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   243290.810 ±(99.9%) 19993.584 ops/s [Average]
[info]   (min, avg, max) = (238936.628, 243290.810, 251984.616), stdev = 5192.270
[info]   CI (99.9%): [223297.226, 263284.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   359.869 ±(99.9%) 29.430 MB/sec [Average]
[info]   (min, avg, max) = (353.394, 359.869, 372.665), stdev = 7.643
[info]   CI (99.9%): [330.438, 389.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.002, 2328.002, 2328.002), stdev = 0.001
[info]   CI (99.9%): [2328.002, 2328.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   306.966 ±(99.9%) 1079.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.966, 511.744), stdev = 280.220
[info]   CI (99.9%): [≈ 0, 1385.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1970.624 ±(99.9%) 6930.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1970.624, 3354.591), stdev = 1799.843
[info]   CI (99.9%): [≈ 0, 8901.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:21
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    774727.647 ±     3932.418   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2035.781 ±       10.534  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4136.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.067 ±        0.067  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.135 ±        0.136    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      2021.423 ±       20.934  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5      4106.840 ±       54.458    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        15.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        12.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1632239.450 ±    86803.027   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1161.474 ±       62.032  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.033 ±        0.108  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.032 ±        0.105    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1216.965 ±     1164.101  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      1175.019 ±     1141.799    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5         9.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         8.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   3872837.753 ±   140005.420   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       255.881 ±        9.225  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.004 ±        0.033  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.002 ±        0.014    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       306.917 ±     1078.857  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       125.184 ±      440.090    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         5.000                     ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    171777.279 ±     1447.845   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1438.731 ±       12.341  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13184.002 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.042 ±        0.113  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.381 ±        1.039    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      1353.279 ±        6.868  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5     12401.000 ±      113.256    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        10.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         6.000                     ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    555332.139 ±     1365.813   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1679.592 ±        5.027  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4760.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.046 ±        0.067  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.130 ±        0.190    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      1613.486 ±     1417.290  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5      4572.667 ±     4016.855    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        12.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         9.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2033524.060 ±   109073.326   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       661.475 ±       35.581  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       512.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.113 ±        0.758  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.087 ±        0.582    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       674.281 ±        2.054  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       521.999 ±       29.951    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         5.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         4.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  14988754.414 ±   182244.645   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       761.879 ±        9.396  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.677 ±        5.652  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.071 ±        0.596    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       673.457 ±        4.568  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        70.716 ±        1.325    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         5.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         6.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  15058767.836 ±    50617.236   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    313399.457 ±     9486.059   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1022.574 ±       31.074  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5136.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.017 ±        0.104  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.083 ±        0.522    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1080.984 ±     1424.562  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      5425.656 ±     7107.620    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         8.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         7.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1620398.631 ±    11865.193   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2503.548 ±       18.636  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.054 ±        0.044  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.053 ±        0.043    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2567.965 ±     1162.595  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      2494.864 ±     1139.071    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        19.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        14.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5   9764439.603 ±   293939.690   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1191.225 ±       35.983  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.042 ±        0.160  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.007 ±        0.026    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1210.399 ±     1158.506  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       195.213 ±      188.283    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5         9.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         8.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2617264.928 ±    78009.660   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1835.772 ±       54.276  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.054 ±        0.134  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.033 ±        0.081    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1762.642 ±     1431.458  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      1060.869 ±      878.187    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        13.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         9.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  10475485.036 ±    82898.307   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1331.038 ±       10.959  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.054 ±        0.134  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.008 ±        0.020    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1345.294 ±        5.628  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       202.143 ±        1.814    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        10.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         7.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    648331.189 ±     5862.451   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1713.608 ±       15.040  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4160.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.075 ±        0.108  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.182 ±        0.260    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1625.944 ±     1429.882  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      3946.934 ±     3465.306    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        12.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5        10.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2003678.737 ±    13275.550   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1710.867 ±       11.017  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1344.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.058 ±        0.067  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.046 ±        0.053    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1748.193 ±     1411.057  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      1373.394 ±     1109.953    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        13.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5        10.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  17965222.727 ±  2069781.309   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       547.919 ±       63.067  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.506 ±        4.358  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.046 ±        0.396    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5       506.135 ±     1122.189  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        44.659 ±       98.869    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         7.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6335363.747 ±   258086.009   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1738.691 ±       70.585  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.062 ±        0.057  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.016 ±        0.014    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1760.938 ±     1431.149  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       436.792 ±      339.316    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        13.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5        10.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  21938982.242 ±   163823.713   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       669.047 ±        4.971  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.665 ±        5.544  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.048 ±        0.399    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       673.276 ±        5.416  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        48.304 ±        0.541    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         5.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         6.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  20163514.478 ±   851591.682   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1464358.843 ±    13819.609   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2151.013 ±       19.624  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2312.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.075 ±        0.091  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.081 ±        0.098    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2170.784 ±     1157.324  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2333.811 ±     1266.649    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        16.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5        13.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    380393.327 ±     2142.056   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2093.965 ±       11.992  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.067 ±        0.119  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.276 ±        0.491    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2159.665 ±     1180.803  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      8937.013 ±     4932.419    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        12.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    461699.186 ±     2683.039   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       628.866 ±        3.794  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2144.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.083 ±        0.586  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.284 ±        2.002    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       674.222 ±        2.145  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      2298.638 ±       13.635    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1129786.226 ±     9947.345   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       752.222 ±        6.578  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.029 ±        0.158    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       672.859 ±        4.111  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       937.434 ±        8.791    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    115670.081 ±     1623.211   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4003.177 ±       56.068  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54472.004 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.075 ±        0.091  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.020 ±        1.254    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      4083.149 ±       21.364  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     55560.867 ±      912.121    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        30.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        22.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    325077.987 ±     2104.975   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       497.378 ±        3.204  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2408.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.701 ±        6.010  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.397 ±       29.144    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474.325 ±     1067.948  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2297.604 ±     5175.226    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         4.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         9.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    635515.690 ±     3553.317   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       468.364 ±        2.730  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.067 ±        0.489  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.165 ±        1.209    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       371.810 ±     1331.639  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       920.096 ±     3294.211    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         3.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2700866.044 ±    14058.998   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1249.283 ±        6.675  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.092 ±        0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.053 ±        0.025    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1344.500 ±        4.250  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       783.487 ±        4.039    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         8.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2738415.912 ±     2367.775   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    399766.361 ±     6775.858   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       575.056 ±        9.804  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.803 ±        6.823  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3.167 ±       26.915    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       505.840 ±     1121.452  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1993.990 ±     4417.212    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         4.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         9.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     20939.812 ±      910.655   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1310.386 ±       56.553  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     98480.026 ±        0.053    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±        0.108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.180 ±        8.055    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1343.939 ±        3.894  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    101011.655 ±     4304.740    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        10.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         8.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     33190.381 ±      360.021   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       831.947 ±        9.223  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39456.012 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.029 ±        0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1.383 ±        5.774    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       945.165 ±     1423.746  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     44845.195 ±    67797.151    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         6.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     42988.925 ±      466.974   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       640.505 ±        6.548  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448.009 ±        0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.669 ±        5.672  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5        24.548 ±      208.097    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       539.089 ±     1160.438  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     19741.570 ±    42497.084    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     27000.738 ±      304.012   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1430.735 ±       16.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83400.015 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±        0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.455 ±        3.914    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1489.993 ±     1162.455  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     86854.555 ±    67759.921    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        11.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     31103.020 ±     1229.487   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1708.173 ±       67.567  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     86432.013 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.042 ±        0.113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.106 ±        5.702    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1614.202 ±     1417.581  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     81779.617 ±    73991.977    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        10.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     30086.384 ±      679.354   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1619.641 ±       35.953  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84720.014 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.029 ±        0.209  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         1.525 ±       10.945    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1625.969 ±     1423.256  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     85043.599 ±    74245.645    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        11.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     34441.127 ±      240.709   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1744.806 ±       12.296  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     79736.012 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.050 ±        0.231  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         2.286 ±       10.571    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1750.595 ±     1416.961  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     80017.985 ±    65118.046    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        13.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5        12.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     35011.340 ±      133.310   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1672.142 ±        6.939  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     75168.012 ±        0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5         0.025 ±        0.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         1.123 ±        3.948    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5      1615.511 ±     1419.099  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5     72630.061 ±    63969.820    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5        10.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5      8813.555 ±      120.665   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1136.046 ±       15.741  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202880.047 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.717 ±       20.248    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1071.685 ±     1411.170  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    191432.687 ±   252581.898    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         7.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     19008.167 ±      251.957   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1476.891 ±       19.965  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122288.023 ±        0.010    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.029 ±        0.156  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2.417 ±       12.970    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1478.727 ±     1152.645  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5    122490.111 ±    96925.292    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        10.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     41941.450 ±      301.142   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1033.658 ±        7.220  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38792.010 ±        0.002    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±        0.108  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.093 ±        4.036    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       946.465 ±     1426.326  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     35525.153 ±    53603.169    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         7.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     58463.653 ±     2722.495   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       755.439 ±       34.987  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336.007 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.336 ±        1.917    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       672.955 ±        4.464  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     18117.786 ±      889.526    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     33169.008 ±      136.990   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2215.783 ±        9.392  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105144.012 ±        0.002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±        0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.173 ±        4.164    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2307.517 ±     1435.041  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    109511.412 ±    68547.546    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        17.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        14.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     34890.806 ±     1323.264   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1908.018 ±       72.102  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     86072.012 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.050 ±        0.108  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2.258 ±        4.861    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1899.335 ±     1174.372  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     85614.671 ±    51345.604    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        10.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     47366.943 ±      116.531   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1974.328 ±        5.745  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     65600.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.071 ±        0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         2.352 ±        2.381    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      2023.220 ±       18.927  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     67224.593 ±      741.565    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     48697.711 ±      112.203   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1944.629 ±        4.964  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     62856.008 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.079 ±        0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         2.556 ±        2.163    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5      2022.863 ±       19.504  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     65384.789 ±      671.417    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        12.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    389986.180 ±     1851.322   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1972.340 ±       10.137  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.042 ±        0.057  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.168 ±        0.228    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2022.922 ±       20.647  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      8164.149 ±       85.147    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        15.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5        12.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1563191.330 ±    12791.473   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       492.607 ±        4.091  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.504 ±        4.340  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.508 ±        4.370    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5       371.835 ±     1331.714  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       374.540 ±     1340.669    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         3.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         6.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    681285.586 ±     5556.377   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       564.399 ±        4.632  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1304.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.029 ±        0.134  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.067 ±        0.311    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       539.361 ±     1161.017  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1247.110 ±     2684.514    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         3.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1802914.818 ±    49118.585   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       348.236 ±        9.315  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.006 ±        0.044  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.005 ±        0.038    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       306.972 ±     1079.049  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       268.656 ±      944.426    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         3.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    104658.792 ±      346.652   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3801.798 ±       12.814  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57176.004 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.067 ±        0.105  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.002 ±        1.571    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3809.964 ±     1443.747  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     57301.583 ±    21842.242    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        28.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        23.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    324088.274 ±    24897.098   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       499.090 ±       38.303  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2424.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.720 ±        5.947  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.469 ±       28.644    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       474.233 ±     1067.681  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2306.534 ±     5156.750    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         8.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1192717.379 ±     3124.419   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       551.643 ±        1.575  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.509 ±        4.379  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.671 ±        5.776    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506.201 ±     1122.463  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       668.183 ±     1481.518    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         4.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         7.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1010709.352 ±    38087.437   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       714.045 ±       26.569  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.017 ±        0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.026 ±        0.106    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       675.061 ±        3.172  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1051.376 ±       43.056    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         4.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1685452.570 ±    10793.988   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       779.616 ±        4.839  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±        0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.023 ±        0.063    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       807.262 ±     1154.961  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       754.065 ±     1083.314    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         5.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1913504.512 ±     8378.148   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    524429.093 ±    31660.814   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       618.353 ±       37.397  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.802 ±        6.776  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.476 ±       20.923    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5       639.921 ±      276.458  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1921.558 ±      854.992    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         8.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    144436.342 ±      940.024   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1736.227 ±       11.824  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18920.003 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.042 ±        0.160  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.454 ±        1.748    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1750.213 ±     1412.478  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     19076.284 ±    15473.990    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        11.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    408746.351 ±     1335.184   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       338.681 ±        0.896  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1304.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±        0.251  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.112 ±        0.966    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.488 ±     1220.304  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1307.569 ±     4699.767    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5   1082911.521 ±    20162.123   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       209.165 ±        3.906  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.001 ±        0.010  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.002 ±        0.015    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       204.625 ±     1078.931  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       298.463 ±     1573.729    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     87788.635 ±     1348.627   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3737.838 ±       55.932  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.087 ±        0.105  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.568 ±        1.883    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3675.863 ±     1436.551  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     65913.192 ±    26141.592    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        27.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        22.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    331095.756 ±     3018.357   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1465.839 ±       13.667  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.058 ±        0.105  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.277 ±        0.497    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1478.186 ±     1151.137  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      7029.366 ±     5551.912    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1845446.727 ±    10901.944   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       947.287 ±        5.559  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±        0.174  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.032 ±        0.148    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       946.166 ±     1424.425  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       806.753 ±     1210.856    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         6.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2042077.548 ±    21280.724   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       550.088 ±        5.769  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.649 ±        5.584  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.501 ±        4.312    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       506.768 ±     1124.050  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       390.897 ±      866.482    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1788073.942 ±    15084.582   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     46255.576 ±     1559.783   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1957.852 ±       65.551  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66624.009 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.062 ±        0.098  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.128 ±        3.376    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1883.110 ±     1158.431  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     64107.968 ±    40042.794    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        12.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    223864.018 ±     6513.688   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2304.208 ±       67.258  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.062 ±        0.098  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.438 ±        0.682    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2297.385 ±     1437.949  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     16148.582 ±     9986.266    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        12.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    354454.339 ±     2298.892   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1707.890 ±       10.272  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7584.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.046 ±        0.067  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.203 ±        0.298    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1762.602 ±     1425.199  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      7828.492 ±     6360.984    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        13.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        11.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1270754.364 ±    11901.943   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       439.176 ±        4.119  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.670 ±        5.594  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.830 ±        6.930    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.502 ±     1068.643  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       588.085 ±     1323.334    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     84933.912 ±     2863.086   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3569.521 ±      122.512  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66144.005 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.079 ±        0.119  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.469 ±        2.254    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3538.369 ±     1166.957  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     65587.487 ±    22745.447    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        20.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    228822.828 ±     1296.533   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1942.347 ±       11.324  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13360.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.067 ±        0.104  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.458 ±        0.721    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1886.383 ±     1165.916  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     12977.142 ±     8067.778    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        14.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        11.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1211231.747 ±    88872.061   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       707.950 ±       52.025  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.017 ±        0.105  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.022 ±        0.135    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       675.067 ±        3.347  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       877.516 ±       62.440    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2425555.052 ±    41704.939   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       825.972 ±       14.391  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±        0.105  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.016 ±        0.068    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       807.157 ±     1159.122  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       523.641 ±      749.149    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2784261.522 ±    11985.914   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    330157.891 ±      611.537   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2701.737 ±        5.250  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.083 ±        0.057  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.397 ±        0.270    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2718.616 ±       14.638  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     12960.466 ±       53.202    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        20.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        16.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     26926.873 ±      254.040   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1577.463 ±       14.090  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     92192.015 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.029 ±        0.108  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.705 ±        6.291    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1614.797 ±     1422.719  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     94386.892 ±    83437.965    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5    100219.388 ±     4820.045   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       902.622 ±       43.649  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176.004 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±        0.098  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.328 ±        1.538    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       941.180 ±     1418.929  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     14767.078 ±    22063.116    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         7.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     62690.328 ±     3604.733   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1034.660 ±       59.210  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25976.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.017 ±        0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.422 ±        2.228    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1081.966 ±     1428.280  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     27215.441 ±    36483.488    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         7.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    132517.830 ±      572.246   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       854.188 ±        4.193  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144.003 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.033 ±        0.122  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.396 ±        1.445    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       941.527 ±     1418.415  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     11185.461 ±    16904.211    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     36111.062 ±      297.967   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1886.524 ±       14.905  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82216.011 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.054 ±        0.156  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.359 ±        6.813    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1899.595 ±     1165.925  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     82789.293 ±    50897.658    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        12.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     38914.223 ±      342.349   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       511.258 ±        4.587  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680.011 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.707 ±        6.041  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        28.589 ±      244.279    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       474.216 ±     1067.676  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     19200.198 ±    43233.781    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         9.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     41862.662 ±      416.612   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       378.131 ±        3.805  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216.010 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.017 ±        0.105  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.627 ±        3.937    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       339.400 ±     1220.093  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     12781.386 ±    45945.831    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     44282.584 ±     5188.996   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       389.144 ±       45.615  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.660 ±        5.654  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5        23.737 ±      203.476    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       441.871 ±      989.293  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     15806.939 ±    35535.502    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        10.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     45330.724 ±     1054.379   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       346.536 ±        8.013  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.017 ±        0.096  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.581 ±        3.330    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5       306.946 ±     1078.958  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     10680.378 ±    37544.776    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         3.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         7.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     19790.122 ±     1462.027   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       742.444 ±       54.940  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59039.857 ±        1.416    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.626 ±        5.305  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5        49.870 ±      422.434    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       808.179 ±     1162.489  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     64620.110 ±    98936.593    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         6.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     20557.326 ±      866.922   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       583.188 ±       24.041  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44653.600 ±       48.048    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.033 ±        0.209  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         2.583 ±       16.306    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       539.505 ±     1161.328  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     41385.729 ±    89107.318    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     81469.602 ±     4869.895   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       212.014 ±       12.531  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.003 ±        0.024  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.056 ±        0.481    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       204.648 ±     1079.049  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3999.802 ±    21094.573    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         2.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     16954.124 ±      293.247   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1099.276 ±       19.307  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102048.026 ±        0.011    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±        0.104  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.317 ±        9.695    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1082.234 ±     1426.146  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    100397.910 ±   131541.641    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     68464.925 ±      580.021   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       903.753 ±        7.889  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     20776.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.037 ±        0.200  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.862 ±        4.593    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       941.780 ±     1421.093  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     21652.269 ±    32697.521    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         7.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     91920.223 ±      450.860   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1089.999 ±        5.666  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.033 ±        0.201  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.570 ±        3.445    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1082.066 ±     1425.296  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     18532.152 ±    24454.069    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         6.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    205087.943 ±      813.143   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       325.213 ±        1.324  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306.915 ±     1078.849  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2356.793 ±     8284.468    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    253263.316 ±     1398.364   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     74596.482 ±      471.666   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1163.119 ±        7.367  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24544.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±        0.164  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.790 ±        3.461    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1205.623 ±     1154.290  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     25445.717 ±    24419.679    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     27822.101 ±      178.010   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       578.699 ±        3.991  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     32736.015 ±        0.002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.711 ±        6.048  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        40.255 ±      342.207    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       506.353 ±     1122.877  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     28658.098 ±    63525.430    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     28857.589 ±      550.986   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       378.779 ±        7.205  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20656.015 ±        0.002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±        0.215  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.374 ±       11.832    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.453 ±     1220.132  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     18562.013 ±    66830.177    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    123896.464 ±     9833.321   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       483.597 ±       38.409  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.672 ±        5.544  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         8.495 ±       70.056    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.483 ±     1068.592  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      6060.386 ±    13769.040    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     22035.888 ±      888.368   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1216.934 ±       49.461  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86920.020 ±        0.008    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.025 ±        0.088  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.782 ±        6.232    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1217.486 ±     1164.569  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     87018.888 ±    83933.236    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         7.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    179200.762 ±     4030.931   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       623.039 ±       14.257  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.706 ±        6.032  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         6.191 ±       52.917    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       640.825 ±      278.480  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      5625.381 ±     2337.699    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         5.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    285223.793 ±      728.849   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       288.500 ±        0.748  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.023 ±        0.198    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       306.946 ±     1078.957  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1694.567 ±     5956.643    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    506098.509 ±     5432.938   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       388.432 ±        4.324  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.660 ±        5.627  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.051 ±       17.495    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       441.871 ±      989.307  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1375.704 ±     3078.271    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        10.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    557010.637 ±     2484.822   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    294379.276 ±     3050.609   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       814.000 ±        8.229  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.021 ±        0.098  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.111 ±        0.525    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       810.062 ±     1158.999  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      4330.973 ±     6196.609    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         5.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     38751.187 ±      330.700   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1728.397 ±       14.490  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200.011 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.050 ±        0.122  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.030 ±        4.942    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1750.296 ±     1420.495  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     71105.299 ±    58023.185    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        13.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    303503.312 ±    13128.794   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       314.694 ±       13.662  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.007 ±        0.050  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.038 ±        0.258    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       306.953 ±     1078.984  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1584.912 ±     5571.195    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         7.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    103070.267 ±     2045.459   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1136.704 ±       22.823  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17360.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±        0.160  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.638 ±        2.458    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1082.295 ±     1427.420  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     16544.495 ±    21987.648    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         7.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    427802.587 ±    14382.109   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       278.320 ±        9.356  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.002 ±        0.018  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.008 ±        0.067    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306.955 ±     1078.990  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1134.744 ±     3989.014    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     40791.459 ±      311.389   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2177.408 ±       15.989  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     84016.010 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.050 ±        0.122  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.928 ±        4.699    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2172.721 ±     1159.583  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     83848.820 ±    45296.933    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        14.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     90310.137 ±     1219.111   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       434.684 ±        5.920  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      7576.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.705 ±        6.008  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        12.328 ±      105.137    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       339.431 ±     1220.190  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      5928.248 ±    21322.004    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         7.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    112711.431 ±     2207.610   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       344.898 ±        6.722  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.004 ±        0.038  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.061 ±        0.524    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       306.965 ±     1079.024  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4297.556 ±    15106.815    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         9.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    100373.595 ±     1109.695   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       331.618 ±        3.867  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.021 ±        0.179  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.327 ±        2.818    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       339.345 ±     1219.788  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      5327.737 ±    19159.204    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    115054.062 ±     4384.200   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       352.040 ±       13.485  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.001 ±        0.007  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.018 ±        0.096    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       306.927 ±     1078.893  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4215.875 ±    14821.146    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         7.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    116384.649 ±     1283.809   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       264.397 ±        2.933  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.006 ±        0.048  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.076 ±        0.651    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5       306.909 ±     1078.828  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      4157.235 ±    14613.342    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         7.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     10032.956 ±       40.870   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1650.227 ±        7.383  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258856.041 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.046 ±        0.143  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         7.186 ±       22.506    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1751.104 ±     1421.341  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    274700.680 ±   223387.710    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        10.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     10541.707 ±      108.365   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1630.987 ±       17.078  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243503.063 ±       54.013    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.042 ±        0.080  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         6.217 ±       11.975    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1626.914 ±     1435.098  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    242932.670 ±   215099.244    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        12.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        11.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    188821.554 ±     1137.927   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       491.436 ±        3.128  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.535 ±        4.503  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         4.462 ±       37.555    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       475.078 ±     1070.605  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3962.368 ±     8932.655    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6376.875 ±       12.272   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1618.961 ±        3.854  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    399592.065 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±        0.105  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         6.167 ±       25.800    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1626.410 ±     1424.496  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    401454.998 ±   352147.916    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        11.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     26404.231 ±       82.142   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1368.345 ±        4.392  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568.016 ±        0.002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.029 ±        0.134  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.737 ±        7.991    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1344.792 ±        5.455  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     80163.988 ±      317.750    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        10.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         8.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     31276.050 ±      107.685   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1528.936 ±        4.170  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944.013 ±        0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.062 ±        0.057  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.143 ±        2.863    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1490.479 ±     1164.705  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     75015.271 ±    58812.598    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        11.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         9.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    361876.570 ±     4335.405   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       800.098 ±        9.607  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±        0.209  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.127 ±        0.911    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       808.907 ±     1157.820  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3519.824 ±     5064.863    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         5.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    410958.093 ±     1139.102   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     28888.534 ±       86.349   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1520.206 ±        5.050  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824.014 ±        0.002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±        0.134  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.814 ±        7.304    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1475.771 ±     1159.286  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     80399.663 ±    63057.109    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        11.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        10.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5     96614.211 ±     3918.341   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1573.986 ±       63.638  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640.004 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.037 ±        0.143  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.611 ±        2.327    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1614.579 ±     1411.979  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     26284.921 ±    22588.662    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        12.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         9.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    515325.033 ±    20781.801   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       534.368 ±       21.358  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.504 ±        4.261  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.533 ±       12.952    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506.265 ±     1122.557  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1547.340 ±     3416.523    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         4.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    287284.473 ±     1480.506   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       405.894 ±        2.111  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2224.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±        0.174  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.137 ±        0.953    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       474.091 ±     1067.203  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2599.193 ±     5852.231    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         5.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    629531.571 ±    49365.812   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       409.566 ±       32.142  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.659 ±        5.608  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.634 ±       13.911    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.585 ±     1220.980  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       853.930 ±     3060.394    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         7.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     75837.434 ±     1431.446   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3320.786 ±       62.932  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68920.005 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.096 ±        0.091  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.989 ±        1.928    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      3402.193 ±       10.207  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     70610.890 ±     1334.218    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        25.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        22.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    246876.674 ±    13713.662   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1470.632 ±       82.207  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9376.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.037 ±        0.119  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.240 ±        0.770    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1478.547 ±     1165.451  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      9443.240 ±     7893.931    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        11.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         9.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5    981768.000 ±     7571.908   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       534.015 ±        3.974  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.502 ±        4.310  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.804 ±        6.902    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       506.329 ±     1122.791  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       811.931 ±     1800.204    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         7.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    860336.707 ±     4467.571   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       677.790 ±        3.556  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±        0.091  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.061 ±        0.167    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       809.715 ±     1160.917  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1481.065 ±     2118.253    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         5.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1083944.010 ±     7283.623   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       589.500 ±        3.812  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.665 ±        5.595  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.964 ±        8.106    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       641.340 ±      279.353  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       931.296 ±      406.326    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1086101.196 ±      517.497   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     34038.875 ±      155.872   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1847.203 ±        8.460  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85416.012 ±        0.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.046 ±        0.143  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.118 ±        6.634    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1746.984 ±     1416.682  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     80775.207 ±    65369.011    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        13.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        12.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    121266.014 ±     1823.346   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1494.704 ±       23.095  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     19400.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.046 ±        0.088  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.595 ±        1.151    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1478.603 ±     1165.510  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     19202.766 ±    15472.664    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        12.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    186949.245 ±     6881.839   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       994.028 ±       37.022  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8368.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.029 ±        0.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.244 ±        1.015    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       946.144 ±     1424.397  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      7949.431 ±    11767.141    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         7.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    270813.601 ±     1476.759   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       704.736 ±        3.981  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.667 ±        5.560  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         3.883 ±       32.400    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       673.392 ±        4.748  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3913.840 ±       45.669    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     71168.088 ±      388.338   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3004.554 ±       17.596  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66448.006 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.067 ±        0.088  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.473 ±        1.946    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2991.869 ±     1441.242  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     66176.468 ±    32231.657    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        22.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        18.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    177161.801 ±      469.970   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       615.908 ±        1.845  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.713 ±        5.961  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6.338 ±       52.986    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       640.768 ±      278.230  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      5692.604 ±     2462.219    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         8.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    489588.304 ±    14045.769   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       495.177 ±       14.315  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.037 ±        0.200  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.120 ±        0.641    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       506.751 ±     1124.009  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1629.316 ±     3602.529    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    489426.994 ±     7335.845   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       375.680 ±        5.503  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.656 ±        5.562  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.114 ±       17.918    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       441.972 ±      989.431  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1422.415 ±     3185.712    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         9.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    537209.752 ±     3597.185   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    303086.857 ±    10571.425   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       834.928 ±       29.326  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±        0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.152 ±        0.475    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       810.452 ±     1165.600  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4206.905 ±     6011.117    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         5.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     11004.707 ±       80.597   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1407.343 ±       10.610  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    201280.045 ±        0.049    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.037 ±        0.200  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5.358 ±       28.572    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1345.445 ±        5.171  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    192427.619 ±     1140.691    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         9.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     11170.957 ±      434.220   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1324.145 ±       51.533  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186576.039 ±        0.021    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.033 ±        0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         4.712 ±       17.237    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1218.441 ±     1163.553  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    171777.623 ±   165164.446    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         9.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         8.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    203690.542 ±     6841.435   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1325.179 ±       44.088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240.002 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.037 ±        0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.289 ±        1.012    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1348.163 ±        4.957  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     10418.215 ±      338.877    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         9.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      9071.059 ±      210.573   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1630.338 ±       36.818  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    282857.332 ±       11.080    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.037 ±        0.164  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         6.513 ±       28.535    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1627.041 ±     1435.751  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    282551.080 ±   255008.442    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        10.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     22945.284 ±      834.219   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       963.371 ±       34.711  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080.176 ±        1.361    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.025 ±        0.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.706 ±        9.790    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       941.246 ±     1418.065  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     64485.476 ±    96140.086    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         5.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     26893.553 ±      196.706   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1034.516 ±        7.366  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552.016 ±        0.003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.025 ±        0.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1.463 ±        6.123    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       946.324 ±     1426.169  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     55416.170 ±    83842.410    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         6.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    736156.968 ±     7646.008   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1328.240 ±       14.090  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.062 ±        0.150  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.133 ±        0.320    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1348.039 ±        4.839  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      2882.349 ±       25.906    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         7.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    836777.032 ±     1266.761   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     24861.982 ±      707.259   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1049.328 ±       29.505  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66432.017 ±        0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±        0.185  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.111 ±       11.675    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1071.727 ±     1413.900  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     67961.988 ±    90868.013    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         8.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     28694.380 ±      307.425   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1464.293 ±       15.865  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     80320.014 ±        0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.037 ±        0.215  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.060 ±       11.833    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1480.292 ±     1155.038  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     81223.884 ±    64140.977    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         9.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     31061.832 ±      210.512   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1418.689 ±        9.777  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71888.013 ±        0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.033 ±        0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.687 ±        6.152    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1489.962 ±     1162.292  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     75520.267 ±    59514.892    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         8.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    366207.137 ±    24602.261   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       952.932 ±       64.141  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.017 ±        0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.073 ±        0.463    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       943.041 ±     1420.205  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      4067.558 ±     6297.953    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         7.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         5.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     18887.590 ±       83.024   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1882.969 ±        8.121  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    156904.023 ±        0.009    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±        0.080  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.469 ±        6.681    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1899.473 ±     1165.145  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    158297.157 ±    97511.261    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        12.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     53923.761 ±      506.267   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1307.854 ±       12.191  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.050 ±        0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.459 ±        2.677    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1344.629 ±        3.401  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     39249.686 ±      430.968    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         8.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    132097.732 ±      518.577   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1119.205 ±        4.193  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13336.003 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.046 ±        0.164  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.546 ±        1.958    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1082.467 ±     1428.176  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     12900.054 ±    17039.713    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         7.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1035598.009 ±    10743.589   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1110.610 ±       11.499  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.046 ±        0.164  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.070 ±        0.249    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1077.839 ±     1420.418  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1637.946 ±     2155.817    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         5.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    885405.897 ±     1226.720   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     63003.251 ±      618.899   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1465.951 ±       14.605  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36624.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.050 ±        0.185  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.249 ±        4.609    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1474.959 ±     1148.928  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     36846.059 ±    28609.744    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         9.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     16058.666 ±       87.857   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1433.435 ±        7.200  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140479.823 ±        1.761    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±        0.183  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         4.485 ±       17.884    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1480.436 ±     1157.639  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    145103.340 ±   113968.098    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         9.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     17231.795 ±       69.342   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1392.438 ±        5.211  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127184.187 ±        1.382    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.021 ±        0.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.901 ±        7.322    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1354.320 ±        6.012  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    123702.699 ±      784.094    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         8.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    420820.739 ±     1754.152   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1095.115 ±        4.723  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.078 ±        0.424    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1077.870 ±     1420.565  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      4032.300 ±     5323.079    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         7.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     12992.805 ±      132.775   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1793.960 ±       18.831  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217320.053 ±        0.163    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.017 ±        0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.013 ±        8.105    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1763.330 ±     1434.180  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    213512.779 ±   171676.502    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        12.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     39389.617 ±     1494.575   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1224.445 ±       46.437  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928.011 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.050 ±        0.185  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.987 ±        7.337    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1210.056 ±     1158.111  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     48375.404 ±    46564.031    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5         9.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         6.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     45289.419 ±     3277.434   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1201.411 ±       86.555  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752.009 ±        0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.062 ±        0.160  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.181 ±        5.597    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1218.197 ±     1165.543  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     42415.093 ±    41501.104    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         7.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1235370.095 ±     7261.843   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1124.128 ±        7.310  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.062 ±        0.139  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.080 ±        0.177    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1212.833 ±     1160.511  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1545.146 ±     1480.235    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         7.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1518990.802 ±     2306.567   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     36132.375 ±      373.631   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1093.011 ±       11.054  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     47616.012 ±        0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±        0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.087 ±        6.238    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1071.584 ±     1410.852  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     46702.056 ±    61701.919    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         8.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         7.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     78528.958 ±      680.485   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1345.767 ±       11.841  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     26976.005 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.021 ±        0.080  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.417 ±        1.603    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1344.128 ±        5.879  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     26943.226 ±      182.034    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         9.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    336877.422 ±     6603.717   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       674.631 ±       13.420  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.520 ±        4.385  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.449 ±       20.673    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       672.743 ±        3.429  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      3143.261 ±       74.289    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         7.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    262026.898 ±     8642.571   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       575.353 ±       19.102  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3456.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±        0.166  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.202 ±        1.013    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       539.550 ±     1161.426  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3247.013 ±     6990.342    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    476514.286 ±     7106.440   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       600.750 ±        8.714  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.667 ±        5.611  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.200 ±       18.501    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       641.410 ±      279.143  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2117.585 ±      895.917    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     71008.898 ±      642.163   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3168.185 ±       29.147  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70232.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.075 ±        0.072  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.661 ±        1.582    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3128.855 ±     1437.872  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     69372.880 ±    32356.229    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        23.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        19.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    223768.825 ±     3058.078   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1578.707 ±       22.056  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11104.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.029 ±        0.072  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.205 ±        0.504    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1613.504 ±     1414.371  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     11348.658 ±     9944.553    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        12.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        10.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    678042.801 ±     3029.561   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       530.713 ±        2.464  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.504 ±        4.299  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.169 ±        9.963    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       506.358 ±     1122.894  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1175.042 ±     2605.438    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         6.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    467108.981 ±     3254.346   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       479.603 ±        3.151  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±        0.174  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.084 ±        0.586    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       506.857 ±     1124.222  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1707.275 ±     3784.986    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    587544.928 ±     6039.893   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       459.905 ±        4.746  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.664 ±        5.631  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.779 ±       15.082    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474.564 ±     1068.784  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1271.156 ±     2858.923    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    703582.502 ±     5070.740   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     30802.961 ±      210.562   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1579.435 ±       11.239  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     80704.013 ±        0.002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.042 ±        0.127  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.128 ±        6.470    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1610.224 ±     1418.539  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     82302.174 ±    73048.125    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        10.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      7931.417 ±       44.719   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1221.095 ±        7.617  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242296.053 ±        0.014    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.042 ±        0.188  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         8.255 ±       37.244    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1345.070 ±        3.047  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    266896.300 ±     1631.055    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        10.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         8.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      8392.310 ±      258.887   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1209.724 ±       37.144  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226864.049 ±        0.006    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         3.915 ±       21.268    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1218.135 ±     1167.845  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5    228639.506 ±   221510.724    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         7.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    160162.748 ±     5814.412   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1551.556 ±       56.271  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248.003 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.042 ±        0.127  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.408 ±        1.237    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1618.825 ±     1421.179  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     15899.946 ±    13740.188    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        10.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      7633.240 ±      225.172   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1388.388 ±       41.042  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286281.453 ±       12.049    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.021 ±        0.080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         4.305 ±       16.606    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1354.316 ±        5.964  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    279270.073 ±     8993.941    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        10.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        10.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     18535.405 ±      304.068   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       841.213 ±       14.230  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71413.285 ±       40.535    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.029 ±        0.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         2.471 ±       10.312    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5       807.505 ±     1159.206  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     68512.622 ±    97639.738    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         6.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         5.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     21132.675 ±       88.058   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       895.449 ±        3.898  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696.021 ±        0.007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         1.551 ±        8.443    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       810.695 ±     1163.795  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     60379.760 ±    86615.394    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         4.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    451061.334 ±    13130.656   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1022.527 ±       29.466  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.033 ±        0.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.116 ±        0.425    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5      1077.900 ±     1421.184  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      3766.412 ±     5022.235    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         8.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         7.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    485819.937 ±     4102.798   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     19687.106 ±      748.719   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       907.790 ±       34.793  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72576.009 ±        0.100    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.025 ±        0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         2.017 ±       11.630    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5       938.544 ±     1416.770  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     75175.667 ±   115225.044    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         6.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     14161.803 ±       81.708   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1358.192 ±        8.172  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    150944.031 ±        0.012    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±        0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3.240 ±       10.168    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1478.366 ±     1155.684  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    164300.457 ±   128456.710    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         9.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     13613.971 ±      734.574   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1246.131 ±       66.969  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144079.427 ±       54.021    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.017 ±        0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1.915 ±        7.711    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1217.877 ±     1163.065  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    140968.489 ±   136451.809    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    251965.262 ±     8742.988   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1457.294 ±       50.755  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104.002 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.037 ±        0.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.233 ±        0.650    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1479.868 ±     1166.253  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      9259.476 ±     7701.078    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         9.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     12385.846 ±       91.294   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1550.393 ±       11.831  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    197016.055 ±        0.170    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.037 ±        0.119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         4.762 ±       15.096    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1489.636 ±     1162.128  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    189338.366 ±   148961.467    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         9.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     27995.312 ±     1079.932   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       966.042 ±       37.446  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312.015 ±        0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.166 ±        7.781    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       939.659 ±     1415.421  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     52783.388 ±    78895.230    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         7.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         5.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     82318.134 ±      556.778   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1310.413 ±        9.159  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±        0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.636 ±        2.322    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1218.602 ±     1164.974  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     23303.628 ±    22314.864    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         8.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    707327.469 ±     7037.876   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       970.681 ±        9.574  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.025 ±        0.132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.056 ±        0.294    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       940.671 ±     1418.723  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      2094.487 ±     3174.687    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         6.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    805572.109 ±     2114.123   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     66576.667 ±     2887.905   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1305.832 ±       56.631  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     30872.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.042 ±        0.204  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.979 ±        4.802    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1217.982 ±     1164.321  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     28732.860 ±    26686.381    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         8.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     20528.264 ±      446.465   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       742.474 ±       16.169  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     56920.017 ±        0.027    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.631 ±        5.348  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        48.426 ±      410.070    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       673.764 ±        6.411  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     51654.302 ±     1533.887    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         5.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         5.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     15975.291 ±      142.459   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       447.495 ±        4.004  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44088.370 ±        2.948    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±        0.251  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.878 ±       24.779    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474.265 ±     1067.751  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     46723.009 ±   105148.680    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    101506.267 ±      894.694   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       254.884 ±        2.369  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       306.963 ±     1079.018  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4758.918 ±    16728.413    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     14955.782 ±      215.358   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5       944.586 ±       13.660  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99408.139 ±        0.946    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.876 ±        4.620    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       946.292 ±     1427.600  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     99591.106 ±   150277.118    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         6.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     62132.608 ±      336.526   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       992.664 ±        4.955  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     25144.007 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.528 ±        2.876    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       941.344 ±     1419.777  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     23845.725 ±    35985.594    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         6.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     84311.802 ±      259.140   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1205.952 ±        4.189  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     22512.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±        0.098  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.389 ±        1.835    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1218.163 ±     1165.027  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     22740.902 ±    21760.306    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         8.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    248434.360 ±    12436.252   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       476.050 ±       23.865  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.539 ±        4.539  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.404 ±       28.651    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       475.057 ±     1070.454  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3013.551 ±     6760.777    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    294511.652 ±      370.961   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     73544.651 ±      664.494   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1183.167 ±       10.898  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     25320.006 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.058 ±        0.191  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.247 ±        4.097    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1205.822 ±     1153.991  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     25800.979 ±    24645.942    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         7.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    124602.935 ±     1397.240   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1804.808 ±       20.061  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.033 ±        0.044  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.421 ±        0.553    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1751.055 ±     1417.448  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     22128.837 ±    18071.702    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         9.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    686500.579 ±    43498.158   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       380.360 ±       24.157  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.507 ±        4.292  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.197 ±       10.137    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.423 ±     1220.024  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       784.892 ±     2838.616    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         7.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    376299.244 ±    24372.292   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       384.487 ±       24.968  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1608.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±        0.280  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.159 ±        1.195    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       339.416 ±     1220.059  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1433.739 ±     5168.780    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         5.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    777190.896 ±    48422.422   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       268.629 ±       16.741  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306.937 ±     1078.927  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       625.440 ±     2199.249    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     81160.231 ±     1635.166   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3479.421 ±       71.494  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67472.005 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.104 ±        0.127  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.018 ±        2.443    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      3539.007 ±     1167.558  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     68625.862 ±    22481.774    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        26.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        24.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    293730.573 ±     6680.185   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1530.439 ±       34.774  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.058 ±        0.132  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.311 ±        0.704    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1478.986 ±     1155.620  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      7922.996 ±     6147.192    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1451130.082 ±     9045.426   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       494.182 ±        3.279  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.511 ±        4.327  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.556 ±        4.705    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       371.818 ±     1331.621  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       403.515 ±     1445.573    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1305651.587 ±    26864.357   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       763.163 ±       16.012  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.025 ±        0.137    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       810.439 ±     1164.953  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       977.149 ±     1407.061    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         5.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1319472.873 ±    13896.434   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       449.361 ±        4.734  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.662 ±        5.674  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.793 ±        6.792    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474.546 ±     1068.763  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       566.567 ±     1276.135    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1400682.615 ±     2372.133   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     39779.539 ±      368.069   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1913.382 ±       18.093  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75712.010 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.075 ±        0.146  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.965 ±        5.762    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2016.967 ±       23.749  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     79811.210 ±     1169.300    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        12.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     43119.309 ±      388.214   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       860.885 ±        7.933  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424.010 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.017 ±        0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.609 ±        3.210    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       940.919 ±     1415.126  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     34349.260 ±    51708.269    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         7.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     80774.361 ±     3087.992   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       849.849 ±       32.602  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16560.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.017 ±        0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.325 ±        2.040    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       810.896 ±     1164.956  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     15806.121 ±    22783.358    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    266270.698 ±     1590.775   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       866.141 ±        5.323  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.021 ±        0.113  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.123 ±        0.671    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       941.420 ±     1420.020  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      5567.607 ±     8430.668    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     30136.331 ±      313.654   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1454.905 ±       14.966  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     75992.014 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.037 ±        0.154  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.956 ±        8.036    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1354.858 ±        6.262  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     70766.943 ±      955.342    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         8.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     59508.693 ±     2027.529   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       882.868 ±       30.159  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352.007 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.025 ±        0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.662 ±        1.786    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       940.476 ±     1418.637  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     24921.780 ±    38159.904    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5     94873.182 ±     4137.215   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1299.614 ±       56.093  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560.004 ±        0.081    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±        0.098  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.692 ±        1.623    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1218.324 ±     1164.433  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     20236.333 ±    19634.925    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         8.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    280629.581 ±     1060.732   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       894.365 ±        3.408  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.117 ±        0.779    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       806.509 ±     1157.063  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4523.704 ±     6497.731    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         4.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    327477.111 ±     1617.350   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     71742.715 ±     3956.945   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1064.167 ±       58.281  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344.006 ±        0.108    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.453 ±        3.013    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1071.790 ±     1411.761  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     23437.280 ±    30022.733    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6.000                     ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     25055.599 ±      223.832   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1305.237 ±       12.078  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984.017 ±        0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.062 ±        0.098  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3.922 ±        6.163    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1343.758 ±        4.773  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     84403.881 ±      670.991    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        10.000                 counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         7.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     29791.458 ±      132.843   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1166.800 ±        5.045  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61648.014 ±        0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.100 ±        7.338    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1082.499 ±     1427.132  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     57210.629 ±    75606.936    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         8.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         6.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    504770.330 ±    10825.007   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1313.539 ±       28.214  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.067 ±        0.119  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.207 ±        0.369    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1209.701 ±     1158.831  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3768.159 ±     3560.324    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         8.000                     ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     24079.098 ±      762.970   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1830.759 ±       58.335  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119672.017 ±        0.003    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±        0.122  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.169 ±        7.917    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1762.570 ±     1431.326  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    115124.184 ±    91560.924    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        13.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     72149.498 ±     3060.269   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1527.181 ±       65.221  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312.006 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.033 ±        0.166  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.723 ±        3.609    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1478.601 ±     1160.939  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     32242.620 ±    24967.375    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         9.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    155198.444 ±      910.547   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1176.036 ±        7.070  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928.003 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.046 ±        0.132  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.465 ±        1.335    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1218.019 ±     1166.048  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     12355.910 ±    11853.559    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1319223.052 ±    16655.573   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1092.932 ±       13.766  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304.000 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.037 ±        0.143  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.045 ±        0.171    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1075.259 ±     1416.823  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1282.523 ±     1685.530    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         6.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1471100.539 ±     3653.436   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    125858.060 ±      869.050   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1418.931 ±       10.483  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     17744.003 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±        0.091  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.364 ±        1.142    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1489.291 ±     1161.057  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     18629.612 ±    14691.050    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11.000                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         8.000                     ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     36963.868 ±      500.360   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1327.446 ±       17.388  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56528.011 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.046 ±        0.154  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.950 ±        6.556    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1354.225 ±        6.811  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     57668.922 ±      817.189    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10.000                 counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         8.000                     ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    750031.556 ±     6747.670   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1463.884 ±       13.298  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072.001 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.062 ±        0.057  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.131 ±        0.119    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1345.128 ±        6.999  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2822.795 ±       17.040    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        10.000                 counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         9.000                     ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     28307.189 ±       89.299   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2060.110 ±        6.777  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114552.015 ±        0.002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.062 ±        0.080  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.473 ±        4.463    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      2034.749 ±       12.650  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    113141.842 ±      551.635    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                 counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12.000                     ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    367010.775 ±     5058.696   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1020.374 ±       14.073  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376.001 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±        0.174  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.161 ±        0.744    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       946.576 ±     1426.340  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4057.648 ±     6090.541    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         6.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1695429.741 ±    88939.470   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       990.985 ±       51.997  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.033 ±        0.146  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.031 ±        0.136    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1074.946 ±     1418.536  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1000.277 ±     1344.941    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8.000                 counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1899033.851 ±   172308.951   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    238729.563 ±     1433.595   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1545.807 ±        9.384  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192.002 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.062 ±        0.150  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.412 ±        0.989    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1625.751 ±     1428.345  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     10721.402 ±     9469.710    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12.000                 counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        11.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     82722.376 ±      719.378   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1552.351 ±       13.571  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     29536.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.033 ±        0.146  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.635 ±        2.778    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1475.256 ±     1148.462  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     28068.093 ±    21816.938    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        10.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     86625.687 ±      798.359   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       978.338 ±        9.311  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     17776.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.021 ±        0.057  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.378 ±        1.029    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1080.171 ±     1423.970  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     19629.569 ±    25913.280    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    109666.118 ±     5494.170   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1155.031 ±       57.214  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±        0.057  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.299 ±        0.809    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1205.911 ±     1154.022  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     17320.622 ±    16745.486    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     48042.435 ±      266.712   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2294.640 ±       13.266  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75176.009 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.075 ±        0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.454 ±        3.974    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2307.945 ±     1435.641  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     75615.408 ±    47141.581    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        17.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        15.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    126584.966 ±     2250.789   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       559.720 ±        9.991  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6960.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.859 ±        7.311  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        10.719 ±       91.184    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       505.403 ±     1120.287  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      6289.240 ±    13921.663    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         8.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    164907.812 ±     4095.399   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       244.746 ±        6.018  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.040 ±        0.343    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.643 ±     1079.022  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1961.618 ±    10343.063    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         2.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    685886.297 ±    10377.234   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       850.677 ±       12.948  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.029 ±        0.108  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.067 ±        0.247    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       938.585 ±     1412.121  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2153.032 ±     3230.468    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    718002.299 ±     3411.806   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    201388.542 ±     2097.613   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       658.125 ±        6.810  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.958 ±        8.029  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         7.471 ±       62.581    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       669.761 ±        8.169  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      5234.967 ±       64.750    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         7.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    132013.954 ±     1983.748   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1625.841 ±       24.365  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19384.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.062 ±        0.220  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.743 ±        2.613    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1748.227 ±     1419.294  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     20835.376 ±    16754.213    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        11.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    178358.173 ±     1200.785   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       948.198 ±        6.662  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8368.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.042 ±        0.188  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.368 ±        1.662    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       946.049 ±     1422.959  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      8353.469 ±    12619.969    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         6.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    486500.740 ±     1996.903   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       944.648 ±        4.606  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.029 ±        0.156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.094 ±        0.505    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       940.831 ±     1415.977  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3042.926 ±     4570.524    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     69871.676 ±      715.041   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2949.869 ±       29.361  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66448.006 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.058 ±        0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.313 ±        1.514    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2991.423 ±     1438.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     67401.464 ±    33082.002    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        22.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        17.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    180791.752 ±     1020.395   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       619.410 ±        3.387  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5392.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.713 ±        6.008  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         6.202 ±       52.234    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       640.819 ±      277.985  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      5577.832 ±     2400.469    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         5.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         8.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    309347.166 ±     3063.798   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       305.043 ±        2.803  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.021 ±        0.182    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       306.973 ±     1079.052  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1563.874 ±     5497.252    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         4.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1127353.223 ±     4754.217   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       836.613 ±        3.569  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.033 ±        0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.047 ±        0.100    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       806.962 ±     1159.918  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      1126.844 ±     1623.962    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         6.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1165838.003 ±   180787.542   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    292515.084 ±     4024.517   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       798.422 ±       10.908  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.025 ±        0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.134 ±        0.561    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5       809.988 ±     1161.011  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4357.025 ±     6223.049    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         6.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         6.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5314.771 ±      121.197   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1039.934 ±       23.631  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    307976.080 ±        0.014    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         3.711 ±       21.350    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1064.031 ±     1403.724  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    315461.373 ±   419963.829    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         7.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5290.359 ±      237.053   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       982.890 ±       44.142  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    292424.078 ±        0.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.012 ±        0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         3.682 ±       21.131    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1076.582 ±     1419.424  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    320658.922 ±   426656.000    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         7.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     39627.829 ±      340.608   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       650.587 ±        5.478  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840.011 ±        0.002    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         1.122 ±        9.526  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5        44.590 ±      378.591    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       667.574 ±        9.092  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     26514.792 ±      428.344    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         7.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      4673.724 ±       41.186   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1190.855 ±       10.719  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    401024.091 ±        0.023    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.004 ±        0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.400 ±       12.057    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1078.376 ±     1421.749  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    363309.262 ±   480777.095    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         8.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     14604.518 ±      402.746   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       818.318 ±       22.339  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88197.541 ±       48.010    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.017 ±        0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.803 ±        9.505    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       797.906 ±     1142.727  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     85947.723 ±   122146.745    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         6.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         5.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     16551.412 ±      979.108   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       861.715 ±       50.504  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944.003 ±        0.352    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.021 ±        0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1.980 ±        9.272    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       807.137 ±     1157.094  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     76680.545 ±   108404.124    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         6.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    253300.372 ±     4430.261   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       918.007 ±       16.561  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.033 ±        0.146  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.207 ±        0.907    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       931.895 ±     1403.597  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      5791.479 ±     8737.175    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         7.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    292115.631 ±    16362.217   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     15374.933 ±      599.467   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       877.536 ±       34.262  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89839.857 ±       30.828    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'           128  thrpt    5         0.034 ±        0.294  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      128  thrpt    5         3.488 ±       30.035    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.042 ±        0.247  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         4.257 ±       25.277    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       844.827 ±     1123.499  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     86460.633 ±   114368.359    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        53.000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    943018.592 ±     4635.832   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        38.342 ±        0.189  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64.000 ±        0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     73846.589 ±      995.628   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3331.217 ±       45.064  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     71008.006 ±        0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.121 ±        0.088  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         2.572 ±        1.843    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      3264.581 ±     1166.832  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     69574.177 ±    24240.755    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        24.000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        20.000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1127708.478 ±    67139.557   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       647.667 ±       38.643  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904.000 ±        0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±        0.347  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.070 ±        0.487    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       674.448 ±        2.932  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5       941.554 ±       53.842    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5.000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         5.000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5    686404.441 ±    47433.175   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       184.915 ±       12.801  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       424.001 ±        0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.003 ±        0.024  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.006 ±        0.054    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       204.656 ±     1079.092  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       475.841 ±     2509.693    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2.000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         4.000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1439595.700 ±    15190.580   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        14.634 ±        0.156  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16.000 ±        0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     44811.779 ±     1635.200   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1887.905 ±       68.873  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66312.009 ±        0.001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.062 ±        0.080  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         2.193 ±        2.805    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1898.405 ±     1164.478  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     66709.845 ±    41549.231    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        14.000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        10.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    652037.400 ±    26902.102   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2071.621 ±       84.599  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.050 ±        0.146  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.121 ±        0.351    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      2022.549 ±       19.229  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5      4882.008 ±      207.642    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        15.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        11.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   5435921.016 ±   589919.079   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       331.559 ±       35.989  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.006 ±        0.051  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.002 ±        0.016    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       306.958 ±     1079.001  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        89.887 ±      316.296    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         7.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5    970757.236 ±    31154.070   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1203.871 ±       38.409  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1952.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.062 ±        0.196  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5         0.101 ±        0.317    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5      1217.060 ±     1162.356  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5      1974.720 ±     1901.662    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         9.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         7.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8036316.828 ±    79391.494   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       367.588 ±        3.622  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.002 ±        0.017  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        ≈ 10⁻³                   B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       306.904 ±     1078.811  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        60.208 ±      211.641    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    308206.293 ±     2228.726   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1719.848 ±       12.508  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8784.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.058 ±        0.036  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.298 ±        0.184    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1760.663 ±     1427.665  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5      8994.934 ±     7343.398    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        13.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         9.000                     ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      3810.235 ±      107.739   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1799.646 ±       50.409  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    743312.112 ±        0.016    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.158 ±        0.568  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5        65.191 ±      234.175    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1763.882 ±     1428.219  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5    728088.593 ±   579897.809    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        13.000                 counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        12.000                     ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5298.252 ±      122.874   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2189.527 ±       51.433  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650392.079 ±        0.014    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.046 ±        0.067  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        13.594 ±       19.788    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2169.948 ±     1170.779  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    644607.203 ±   348580.485    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        16.000                 counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        13.000                     ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     43440.832 ±      249.882   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       722.651 ±        4.111  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184.010 ±        0.001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.557 ±        4.703  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        20.154 ±      170.290    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       809.428 ±     1159.801  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5     29340.444 ±    42259.577    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6.000                 counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         7.000                     ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4144.171 ±       37.867   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       762.013 ±        7.270  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289416.102 ±        0.016    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         3.166 ±       16.693    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5       808.483 ±     1161.932  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5    307048.348 ±   440956.757    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6.000                 counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         6.000                     ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      4434.162 ±       42.848   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       543.046 ±        5.217  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    192757.455 ±        2.057    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.179 ±        1.477  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        63.577 ±      523.700    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       506.593 ±     1123.551  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    179810.641 ±   399160.743    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4.000                 counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         5.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      6450.277 ±      325.170   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       172.345 ±        8.707  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056.065 ±        0.016    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.004 ±        0.035  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         1.029 ±        8.856    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       204.585 ±     1078.716  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     50427.441 ±   265929.486    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         4.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      6639.878 ±       36.794   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       128.887 ±        0.732  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552.067 ±        0.052    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5       102.300 ±      880.831  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5     24307.467 ±   209294.618    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      8309.639 ±       50.820   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      1935.291 ±       12.496  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366554.674 ±       47.700    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.037 ±        0.120  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         7.100 ±       22.695    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      2019.671 ±       21.436  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    382536.872 ±     3732.871    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        15.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        13.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     11452.756 ±      144.484   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       264.018 ±        3.243  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     36280.038 ±        0.015    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.011 ±        0.097  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         1.552 ±       13.361    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       204.653 ±     1079.075  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     28187.195 ±   148623.215    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         2.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         5.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     15438.639 ±      757.403   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       392.307 ±       19.243  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39992.029 ±        0.011    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.104 ±        0.852  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        10.563 ±       86.357    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       339.384 ±     1219.905  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     34687.745 ±   124435.056    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         3.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         4.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     23135.772 ±      276.584   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       433.631 ±        5.174  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     29496.018 ±        0.002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.682 ±        5.773  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        46.394 ±      392.896    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       339.616 ±     1221.030  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     23139.929 ±    83168.752    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2459.486 ±       94.094   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1514.937 ±       57.708  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    969488.168 ±        0.021    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.012 ±        0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         7.953 ±       45.654    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1488.000 ±     1168.768  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5    951928.941 ±   736716.468    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        11.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        12.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      8205.599 ±      498.853   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1517.631 ±       92.655  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    291068.914 ±       96.276    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                      N/A  thrpt    5         0.019 ±        0.164  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 N/A  thrpt    5         3.766 ±       32.427    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.087 ±        0.422  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        17.029 ±       83.368    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1503.079 ±     1125.160  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    288322.107 ±   214883.253    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        13.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        37.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     55670.142 ±      847.517   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       520.386 ±        8.179  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712.007 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.583 ±        4.927  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        16.470 ±      139.305    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       506.407 ±     1123.037  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     14297.911 ±    31666.787    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         7.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     41030.196 ±      287.015   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       610.787 ±        4.202  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431.871 ±        0.418    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.154 ±        1.240  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         5.914 ±       47.511    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       539.091 ±     1160.434  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     20666.037 ±    44485.300    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         4.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     74833.211 ±      243.958   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       562.618 ±        1.900  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832.006 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0.681 ±        5.796  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        14.315 ±      121.870    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       506.684 ±     1123.765  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5     10657.821 ±    23631.877    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         7.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5     98607.469 ±     8422.970   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.004 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      5503.934 ±       38.705   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1632.488 ±       11.510  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    466879.948 ±        1.937    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.058 ±        0.174  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        16.681 ±       49.804    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1624.225 ±     1432.638  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5    464470.499 ±   408654.088    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        12.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        11.000                     ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   5261423.437 ±   140915.012   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3262.583 ±       86.831  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.067 ±        0.067  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.020 ±        0.020    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      3255.786 ±     1192.278  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5       974.165 ±      364.702    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        24.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        18.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  42825766.902 ±   353683.085   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       435.363 ±        3.722  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.523 ±        4.426  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.019 ±        0.163    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5       474.138 ±     1067.366  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        17.434 ±       39.215    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         8.000                     ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   8942175.033 ±    76692.335   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3363.503 ±       28.931  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.079 ±        0.067  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.014 ±        0.012    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      3398.745 ±       21.341  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5       598.205 ±        6.498    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        25.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        18.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  50822762.851 ± 15739768.209   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  36160700.210 ±   182968.019   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1286.462 ±        6.683  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.046 ±        0.119  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.002 ±        0.005    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1344.611 ±        3.324  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        58.531 ±        0.273    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        10.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         8.000                     ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   7417371.057 ±   263162.186   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      3581.291 ±      127.106  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.083 ±        0.080  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.018 ±        0.017    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      3661.361 ±     1421.621  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       777.440 ±      322.159    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        27.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        21.000                     ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  21530939.825 ±   704446.228   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1970.164 ±       63.888  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       144.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.058 ±        0.105  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.004 ±        0.008    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      1886.631 ±     1166.171  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5       137.943 ±       86.297    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        14.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        12.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  57792831.266 ±   454105.064   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1762.516 ±       14.305  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.087 ±        0.088  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.002 ±        0.002    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1751.549 ±     1417.838  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        47.708 ±       38.744    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        13.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        10.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  14112797.377 ±    62295.034   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      2797.361 ±       12.400  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.067 ±        0.067  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.007 ±        0.007    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2718.703 ±       13.957  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       303.228 ±        2.657    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        20.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        16.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  48458691.294 ±   301370.563   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       985.245 ±        5.889  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.033 ±        0.176  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.001 ±        0.006    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       940.990 ±     1416.956  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        30.573 ±       46.169    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         5.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  52214799.193 ±   582057.337   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  40950791.012 ±   403687.476   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2081.524 ±       19.638  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.079 ±        0.067  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.003 ±        0.003    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      2026.125 ±       19.493  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        77.871 ±        1.052    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        15.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5        12.000                     ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2533731.484 ±    10900.321   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2073.324 ±        9.026  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.062 ±        0.057  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.039 ±        0.035    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2154.299 ±     1137.930  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      1338.464 ±      713.537    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        16.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        13.000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    155830.024 ±      966.826   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      2858.705 ±       19.437  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.075 ±        0.091  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.757 ±        0.921    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      2845.752 ±     1179.087  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     28741.262 ±    11909.380    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        21.000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        15.000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     17729.151 ±      155.495   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1378.816 ±       12.095  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122416.025 ±        0.009    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.037 ±        0.119  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.324 ±       10.561    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1353.378 ±        6.003  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    120157.946 ±      878.883    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        10.000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         9.000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    123834.569 ±     3443.661   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1375.808 ±       38.363  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     17488.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.050 ±        0.091  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.635 ±        1.155    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1353.291 ±        6.659  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     17202.560 ±      519.107    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         9.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    485939.489 ±    15491.876   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1005.257 ±       32.201  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.037 ±        0.174  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.122 ±        0.569    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1075.323 ±     1418.289  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3486.559 ±     4637.780    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         8.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    540203.262 ±     4177.267   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       527.157 ±        4.095  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.668 ±        5.567  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         1.946 ±       16.217    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5       506.734 ±     1123.942  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      1475.442 ±     3270.911    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         4.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         7.000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     21079.217 ±      333.348   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       461.045 ±        7.461  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34424.178 ±        1.356    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.075 ±        0.557  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         5.600 ±       41.613    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       371.805 ±     1331.608  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     27808.362 ±    99508.152    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         3.000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    391221.804 ±     2637.920   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2654.627 ±       19.393  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.079 ±        0.036  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.318 ±        0.144    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2707.046 ±       30.682  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     10890.935 ±      163.475    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        20.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        14.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    331042.250 ±     2032.730   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       876.655 ±        5.799  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4168.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.021 ±        0.057  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.099 ±        0.269    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       810.514 ±     1162.935  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3854.829 ±     5553.986    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         6.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    442128.482 ±    35025.553   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       871.876 ±       69.125  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3104.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±        0.139  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.075 ±        0.505    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       806.454 ±     1155.841  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2882.653 ±     4324.306    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         6.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    111309.033 ±      806.787   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4030.161 ±       29.969  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56984.004 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.079 ±        0.067  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.118 ±        0.944    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      4083.447 ±       20.546  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     57737.652 ±      594.396    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        30.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        23.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    324763.817 ±     4998.380   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       495.202 ±        7.644  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.703 ±        5.966  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.431 ±       29.109    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       474.265 ±     1067.829  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      2300.651 ±     5183.248    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         8.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    722925.884 ±     7300.372   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       529.121 ±        5.185  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.062 ±        0.450  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.136 ±        0.983    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506.770 ±     1123.960  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1104.268 ±     2449.569    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2006634.331 ±     3791.870   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       928.094 ±        1.885  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728.000 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.042 ±        0.227  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.033 ±        0.178    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       940.880 ±     1416.254  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       738.056 ±     1111.285    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2373367.305 ±   147915.435   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    384642.525 ±     2178.227   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       553.280 ±        3.151  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.810 ±        6.848  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3.323 ±       28.084    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       505.855 ±     1121.475  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2070.499 ±     4589.604    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         9.000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     49972.096 ±      528.804   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1684.099 ±       18.359  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53040.008 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±        0.134  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.050 ±        4.231    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1615.325 ±     1418.861  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     50899.259 ±    45257.842    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        12.000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        11.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     87257.756 ±     1058.163   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1569.073 ±       19.132  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28304.005 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.029 ±        0.091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.525 ±        1.648    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1625.716 ±     1425.941  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     29322.214 ±    25637.480    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        12.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         9.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5    101025.337 ±     1182.159   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1549.145 ±       17.926  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24136.004 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.033 ±        0.122  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.520 ±        1.904    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1614.853 ±     1419.785  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     25169.765 ±    22346.095    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        12.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        10.000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     18591.938 ±      795.204   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1295.633 ±       55.579  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109696.024 ±        0.009    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±        0.113  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.780 ±        9.729    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1352.681 ±        6.607  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    114536.587 ±     4577.923    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10.000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         8.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    122195.750 ±      450.931   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1125.342 ±        3.972  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     14496.003 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.033 ±        0.091  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.429 ±        1.177    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1216.759 ±     1164.430  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     15673.741 ±    15001.457    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    490386.126 ±     6432.112   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       540.939 ±        7.292  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.674 ±        5.674  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         2.167 ±       18.229    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       506.798 ±     1124.152  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1627.155 ±     3604.755    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         7.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    519758.396 ±    46039.328   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5.284 ±        0.467  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     21193.902 ±      134.313   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       404.629 ±        2.515  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30048.175 ±        1.340    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.071 ±        0.566  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         5.260 ±       42.043    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474.150 ±     1067.374  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     35222.197 ±    79308.433    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         4.000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         6.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2309709.035 ±    67205.304   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3122.620 ±       91.228  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.062 ±        0.080  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.043 ±        0.054    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      3116.564 ±     1421.384  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2124.574 ±      993.898    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        23.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        16.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    888287.514 ±    16660.767   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       564.439 ±       10.517  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.501 ±        4.268  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0.886 ±        7.549    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       506.170 ±     1122.328  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5       894.962 ±     1982.044    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         7.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    309271.856 ±     2987.581   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       589.440 ±        5.719  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3000.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0.054 ±        0.378  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5         0.276 ±        1.932    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       641.666 ±      280.233  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5      3265.599 ±     1418.386    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         5.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    788734.819 ±    50352.898   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       593.402 ±       37.736  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5         0.661 ±        5.509  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5         1.356 ±       11.324    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5       641.395 ±      279.175  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5      1280.270 ±      572.099    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         7.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4459541.587 ±    28231.461   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1428.014 ±        9.126  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0.075 ±        0.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0.026 ±        0.025    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5      1480.192 ±     1153.430  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5       522.548 ±      411.074    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        11.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         9.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9354004.569 ±   146460.829   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       760.655 ±       12.023  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5         0.012 ±        0.108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5         0.002 ±        0.018    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5       672.837 ±        4.083  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5       113.224 ±        2.071    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         3.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    194225.394 ±     1215.706   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1312.910 ±        8.326  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10640.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.033 ±        0.122  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.270 ±        0.984    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1217.415 ±     1162.261  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5      9866.337 ±     9422.124    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         7.000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5    932764.060 ±    26246.504   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        52.148 ±        1.468  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102.304 ±      880.868  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       174.924 ±     1506.150    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1.000                 counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2.000                     ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     64522.086 ±     1096.874   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2997.369 ±       50.305  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73120.006 ±        0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.067 ±        0.119  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.625 ±        2.905    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2991.562 ±     1442.404  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     73003.580 ±    36167.913    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        22.000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        19.000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1074486.143 ±    12333.126   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       617.241 ±        6.971  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.058 ±        0.291  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.086 ±        0.429    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       674.612 ±        2.676  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       988.031 ±       10.063    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5    690433.639 ±    15049.973   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       192.993 ±        4.212  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440.001 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.604 ±     1078.818  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       469.308 ±     2474.533    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    922809.502 ±     1321.158   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         9.381 ±        0.016  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     46649.270 ±      275.377   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1973.815 ±       11.746  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66600.009 ±        0.001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.075 ±        0.134  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.528 ±        4.530    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2034.845 ±       11.761  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     68659.334 ±      368.810    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15.000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        12.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    253093.207 ±     1893.977   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       990.549 ±        7.064  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160.002 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.029 ±        0.108  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.181 ±        0.669    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5      1074.998 ±     1418.525  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5      6687.628 ±     8851.563    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         6.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27423.623 ±      430.984   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1497.252 ±       23.710  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85936.015 ±        0.002    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.046 ±        0.183  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         2.625 ±       10.477    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1489.533 ±     1173.536  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     85482.730 ±    67027.062    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        10.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    140071.431 ±      560.513   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1711.464 ±        7.765  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232.003 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.029 ±        0.044  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.328 ±        0.494    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5      1761.511 ±     1425.648  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5     19795.795 ±    16049.470    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        13.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        11.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    354024.105 ±     1299.871   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1685.973 ±        6.542  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.071 ±        0.122  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.315 ±        0.541    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5      1750.513 ±     1420.436  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      7783.323 ±     6323.140    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        13.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        10.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    425377.073 ±     1144.021   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1457.152 ±        3.940  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5         0.058 ±        0.104  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5         0.216 ±        0.387    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5      1344.888 ±        7.365  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5      4976.585 ±       33.122    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        10.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         8.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     49091.427 ±      363.695   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1231.279 ±        9.306  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39480.008 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.029 ±        0.156  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.935 ±        5.015    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1217.241 ±     1164.230  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     39044.492 ±    37517.790    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         9.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         8.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     75057.533 ±     1158.980   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1551.132 ±       23.691  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32528.006 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±        0.122  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.698 ±        2.542    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1614.440 ±     1422.034  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     33849.942 ±    29684.439    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        12.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5        10.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    125139.266 ±     1763.609   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       618.911 ±        8.901  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7784.003 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.071 ±        0.480  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.887 ±        6.004    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5       674.528 ±        2.517  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      8483.602 ±      152.884    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         5.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    228635.601 ±      722.626   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       941.331 ±        2.966  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480.002 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0.021 ±        0.113  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0.143 ±        0.780    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5       940.675 ±     1417.165  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5      6474.949 ±     9748.043    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         7.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         6.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     17791.290 ±      191.584   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1018.696 ±       11.051  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90128.025 ±        0.009    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.042 ±        0.150  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         3.682 ±       13.244    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1080.846 ±     1423.639  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     95604.179 ±   125673.976    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         8.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         6.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    171286.415 ±     9829.581   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1102.104 ±       63.310  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10128.002 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0.037 ±        0.132  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0.346 ±        1.216    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5      1081.066 ±     1424.554  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5      9948.462 ±    13258.272    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5         8.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         5.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    532197.637 ±     6211.128   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       592.373 ±        6.826  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5         0.678 ±        5.563  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         2.014 ±       16.523    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5       641.268 ±      279.279  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5      1896.428 ±      819.131    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         8.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    567985.937 ±     4794.799   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        11.548 ±        0.098  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     21220.706 ±     1220.056   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       435.009 ±       24.946  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32264.179 ±        1.374    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.054 ±        0.466  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         3.989 ±       34.346    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5       371.813 ±     1331.603  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     27392.510 ±    98083.345    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         3.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         3.000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     75755.387 ±      410.375   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1324.837 ±        7.252  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528.005 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.050 ±        0.122  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.038 ±        2.522    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1343.663 ±        4.309  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     27919.233 ±      197.153    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         8.000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    146694.767 ±      789.456   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       627.029 ±        3.471  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6728.003 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.054 ±        0.379  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.580 ±        4.055    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       674.452 ±        2.694  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      7236.871 ±       67.017    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5.000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         5.000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    212499.323 ±    14012.300   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       757.088 ±       49.902  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.017 ±        0.067  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.123 ±        0.492    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       672.573 ±        5.217  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      4983.167 ±      338.258    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     42095.498 ±      225.471   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1745.284 ±       10.137  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65248.010 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.037 ±        0.143  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.401 ±        5.356    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1758.544 ±     1432.973  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     65747.723 ±    53656.070    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        13.000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        11.000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    260718.310 ±    11367.550   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1231.077 ±       52.967  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7432.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±        0.132  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.276 ±        0.792    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1208.610 ±     1155.807  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      7284.670 ±     6821.459    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         8.000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    515749.669 ±     2582.627   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       414.142 ±        2.060  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.067 ±        0.530  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.203 ±        1.617    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       474.075 ±     1067.167  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1447.496 ±     3257.941    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    613862.601 ±     5235.095   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       324.498 ±        2.803  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.011 ±        0.091  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.027 ±        0.234    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306.949 ±     1078.968  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       788.061 ±     2770.147    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    708775.050 ±     1963.182   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     34359.838 ±     1115.033   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1773.495 ±       57.700  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     81248.012 ±        0.002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±        0.072  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.524 ±        3.265    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1880.715 ±     1157.425  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     86191.088 ±    53734.666    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14.000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        12.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    686598.854 ±     3290.076   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2097.171 ±       10.096  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4808.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.054 ±        0.108  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.124 ±        0.246    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      2157.461 ±     1179.357  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      4946.332 ±     2708.164    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        16.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        11.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1540197.806 ±    56371.176   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1166.478 ±       42.109  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.042 ±        0.127  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.042 ±        0.128    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1217.140 ±     1164.564  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      1244.803 ±     1203.204    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   7108513.189 ±   586078.632   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       216.822 ±       17.795  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.015 ±        0.126  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.003 ±        0.029    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       204.674 ±     1079.185  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        46.049 ±      242.910    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         2.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         5.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    237351.744 ±      644.726   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1662.289 ±        4.251  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     11024.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.050 ±        0.146  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.331 ±        0.965    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1625.139 ±     1425.111  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5     10778.533 ±     9471.759    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        12.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        10.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5    934477.041 ±    42186.239   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1396.517 ±       62.271  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2352.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.067 ±        0.132  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.112 ±        0.220    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1477.420 ±     1154.488  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2487.413 ±     1913.645    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        11.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2490753.273 ±    49125.725   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1025.588 ±       20.831  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.042 ±        0.188  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.026 ±        0.119    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1080.636 ±     1423.631  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5       683.390 ±      906.941    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         8.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   5840375.793 ±    27623.977   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       653.055 ±        3.173  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.664 ±        5.585  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.179 ±        1.507    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       538.992 ±     1160.228  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       145.276 ±      312.721    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         5.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   5844798.051 ±   243991.792   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       356.487 ±       15.007  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0.009 ±        0.070  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0.002 ±        0.019    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5       306.923 ±     1078.877  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        83.242 ±      292.619    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    336047.230 ±    13424.575   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1711.415 ±       68.216  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8016.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.054 ±        0.091  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.254 ±        0.429    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1761.359 ±     1429.454  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      8258.523 ±     6868.720    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5        12.000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     66693.504 ±    11486.812   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1906.691 ±      328.966  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     44992.006 ±        0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.046 ±        0.154  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1.059 ±        3.549    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1887.228 ±     1161.082  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     44343.118 ±    21221.238    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        14.000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        14.000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5     84848.489 ±      465.943   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1307.554 ±        7.100  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24256.005 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.025 ±        0.088  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.464 ±        1.630    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1218.130 ±     1166.982  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     22602.366 ±    21715.358    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         9.000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         8.000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    162168.962 ±     5751.464   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2382.135 ±       84.991  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120.003 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.058 ±        0.119  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.564 ±        1.145    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2433.353 ±     1418.528  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     23632.886 ±    14213.056    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        18.000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        14.000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     51555.924 ±     1026.559   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      2710.806 ±       52.243  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82760.008 ±        0.001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.042 ±        0.080  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.270 ±        2.437    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2719.317 ±       13.794  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     83021.714 ±     1820.644    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        20.000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        16.000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    253435.840 ±     1899.290   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1212.281 ±        8.697  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7528.002 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.033 ±        0.122  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.207 ±        0.754    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1208.830 ±     1156.921  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      7508.765 ±     7212.396    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         9.000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         6.000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    571689.810 ±    21587.827   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       493.945 ±       18.555  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.071 ±        0.566  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.194 ±        1.550    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506.864 ±     1124.317  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1397.678 ±     3106.534    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         5.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    801654.462 ±    18182.184   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       431.900 ±        9.896  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.668 ±        5.702  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.309 ±       11.176    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       339.574 ±     1220.901  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       665.351 ±     2392.388    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         7.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    617448.049 ±     7090.210   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         6.276 ±        0.073  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                 counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34606.881 ±      121.656   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1786.365 ±        7.010  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     81248.012 ±        0.002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.046 ±        0.067  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.082 ±        3.046    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1880.785 ±     1156.831  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     85551.675 ±    52831.563    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        12.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5243220.979 ±   113747.411   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3864.149 ±       84.053  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.079 ±        0.104  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.024 ±        0.032    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3805.217 ±     1426.251  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1142.731 ±      447.160    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        28.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        21.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   7675576.432 ±    64108.887   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       819.303 ±        6.974  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.017 ±        0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.003 ±        0.018    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5       806.857 ±     1156.595  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       165.533 ±      238.808    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         5.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   4605144.058 ±   117278.701   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2387.554 ±       60.725  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.092 ±        0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.031 ±        0.024    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      2440.931 ±     1429.610  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       834.649 ±      500.292    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        18.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        14.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   8304331.821 ±    69043.187   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       886.437 ±        7.491  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.037 ±        0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.007 ±        0.025    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       806.343 ±     1156.374  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       152.811 ±      218.968    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   5510971.512 ±    14707.568   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2969.051 ±        7.192  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.071 ±        0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.020 ±        0.013    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2977.490 ±     1431.572  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       850.448 ±      410.360    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        22.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        17.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3343164.914 ±    18751.530   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       798.702 ±        4.216  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±        0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.016 ±        0.057    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       806.608 ±     1154.818  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       379.771 ±      544.604    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         5.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   7299795.955 ±   394808.335   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       704.983 ±       38.344  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.514 ±        4.340  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.110 ±        0.930    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5       672.782 ±        3.642  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       145.080 ±        7.691    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         5.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   1959294.744 ±    21807.048   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       607.454 ±        6.665  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.017 ±        0.088  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.013 ±        0.071    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       671.670 ±        2.409  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       539.591 ±        4.720    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         5.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   9427845.615 ±   194663.229   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       910.525 ±       18.649  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.021 ±        0.139  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.003 ±        0.023    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       806.582 ±     1157.482  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       134.664 ±      193.494    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         5.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9223871.914 ±    14322.707   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3522749.478 ±    26610.075   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1128.061 ±        8.407  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.033 ±        0.134  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.015 ±        0.060    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1071.718 ±     1412.350  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       478.683 ±      629.233    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         6.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5    842952.922 ±    29432.010   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1478.195 ±       50.724  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2760.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.058 ±        0.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.108 ±        0.287    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1479.191 ±     1151.292  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2761.477 ±     2134.351    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   1858633.605 ±    13594.607   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       519.602 ±        3.453  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.499 ±        4.294  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.422 ±        3.635    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5       506.384 ±     1122.852  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       428.930 ±      950.508    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         6.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1103719.888 ±    10043.440   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       813.401 ±        7.357  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.021 ±        0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.030 ±        0.162    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       806.690 ±     1155.497  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1150.526 ±     1649.654    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         6.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2592656.305 ±     6730.802   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       724.735 ±        1.871  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.654 ±        5.494  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.397 ±        3.336    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       807.792 ±     1157.415  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       490.500 ±      704.123    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1298077.504 ±     9246.998   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       923.572 ±        6.502  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.046 ±        0.174  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.056 ±        0.211    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5       938.128 ±     1416.112  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1138.218 ±     1725.210    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         6.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1808266.347 ±     4576.826   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1516.472 ±        4.023  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.062 ±        0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.054 ±        0.070    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1613.279 ±     1420.865  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1404.433 ±     1240.583    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         9.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2470920.907 ±   165703.317   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       640.547 ±       42.780  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.516 ±        4.352  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.319 ±        2.688    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5       672.797 ±        3.332  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       428.638 ±       26.728    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         5.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         5.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2958722.349 ±    59359.841   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1398.489 ±       28.365  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.075 ±        0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.040 ±        0.038    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1349.229 ±        9.056  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       717.810 ±       16.108    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         8.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   2743851.246 ±     8769.765   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       711.259 ±        2.269  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.676 ±        5.638  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.388 ±        3.238    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       673.453 ±        4.729  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       386.314 ±        3.579    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2667123.593 ±    24917.999   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2522808.699 ±   157342.540   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1218.047 ±       75.862  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.037 ±        0.132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.023 ±        0.082    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1206.573 ±     1155.061  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       753.782 ±      732.603    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         6.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     12748.755 ±      178.173   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1855.671 ±       26.796  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    229095.234 ±       55.256    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.104 ±        0.324  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        12.819 ±       40.069    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1882.976 ±     1158.495  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5    232541.972 ±   144773.647    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        14.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        10.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     15945.146 ±      263.302   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       219.712 ±        3.389  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     21688.439 ±       31.008    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.004 ±        0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.413 ±        3.556    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       306.898 ±     1078.791  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5     30342.049 ±   106657.458    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         5.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     36665.968 ±      828.792   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       339.567 ±        7.712  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14576.011 ±        0.001    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.004 ±        0.020  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.158 ±        0.841    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       409.281 ±      881.008  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     17589.471 ±    37865.260    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         4.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5        10.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      3800.366 ±       86.710   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1239.494 ±       28.412  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    513144.109 ±        0.015    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.008 ±        0.044  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         3.460 ±       18.242    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1215.955 ±     1162.232  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    503954.418 ±   488183.550    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5         9.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        19.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     59683.045 ±      367.751   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       762.157 ±        4.655  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100.012 ±        0.076    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.021 ±        0.080  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.549 ±        2.117    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       808.911 ±     1161.601  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     21339.799 ±    30764.621    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         5.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     87081.116 ±     2805.270   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       570.979 ±       18.534  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.688 ±        5.833  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        12.605 ±      106.924    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       506.622 ±     1123.637  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5      9174.846 ±    20356.065    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         7.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5     94137.567 ±      321.155   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        13.397 ±        0.047  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       224.004 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    398111.069 ±      780.451   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2132.779 ±        4.806  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.062 ±        0.098  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.247 ±        0.388    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2159.287 ±     1161.904  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      8536.800 ±     4593.489    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5        12.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    438495.450 ±     4566.274   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       534.848 ±        5.638  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1920.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.058 ±        0.418  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.209 ±        1.502    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       506.711 ±     1123.901  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1820.127 ±     4033.753    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         5.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1185243.427 ±    10476.485   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       620.501 ±        5.458  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.667 ±        5.565  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.888 ±        7.410    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       538.997 ±     1160.240  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       716.418 ±     1542.161    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    112584.932 ±     1524.107   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3912.725 ±       52.972  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54704.004 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.054 ±        0.091  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.756 ±        1.273    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      3946.198 ±     1166.769  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     55175.192 ±    16477.041    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        29.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        23.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    404571.273 ±     3911.020   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       643.630 ±        6.468  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2504.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.707 ±        5.996  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.757 ±       23.394    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       538.473 ±     1159.110  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      2094.963 ±     4509.745    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         4.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    719834.930 ±     2244.089   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       548.862 ±        1.885  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.067 ±        0.399  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.146 ±        0.870    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       539.480 ±     1161.273  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1179.486 ±     2538.939    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   1980912.684 ±     5735.762   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       916.210 ±        2.548  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±        0.134  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.026 ±        0.107    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       940.915 ±     1416.390  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       747.598 ±     1124.982    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1907385.797 ±     5980.594   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    243290.810 ±    19993.584   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       359.869 ±       29.430  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328.002 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.006 ±        0.054  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.040 ±        0.347    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       306.966 ±     1079.029  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1970.624 ±     6930.553    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         3.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         9.000                     ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 7025 s, completed May 19, 2018 4:05:57 AM
