[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 14, 2018 9:33:24 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1032:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:954:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.24.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.24.1-SNAPSHOT.jar ...
[info] Compiling 53 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(8192)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 x.+=(v)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(8192)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 x.add(v)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.1-SNAPSHOT.jar ...
Processing 303 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 46 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 582 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:53:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362309.576 ops/s
[info] # Warmup Iteration   2: 703097.639 ops/s
[info] # Warmup Iteration   3: 707240.056 ops/s
[info] Iteration   1: 692029.349 ops/s
[info]                  ·gc.alloc.rate:                                  1812.032 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4622.374 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.575 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 702305.035 ops/s
[info]                  ·gc.alloc.rate:            1838.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       4120.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3814.187 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 725077.437 ops/s
[info]                  ·gc.alloc.rate:            1897.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       4120.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4433.309 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 720190.434 ops/s
[info]                  ·gc.alloc.rate:                                  1885.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3719.475 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 722033.724 ops/s
[info]                  ·gc.alloc.rate:                                  1889.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4452.022 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   712327.196 ±(99.9%) 55503.467 ops/s [Average]
[info]   (min, avg, max) = (692029.349, 712327.196, 725077.437), stdev = 14414.074
[info]   CI (99.9%): [656823.728, 767830.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1864.494 ±(99.9%) 144.167 MB/sec [Average]
[info]   (min, avg, max) = (1812.032, 1864.494, 1897.629), stdev = 37.440
[info]   CI (99.9%): [1720.326, 2008.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4120.001, 4120.001, 4120.001), stdev = 0.001
[info]   CI (99.9%): [4120.000, 4120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.065 ±(99.9%) 711.453 MB/sec [Average]
[info]   (min, avg, max) = (1701.625, 1904.065, 2041.990), stdev = 184.762
[info]   CI (99.9%): [1192.612, 2615.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4208.273 ±(99.9%) 1582.706 B/op [Average]
[info]   (min, avg, max) = (3719.475, 4208.273, 4622.374), stdev = 411.024
[info]   CI (99.9%): [2625.567, 5790.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.515 ±(99.9%) 13.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.515, 7.575), stdev = 3.388
[info]   CI (99.9%): [≈ 0, 14.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.25% complete, ETA 01:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346478.036 ops/s
[info] # Warmup Iteration   2: 1396482.669 ops/s
[info] # Warmup Iteration   3: 1368546.331 ops/s
[info] Iteration   1: 1365198.588 ops/s
[info]                  ·gc.alloc.rate:                   1096.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1161.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1363941.543 ops/s
[info]                  ·gc.alloc.rate:                   1095.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1551.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 1391155.247 ops/s
[info]                  ·gc.alloc.rate:                                  1117.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.208 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1150.786 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.522 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1425616.845 ops/s
[info]                  ·gc.alloc.rate:                                  1144.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1127.374 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1392328.595 ops/s
[info]                  ·gc.alloc.rate:            1118.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1154.355 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1387648.164 ±(99.9%) 97067.817 ops/s [Average]
[info]   (min, avg, max) = (1363941.543, 1387648.164, 1425616.845), stdev = 25208.204
[info]   CI (99.9%): [1290580.347, 1484715.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1114.308 ±(99.9%) 78.159 MB/sec [Average]
[info]   (min, avg, max) = (1095.195, 1114.308, 1144.752), stdev = 20.298
[info]   CI (99.9%): [1036.149, 1192.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.208), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.053 ±(99.9%) 0.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.053, 0.235), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.211 ±(99.9%) 564.010 MB/sec [Average]
[info]   (min, avg, max) = (1007.570, 1082.211, 1344.041), stdev = 146.472
[info]   CI (99.9%): [518.200, 1646.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1229.127 ±(99.9%) 695.068 B/op [Average]
[info]   (min, avg, max) = (1127.374, 1229.127, 1551.201), stdev = 180.507
[info]   CI (99.9%): [534.059, 1924.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 7.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.365 ±(99.9%) 7.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.365, 4.522), stdev = 1.876
[info]   CI (99.9%): [≈ 0, 8.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 19.000), stdev = 7.314
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.50% complete, ETA 01:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2416312.282 ops/s
[info] # Warmup Iteration   2: 3161534.644 ops/s
[info] # Warmup Iteration   3: 3224933.803 ops/s
[info] Iteration   1: 3279695.471 ops/s
[info]                  ·gc.alloc.rate:            216.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3296884.113 ops/s
[info]                  ·gc.alloc.rate:            217.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3274413.311 ops/s
[info]                  ·gc.alloc.rate:      216.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3228167.419 ops/s
[info]                  ·gc.alloc.rate:            213.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164.660 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 3286461.468 ops/s
[info]                  ·gc.alloc.rate:      217.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3273124.356 ±(99.9%) 102030.651 ops/s [Average]
[info]   (min, avg, max) = (3228167.419, 3273124.356, 3296884.113), stdev = 26497.036
[info]   CI (99.9%): [3171093.705, 3375155.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   216.270 ±(99.9%) 6.740 MB/sec [Average]
[info]   (min, avg, max) = (213.293, 216.270, 217.845), stdev = 1.750
[info]   CI (99.9%): [209.530, 223.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.619 ±(99.9%) 712.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.619, 337.720), stdev = 184.965
[info]   CI (99.9%): [≈ 0, 914.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   97.592 ±(99.9%) 343.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.592, 164.660), stdev = 89.098
[info]   CI (99.9%): [≈ 0, 440.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.75% complete, ETA 01:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13935.537 ops/s
[info] # Warmup Iteration   2: 142096.022 ops/s
[info] # Warmup Iteration   3: 147662.815 ops/s
[info] Iteration   1: 148705.652 ops/s
[info]                  ·gc.alloc.rate:            1227.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       13000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14241.592 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 149492.444 ops/s
[info]                  ·gc.alloc.rate:                   1234.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              13000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10610.803 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 149205.171 ops/s
[info]                  ·gc.alloc.rate:                                  1232.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.686 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14313.520 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                49.187 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 150059.888 ops/s
[info]                  ·gc.alloc.rate:            1239.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       13000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14280.598 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 151016.781 ops/s
[info]                  ·gc.alloc.rate:            1247.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       13000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10642.799 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   149695.987 ±(99.9%) 3411.686 ops/s [Average]
[info]   (min, avg, max) = (148705.652, 149695.987, 151016.781), stdev = 886.004
[info]   CI (99.9%): [146284.301, 153107.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1236.257 ±(99.9%) 28.366 MB/sec [Average]
[info]   (min, avg, max) = (1227.985, 1236.257, 1247.259), stdev = 7.366
[info]   CI (99.9%): [1207.891, 1264.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13000.003, 13000.003, 13000.003), stdev = 0.001
[info]   CI (99.9%): [13000.002, 13000.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.137 ±(99.9%) 1.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.686), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.418 ±(99.9%) 717.779 MB/sec [Average]
[info]   (min, avg, max) = (1007.675, 1218.418, 1361.285), stdev = 186.405
[info]   CI (99.9%): [500.639, 1936.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12817.862 ±(99.9%) 7702.637 B/op [Average]
[info]   (min, avg, max) = (10610.803, 12817.862, 14313.520), stdev = 2000.350
[info]   CI (99.9%): [5115.225, 20520.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   11.240 ±(99.9%) 82.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.240, 49.187), stdev = 21.429
[info]   CI (99.9%): [≈ 0, 93.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 18.000), stdev = 6.686
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.00% complete, ETA 01:24:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111452.851 ops/s
[info] # Warmup Iteration   2: 511588.147 ops/s
[info] # Warmup Iteration   3: 515368.891 ops/s
[info] Iteration   1: 521762.242 ops/s
[info]                  ·gc.alloc.rate:            1620.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1685.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5083.678 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 527394.919 ops/s
[info]                  ·gc.alloc.rate:                                  1637.612 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5069.215 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.940 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 528051.254 ops/s
[info]                  ·gc.alloc.rate:            1640.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5072.538 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 529115.530 ops/s
[info]                  ·gc.alloc.rate:                                  1643.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4050.101 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 527627.335 ops/s
[info]                  ·gc.alloc.rate:                                  1638.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5076.662 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   526790.256 ±(99.9%) 11117.673 ops/s [Average]
[info]   (min, avg, max) = (521762.242, 526790.256, 529115.530), stdev = 2887.224
[info]   CI (99.9%): [515672.582, 537907.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1636.156 ±(99.9%) 34.066 MB/sec [Average]
[info]   (min, avg, max) = (1620.786, 1636.156, 1643.271), stdev = 8.847
[info]   CI (99.9%): [1602.089, 1670.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4888.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4888.001, 4888.001, 4888.001), stdev = 0.001
[info]   CI (99.9%): [4888.001, 4888.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.072 ±(99.9%) 0.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.354), stdev = 0.157
[info]   CI (99.9%): [≈ 0, 0.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1629.973 ±(99.9%) 578.319 MB/sec [Average]
[info]   (min, avg, max) = (1361.582, 1629.973, 1702.190), stdev = 150.188
[info]   CI (99.9%): [1051.654, 2208.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4870.439 ±(99.9%) 1765.960 B/op [Average]
[info]   (min, avg, max) = (4050.101, 4870.439, 5083.678), stdev = 458.614
[info]   CI (99.9%): [3104.478, 6636.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.988 ±(99.9%) 17.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.988, 9.940), stdev = 4.445
[info]   CI (99.9%): [≈ 0, 19.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 19.000), stdev = 6.656
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.24% complete, ETA 01:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d6f7c3ad/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 403960.536 ops/s
[info] # Warmup Iteration   2: 1619801.132 ops/s
[info] # Warmup Iteration   3: 1675088.880 ops/s
[info] Iteration   1: 1684587.225 ops/s
[info]                  ·gc.alloc.rate:            702.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 627.315 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1676738.475 ops/s
[info]                  ·gc.alloc.rate:            699.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 630.263 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1676521.830 ops/s
[info]                  ·gc.alloc.rate:            698.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 630.346 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1674379.976 ops/s
[info]                  ·gc.alloc.rate:            697.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.146 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1667804.506 ops/s
[info]                  ·gc.alloc.rate:                   695.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        950.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.772 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1676006.402 ±(99.9%) 23131.802 ops/s [Average]
[info]   (min, avg, max) = (1667804.506, 1676006.402, 1684587.225), stdev = 6007.256
[info]   CI (99.9%): [1652874.600, 1699138.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   698.565 ±(99.9%) 9.469 MB/sec [Average]
[info]   (min, avg, max) = (695.193, 698.565, 702.018), stdev = 2.459
[info]   CI (99.9%): [689.095, 708.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   738.599 ±(99.9%) 578.304 MB/sec [Average]
[info]   (min, avg, max) = (671.320, 738.599, 1007.256), stdev = 150.184
[info]   CI (99.9%): [160.295, 1316.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   693.908 ±(99.9%) 552.297 B/op [Average]
[info]   (min, avg, max) = (627.315, 693.908, 950.470), stdev = 143.430
[info]   CI (99.9%): [141.611, 1246.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.754 ±(99.9%) 6.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.772), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 14.000), stdev = 2.510
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.49% complete, ETA 01:23:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4332108.111 ops/s
[info] # Warmup Iteration   2: 6812784.694 ops/s
[info] # Warmup Iteration   3: 6939197.240 ops/s
[info] Iteration   1: 6947054.010 ops/s
[info]                  ·gc.alloc.rate:            353.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7313944.637 ops/s
[info]                  ·gc.alloc.rate:                   371.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72.388 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.143 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7272490.045 ops/s
[info]                  ·gc.alloc.rate:            369.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.747 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7341044.195 ops/s
[info]                  ·gc.alloc.rate:            373.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7199355.528 ops/s
[info]                  ·gc.alloc.rate:            365.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73.542 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   7214777.683 ±(99.9%) 611943.048 ops/s [Average]
[info]   (min, avg, max) = (6947054.010, 7214777.683, 7341044.195), stdev = 158919.666
[info]   CI (99.9%): [6602834.635, 7826720.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   366.671 ±(99.9%) 31.172 MB/sec [Average]
[info]   (min, avg, max) = (353.039, 366.671, 373.146), stdev = 8.095
[info]   CI (99.9%): [335.499, 397.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.877 ±(99.9%) 580.072 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 403.877, 673.355), stdev = 150.643
[info]   CI (99.9%): [≈ 0, 983.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   88.031 ±(99.9%) 124.405 B/op [Average]
[info]   (min, avg, max) = (72.122, 88.031, 145.747), stdev = 32.308
[info]   CI (99.9%): [≈ 0, 212.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.74% complete, ETA 01:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4997089.657 ops/s
[info] # Warmup Iteration   2: 7992318.415 ops/s
[info] # Warmup Iteration   3: 8017607.032 ops/s
[info] Iteration   1: 8015186.511 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8025095.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7927083.940 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7965149.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7615906.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   7909684.502 ±(99.9%) 650447.434 ops/s [Average]
[info]   (min, avg, max) = (7615906.986, 7909684.502, 8025095.321), stdev = 168919.133
[info]   CI (99.9%): [7259237.068, 8560131.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.99% complete, ETA 01:23:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27403.713 ops/s
[info] # Warmup Iteration   2: 298940.100 ops/s
[info] # Warmup Iteration   3: 306648.776 ops/s
[info] Iteration   1: 307391.578 ops/s
[info]                  ·gc.alloc.rate:                   954.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5160.443 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 300088.931 ops/s
[info]                  ·gc.alloc.rate:                   931.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5285.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 304757.298 ops/s
[info]                  ·gc.alloc.rate:                   946.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5204.764 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 308693.958 ops/s
[info]                  ·gc.alloc.rate:                                  958.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.791 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5182.665 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.774 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 311476.599 ops/s
[info]                  ·gc.alloc.rate:                                  967.302 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5160.209 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   306481.673 ±(99.9%) 16619.448 ops/s [Average]
[info]   (min, avg, max) = (300088.931, 306481.673, 311476.599), stdev = 4316.018
[info]   CI (99.9%): [289862.225, 323101.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   951.837 ±(99.9%) 51.823 MB/sec [Average]
[info]   (min, avg, max) = (931.871, 951.837, 967.302), stdev = 13.458
[info]   CI (99.9%): [900.015, 1003.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4888.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4888.001, 4888.001, 4888.001), stdev = 0.001
[info]   CI (99.9%): [4888.001, 4888.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.259 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.155), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.188 ±(99.9%) 1.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.791), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1012.256 ±(99.9%) 24.375 MB/sec [Average]
[info]   (min, avg, max) = (1007.732, 1012.256, 1021.170), stdev = 6.330
[info]   CI (99.9%): [987.881, 1036.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5198.815 ±(99.9%) 200.631 B/op [Average]
[info]   (min, avg, max) = (5160.209, 5198.815, 5285.992), stdev = 52.103
[info]   CI (99.9%): [4998.183, 5399.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.664), stdev = 1.885
[info]   CI (99.9%): [≈ 0, 8.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.824 ±(99.9%) 36.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.824, 23.774), stdev = 9.592
[info]   CI (99.9%): [≈ 0, 43.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 11.000, 19.000), stdev = 6.595
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.24% complete, ETA 01:23:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 883776.637 ops/s
[info] # Warmup Iteration   2: 1445594.175 ops/s
[info] # Warmup Iteration   3: 1446672.972 ops/s
[info] Iteration   1: 1477821.446 ops/s
[info]                  ·gc.alloc.rate:                                  2283.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2537.611 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 1465159.308 ops/s
[info]                  ·gc.alloc.rate:                                  2263.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2193.945 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1451285.263 ops/s
[info]                  ·gc.alloc.rate:                                  2242.731 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2584.055 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1471845.409 ops/s
[info]                  ·gc.alloc.rate:                                  2274.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2547.963 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 1473248.769 ops/s
[info]                  ·gc.alloc.rate:            2276.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2181.727 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1467872.039 ±(99.9%) 39746.015 ops/s [Average]
[info]   (min, avg, max) = (1451285.263, 1467872.039, 1477821.446), stdev = 10321.914
[info]   CI (99.9%): [1428126.024, 1507618.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2268.039 ±(99.9%) 60.547 MB/sec [Average]
[info]   (min, avg, max) = (2242.731, 2268.039, 2283.067), stdev = 15.724
[info]   CI (99.9%): [2207.492, 2328.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.426 ±(99.9%) 717.832 MB/sec [Average]
[info]   (min, avg, max) = (2042.093, 2246.426, 2382.953), stdev = 186.419
[info]   CI (99.9%): [1528.594, 2964.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2409.060 ±(99.9%) 780.640 B/op [Average]
[info]   (min, avg, max) = (2181.727, 2409.060, 2584.055), stdev = 202.730
[info]   CI (99.9%): [1628.420, 3189.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.49% complete, ETA 01:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.928 ops/s
[info] # Warmup Iteration   2: 8173286.338 ops/s
[info] # Warmup Iteration   3: 8466430.081 ops/s
[info] Iteration   1: 8684971.763 ops/s
[info]                  ·gc.alloc.rate:            1059.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 181.445 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 8685012.653 ops/s
[info]                  ·gc.alloc.rate:            1059.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 181.441 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 9007579.983 ops/s
[info]                  ·gc.alloc.rate:                   1098.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        174.933 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 8892817.370 ops/s
[info]                  ·gc.alloc.rate:                                  1084.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.601 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240.505 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.472 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 8917365.781 ops/s
[info]                  ·gc.alloc.rate:                                  1087.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       180.229 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   8837549.510 ±(99.9%) 560936.523 ops/s [Average]
[info]   (min, avg, max) = (8684971.763, 8837549.510, 9007579.983), stdev = 145673.434
[info]   CI (99.9%): [8276612.987, 9398486.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1078.089 ±(99.9%) 68.116 MB/sec [Average]
[info]   (min, avg, max) = (1059.389, 1078.089, 1098.659), stdev = 17.690
[info]   CI (99.9%): [1009.973, 1146.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.121 ±(99.9%) 1.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.601), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1076.732 ±(99.9%) 608.551 MB/sec [Average]
[info]   (min, avg, max) = (1000.997, 1076.732, 1359.021), stdev = 158.039
[info]   CI (99.9%): [468.181, 1685.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   191.710 ±(99.9%) 105.543 B/op [Average]
[info]   (min, avg, max) = (174.933, 191.710, 240.505), stdev = 27.409
[info]   CI (99.9%): [86.168, 297.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 3.996), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.234 ±(99.9%) 1.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 0.698), stdev = 0.330
[info]   CI (99.9%): [≈ 0, 1.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.400, 15.000), stdev = 5.505
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.74% complete, ETA 01:22:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631453.210 ops/s
[info] # Warmup Iteration   2: 2137971.070 ops/s
[info] # Warmup Iteration   3: 2184135.345 ops/s
[info] Iteration   1: 2193176.511 ops/s
[info]                  ·gc.alloc.rate:                   1471.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1206.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 2172283.207 ops/s
[info]                  ·gc.alloc.rate:                                  1457.261 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1056.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       983.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.896 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2247562.583 ops/s
[info]                  ·gc.alloc.rate:                                  1507.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1056.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1191.845 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2213167.202 ops/s
[info]                  ·gc.alloc.rate:            1485.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       1056.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 968.289 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2186501.600 ops/s
[info]                  ·gc.alloc.rate:            1467.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       1056.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 980.057 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2202538.221 ±(99.9%) 112270.361 ops/s [Average]
[info]   (min, avg, max) = (2172283.207, 2202538.221, 2247562.583), stdev = 29156.256
[info]   CI (99.9%): [2090267.859, 2314808.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1477.774 ±(99.9%) 75.279 MB/sec [Average]
[info]   (min, avg, max) = (1457.261, 1477.774, 1507.764), stdev = 19.550
[info]   CI (99.9%): [1402.495, 1553.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1056.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1056.000, 1056.000, 1056.000), stdev = 0.001
[info]   CI (99.9%): [1056.000, 1056.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1492.760 ±(99.9%) 698.995 MB/sec [Average]
[info]   (min, avg, max) = (1357.337, 1492.760, 1701.725), stdev = 181.527
[info]   CI (99.9%): [793.765, 2191.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1066.067 ±(99.9%) 468.913 B/op [Average]
[info]   (min, avg, max) = (968.289, 1066.067, 1206.553), stdev = 121.775
[info]   CI (99.9%): [597.154, 1534.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.675 ±(99.9%) 4.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 2.896), stdev = 1.259
[info]   CI (99.9%): [≈ 0, 5.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 22.000), stdev = 8.093
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.99% complete, ETA 01:22:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8380217.666 ops/s
[info] # Warmup Iteration   2: 9865439.026 ops/s
[info] # Warmup Iteration   3: 9980273.103 ops/s
[info] Iteration   1: 10069724.078 ops/s
[info]                  ·gc.alloc.rate:            1279.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210.720 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 9619969.990 ops/s
[info]                  ·gc.alloc.rate:                                  1222.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       221.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.545 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 9211522.528 ops/s
[info]                  ·gc.alloc.rate:                                  1170.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       174.482 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 9157529.008 ops/s
[info]                  ·gc.alloc.rate:            1163.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9526809.109 ops/s
[info]                  ·gc.alloc.rate:            1210.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.938 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9517110.943 ±(99.9%) 1413163.715 ops/s [Average]
[info]   (min, avg, max) = (9157529.008, 9517110.943, 10069724.078), stdev = 366994.129
[info]   CI (99.9%): [8103947.228, 10930274.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1209.357 ±(99.9%) 179.194 MB/sec [Average]
[info]   (min, avg, max) = (1163.965, 1209.357, 1279.476), stdev = 46.536
[info]   CI (99.9%): [1030.163, 1388.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.380 ±(99.9%) 703.780 MB/sec [Average]
[info]   (min, avg, max) = (1021.047, 1221.380, 1361.795), stdev = 182.769
[info]   CI (99.9%): [517.600, 1925.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   201.464 ±(99.9%) 95.236 B/op [Average]
[info]   (min, avg, max) = (174.482, 201.464, 224.938), stdev = 24.732
[info]   CI (99.9%): [106.228, 296.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.545), stdev = 0.244
[info]   CI (99.9%): [≈ 0, 1.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 11.000), stdev = 3.768
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.23% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123953.095 ops/s
[info] # Warmup Iteration   2: 581180.301 ops/s
[info] # Warmup Iteration   3: 582321.460 ops/s
[info] Iteration   1: 577884.375 ops/s
[info]                  ·gc.alloc.rate:                   1486.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4575.219 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.628 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 585282.268 ops/s
[info]                  ·gc.alloc.rate:                                  1505.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3650.617 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.748 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 584283.271 ops/s
[info]                  ·gc.alloc.rate:                                  1502.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4584.662 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 579205.226 ops/s
[info]                  ·gc.alloc.rate:            1489.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3699.773 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 583091.637 ops/s
[info]                  ·gc.alloc.rate:                                  1500.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4593.923 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   581949.355 ±(99.9%) 12464.819 ops/s [Average]
[info]   (min, avg, max) = (577884.375, 581949.355, 585282.268), stdev = 3237.074
[info]   CI (99.9%): [569484.536, 594414.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1496.634 ±(99.9%) 32.418 MB/sec [Average]
[info]   (min, avg, max) = (1486.035, 1496.634, 1505.151), stdev = 8.419
[info]   CI (99.9%): [1464.215, 1529.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.191), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.465 ±(99.9%) 707.894 MB/sec [Average]
[info]   (min, avg, max) = (1357.394, 1560.465, 1702.345), stdev = 183.838
[info]   CI (99.9%): [852.571, 2268.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4220.839 ±(99.9%) 1919.352 B/op [Average]
[info]   (min, avg, max) = (3650.617, 4220.839, 4593.923), stdev = 498.450
[info]   CI (99.9%): [2301.486, 6140.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.875 ±(99.9%) 17.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.875, 10.748), stdev = 4.673
[info]   CI (99.9%): [≈ 0, 20.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 22.000), stdev = 7.950
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.48% complete, ETA 01:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 961464.583 ops/s
[info] # Warmup Iteration   2: 1752047.721 ops/s
[info] # Warmup Iteration   3: 1769196.848 ops/s
[info] Iteration   1: 1752875.398 ops/s
[info]                  ·gc.alloc.rate:                   1568.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1513.139 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.990 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 1773369.178 ops/s
[info]                  ·gc.alloc.rate:                                  1586.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1510.501 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1738643.483 ops/s
[info]                  ·gc.alloc.rate:                                  1555.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1232.562 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1741924.277 ops/s
[info]                  ·gc.alloc.rate:            1558.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       1408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1537.759 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1783890.721 ops/s
[info]                  ·gc.alloc.rate:                                  1595.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1501.544 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1758140.611 ±(99.9%) 76185.538 ops/s [Average]
[info]   (min, avg, max) = (1738643.483, 1758140.611, 1783890.721), stdev = 19785.142
[info]   CI (99.9%): [1681955.073, 1834326.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1572.830 ±(99.9%) 67.925 MB/sec [Average]
[info]   (min, avg, max) = (1555.162, 1572.830, 1595.834), stdev = 17.640
[info]   CI (99.9%): [1504.905, 1640.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1408.000, 1408.000, 1408.000), stdev = 0.001
[info]   CI (99.9%): [1408.000, 1408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1630.524 ±(99.9%) 579.958 MB/sec [Average]
[info]   (min, avg, max) = (1361.388, 1630.524, 1702.026), stdev = 150.613
[info]   CI (99.9%): [1050.566, 2210.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1459.101 ±(99.9%) 490.373 B/op [Average]
[info]   (min, avg, max) = (1232.562, 1459.101, 1537.759), stdev = 127.348
[info]   CI (99.9%): [968.729, 1949.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.598 ±(99.9%) 5.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.598, 2.990), stdev = 1.337
[info]   CI (99.9%): [≈ 0, 5.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 16.000), stdev = 5.701
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.73% complete, ETA 01:21:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.938 ops/s
[info] # Warmup Iteration   2: 15071594.971 ops/s
[info] # Warmup Iteration   3: 16096530.175 ops/s
[info] Iteration   1: 17180118.263 ops/s
[info]                  ·gc.alloc.rate:            523.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.146 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 17231269.316 ops/s
[info]                  ·gc.alloc.rate:            525.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60.967 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 17103217.784 ops/s
[info]                  ·gc.alloc.rate:            521.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 16542866.790 ops/s
[info]                  ·gc.alloc.rate:            504.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.502 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 17037525.940 ops/s
[info]                  ·gc.alloc.rate:            519.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.828 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   17018999.618 ±(99.9%) 1063565.762 ops/s [Average]
[info]   (min, avg, max) = (16542866.790, 17018999.618, 17231269.316), stdev = 276204.651
[info]   CI (99.9%): [15955433.856, 18082565.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   519.047 ±(99.9%) 32.575 MB/sec [Average]
[info]   (min, avg, max) = (504.495, 519.047, 525.679), stdev = 8.460
[info]   CI (99.9%): [486.471, 551.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.990 ±(99.9%) 704.060 MB/sec [Average]
[info]   (min, avg, max) = (333.690, 533.990, 667.690), stdev = 182.842
[info]   CI (99.9%): [≈ 0, 1238.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   49.431 ±(99.9%) 65.710 B/op [Average]
[info]   (min, avg, max) = (30.712, 49.431, 63.502), stdev = 17.065
[info]   CI (99.9%): [≈ 0, 115.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.98% complete, ETA 01:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d6f7c3ad/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1405937.555 ops/s
[info] # Warmup Iteration   2: 4085005.075 ops/s
[info] # Warmup Iteration   3: 4146403.742 ops/s
[info] Iteration   1: 4140652.201 ops/s
[info]                  ·gc.alloc.rate:            1136.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 510.436 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 4149827.585 ops/s
[info]                  ·gc.alloc.rate:            1138.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 381.998 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 4113585.665 ops/s
[info]                  ·gc.alloc.rate:                                  1128.948 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       518.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.784 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 4147448.148 ops/s
[info]                  ·gc.alloc.rate:            1138.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.517 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 4142383.702 ops/s
[info]                  ·gc.alloc.rate:                                  1137.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       387.991 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4138779.460 ±(99.9%) 56080.508 ops/s [Average]
[info]   (min, avg, max) = (4113585.665, 4138779.460, 4149827.585), stdev = 14563.930
[info]   CI (99.9%): [4082698.952, 4194859.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1135.897 ±(99.9%) 15.426 MB/sec [Average]
[info]   (min, avg, max) = (1128.948, 1135.897, 1138.858), stdev = 4.006
[info]   CI (99.9%): [1120.471, 1151.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1149.619 ±(99.9%) 702.815 MB/sec [Average]
[info]   (min, avg, max) = (1007.041, 1149.619, 1356.094), stdev = 182.519
[info]   CI (99.9%): [446.804, 1852.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   437.372 ±(99.9%) 272.136 B/op [Average]
[info]   (min, avg, max) = (381.998, 437.372, 518.919), stdev = 70.673
[info]   CI (99.9%): [165.236, 709.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.357 ±(99.9%) 3.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.784), stdev = 0.798
[info]   CI (99.9%): [≈ 0, 3.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 17.000), stdev = 6.611
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.23% complete, ETA 01:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12969228.616 ops/s
[info] # Warmup Iteration   2: 20225715.407 ops/s
[info] # Warmup Iteration   3: 21510499.947 ops/s
[info] Iteration   1: 21717849.375 ops/s
[info]                  ·gc.alloc.rate:            662.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.379 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 21483968.360 ops/s
[info]                  ·gc.alloc.rate:            655.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21484124.227 ops/s
[info]                  ·gc.alloc.rate:                   655.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 21304374.793 ops/s
[info]                  ·gc.alloc.rate:            649.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.703 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 21525451.953 ops/s
[info]                  ·gc.alloc.rate:            656.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.192 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21503153.741 ±(99.9%) 567348.632 ops/s [Average]
[info]   (min, avg, max) = (21304374.793, 21503153.741, 21717849.375), stdev = 147338.638
[info]   CI (99.9%): [20935805.109, 22070502.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   655.776 ±(99.9%) 17.265 MB/sec [Average]
[info]   (min, avg, max) = (649.745, 655.776, 662.333), stdev = 4.484
[info]   CI (99.9%): [638.511, 673.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.634 ±(99.9%) 579.542 MB/sec [Average]
[info]   (min, avg, max) = (336.403, 605.634, 673.463), stdev = 150.505
[info]   CI (99.9%): [26.092, 1185.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   44.380 ±(99.9%) 43.060 B/op [Average]
[info]   (min, avg, max) = (24.379, 44.380, 49.703), stdev = 11.183
[info]   CI (99.9%): [1.320, 87.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.48% complete, ETA 01:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13544551.720 ops/s
[info] # Warmup Iteration   2: 19673192.627 ops/s
[info] # Warmup Iteration   3: 19506332.172 ops/s
[info] Iteration   1: 19512938.965 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19505645.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18500826.421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19430974.302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19466911.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   19283459.189 ±(99.9%) 1689415.924 ops/s [Average]
[info]   (min, avg, max) = (18500826.421, 19283459.189, 19512938.965), stdev = 438735.950
[info]   CI (99.9%): [17594043.265, 20972875.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.73% complete, ETA 01:21:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269645.446 ops/s
[info] # Warmup Iteration   2: 1223186.146 ops/s
[info] # Warmup Iteration   3: 1217391.698 ops/s
[info] Iteration   1: 1235055.203 ops/s
[info]                  ·gc.alloc.rate:                                  1826.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2152.755 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.942 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 1260749.902 ops/s
[info]                  ·gc.alloc.rate:                                  1864.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2124.716 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1257892.097 ops/s
[info]                  ·gc.alloc.rate:                                  1860.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2555.435 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1257544.263 ops/s
[info]                  ·gc.alloc.rate:                                  1860.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2130.140 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1252740.794 ops/s
[info]                  ·gc.alloc.rate:                                  1852.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2565.976 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1252796.452 ±(99.9%) 39762.431 ops/s [Average]
[info]   (min, avg, max) = (1235055.203, 1252796.452, 1260749.902), stdev = 10326.177
[info]   CI (99.9%): [1213034.022, 1292558.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1852.981 ±(99.9%) 58.484 MB/sec [Average]
[info]   (min, avg, max) = (1826.906, 1852.981, 1864.745), stdev = 15.188
[info]   CI (99.9%): [1794.497, 1911.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.077), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.031, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.521 ±(99.9%) 726.627 MB/sec [Average]
[info]   (min, avg, max) = (1689.382, 1835.521, 2042.248), stdev = 188.703
[info]   CI (99.9%): [1108.895, 2562.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2305.804 ±(99.9%) 897.042 B/op [Average]
[info]   (min, avg, max) = (2124.716, 2305.804, 2565.976), stdev = 232.959
[info]   CI (99.9%): [1408.763, 3202.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.188 ±(99.9%) 10.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.188, 5.942), stdev = 2.657
[info]   CI (99.9%): [≈ 0, 11.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 17.000), stdev = 5.718
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.98% complete, ETA 01:20:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278718.868 ops/s
[info] # Warmup Iteration   2: 347905.850 ops/s
[info] # Warmup Iteration   3: 350045.297 ops/s
[info] Iteration   1: 350483.277 ops/s
[info]                  ·gc.alloc.rate:                                  1923.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7642.748 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 347100.354 ops/s
[info]                  ·gc.alloc.rate:                                  1905.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9261.070 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 349652.125 ops/s
[info]                  ·gc.alloc.rate:                                  1919.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7661.281 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 346841.245 ops/s
[info]                  ·gc.alloc.rate:                                  1903.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9267.931 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 347302.765 ops/s
[info]                  ·gc.alloc.rate:                                  1906.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9255.551 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   348275.953 ±(99.9%) 6430.012 ops/s [Average]
[info]   (min, avg, max) = (346841.245, 348275.953, 350483.277), stdev = 1669.854
[info]   CI (99.9%): [341845.941, 354705.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1911.691 ±(99.9%) 35.217 MB/sec [Average]
[info]   (min, avg, max) = (1903.929, 1911.691, 1923.742), stdev = 9.146
[info]   CI (99.9%): [1876.474, 1946.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8640.001, 8640.001, 8640.001), stdev = 0.001
[info]   CI (99.9%): [8640.001, 8640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.226 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.029, 0.134), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.130 ±(99.9%) 1.017 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.130, 0.602), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1906.027 ±(99.9%) 717.923 MB/sec [Average]
[info]   (min, avg, max) = (1701.698, 1906.027, 2042.301), stdev = 186.442
[info]   CI (99.9%): [1188.103, 2623.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8617.716 ±(99.9%) 3394.713 B/op [Average]
[info]   (min, avg, max) = (7642.748, 8617.716, 9267.931), stdev = 881.596
[info]   CI (99.9%): [5223.003, 12012.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 01:20:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199437.865 ops/s
[info] # Warmup Iteration   2: 404144.470 ops/s
[info] # Warmup Iteration   3: 407152.852 ops/s
[info] Iteration   1: 416875.692 ops/s
[info]                  ·gc.alloc.rate:            567.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1267.526 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 421533.625 ops/s
[info]                  ·gc.alloc.rate:                   574.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2507.014 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 409668.784 ops/s
[info]                  ·gc.alloc.rate:            558.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2582.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 410287.288 ops/s
[info]                  ·gc.alloc.rate:            558.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1287.869 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 420467.875 ops/s
[info]                  ·gc.alloc.rate:                   572.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2515.791 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   415766.653 ±(99.9%) 21421.910 ops/s [Average]
[info]   (min, avg, max) = (409668.784, 415766.653, 421533.625), stdev = 5563.202
[info]   CI (99.9%): [394344.742, 437188.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   566.370 ±(99.9%) 29.173 MB/sec [Average]
[info]   (min, avg, max) = (558.087, 566.370, 574.297), stdev = 7.576
[info]   CI (99.9%): [537.197, 595.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.431 ±(99.9%) 709.063 MB/sec [Average]
[info]   (min, avg, max) = (335.698, 537.431, 672.149), stdev = 184.141
[info]   CI (99.9%): [≈ 0, 1246.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2032.079 ±(99.9%) 2654.262 B/op [Average]
[info]   (min, avg, max) = (1267.526, 2032.079, 2582.195), stdev = 689.304
[info]   CI (99.9%): [≈ 0, 4686.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.996 ±(99.9%) 5.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.996, 2.493), stdev = 1.364
[info]   CI (99.9%): [≈ 0, 6.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.47% complete, ETA 01:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 871279.046 ops/s
[info] # Warmup Iteration   2: 949049.317 ops/s
[info] # Warmup Iteration   3: 926966.221 ops/s
[info] Iteration   1: 951190.552 ops/s
[info]                  ·gc.alloc.rate:            633.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1115.425 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 949582.463 ops/s
[info]                  ·gc.alloc.rate:            632.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1117.326 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 950988.161 ops/s
[info]                  ·gc.alloc.rate:            633.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1115.705 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 942961.163 ops/s
[info]                  ·gc.alloc.rate:            627.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1125.163 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 953358.738 ops/s
[info]                  ·gc.alloc.rate:            634.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.451 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   949616.215 ±(99.9%) 15240.247 ops/s [Average]
[info]   (min, avg, max) = (942961.163, 949616.215, 953358.738), stdev = 3957.844
[info]   CI (99.9%): [934375.968, 964856.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   632.296 ±(99.9%) 9.809 MB/sec [Average]
[info]   (min, avg, max) = (627.990, 632.296, 634.704), stdev = 2.547
[info]   CI (99.9%): [622.487, 642.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.700 ±(99.9%) 580.538 MB/sec [Average]
[info]   (min, avg, max) = (337.005, 606.700, 674.241), stdev = 150.764
[info]   CI (99.9%): [26.161, 1187.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1006.014 ±(99.9%) 967.840 B/op [Average]
[info]   (min, avg, max) = (556.451, 1006.014, 1125.163), stdev = 251.345
[info]   CI (99.9%): [38.174, 1973.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.72% complete, ETA 01:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59023.473 ops/s
[info] # Warmup Iteration   2: 93741.556 ops/s
[info] # Warmup Iteration   3: 96342.526 ops/s
[info] Iteration   1: 96622.493 ops/s
[info]                  ·gc.alloc.rate:                                  3344.746 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55446.340 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 94412.242 ops/s
[info]                  ·gc.alloc.rate:                                  3269.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51069.609 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 93602.261 ops/s
[info]                  ·gc.alloc.rate:                                  3241.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57235.581 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 97212.110 ops/s
[info]                  ·gc.alloc.rate:                                  3365.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55109.313 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 94697.621 ops/s
[info]                  ·gc.alloc.rate:                                  3278.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56573.262 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   95309.345 ±(99.9%) 5914.848 ops/s [Average]
[info]   (min, avg, max) = (93602.261, 95309.345, 97212.110), stdev = 1536.067
[info]   CI (99.9%): [89394.498, 101224.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3299.940 ±(99.9%) 202.716 MB/sec [Average]
[info]   (min, avg, max) = (3241.274, 3299.940, 3365.269), stdev = 52.645
[info]   CI (99.9%): [3097.223, 3502.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54496.004, 54496.004, 54496.005), stdev = 0.001
[info]   CI (99.9%): [54496.004, 54496.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.061, 0.088), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.652 ±(99.9%) 584.887 MB/sec [Average]
[info]   (min, avg, max) = (3063.938, 3335.652, 3404.216), stdev = 151.893
[info]   CI (99.9%): [2750.765, 3920.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   55086.821 ±(99.9%) 9252.455 B/op [Average]
[info]   (min, avg, max) = (51069.609, 55086.821, 57235.581), stdev = 2402.833
[info]   CI (99.9%): [45834.366, 64339.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.97% complete, ETA 01:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259436.474 ops/s
[info] # Warmup Iteration   2: 320993.100 ops/s
[info] # Warmup Iteration   3: 320681.725 ops/s
[info] Iteration   1: 317510.989 ops/s
[info]                  ·gc.alloc.rate:            485.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1670.795 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 318645.015 ops/s
[info]                  ·gc.alloc.rate:            487.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3329.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 324139.217 ops/s
[info]                  ·gc.alloc.rate:            495.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1636.661 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 322688.048 ops/s
[info]                  ·gc.alloc.rate:            493.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3288.142 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 328802.523 ops/s
[info]                  ·gc.alloc.rate:            503.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1613.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   322357.158 ±(99.9%) 17444.449 ops/s [Average]
[info]   (min, avg, max) = (317510.989, 322357.158, 328802.523), stdev = 4530.268
[info]   CI (99.9%): [304912.710, 339801.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   493.158 ±(99.9%) 26.894 MB/sec [Average]
[info]   (min, avg, max) = (485.655, 493.158, 503.071), stdev = 6.984
[info]   CI (99.9%): [466.264, 520.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.865 ±(99.9%) 710.941 MB/sec [Average]
[info]   (min, avg, max) = (336.972, 471.865, 674.208), stdev = 184.629
[info]   CI (99.9%): [≈ 0, 1182.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2307.766 ±(99.9%) 3520.680 B/op [Average]
[info]   (min, avg, max) = (1613.449, 2307.766, 3329.784), stdev = 914.309
[info]   CI (99.9%): [≈ 0, 5828.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 01:20:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297888.597 ops/s
[info] # Warmup Iteration   2: 518975.770 ops/s
[info] # Warmup Iteration   3: 521923.070 ops/s
[info] Iteration   1: 537764.962 ops/s
[info]                  ·gc.alloc.rate:            396.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1969.032 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 539158.983 ops/s
[info]                  ·gc.alloc.rate:            397.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 981.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 539589.272 ops/s
[info]                  ·gc.alloc.rate:            397.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.269 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 541158.396 ops/s
[info]                  ·gc.alloc.rate:                   398.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        976.440 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 541621.451 ops/s
[info]                  ·gc.alloc.rate:            399.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 977.508 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   539858.613 ±(99.9%) 6009.484 ops/s [Average]
[info]   (min, avg, max) = (537764.962, 539858.613, 541621.451), stdev = 1560.644
[info]   CI (99.9%): [533849.129, 545868.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   397.874 ±(99.9%) 4.351 MB/sec [Average]
[info]   (min, avg, max) = (396.400, 397.874, 399.171), stdev = 1.130
[info]   CI (99.9%): [393.523, 402.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.399 ±(99.9%) 580.047 MB/sec [Average]
[info]   (min, avg, max) = (335.691, 403.399, 672.865), stdev = 150.636
[info]   CI (99.9%): [≈ 0, 983.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1176.846 ±(99.9%) 1705.259 B/op [Average]
[info]   (min, avg, max) = (976.440, 1176.846, 1969.032), stdev = 442.850
[info]   CI (99.9%): [≈ 0, 2882.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.387 ±(99.9%) 3.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.937), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 3.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.47% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2354245.852 ops/s
[info] # Warmup Iteration   2: 2646852.165 ops/s
[info] # Warmup Iteration   3: 2640427.309 ops/s
[info] Iteration   1: 2666120.352 ops/s
[info]                  ·gc.alloc.rate:                   1233.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        794.308 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 2722289.381 ops/s
[info]                  ·gc.alloc.rate:                                  1258.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       586.153 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.311 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2711245.116 ops/s
[info]                  ·gc.alloc.rate:                                  1253.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       790.411 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2708083.798 ops/s
[info]                  ·gc.alloc.rate:                                  1252.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       791.290 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2716943.008 ops/s
[info]                  ·gc.alloc.rate:            1256.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 788.756 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2704936.331 ±(99.9%) 86139.090 ops/s [Average]
[info]   (min, avg, max) = (2666120.352, 2704936.331, 2722289.381), stdev = 22370.048
[info]   CI (99.9%): [2618797.241, 2791075.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1251.020 ±(99.9%) 39.372 MB/sec [Average]
[info]   (min, avg, max) = (1233.254, 1251.020, 1258.892), stdev = 10.225
[info]   CI (99.9%): [1211.647, 1290.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.038), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1288.677 ±(99.9%) 592.706 MB/sec [Average]
[info]   (min, avg, max) = (1013.603, 1288.677, 1361.454), stdev = 153.924
[info]   CI (99.9%): [695.971, 1881.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   750.184 ±(99.9%) 353.174 B/op [Average]
[info]   (min, avg, max) = (586.153, 750.184, 794.308), stdev = 91.718
[info]   CI (99.9%): [397.010, 1103.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.541 ±(99.9%) 3.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.541, 2.311), stdev = 1.004
[info]   CI (99.9%): [≈ 0, 4.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 5.273
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.72% complete, ETA 01:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2675767.358 ops/s
[info] # Warmup Iteration   2: 2971591.289 ops/s
[info] # Warmup Iteration   3: 2934655.228 ops/s
[info] Iteration   1: 2920419.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2924548.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2922449.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2933223.442 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2933614.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2926851.045 ±(99.9%) 23767.395 ops/s [Average]
[info]   (min, avg, max) = (2920419.363, 2926851.045, 2933614.217), stdev = 6172.317
[info]   CI (99.9%): [2903083.649, 2950618.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.97% complete, ETA 01:19:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 306142.217 ops/s
[info] # Warmup Iteration   2: 396987.971 ops/s
[info] # Warmup Iteration   3: 392018.304 ops/s
[info] Iteration   1: 403553.205 ops/s
[info]                  ·gc.alloc.rate:            580.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2623.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 411477.836 ops/s
[info]                  ·gc.alloc.rate:            591.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2573.318 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 411630.319 ops/s
[info]                  ·gc.alloc.rate:            592.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2572.311 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 413917.856 ops/s
[info]                  ·gc.alloc.rate:            595.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1279.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 411197.992 ops/s
[info]                  ·gc.alloc.rate:            591.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2575.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   410355.442 ±(99.9%) 15227.847 ops/s [Average]
[info]   (min, avg, max) = (403553.205, 410355.442, 413917.856), stdev = 3954.624
[info]   CI (99.9%): [395127.595, 425583.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   590.216 ±(99.9%) 22.073 MB/sec [Average]
[info]   (min, avg, max) = (580.341, 590.216, 595.321), stdev = 5.732
[info]   CI (99.9%): [568.143, 612.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.416 ±(99.9%) 579.222 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 605.416, 672.867), stdev = 150.422
[info]   CI (99.9%): [26.195, 1184.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2324.717 ±(99.9%) 2252.392 B/op [Average]
[info]   (min, avg, max) = (1279.072, 2324.717, 2623.843), stdev = 584.939
[info]   CI (99.9%): [72.324, 4577.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.21% complete, ETA 01:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15535.443 ops/s
[info] # Warmup Iteration   2: 19303.246 ops/s
[info] # Warmup Iteration   3: 19252.114 ops/s
[info] Iteration   1: 19165.974 ops/s
[info]                  ·gc.alloc.rate:            1198.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       98443.793 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83032.779 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 19213.804 ops/s
[info]                  ·gc.alloc.rate:                                  1201.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110706.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                272.811 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 19265.973 ops/s
[info]                  ·gc.alloc.rate:                                  1205.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98454.329 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83418.111 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 19379.415 ops/s
[info]                  ·gc.alloc.rate:                                  1212.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110581.433 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19414.370 ops/s
[info]                  ·gc.alloc.rate:                                  1214.573 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.522 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82773.790 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19287.907 ±(99.9%) 409.360 ops/s [Average]
[info]   (min, avg, max) = (19165.974, 19287.907, 19414.370), stdev = 106.309
[info]   CI (99.9%): [18878.548, 19697.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1206.513 ±(99.9%) 25.974 MB/sec [Average]
[info]   (min, avg, max) = (1198.693, 1206.513, 1214.573), stdev = 6.745
[info]   CI (99.9%): [1180.539, 1232.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98453.237 ±(99.9%) 20.525 B/op [Average]
[info]   (min, avg, max) = (98443.793, 98453.237, 98456.023), stdev = 5.330
[info]   CI (99.9%): [98432.713, 98473.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.031), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.161 ±(99.9%) 3.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.161, 2.498), stdev = 0.967
[info]   CI (99.9%): [≈ 0, 4.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1153.245 ±(99.9%) 714.630 MB/sec [Average]
[info]   (min, avg, max) = (1011.042, 1153.245, 1361.511), stdev = 185.587
[info]   CI (99.9%): [438.616, 1867.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   94102.556 ±(99.9%) 58152.632 B/op [Average]
[info]   (min, avg, max) = (82773.790, 94102.556, 110706.666), stdev = 15102.054
[info]   CI (99.9%): [35949.924, 152255.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   54.562 ±(99.9%) 469.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.562, 272.811), stdev = 122.005
[info]   CI (99.9%): [≈ 0, 524.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.46% complete, ETA 01:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18128.772 ops/s
[info] # Warmup Iteration   2: 34486.293 ops/s
[info] # Warmup Iteration   3: 34358.897 ops/s
[info] Iteration   1: 34300.908 ops/s
[info]                  ·gc.alloc.rate:                   859.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46274.640 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 34382.092 ops/s
[info]                  ·gc.alloc.rate:            861.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30798.318 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 33693.029 ops/s
[info]                  ·gc.alloc.rate:            844.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47142.045 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 34724.308 ops/s
[info]                  ·gc.alloc.rate:                                  870.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.395 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30674.418 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                181.148 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 34827.735 ops/s
[info]                  ·gc.alloc.rate:                                  873.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46145.170 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   34385.614 ±(99.9%) 1718.878 ops/s [Average]
[info]   (min, avg, max) = (33693.029, 34385.614, 34827.735), stdev = 446.387
[info]   CI (99.9%): [32666.736, 36104.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   861.926 ±(99.9%) 43.111 MB/sec [Average]
[info]   (min, avg, max) = (844.553, 861.926, 873.058), stdev = 11.196
[info]   CI (99.9%): [818.815, 905.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.172 ±(99.9%) 1.376 B/op [Average]
[info]   (min, avg, max) = (39456.012, 39456.172, 39456.811), stdev = 0.357
[info]   CI (99.9%): [39454.796, 39457.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.181 ±(99.9%) 7.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.181, 4.395), stdev = 1.912
[info]   CI (99.9%): [≈ 0, 8.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.574 ±(99.9%) 713.334 MB/sec [Average]
[info]   (min, avg, max) = (672.816, 877.574, 1021.072), stdev = 185.251
[info]   CI (99.9%): [164.240, 1590.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40206.918 ±(99.9%) 33323.446 B/op [Average]
[info]   (min, avg, max) = (30674.418, 40206.918, 47142.045), stdev = 8653.993
[info]   CI (99.9%): [6883.472, 73530.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   42.343 ±(99.9%) 303.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.343, 181.148), stdev = 78.715
[info]   CI (99.9%): [≈ 0, 345.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.71% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28406.071 ops/s
[info] # Warmup Iteration   2: 32223.305 ops/s
[info] # Warmup Iteration   3: 31786.323 ops/s
[info] Iteration   1: 31639.090 ops/s
[info]                  ·gc.alloc.rate:            424.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33533.225 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 32335.632 ops/s
[info]                  ·gc.alloc.rate:            434.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16404.769 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 32250.705 ops/s
[info]                  ·gc.alloc.rate:            433.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16449.016 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 32286.418 ops/s
[info]                  ·gc.alloc.rate:            433.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16430.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 32128.241 ops/s
[info]                  ·gc.alloc.rate:            431.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33022.932 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   32128.017 ±(99.9%) 1093.029 ops/s [Average]
[info]   (min, avg, max) = (31639.090, 32128.017, 32335.632), stdev = 283.856
[info]   CI (99.9%): [31034.988, 33221.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.586 ±(99.9%) 14.867 MB/sec [Average]
[info]   (min, avg, max) = (424.936, 431.586, 434.386), stdev = 3.861
[info]   CI (99.9%): [416.719, 446.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (21144.013, 21144.014, 21144.016), stdev = 0.001
[info]   CI (99.9%): [21144.008, 21144.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.827 ±(99.9%) 710.656 MB/sec [Average]
[info]   (min, avg, max) = (337.012, 471.827, 674.070), stdev = 184.555
[info]   CI (99.9%): [≈ 0, 1182.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23168.124 ±(99.9%) 35544.756 B/op [Average]
[info]   (min, avg, max) = (16404.769, 23168.124, 33533.225), stdev = 9230.860
[info]   CI (99.9%): [≈ 0, 58712.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.96% complete, ETA 01:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13207.626 ops/s
[info] # Warmup Iteration   2: 24647.863 ops/s
[info] # Warmup Iteration   3: 25086.982 ops/s
[info] Iteration   1: 24742.531 ops/s
[info]                  ·gc.alloc.rate:            1311.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85591.123 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  22.000 ms
[info] Iteration   2: 25217.440 ops/s
[info]                  ·gc.alloc.rate:                                  1336.108 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.988 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84436.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                291.017 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 25570.144 ops/s
[info]                  ·gc.alloc.rate:                                  1355.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.701 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83804.080 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 25560.935 ops/s
[info]                  ·gc.alloc.rate:                                  1354.275 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83836.861 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25597.510 ops/s
[info]                  ·gc.alloc.rate:                                  1356.334 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83718.970 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25337.712 ±(99.9%) 1414.887 ops/s [Average]
[info]   (min, avg, max) = (24742.531, 25337.712, 25597.510), stdev = 367.442
[info]   CI (99.9%): [23922.825, 26752.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1342.602 ±(99.9%) 74.940 MB/sec [Average]
[info]   (min, avg, max) = (1311.133, 1342.602, 1356.334), stdev = 19.462
[info]   CI (99.9%): [1267.663, 1417.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.017, 83400.022), stdev = 0.002
[info]   CI (99.9%): [83400.008, 83400.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.096), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.676 ±(99.9%) 9.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.676, 5.988), stdev = 2.500
[info]   CI (99.9%): [≈ 0, 11.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.582 ±(99.9%) 27.887 MB/sec [Average]
[info]   (min, avg, max) = (1345.580, 1356.582, 1361.727), stdev = 7.242
[info]   CI (99.9%): [1328.695, 1384.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84277.510 ±(99.9%) 3032.695 B/op [Average]
[info]   (min, avg, max) = (83718.970, 84277.510, 85591.123), stdev = 787.581
[info]   CI (99.9%): [81244.815, 87310.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.203 ±(99.9%) 501.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.203, 291.017), stdev = 130.147
[info]   CI (99.9%): [≈ 0, 559.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 22.000), stdev = 8.142
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.21% complete, ETA 01:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17880.463 ops/s
[info] # Warmup Iteration   2: 27700.828 ops/s
[info] # Warmup Iteration   3: 27509.735 ops/s
[info] Iteration   1: 27480.220 ops/s
[info]                  ·gc.alloc.rate:                                  1561.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.558 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96712.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                190.754 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 27766.735 ops/s
[info]                  ·gc.alloc.rate:                                  1577.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89406.598 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77174.469 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 27905.114 ops/s
[info]                  ·gc.alloc.rate:                                  1585.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95991.103 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 27950.549 ops/s
[info]                  ·gc.alloc.rate:                                  1587.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95833.155 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27612.938 ops/s
[info]                  ·gc.alloc.rate:                                  1568.448 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77599.180 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27743.111 ±(99.9%) 760.174 ops/s [Average]
[info]   (min, avg, max) = (27480.220, 27743.111, 27950.549), stdev = 197.415
[info]   CI (99.9%): [26982.937, 28503.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1575.979 ±(99.9%) 43.318 MB/sec [Average]
[info]   (min, avg, max) = (1561.156, 1575.979, 1587.717), stdev = 11.250
[info]   CI (99.9%): [1532.661, 1619.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89407.732 ±(99.9%) 2.441 B/op [Average]
[info]   (min, avg, max) = (89406.598, 89407.732, 89408.016), stdev = 0.634
[info]   CI (99.9%): [89405.291, 89410.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.036, 0.097), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.045 ±(99.9%) 9.957 B/op [Average]
[info]   (min, avg, max) = (0.131, 2.045, 5.558), stdev = 2.586
[info]   CI (99.9%): [≈ 0, 12.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.071 ±(99.9%) 709.579 MB/sec [Average]
[info]   (min, avg, max) = (1361.290, 1563.071, 1702.249), stdev = 184.275
[info]   CI (99.9%): [853.492, 2272.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   88662.060 ±(99.9%) 39658.802 B/op [Average]
[info]   (min, avg, max) = (77174.469, 88662.060, 96712.394), stdev = 10299.265
[info]   CI (99.9%): [49003.258, 128320.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   38.151 ±(99.9%) 328.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.151, 190.754), stdev = 85.308
[info]   CI (99.9%): [≈ 0, 366.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.46% complete, ETA 01:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12102.662 ops/s
[info] # Warmup Iteration   2: 27998.894 ops/s
[info] # Warmup Iteration   3: 28220.272 ops/s
[info] Iteration   1: 28454.105 ops/s
[info]                  ·gc.alloc.rate:                   1531.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74387.735 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 257.907 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 28728.449 ops/s
[info]                  ·gc.alloc.rate:                                  1546.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93241.627 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 28648.838 ops/s
[info]                  ·gc.alloc.rate:            1542.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       84720.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74798.958 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28585.581 ops/s
[info]                  ·gc.alloc.rate:                                  1538.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93707.999 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28834.915 ops/s
[info]                  ·gc.alloc.rate:                                  1552.003 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74316.551 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28650.378 ±(99.9%) 554.255 ops/s [Average]
[info]   (min, avg, max) = (28454.105, 28650.378, 28834.915), stdev = 143.938
[info]   CI (99.9%): [28096.122, 29204.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1542.145 ±(99.9%) 29.605 MB/sec [Average]
[info]   (min, avg, max) = (1531.761, 1542.145, 1552.003), stdev = 7.688
[info]   CI (99.9%): [1512.540, 1571.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.026 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.026, 84720.070), stdev = 0.025
[info]   CI (99.9%): [84719.930, 84720.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.213 ±(99.9%) 10.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.213, 5.913), stdev = 2.628
[info]   CI (99.9%): [≈ 0, 11.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.305 ±(99.9%) 730.034 MB/sec [Average]
[info]   (min, avg, max) = (1344.950, 1494.305, 1701.967), stdev = 189.588
[info]   CI (99.9%): [764.270, 2224.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   82090.574 ±(99.9%) 40028.521 B/op [Average]
[info]   (min, avg, max) = (74316.551, 82090.574, 93707.999), stdev = 10395.280
[info]   CI (99.9%): [42062.053, 122119.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   51.581 ±(99.9%) 444.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.581, 257.907), stdev = 115.339
[info]   CI (99.9%): [≈ 0, 495.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 17.000), stdev = 5.718
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:18:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22968.582 ops/s
[info] # Warmup Iteration   2: 30377.104 ops/s
[info] # Warmup Iteration   3: 29824.420 ops/s
[info] Iteration   1: 29678.089 ops/s
[info]                  ·gc.alloc.rate:                                  1531.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.693 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89409.624 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                211.955 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 30234.808 ops/s
[info]                  ·gc.alloc.rate:                                  1560.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.581 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70873.627 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 30516.385 ops/s
[info]                  ·gc.alloc.rate:                                  1575.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87776.413 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30539.616 ops/s
[info]                  ·gc.alloc.rate:            1575.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87713.190 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29832.454 ops/s
[info]                  ·gc.alloc.rate:                                  1539.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71830.865 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30160.270 ±(99.9%) 1511.395 ops/s [Average]
[info]   (min, avg, max) = (29678.089, 30160.270, 30539.616), stdev = 392.504
[info]   CI (99.9%): [28648.875, 31671.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1556.661 ±(99.9%) 78.057 MB/sec [Average]
[info]   (min, avg, max) = (1531.737, 1556.661, 1575.965), stdev = 20.271
[info]   CI (99.9%): [1478.604, 1634.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.024 ±(99.9%) 0.091 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.024, 81224.067), stdev = 0.024
[info]   CI (99.9%): [81223.933, 81224.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.070), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.496 ±(99.9%) 7.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.496, 3.693), stdev = 1.956
[info]   CI (99.9%): [≈ 0, 9.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.746 ±(99.9%) 707.157 MB/sec [Average]
[info]   (min, avg, max) = (1361.645, 1562.746, 1702.357), stdev = 183.646
[info]   CI (99.9%): [855.589, 2269.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81520.744 ±(99.9%) 35863.176 B/op [Average]
[info]   (min, avg, max) = (70873.627, 81520.744, 89409.624), stdev = 9313.553
[info]   CI (99.9%): [45657.568, 117383.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   42.391 ±(99.9%) 364.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.391, 211.955), stdev = 94.789
[info]   CI (99.9%): [≈ 0, 407.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.96% complete, ETA 01:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23024.503 ops/s
[info] # Warmup Iteration   2: 30551.090 ops/s
[info] # Warmup Iteration   3: 30214.936 ops/s
[info] Iteration   1: 30277.740 ops/s
[info]                  ·gc.alloc.rate:                   1504.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        69944.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 207.755 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 30760.442 ops/s
[info]                  ·gc.alloc.rate:                                  1527.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.911 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87083.104 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30430.791 ops/s
[info]                  ·gc.alloc.rate:            1511.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70419.547 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 30142.899 ops/s
[info]                  ·gc.alloc.rate:                                  1497.178 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88865.320 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30225.462 ops/s
[info]                  ·gc.alloc.rate:                                  1501.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70899.416 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30367.467 ±(99.9%) 937.469 ops/s [Average]
[info]   (min, avg, max) = (30142.899, 30367.467, 30760.442), stdev = 243.458
[info]   CI (99.9%): [29429.998, 31304.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1508.254 ±(99.9%) 46.375 MB/sec [Average]
[info]   (min, avg, max) = (1497.178, 1508.254, 1527.758), stdev = 12.043
[info]   CI (99.9%): [1461.880, 1554.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.014, 78168.017), stdev = 0.002
[info]   CI (99.9%): [78168.008, 78168.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.398 ±(99.9%) 11.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.398, 6.911), stdev = 3.082
[info]   CI (99.9%): [≈ 0, 13.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1494.558 ±(99.9%) 729.723 MB/sec [Average]
[info]   (min, avg, max) = (1345.773, 1494.558, 1702.068), stdev = 189.507
[info]   CI (99.9%): [764.835, 2224.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   77442.339 ±(99.9%) 37123.220 B/op [Average]
[info]   (min, avg, max) = (69944.309, 77442.339, 88865.320), stdev = 9640.782
[info]   CI (99.9%): [40319.119, 114565.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   41.551 ±(99.9%) 357.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.551, 207.755), stdev = 92.911
[info]   CI (99.9%): [≈ 0, 399.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.20% complete, ETA 01:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4623.782 ops/s
[info] # Warmup Iteration   2: 7751.299 ops/s
[info] # Warmup Iteration   3: 7969.711 ops/s
[info] Iteration   1: 7902.354 ops/s
[info]                  ·gc.alloc.rate:            1028.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 267981.215 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7962.543 ops/s
[info]                  ·gc.alloc.rate:            1036.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 199471.703 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 7997.035 ops/s
[info]                  ·gc.alloc.rate:                                  1040.440 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       199385.435 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                786.530 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 7986.688 ops/s
[info]                  ·gc.alloc.rate:                                  1039.469 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.710 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       201210.040 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 8026.498 ops/s
[info]                  ·gc.alloc.rate:                                  1044.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200232.562 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7975.024 ±(99.9%) 179.654 ops/s [Average]
[info]   (min, avg, max) = (7902.354, 7975.024, 8026.498), stdev = 46.655
[info]   CI (99.9%): [7795.370, 8154.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1037.734 ±(99.9%) 24.012 MB/sec [Average]
[info]   (min, avg, max) = (1028.008, 1037.734, 1044.657), stdev = 6.236
[info]   CI (99.9%): [1013.723, 1061.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.052 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (204776.051, 204776.052, 204776.055), stdev = 0.002
[info]   CI (99.9%): [204776.045, 204776.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.098), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.825 ±(99.9%) 32.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.825, 19.282), stdev = 8.331
[info]   CI (99.9%): [≈ 0, 36.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.093 ±(99.9%) 566.960 MB/sec [Average]
[info]   (min, avg, max) = (1009.257, 1082.093, 1345.308), stdev = 147.238
[info]   CI (99.9%): [515.133, 1649.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   213656.191 ±(99.9%) 116972.822 B/op [Average]
[info]   (min, avg, max) = (199385.435, 213656.191, 267981.215), stdev = 30377.471
[info]   CI (99.9%): [96683.368, 330629.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   157.306 ±(99.9%) 1354.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 157.306, 786.530), stdev = 351.747
[info]   CI (99.9%): [≈ 0, 1511.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 16.000), stdev = 5.983
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.45% complete, ETA 01:17:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14319.777 ops/s
[info] # Warmup Iteration   2: 19293.745 ops/s
[info] # Warmup Iteration   3: 19498.318 ops/s
[info] Iteration   1: 19284.900 ops/s
[info]                  ·gc.alloc.rate:                   1497.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              122250.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110027.364 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 271.807 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 19906.999 ops/s
[info]                  ·gc.alloc.rate:                                  1546.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       134554.351 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 19915.115 ops/s
[info]                  ·gc.alloc.rate:                                  1546.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122262.384 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107600.248 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 19979.171 ops/s
[info]                  ·gc.alloc.rate:                                  1551.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       134062.834 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20001.690 ops/s
[info]                  ·gc.alloc.rate:                                  1553.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       133922.103 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19817.575 ±(99.9%) 1157.221 ops/s [Average]
[info]   (min, avg, max) = (19284.900, 19817.575, 20001.690), stdev = 300.527
[info]   CI (99.9%): [18660.354, 20974.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1539.406 ±(99.9%) 90.486 MB/sec [Average]
[info]   (min, avg, max) = (1497.760, 1539.406, 1553.973), stdev = 23.499
[info]   CI (99.9%): [1448.921, 1629.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122260.934 ±(99.9%) 23.216 B/op [Average]
[info]   (min, avg, max) = (122250.223, 122260.934, 122264.022), stdev = 6.029
[info]   CI (99.9%): [122237.718, 122284.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.057), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.538 ±(99.9%) 6.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.538, 4.514), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 8.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.032 ±(99.9%) 732.502 MB/sec [Average]
[info]   (min, avg, max) = (1348.010, 1563.032, 1702.147), stdev = 190.228
[info]   CI (99.9%): [830.530, 2295.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   124033.380 ±(99.9%) 53608.513 B/op [Average]
[info]   (min, avg, max) = (107600.248, 124033.380, 134554.351), stdev = 13921.961
[info]   CI (99.9%): [70424.867, 177641.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   54.361 ±(99.9%) 468.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.361, 271.807), stdev = 121.556
[info]   CI (99.9%): [≈ 0, 522.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.70% complete, ETA 01:17:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24003.224 ops/s
[info] # Warmup Iteration   2: 39120.890 ops/s
[info] # Warmup Iteration   3: 40045.371 ops/s
[info] Iteration   1: 40177.665 ops/s
[info]                  ·gc.alloc.rate:            990.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       38823.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39530.997 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 40045.947 ops/s
[info]                  ·gc.alloc.rate:                   987.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39636.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 40216.172 ops/s
[info]                  ·gc.alloc.rate:                                  991.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39651.048 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                156.414 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 40488.729 ops/s
[info]                  ·gc.alloc.rate:                                  998.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39693.484 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 40618.323 ops/s
[info]                  ·gc.alloc.rate:            1001.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39568.419 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   40309.367 ±(99.9%) 909.285 ops/s [Average]
[info]   (min, avg, max) = (40045.947, 40309.367, 40618.323), stdev = 236.138
[info]   CI (99.9%): [39400.082, 41218.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   994.190 ±(99.9%) 22.339 MB/sec [Average]
[info]   (min, avg, max) = (987.795, 994.190, 1001.785), stdev = 5.801
[info]   CI (99.9%): [971.851, 1016.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.848 ±(99.9%) 1.402 B/op [Average]
[info]   (min, avg, max) = (38823.196, 38823.848, 38824.011), stdev = 0.364
[info]   CI (99.9%): [38822.446, 38825.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.103), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.244 ±(99.9%) 7.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.244, 4.029), stdev = 1.823
[info]   CI (99.9%): [≈ 0, 8.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.475 ±(99.9%) 23.921 MB/sec [Average]
[info]   (min, avg, max) = (1008.456, 1014.475, 1020.993), stdev = 6.212
[info]   CI (99.9%): [990.554, 1038.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39616.006 ±(99.9%) 251.952 B/op [Average]
[info]   (min, avg, max) = (39530.997, 39616.006, 39693.484), stdev = 65.431
[info]   CI (99.9%): [39364.054, 39867.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   36.519 ±(99.9%) 261.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.519, 156.414), stdev = 67.976
[info]   CI (99.9%): [≈ 0, 298.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.919
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.95% complete, ETA 01:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49152.495 ops/s
[info] # Warmup Iteration   2: 53946.593 ops/s
[info] # Warmup Iteration   3: 55685.947 ops/s
[info] Iteration   1: 55802.437 ops/s
[info]                  ·gc.alloc.rate:            721.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19013.437 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 55821.156 ops/s
[info]                  ·gc.alloc.rate:            721.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19007.647 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 55804.617 ops/s
[info]                  ·gc.alloc.rate:            721.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19013.096 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 55800.604 ops/s
[info]                  ·gc.alloc.rate:            720.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19014.118 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 55705.116 ops/s
[info]                  ·gc.alloc.rate:                   719.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19046.882 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 94.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   55786.786 ±(99.9%) 178.600 ops/s [Average]
[info]   (min, avg, max) = (55705.116, 55786.786, 55821.156), stdev = 46.382
[info]   CI (99.9%): [55608.186, 55965.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   720.772 ±(99.9%) 2.382 MB/sec [Average]
[info]   (min, avg, max) = (719.673, 720.772, 721.131), stdev = 0.619
[info]   CI (99.9%): [718.390, 723.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.008, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.094 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (674.027, 674.094, 674.188), stdev = 0.062
[info]   CI (99.9%): [673.855, 674.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19019.036 ±(99.9%) 60.759 B/op [Average]
[info]   (min, avg, max) = (19007.647, 19019.036, 19046.882), stdev = 15.779
[info]   CI (99.9%): [18958.276, 19079.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.821 ±(99.9%) 162.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.821, 94.105), stdev = 42.085
[info]   CI (99.9%): [≈ 0, 180.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.20% complete, ETA 01:16:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11124.346 ops/s
[info] # Warmup Iteration   2: 28888.932 ops/s
[info] # Warmup Iteration   3: 29261.597 ops/s
[info] Iteration   1: 29491.365 ops/s
[info]                  ·gc.alloc.rate:                                  1969.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108565.315 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                213.291 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 29337.981 ops/s
[info]                  ·gc.alloc.rate:                                  1959.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109560.183 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 29286.608 ops/s
[info]                  ·gc.alloc.rate:                                  1956.032 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109754.678 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 29935.109 ops/s
[info]                  ·gc.alloc.rate:                                  1999.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107379.226 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 29660.654 ops/s
[info]                  ·gc.alloc.rate:                                  1981.052 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90309.165 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29542.344 ±(99.9%) 1015.186 ops/s [Average]
[info]   (min, avg, max) = (29286.608, 29542.344, 29935.109), stdev = 263.641
[info]   CI (99.9%): [28527.158, 30557.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1973.152 ±(99.9%) 67.308 MB/sec [Average]
[info]   (min, avg, max) = (1956.032, 1973.152, 1999.132), stdev = 17.480
[info]   CI (99.9%): [1905.844, 2040.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (105128.014, 105128.015, 105128.017), stdev = 0.002
[info]   CI (99.9%): [105128.009, 105128.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.021), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.493 ±(99.9%) 1.391 B/op [Average]
[info]   (min, avg, max) = (0.227, 0.493, 1.104), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1972.486 ±(99.9%) 582.815 MB/sec [Average]
[info]   (min, avg, max) = (1701.803, 1972.486, 2042.329), stdev = 151.355
[info]   CI (99.9%): [1389.671, 2555.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   105113.713 ±(99.9%) 32074.408 B/op [Average]
[info]   (min, avg, max) = (90309.165, 105113.713, 109754.678), stdev = 8329.622
[info]   CI (99.9%): [73039.305, 137188.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.658 ±(99.9%) 367.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.658, 213.291), stdev = 95.387
[info]   CI (99.9%): [≈ 0, 409.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 14.000), stdev = 4.159
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.45% complete, ETA 01:16:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16864.881 ops/s
[info] # Warmup Iteration   2: 31637.197 ops/s
[info] # Warmup Iteration   3: 31793.803 ops/s
[info] Iteration   1: 32236.972 ops/s
[info]                  ·gc.alloc.rate:                                  1825.869 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82701.013 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                195.126 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 32310.401 ops/s
[info]                  ·gc.alloc.rate:                                  1830.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99481.202 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 32541.510 ops/s
[info]                  ·gc.alloc.rate:                                  1843.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82315.165 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 31962.602 ops/s
[info]                  ·gc.alloc.rate:                                  1810.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100567.255 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 32540.426 ops/s
[info]                  ·gc.alloc.rate:                                  1842.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82315.165 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32318.382 ±(99.9%) 928.078 ops/s [Average]
[info]   (min, avg, max) = (31962.602, 32318.382, 32541.510), stdev = 241.019
[info]   CI (99.9%): [31390.304, 33246.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1830.438 ±(99.9%) 52.912 MB/sec [Average]
[info]   (min, avg, max) = (1810.050, 1830.438, 1843.238), stdev = 13.741
[info]   CI (99.9%): [1777.525, 1883.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (89144.013, 89144.014, 89144.017), stdev = 0.002
[info]   CI (99.9%): [89144.007, 89144.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.013, 0.057), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.653 ±(99.9%) 4.533 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.653, 2.759), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 5.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1836.404 ±(99.9%) 723.462 MB/sec [Average]
[info]   (min, avg, max) = (1693.902, 1836.404, 2042.375), stdev = 187.881
[info]   CI (99.9%): [1112.941, 2559.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   89475.960 ±(99.9%) 37113.075 B/op [Average]
[info]   (min, avg, max) = (82315.165, 89475.960, 100567.255), stdev = 9638.148
[info]   CI (99.9%): [52362.885, 126589.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   39.025 ±(99.9%) 336.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.025, 195.126), stdev = 87.263
[info]   CI (99.9%): [≈ 0, 375.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.70% complete, ETA 01:16:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36846.345 ops/s
[info] # Warmup Iteration   2: 42713.297 ops/s
[info] # Warmup Iteration   3: 42490.140 ops/s
[info] Iteration   1: 43763.184 ops/s
[info]                  ·gc.alloc.rate:                                  1823.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61063.723 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                143.736 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 43044.720 ops/s
[info]                  ·gc.alloc.rate:                                  1794.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62229.668 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 43815.040 ops/s
[info]                  ·gc.alloc.rate:                                  1825.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73361.797 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 43731.519 ops/s
[info]                  ·gc.alloc.rate:                                  1822.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61253.639 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 43870.896 ops/s
[info]                  ·gc.alloc.rate:            1828.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       65600.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61058.200 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   43645.072 ±(99.9%) 1308.273 ops/s [Average]
[info]   (min, avg, max) = (43044.720, 43645.072, 43870.896), stdev = 339.754
[info]   CI (99.9%): [42336.799, 44953.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1818.902 ±(99.9%) 54.138 MB/sec [Average]
[info]   (min, avg, max) = (1794.044, 1818.902, 1828.197), stdev = 14.059
[info]   CI (99.9%): [1764.764, 1873.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65600.009, 65600.010, 65600.010), stdev = 0.001
[info]   CI (99.9%): [65600.008, 65600.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.130), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.996 ±(99.9%) 7.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.996, 4.682), stdev = 2.061
[info]   CI (99.9%): [≈ 0, 8.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1768.986 ±(99.9%) 587.598 MB/sec [Average]
[info]   (min, avg, max) = (1697.655, 1768.986, 2041.941), stdev = 152.597
[info]   CI (99.9%): [1181.388, 2356.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   63793.405 ±(99.9%) 20681.069 B/op [Average]
[info]   (min, avg, max) = (61058.200, 63793.405, 73361.797), stdev = 5370.808
[info]   CI (99.9%): [43112.336, 84474.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.747 ±(99.9%) 247.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.747, 143.736), stdev = 64.281
[info]   CI (99.9%): [≈ 0, 276.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.95% complete, ETA 01:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37437.093 ops/s
[info] # Warmup Iteration   2: 44141.170 ops/s
[info] # Warmup Iteration   3: 45133.490 ops/s
[info] Iteration   1: 45333.507 ops/s
[info]                  ·gc.alloc.rate:                                  1663.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58671.783 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                138.759 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 44797.511 ops/s
[info]                  ·gc.alloc.rate:                                  1643.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.708 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59794.926 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 45630.070 ops/s
[info]                  ·gc.alloc.rate:            1673.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58702.243 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 45379.598 ops/s
[info]                  ·gc.alloc.rate:                                  1664.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59026.872 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 45774.747 ops/s
[info]                  ·gc.alloc.rate:                                  1679.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58517.609 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45383.087 ±(99.9%) 1440.480 ops/s [Average]
[info]   (min, avg, max) = (44797.511, 45383.087, 45774.747), stdev = 374.088
[info]   CI (99.9%): [43942.606, 46823.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1664.941 ±(99.9%) 52.548 MB/sec [Average]
[info]   (min, avg, max) = (1643.553, 1664.941, 1679.408), stdev = 13.647
[info]   CI (99.9%): [1612.393, 1717.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.009, 57736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.122), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.037 ±(99.9%) 7.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.037, 4.252), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 8.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1699.648 ±(99.9%) 20.319 MB/sec [Average]
[info]   (min, avg, max) = (1690.216, 1699.648, 1702.163), stdev = 5.277
[info]   CI (99.9%): [1679.329, 1719.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   58942.687 ±(99.9%) 1968.441 B/op [Average]
[info]   (min, avg, max) = (58517.609, 58942.687, 59794.926), stdev = 511.198
[info]   CI (99.9%): [56974.246, 60911.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   27.752 ±(99.9%) 238.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.752, 138.759), stdev = 62.055
[info]   CI (99.9%): [≈ 0, 266.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.19% complete, ETA 01:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310086.815 ops/s
[info] # Warmup Iteration   2: 362172.630 ops/s
[info] # Warmup Iteration   3: 366059.670 ops/s
[info] Iteration   1: 364782.366 ops/s
[info]                  ·gc.alloc.rate:                                  1839.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8797.555 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.370 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 364719.684 ops/s
[info]                  ·gc.alloc.rate:                                  1838.635 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7344.479 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 370891.539 ops/s
[info]                  ·gc.alloc.rate:                                  1870.435 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7222.201 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 365616.594 ops/s
[info]                  ·gc.alloc.rate:                                  1843.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8791.876 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 363079.436 ops/s
[info]                  ·gc.alloc.rate:                                  1831.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7377.668 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   365817.924 ±(99.9%) 11481.109 ops/s [Average]
[info]   (min, avg, max) = (363079.436, 365817.924, 370891.539), stdev = 2981.607
[info]   CI (99.9%): [354336.815, 377299.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1844.512 ±(99.9%) 58.246 MB/sec [Average]
[info]   (min, avg, max) = (1831.191, 1844.512, 1870.435), stdev = 15.126
[info]   CI (99.9%): [1786.265, 1902.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7936.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7936.001, 7936.001, 7936.001), stdev = 0.001
[info]   CI (99.9%): [7936.001, 7936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.848 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.106, 0.500), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1837.377 ±(99.9%) 713.562 MB/sec [Average]
[info]   (min, avg, max) = (1701.589, 1837.377, 2042.016), stdev = 185.310
[info]   CI (99.9%): [1123.815, 2550.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7906.756 ±(99.9%) 3129.264 B/op [Average]
[info]   (min, avg, max) = (7222.201, 7906.756, 8797.555), stdev = 812.660
[info]   CI (99.9%): [4777.492, 11036.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.874 ±(99.9%) 24.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.874, 14.370), stdev = 6.427
[info]   CI (99.9%): [≈ 0, 27.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 11.44% complete, ETA 01:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.996 ops/s
[info] # Warmup Iteration   2: 1463945.074 ops/s
[info] # Warmup Iteration   3: 1496340.998 ops/s
[info] Iteration   1: 1494116.153 ops/s
[info]                  ·gc.alloc.rate:            470.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 703.097 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1510402.164 ops/s
[info]                  ·gc.alloc.rate:            475.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 347.752 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1464267.806 ops/s
[info]                  ·gc.alloc.rate:            461.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 717.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1483477.651 ops/s
[info]                  ·gc.alloc.rate:            467.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 354.069 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1509527.265 ops/s
[info]                  ·gc.alloc.rate:            475.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 347.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1492358.208 ±(99.9%) 74352.988 ops/s [Average]
[info]   (min, avg, max) = (1464267.806, 1492358.208, 1510402.164), stdev = 19309.235
[info]   CI (99.9%): [1418005.220, 1566711.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   470.289 ±(99.9%) 23.518 MB/sec [Average]
[info]   (min, avg, max) = (461.388, 470.289, 475.946), stdev = 6.108
[info]   CI (99.9%): [446.771, 493.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.216 ±(99.9%) 704.052 MB/sec [Average]
[info]   (min, avg, max) = (333.667, 467.216, 667.650), stdev = 182.840
[info]   CI (99.9%): [≈ 0, 1171.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   494.059 ±(99.9%) 760.299 B/op [Average]
[info]   (min, avg, max) = (347.752, 494.059, 717.427), stdev = 197.447
[info]   CI (99.9%): [≈ 0, 1254.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.69% complete, ETA 01:15:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379276.203 ops/s
[info] # Warmup Iteration   2: 583358.781 ops/s
[info] # Warmup Iteration   3: 588692.012 ops/s
[info] Iteration   1: 585650.000 ops/s
[info]                  ·gc.alloc.rate:            497.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1807.951 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 587323.865 ops/s
[info]                  ·gc.alloc.rate:            498.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 901.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 586093.403 ops/s
[info]                  ·gc.alloc.rate:            497.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1806.742 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 588083.473 ops/s
[info]                  ·gc.alloc.rate:            499.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 900.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 586143.867 ops/s
[info]                  ·gc.alloc.rate:            497.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1806.619 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   586658.922 ±(99.9%) 3886.344 ops/s [Average]
[info]   (min, avg, max) = (585650.000, 586658.922, 588083.473), stdev = 1009.271
[info]   CI (99.9%): [582772.578, 590545.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   497.905 ±(99.9%) 3.395 MB/sec [Average]
[info]   (min, avg, max) = (497.041, 497.905, 499.115), stdev = 0.882
[info]   CI (99.9%): [494.509, 501.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.134 ±(99.9%) 709.225 MB/sec [Average]
[info]   (min, avg, max) = (336.346, 538.134, 672.667), stdev = 184.183
[info]   CI (99.9%): [≈ 0, 1247.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1444.619 ±(99.9%) 1911.281 B/op [Average]
[info]   (min, avg, max) = (900.312, 1444.619, 1807.951), stdev = 496.353
[info]   CI (99.9%): [≈ 0, 3355.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.94% complete, ETA 01:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1637148.151 ops/s
[info] # Warmup Iteration   2: 1695433.791 ops/s
[info] # Warmup Iteration   3: 1729163.908 ops/s
[info] Iteration   1: 1727289.528 ops/s
[info]                  ·gc.alloc.rate:            333.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.121 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1735588.049 ops/s
[info]                  ·gc.alloc.rate:            335.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.657 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1731543.477 ops/s
[info]                  ·gc.alloc.rate:            334.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1736504.437 ops/s
[info]                  ·gc.alloc.rate:            335.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1736201.850 ops/s
[info]                  ·gc.alloc.rate:            335.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1733425.468 ±(99.9%) 15288.652 ops/s [Average]
[info]   (min, avg, max) = (1727289.528, 1733425.468, 1736504.437), stdev = 3970.414
[info]   CI (99.9%): [1718136.816, 1748714.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   334.774 ±(99.9%) 2.984 MB/sec [Average]
[info]   (min, avg, max) = (333.562, 334.774, 335.391), stdev = 0.775
[info]   CI (99.9%): [331.790, 337.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.018 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (336.986, 337.018, 337.049), stdev = 0.028
[info]   CI (99.9%): [336.910, 337.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   306.039 ±(99.9%) 2.698 B/op [Average]
[info]   (min, avg, max) = (305.489, 306.039, 307.121), stdev = 0.701
[info]   CI (99.9%): [303.341, 308.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.19% complete, ETA 01:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51107.159 ops/s
[info] # Warmup Iteration   2: 88117.187 ops/s
[info] # Warmup Iteration   3: 90570.528 ops/s
[info] Iteration   1: 91041.911 ops/s
[info]                  ·gc.alloc.rate:                                  3306.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58847.302 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 90277.298 ops/s
[info]                  ·gc.alloc.rate:                                  3280.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59343.936 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 91593.777 ops/s
[info]                  ·gc.alloc.rate:                                  3327.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58490.141 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 90430.459 ops/s
[info]                  ·gc.alloc.rate:            3285.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3064.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53318.013 B/op
[info]                  ·gc.count:                 9.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 91749.383 ops/s
[info]                  ·gc.alloc.rate:                                  3332.748 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58388.800 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   91018.566 ±(99.9%) 2554.848 ops/s [Average]
[info]   (min, avg, max) = (90277.298, 91018.566, 91749.383), stdev = 663.486
[info]   CI (99.9%): [88463.718, 93573.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3306.488 ±(99.9%) 91.086 MB/sec [Average]
[info]   (min, avg, max) = (3280.132, 3306.488, 3332.748), stdev = 23.655
[info]   CI (99.9%): [3215.402, 3397.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.005, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.038 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.085), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.786 ±(99.9%) 585.010 MB/sec [Average]
[info]   (min, avg, max) = (3064.015, 3335.786, 3404.504), stdev = 151.925
[info]   CI (99.9%): [2750.776, 3920.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57677.638 ±(99.9%) 9494.181 B/op [Average]
[info]   (min, avg, max) = (53318.013, 57677.638, 59343.936), stdev = 2465.609
[info]   CI (99.9%): [48183.457, 67171.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 11.000), stdev = 1.342
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.44% complete, ETA 01:15:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252721.967 ops/s
[info] # Warmup Iteration   2: 322092.294 ops/s
[info] # Warmup Iteration   3: 320981.014 ops/s
[info] Iteration   1: 322679.754 ops/s
[info]                  ·gc.alloc.rate:            501.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1644.050 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 322256.778 ops/s
[info]                  ·gc.alloc.rate:            501.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3292.467 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 312471.026 ops/s
[info]                  ·gc.alloc.rate:            485.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1697.816 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 319759.297 ops/s
[info]                  ·gc.alloc.rate:            497.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3318.164 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 323455.263 ops/s
[info]                  ·gc.alloc.rate:            503.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1640.127 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   320124.424 ±(99.9%) 17314.944 ops/s [Average]
[info]   (min, avg, max) = (312471.026, 320124.424, 323455.263), stdev = 4496.636
[info]   CI (99.9%): [302809.479, 337439.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   497.891 ±(99.9%) 27.048 MB/sec [Average]
[info]   (min, avg, max) = (485.903, 497.891, 503.023), stdev = 7.024
[info]   CI (99.9%): [470.842, 524.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.001, 2448.001, 2448.001), stdev = 0.001
[info]   CI (99.9%): [2448.001, 2448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.891 ±(99.9%) 711.132 MB/sec [Average]
[info]   (min, avg, max) = (336.999, 471.891, 674.219), stdev = 184.679
[info]   CI (99.9%): [≈ 0, 1183.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2318.525 ±(99.9%) 3469.995 B/op [Average]
[info]   (min, avg, max) = (1640.127, 2318.525, 3318.164), stdev = 901.147
[info]   CI (99.9%): [≈ 0, 5788.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.69% complete, ETA 01:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68113.480 ops/s
[info] # Warmup Iteration   2: 1213229.471 ops/s
[info] # Warmup Iteration   3: 1190546.053 ops/s
[info] Iteration   1: 1170694.633 ops/s
[info]                  ·gc.alloc.rate:            541.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 897.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1236300.833 ops/s
[info]                  ·gc.alloc.rate:            571.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 424.857 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1228049.369 ops/s
[info]                  ·gc.alloc.rate:            567.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 855.430 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1227327.944 ops/s
[info]                  ·gc.alloc.rate:            567.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 855.895 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1219898.191 ops/s
[info]                  ·gc.alloc.rate:            564.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1216454.194 ±(99.9%) 101008.309 ops/s [Average]
[info]   (min, avg, max) = (1170694.633, 1216454.194, 1236300.833), stdev = 26231.537
[info]   CI (99.9%): [1115445.885, 1317462.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   562.629 ±(99.9%) 46.740 MB/sec [Average]
[info]   (min, avg, max) = (541.443, 562.629, 571.740), stdev = 12.138
[info]   CI (99.9%): [515.889, 609.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.929 ±(99.9%) 703.919 MB/sec [Average]
[info]   (min, avg, max) = (333.665, 533.929, 667.532), stdev = 182.806
[info]   CI (99.9%): [≈ 0, 1237.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   692.815 ±(99.9%) 934.235 B/op [Average]
[info]   (min, avg, max) = (424.857, 692.815, 897.342), stdev = 242.618
[info]   CI (99.9%): [≈ 0, 1627.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:14:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 650613.735 ops/s
[info] # Warmup Iteration   2: 948311.167 ops/s
[info] # Warmup Iteration   3: 957660.352 ops/s
[info] Iteration   1: 953511.272 ops/s
[info]                  ·gc.alloc.rate:            673.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1110.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 957938.503 ops/s
[info]                  ·gc.alloc.rate:            676.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1105.391 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 955391.563 ops/s
[info]                  ·gc.alloc.rate:            674.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1108.303 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 953037.457 ops/s
[info]                  ·gc.alloc.rate:            673.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1111.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 953115.038 ops/s
[info]                  ·gc.alloc.rate:                   673.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1110.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   954598.767 ±(99.9%) 8078.131 ops/s [Average]
[info]   (min, avg, max) = (953037.457, 954598.767, 957938.503), stdev = 2097.865
[info]   CI (99.9%): [946520.636, 962676.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   674.405 ±(99.9%) 5.523 MB/sec [Average]
[info]   (min, avg, max) = (673.335, 674.405, 676.706), stdev = 1.434
[info]   CI (99.9%): [668.881, 679.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.723 ±(99.9%) 0.385 MB/sec [Average]
[info]   (min, avg, max) = (672.666, 672.723, 672.902), stdev = 0.100
[info]   CI (99.9%): [672.338, 673.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1109.233 ±(99.9%) 9.310 B/op [Average]
[info]   (min, avg, max) = (1105.391, 1109.233, 1111.038), stdev = 2.418
[info]   CI (99.9%): [1099.922, 1118.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.320 ±(99.9%) 11.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.320, 6.600), stdev = 2.951
[info]   CI (99.9%): [≈ 0, 12.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2153151.249 ops/s
[info] # Warmup Iteration   2: 2437568.990 ops/s
[info] # Warmup Iteration   3: 2472413.264 ops/s
[info] Iteration   1: 2456931.984 ops/s
[info]                  ·gc.alloc.rate:            1136.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 863.668 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2449909.400 ops/s
[info]                  ·gc.alloc.rate:                   1132.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        648.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.568 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 2377654.707 ops/s
[info]                  ·gc.alloc.rate:                                  1099.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       675.983 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2357632.830 ops/s
[info]                  ·gc.alloc.rate:                                  1090.409 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       681.695 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2381053.694 ops/s
[info]                  ·gc.alloc.rate:            1101.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 899.963 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2404636.523 ±(99.9%) 175172.180 ops/s [Average]
[info]   (min, avg, max) = (2357632.830, 2404636.523, 2456931.984), stdev = 45491.659
[info]   CI (99.9%): [2229464.343, 2579808.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1112.140 ±(99.9%) 80.703 MB/sec [Average]
[info]   (min, avg, max) = (1090.409, 1112.140, 1136.274), stdev = 20.958
[info]   CI (99.9%): [1031.437, 1192.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.275 ±(99.9%) 712.460 MB/sec [Average]
[info]   (min, avg, max) = (1009.598, 1152.275, 1361.624), stdev = 185.024
[info]   CI (99.9%): [439.814, 1864.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   754.012 ±(99.9%) 454.490 B/op [Average]
[info]   (min, avg, max) = (648.753, 754.012, 899.963), stdev = 118.030
[info]   CI (99.9%): [299.523, 1208.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.514 ±(99.9%) 4.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.568), stdev = 1.148
[info]   CI (99.9%): [≈ 0, 4.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.637
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.43% complete, ETA 01:14:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1837871.816 ops/s
[info] # Warmup Iteration   2: 1974981.905 ops/s
[info] # Warmup Iteration   3: 1928813.103 ops/s
[info] Iteration   1: 1973175.796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1973549.515 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1952521.894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1973125.213 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1974091.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1969292.710 ±(99.9%) 36131.063 ops/s [Average]
[info]   (min, avg, max) = (1952521.894, 1969292.710, 1974091.131), stdev = 9383.122
[info]   CI (99.9%): [1933161.647, 2005423.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.68% complete, ETA 01:14:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297322.358 ops/s
[info] # Warmup Iteration   2: 402935.790 ops/s
[info] # Warmup Iteration   3: 408162.619 ops/s
[info] Iteration   1: 405516.524 ops/s
[info]                  ·gc.alloc.rate:            474.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2611.125 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 408145.111 ops/s
[info]                  ·gc.alloc.rate:            477.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1297.189 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 406304.034 ops/s
[info]                  ·gc.alloc.rate:            475.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2606.132 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 414198.215 ops/s
[info]                  ·gc.alloc.rate:            484.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1278.263 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 410824.524 ops/s
[info]                  ·gc.alloc.rate:            480.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2577.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   408997.682 ±(99.9%) 13679.812 ops/s [Average]
[info]   (min, avg, max) = (405516.524, 408997.682, 414198.215), stdev = 3552.604
[info]   CI (99.9%): [395317.870, 422677.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   478.114 ±(99.9%) 15.774 MB/sec [Average]
[info]   (min, avg, max) = (474.127, 478.114, 484.148), stdev = 4.096
[info]   CI (99.9%): [462.340, 493.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.203 ±(99.9%) 709.651 MB/sec [Average]
[info]   (min, avg, max) = (336.296, 538.203, 672.880), stdev = 184.294
[info]   CI (99.9%): [≈ 0, 1247.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2074.036 ±(99.9%) 2764.551 B/op [Average]
[info]   (min, avg, max) = (1278.263, 2074.036, 2611.125), stdev = 717.945
[info]   CI (99.9%): [≈ 0, 4838.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.93% complete, ETA 01:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136649.413 ops/s
[info] # Warmup Iteration   2: 163154.227 ops/s
[info] # Warmup Iteration   3: 166657.077 ops/s
[info] Iteration   1: 168389.195 ops/s
[info]                  ·gc.alloc.rate:                                  2021.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.505 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19088.677 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 169595.785 ops/s
[info]                  ·gc.alloc.rate:                                  2035.694 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18953.409 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 168204.922 ops/s
[info]                  ·gc.alloc.rate:                                  2019.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19110.576 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 170066.784 ops/s
[info]                  ·gc.alloc.rate:                                  2041.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18901.370 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 169827.156 ops/s
[info]                  ·gc.alloc.rate:                                  2038.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18926.963 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   169216.768 ±(99.9%) 3305.428 ops/s [Average]
[info]   (min, avg, max) = (168204.922, 169216.768, 170066.784), stdev = 858.409
[info]   CI (99.9%): [165911.340, 172522.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2031.335 ±(99.9%) 40.132 MB/sec [Average]
[info]   (min, avg, max) = (2019.157, 2031.335, 2041.647), stdev = 10.422
[info]   CI (99.9%): [1991.203, 2071.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18896.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18896.002, 18896.002, 18896.003), stdev = 0.001
[info]   CI (99.9%): [18896.002, 18896.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.012, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.116 ±(99.9%) 0.839 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.116, 0.505), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.064 ±(99.9%) 0.825 MB/sec [Average]
[info]   (min, avg, max) = (2041.817, 2042.064, 2042.311), stdev = 0.214
[info]   CI (99.9%): [2041.239, 2042.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18996.199 ±(99.9%) 371.599 B/op [Average]
[info]   (min, avg, max) = (18901.370, 18996.199, 19110.576), stdev = 96.503
[info]   CI (99.9%): [18624.600, 19367.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.18% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225761.936 ops/s
[info] # Warmup Iteration   2: 357594.046 ops/s
[info] # Warmup Iteration   3: 359796.485 ops/s
[info] Iteration   1: 356042.787 ops/s
[info]                  ·gc.alloc.rate:            302.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1486.991 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 357328.728 ops/s
[info]                  ·gc.alloc.rate:            303.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1481.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 356619.754 ops/s
[info]                  ·gc.alloc.rate:            302.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1484.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 357461.000 ops/s
[info]                  ·gc.alloc.rate:            303.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1481.139 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 358982.569 ops/s
[info]                  ·gc.alloc.rate:      304.682 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   357286.968 ±(99.9%) 4261.992 ops/s [Average]
[info]   (min, avg, max) = (356042.787, 357286.968, 358982.569), stdev = 1106.826
[info]   CI (99.9%): [353024.975, 361548.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   303.277 ±(99.9%) 3.572 MB/sec [Average]
[info]   (min, avg, max) = (302.218, 303.277, 304.682), stdev = 0.928
[info]   CI (99.9%): [299.705, 306.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.114 ±(99.9%) 579.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.114, 336.420), stdev = 150.440
[info]   CI (99.9%): [≈ 0, 848.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1186.885 ±(99.9%) 2554.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1186.885, 1486.991), stdev = 663.493
[info]   CI (99.9%): [≈ 0, 3741.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.43% complete, ETA 01:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 796759.006 ops/s
[info] # Warmup Iteration   2: 840632.328 ops/s
[info] # Warmup Iteration   3: 820871.941 ops/s
[info] Iteration   1: 842445.644 ops/s
[info]                  ·gc.alloc.rate:      162.699 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 839836.651 ops/s
[info]                  ·gc.alloc.rate:            162.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 842742.466 ops/s
[info]                  ·gc.alloc.rate:      162.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 832862.784 ops/s
[info]                  ·gc.alloc.rate:            160.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 636.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 842218.534 ops/s
[info]                  ·gc.alloc.rate:      162.704 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   840021.216 ±(99.9%) 16037.882 ops/s [Average]
[info]   (min, avg, max) = (832862.784, 840021.216, 842742.466), stdev = 4164.987
[info]   CI (99.9%): [823983.333, 856059.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   162.237 ±(99.9%) 3.100 MB/sec [Average]
[info]   (min, avg, max) = (160.860, 162.237, 162.747), stdev = 0.805
[info]   CI (99.9%): [159.138, 165.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   134.804 ±(99.9%) 710.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.804, 337.040), stdev = 184.588
[info]   CI (99.9%): [≈ 0, 845.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   253.724 ±(99.9%) 1337.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 253.724, 636.954), stdev = 347.431
[info]   CI (99.9%): [≈ 0, 1591.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.68% complete, ETA 01:13:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41907.738 ops/s
[info] # Warmup Iteration   2: 73416.369 ops/s
[info] # Warmup Iteration   3: 75927.298 ops/s
[info] Iteration   1: 76551.421 ops/s
[info]                  ·gc.alloc.rate:                                  3260.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62982.761 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 75344.721 ops/s
[info]                  ·gc.alloc.rate:                                  3209.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71102.634 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 75483.827 ops/s
[info]                  ·gc.alloc.rate:                                  3215.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63874.553 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 76760.039 ops/s
[info]                  ·gc.alloc.rate:                                  3270.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69793.979 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 75663.140 ops/s
[info]                  ·gc.alloc.rate:                                  3223.022 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63725.154 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   75960.630 ±(99.9%) 2497.932 ops/s [Average]
[info]   (min, avg, max) = (75344.721, 75960.630, 76760.039), stdev = 648.705
[info]   CI (99.9%): [73462.698, 78458.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3235.707 ±(99.9%) 107.588 MB/sec [Average]
[info]   (min, avg, max) = (3209.066, 3235.707, 3270.797), stdev = 27.940
[info]   CI (99.9%): [3128.118, 3343.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67048.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67048.005, 67048.006, 67048.006), stdev = 0.001
[info]   CI (99.9%): [67048.005, 67048.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.014), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.187 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.187, 0.292), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3199.392 ±(99.9%) 719.026 MB/sec [Average]
[info]   (min, avg, max) = (3062.637, 3199.392, 3404.753), stdev = 186.729
[info]   CI (99.9%): [2480.366, 3918.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66295.816 ±(99.9%) 14762.310 B/op [Average]
[info]   (min, avg, max) = (62982.761, 66295.816, 71102.634), stdev = 3833.725
[info]   CI (99.9%): [51533.506, 81058.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.93% complete, ETA 01:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209294.617 ops/s
[info] # Warmup Iteration   2: 262686.973 ops/s
[info] # Warmup Iteration   3: 261236.035 ops/s
[info] Iteration   1: 265242.861 ops/s
[info]                  ·gc.alloc.rate:            1169.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8000.052 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 265393.583 ops/s
[info]                  ·gc.alloc.rate:                   1169.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5996.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 266343.881 ops/s
[info]                  ·gc.alloc.rate:                                  1173.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6936.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8045.682 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 267735.612 ops/s
[info]                  ·gc.alloc.rate:            1179.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6002.984 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 267980.400 ops/s
[info]                  ·gc.alloc.rate:            1180.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7996.483 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   266539.267 ±(99.9%) 4923.536 ops/s [Average]
[info]   (min, avg, max) = (265242.861, 266539.267, 267980.400), stdev = 1278.627
[info]   CI (99.9%): [261615.732, 271462.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1174.524 ±(99.9%) 21.381 MB/sec [Average]
[info]   (min, avg, max) = (1169.194, 1174.524, 1180.849), stdev = 5.552
[info]   CI (99.9%): [1153.143, 1195.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6936.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6936.002, 6936.002, 6936.002), stdev = 0.001
[info]   CI (99.9%): [6936.001, 6936.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.112 ±(99.9%) 0.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.559), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.656 ±(99.9%) 719.922 MB/sec [Average]
[info]   (min, avg, max) = (1010.945, 1220.656, 1361.395), stdev = 186.962
[info]   CI (99.9%): [500.733, 1940.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7208.402 ±(99.9%) 4248.735 B/op [Average]
[info]   (min, avg, max) = (5996.807, 7208.402, 8045.682), stdev = 1103.383
[info]   CI (99.9%): [2959.666, 11457.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.950 ±(99.9%) 34.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.950, 19.752), stdev = 8.834
[info]   CI (99.9%): [≈ 0, 37.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.17% complete, ETA 01:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1080003.557 ops/s
[info] # Warmup Iteration   2: 1645191.309 ops/s
[info] # Warmup Iteration   3: 1691145.806 ops/s
[info] Iteration   1: 1682107.460 ops/s
[info]                  ·gc.alloc.rate:            863.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 944.228 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1691742.424 ops/s
[info]                  ·gc.alloc.rate:            868.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 625.920 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1685643.283 ops/s
[info]                  ·gc.alloc.rate:            865.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 942.265 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 1688039.092 ops/s
[info]                  ·gc.alloc.rate:                                  866.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       948.413 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.727 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 1679797.870 ops/s
[info]                  ·gc.alloc.rate:                                  862.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       637.870 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1685466.026 ±(99.9%) 18209.640 ops/s [Average]
[info]   (min, avg, max) = (1679797.870, 1685466.026, 1691742.424), stdev = 4728.986
[info]   CI (99.9%): [1667256.386, 1703675.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   865.211 ±(99.9%) 9.457 MB/sec [Average]
[info]   (min, avg, max) = (862.316, 865.211, 868.384), stdev = 2.456
[info]   CI (99.9%): [855.753, 874.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.117), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.752 ±(99.9%) 706.850 MB/sec [Average]
[info]   (min, avg, max) = (672.696, 877.752, 1017.323), stdev = 183.567
[info]   CI (99.9%): [170.901, 1584.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   819.739 ±(99.9%) 660.554 B/op [Average]
[info]   (min, avg, max) = (625.920, 819.739, 948.413), stdev = 171.544
[info]   CI (99.9%): [159.185, 1480.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.745 ±(99.9%) 6.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.727), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.800, 12.000), stdev = 4.324
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.42% complete, ETA 01:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1998945.211 ops/s
[info] # Warmup Iteration   2: 2211326.825 ops/s
[info] # Warmup Iteration   3: 2200890.597 ops/s
[info] Iteration   1: 2130356.606 ops/s
[info]                  ·gc.alloc.rate:            573.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 249.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2235800.031 ops/s
[info]                  ·gc.alloc.rate:                   602.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        474.077 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2217415.113 ops/s
[info]                  ·gc.alloc.rate:            597.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2190192.455 ops/s
[info]                  ·gc.alloc.rate:            589.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 484.430 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2226386.702 ops/s
[info]                  ·gc.alloc.rate:            599.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 476.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2200030.181 ±(99.9%) 163681.495 ops/s [Average]
[info]   (min, avg, max) = (2130356.606, 2200030.181, 2235800.031), stdev = 42507.564
[info]   CI (99.9%): [2036348.687, 2363711.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   592.610 ±(99.9%) 44.218 MB/sec [Average]
[info]   (min, avg, max) = (573.773, 592.610, 602.268), stdev = 11.483
[info]   CI (99.9%): [548.392, 636.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.375 ±(99.9%) 579.902 MB/sec [Average]
[info]   (min, avg, max) = (336.977, 606.375, 674.085), stdev = 150.599
[info]   CI (99.9%): [26.473, 1186.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   432.415 ±(99.9%) 395.066 B/op [Average]
[info]   (min, avg, max) = (249.015, 432.415, 484.430), stdev = 102.597
[info]   CI (99.9%): [37.350, 827.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.094 ±(99.9%) 0.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.469), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.67% complete, ETA 01:12:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2255063.637 ops/s
[info] # Warmup Iteration   2: 2500112.263 ops/s
[info] # Warmup Iteration   3: 2508774.947 ops/s
[info] Iteration   1: 2508661.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2508749.898 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2509760.087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2509437.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2508846.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2509091.262 ±(99.9%) 1855.176 ops/s [Average]
[info]   (min, avg, max) = (2508661.608, 2509091.262, 2509760.087), stdev = 481.783
[info]   CI (99.9%): [2507236.086, 2510946.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.92% complete, ETA 01:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25013.666 ops/s
[info] # Warmup Iteration   2: 37504.951 ops/s
[info] # Warmup Iteration   3: 38098.240 ops/s
[info] Iteration   1: 38636.097 ops/s
[info]                  ·gc.alloc.rate:                                  1634.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66612.114 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68678.567 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                162.810 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 39197.168 ops/s
[info]                  ·gc.alloc.rate:                                  1658.631 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68337.712 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 38920.972 ops/s
[info]                  ·gc.alloc.rate:                                  1647.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68822.228 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38469.138 ops/s
[info]                  ·gc.alloc.rate:                                  1627.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69634.342 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 39191.032 ops/s
[info]                  ·gc.alloc.rate:            1658.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       66608.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68346.429 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38882.882 ±(99.9%) 1258.503 ops/s [Average]
[info]   (min, avg, max) = (38469.138, 38882.882, 39197.168), stdev = 326.829
[info]   CI (99.9%): [37624.378, 40141.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1645.556 ±(99.9%) 53.981 MB/sec [Average]
[info]   (min, avg, max) = (1627.796, 1645.556, 1658.979), stdev = 14.019
[info]   CI (99.9%): [1591.575, 1699.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66608.831 ±(99.9%) 7.066 B/op [Average]
[info]   (min, avg, max) = (66608.010, 66608.831, 66612.114), stdev = 1.835
[info]   CI (99.9%): [66601.765, 66615.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.096), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.509 ±(99.9%) 7.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.509, 3.866), stdev = 1.994
[info]   CI (99.9%): [≈ 0, 9.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.719 ±(99.9%) 28.426 MB/sec [Average]
[info]   (min, avg, max) = (1685.524, 1698.719, 1702.337), stdev = 7.382
[info]   CI (99.9%): [1670.293, 1727.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68763.856 ±(99.9%) 2041.451 B/op [Average]
[info]   (min, avg, max) = (68337.712, 68763.856, 69634.342), stdev = 530.158
[info]   CI (99.9%): [66722.405, 70805.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.562 ±(99.9%) 280.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.562, 162.810), stdev = 72.811
[info]   CI (99.9%): [≈ 0, 312.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 16.000), stdev = 5.367
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.17% complete, ETA 01:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194057.568 ops/s
[info] # Warmup Iteration   2: 237660.326 ops/s
[info] # Warmup Iteration   3: 239532.554 ops/s
[info] Iteration   1: 239289.015 ops/s
[info]                  ·gc.alloc.rate:                                  2459.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15671.902 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 237422.383 ops/s
[info]                  ·gc.alloc.rate:                                  2440.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15795.252 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 239684.544 ops/s
[info]                  ·gc.alloc.rate:                                  2463.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17881.457 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 239782.408 ops/s
[info]                  ·gc.alloc.rate:                                  2464.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15640.207 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 241351.953 ops/s
[info]                  ·gc.alloc.rate:                                  2480.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15537.902 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   239506.061 ±(99.9%) 5412.985 ops/s [Average]
[info]   (min, avg, max) = (237422.383, 239506.061, 241351.953), stdev = 1405.735
[info]   CI (99.9%): [234093.076, 244919.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2461.555 ±(99.9%) 56.339 MB/sec [Average]
[info]   (min, avg, max) = (2440.049, 2461.555, 2480.972), stdev = 14.631
[info]   CI (99.9%): [2405.216, 2517.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16176.002, 16176.002, 16176.002), stdev = 0.001
[info]   CI (99.9%): [16176.001, 16176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.009, 0.014), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.062, 0.094), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.793 ±(99.9%) 586.675 MB/sec [Average]
[info]   (min, avg, max) = (2382.439, 2450.793, 2723.338), stdev = 152.358
[info]   CI (99.9%): [1864.117, 3037.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16105.344 ±(99.9%) 3839.533 B/op [Average]
[info]   (min, avg, max) = (15537.902, 16105.344, 17881.457), stdev = 997.114
[info]   CI (99.9%): [12265.811, 19944.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.42% complete, ETA 01:11:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189168.129 ops/s
[info] # Warmup Iteration   2: 295557.971 ops/s
[info] # Warmup Iteration   3: 290912.601 ops/s
[info] Iteration   1: 289951.501 ops/s
[info]                  ·gc.alloc.rate:                   1402.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              7616.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7303.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 295508.412 ops/s
[info]                  ·gc.alloc.rate:                                  1429.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.797 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7251.597 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 299277.756 ops/s
[info]                  ·gc.alloc.rate:            1448.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7160.337 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 299019.053 ops/s
[info]                  ·gc.alloc.rate:            1447.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8958.292 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 297321.639 ops/s
[info]                  ·gc.alloc.rate:            1438.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7207.653 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   296215.672 ±(99.9%) 14687.887 ops/s [Average]
[info]   (min, avg, max) = (289951.501, 296215.672, 299277.756), stdev = 3814.398
[info]   CI (99.9%): [281527.785, 310903.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1433.420 ±(99.9%) 71.996 MB/sec [Average]
[info]   (min, avg, max) = (1402.802, 1433.420, 1448.408), stdev = 18.697
[info]   CI (99.9%): [1361.424, 1505.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.002), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 1.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.797), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1426.495 ±(99.9%) 594.567 MB/sec [Average]
[info]   (min, avg, max) = (1345.301, 1426.495, 1702.419), stdev = 154.407
[info]   CI (99.9%): [831.928, 2021.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7576.341 ±(99.9%) 2981.766 B/op [Average]
[info]   (min, avg, max) = (7160.337, 7576.341, 8958.292), stdev = 774.355
[info]   CI (99.9%): [4594.575, 10558.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.339 ±(99.9%) 37.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.339, 21.695), stdev = 9.702
[info]   CI (99.9%): [≈ 0, 41.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 17.000), stdev = 6.058
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:11:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1134335.202 ops/s
[info] # Warmup Iteration   2: 1219985.616 ops/s
[info] # Warmup Iteration   3: 1220656.159 ops/s
[info] Iteration   1: 1260737.200 ops/s
[info]                  ·gc.alloc.rate:            435.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 841.554 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1272128.845 ops/s
[info]                  ·gc.alloc.rate:            439.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 1272540.296 ops/s
[info]                  ·gc.alloc.rate:            439.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 416.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1269716.927 ops/s
[info]                  ·gc.alloc.rate:            438.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.804 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1262518.535 ops/s
[info]                  ·gc.alloc.rate:            436.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 840.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1267528.361 ±(99.9%) 21291.309 ops/s [Average]
[info]   (min, avg, max) = (1260737.200, 1267528.361, 1272540.296), stdev = 5529.285
[info]   CI (99.9%): [1246237.052, 1288819.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   438.101 ±(99.9%) 7.520 MB/sec [Average]
[info]   (min, avg, max) = (435.660, 438.101, 439.852), stdev = 1.953
[info]   CI (99.9%): [430.582, 445.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.850 ±(99.9%) 710.610 MB/sec [Average]
[info]   (min, avg, max) = (337.015, 471.850, 674.059), stdev = 184.543
[info]   CI (99.9%): [≈ 0, 1182.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   586.717 ±(99.9%) 893.660 B/op [Average]
[info]   (min, avg, max) = (416.879, 586.717, 841.554), stdev = 232.081
[info]   CI (99.9%): [≈ 0, 1480.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.92% complete, ETA 01:11:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31381.871 ops/s
[info] # Warmup Iteration   2: 69819.883 ops/s
[info] # Warmup Iteration   3: 70104.968 ops/s
[info] Iteration   1: 72195.145 ops/s
[info]                  ·gc.alloc.rate:                                  3033.793 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66785.783 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 72385.734 ops/s
[info]                  ·gc.alloc.rate:                                  3041.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66609.589 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 73074.235 ops/s
[info]                  ·gc.alloc.rate:                                  3070.145 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65982.555 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 72518.248 ops/s
[info]                  ·gc.alloc.rate:                                  3047.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66487.447 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 72412.770 ops/s
[info]                  ·gc.alloc.rate:                                  3042.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66128.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66582.918 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   72517.227 ±(99.9%) 1280.299 ops/s [Average]
[info]   (min, avg, max) = (72195.145, 72517.227, 73074.235), stdev = 332.490
[info]   CI (99.9%): [71236.927, 73797.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3047.033 ±(99.9%) 53.124 MB/sec [Average]
[info]   (min, avg, max) = (3033.793, 3047.033, 3070.145), stdev = 13.796
[info]   CI (99.9%): [2993.909, 3100.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66128.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66128.006, 66128.006, 66128.006), stdev = 0.001
[info]   CI (99.9%): [66128.005, 66128.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.002
[info]   CI (99.9%): [0.001, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.188 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.188, 0.260), stdev = 0.045
[info]   CI (99.9%): [0.015, 0.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.647 ±(99.9%) 1.140 MB/sec [Average]
[info]   (min, avg, max) = (3063.291, 3063.647, 3063.970), stdev = 0.296
[info]   CI (99.9%): [3062.507, 3064.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66489.658 ±(99.9%) 1167.846 B/op [Average]
[info]   (min, avg, max) = (65982.555, 66489.658, 66785.783), stdev = 303.286
[info]   CI (99.9%): [65321.813, 67657.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.16% complete, ETA 01:11:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160088.222 ops/s
[info] # Warmup Iteration   2: 209510.797 ops/s
[info] # Warmup Iteration   3: 210725.527 ops/s
[info] Iteration   1: 212714.625 ops/s
[info]                  ·gc.alloc.rate:                                  1805.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.817 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15062.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.644 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 214492.457 ops/s
[info]                  ·gc.alloc.rate:            1820.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12488.459 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 212378.176 ops/s
[info]                  ·gc.alloc.rate:                                  1802.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12612.511 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 213634.673 ops/s
[info]                  ·gc.alloc.rate:            1813.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15046.399 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 214545.100 ops/s
[info]                  ·gc.alloc.rate:            1820.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12485.316 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   213553.006 ±(99.9%) 3829.697 ops/s [Average]
[info]   (min, avg, max) = (212378.176, 213553.006, 214545.100), stdev = 994.560
[info]   CI (99.9%): [209723.309, 217382.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1812.596 ±(99.9%) 32.681 MB/sec [Average]
[info]   (min, avg, max) = (1802.665, 1812.596, 1820.974), stdev = 8.487
[info]   CI (99.9%): [1779.915, 1845.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13360.002, 13360.002, 13360.002), stdev = 0.001
[info]   CI (99.9%): [13360.002, 13360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.110), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.171 ±(99.9%) 1.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.817), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1836.605 ±(99.9%) 710.620 MB/sec [Average]
[info]   (min, avg, max) = (1701.541, 1836.605, 2042.126), stdev = 184.546
[info]   CI (99.9%): [1125.984, 2547.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13538.973 ±(99.9%) 5330.254 B/op [Average]
[info]   (min, avg, max) = (12485.316, 13538.973, 15062.178), stdev = 1384.250
[info]   CI (99.9%): [8208.719, 18869.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.929 ±(99.9%) 42.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.929, 24.644), stdev = 11.021
[info]   CI (99.9%): [≈ 0, 47.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 681100.146 ops/s
[info] # Warmup Iteration   2: 1163806.649 ops/s
[info] # Warmup Iteration   3: 1152551.165 ops/s
[info] Iteration   1: 1176166.675 ops/s
[info]                  ·gc.alloc.rate:            687.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 900.287 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1143743.449 ops/s
[info]                  ·gc.alloc.rate:            668.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 925.811 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1173021.179 ops/s
[info]                  ·gc.alloc.rate:            685.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 902.705 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1168228.370 ops/s
[info]                  ·gc.alloc.rate:            682.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 906.403 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1166731.168 ops/s
[info]                  ·gc.alloc.rate:                   681.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        907.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1165578.168 ±(99.9%) 49185.205 ops/s [Average]
[info]   (min, avg, max) = (1143743.449, 1165578.168, 1176166.675), stdev = 12773.242
[info]   CI (99.9%): [1116392.963, 1214763.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   681.305 ±(99.9%) 29.040 MB/sec [Average]
[info]   (min, avg, max) = (668.440, 681.305, 687.594), stdev = 7.542
[info]   CI (99.9%): [652.264, 710.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.758 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (672.662, 672.758, 672.864), stdev = 0.097
[info]   CI (99.9%): [672.385, 673.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   908.549 ±(99.9%) 38.794 B/op [Average]
[info]   (min, avg, max) = (900.287, 908.549, 925.811), stdev = 10.075
[info]   CI (99.9%): [869.755, 947.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.078 ±(99.9%) 9.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.078, 5.391), stdev = 2.411
[info]   CI (99.9%): [≈ 0, 10.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.66% complete, ETA 01:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2672609.924 ops/s
[info] # Warmup Iteration   2: 2966342.899 ops/s
[info] # Warmup Iteration   3: 3055080.308 ops/s
[info] Iteration   1: 3012566.252 ops/s
[info]                  ·gc.alloc.rate:                   1025.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        527.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2966392.287 ops/s
[info]                  ·gc.alloc.rate:                   1010.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        535.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.353 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 3014044.754 ops/s
[info]                  ·gc.alloc.rate:                                  1026.311 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       529.413 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.087 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 3020618.537 ops/s
[info]                  ·gc.alloc.rate:                                  1028.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       532.080 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3017334.161 ops/s
[info]                  ·gc.alloc.rate:            1027.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 710.216 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3006191.198 ±(99.9%) 86502.183 ops/s [Average]
[info]   (min, avg, max) = (2966392.287, 3006191.198, 3020618.537), stdev = 22464.342
[info]   CI (99.9%): [2919689.015, 3092693.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1023.714 ±(99.9%) 28.766 MB/sec [Average]
[info]   (min, avg, max) = (1010.490, 1023.714, 1028.553), stdev = 7.470
[info]   CI (99.9%): [994.948, 1052.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.193 ±(99.9%) 599.145 MB/sec [Average]
[info]   (min, avg, max) = (1009.702, 1083.193, 1361.414), stdev = 155.596
[info]   CI (99.9%): [484.048, 1682.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   567.025 ±(99.9%) 308.457 B/op [Average]
[info]   (min, avg, max) = (527.611, 567.025, 710.216), stdev = 80.105
[info]   CI (99.9%): [258.568, 875.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.558 ±(99.9%) 3.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.087), stdev = 0.873
[info]   CI (99.9%): [≈ 0, 3.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 9.000), stdev = 3.033
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 17.91% complete, ETA 01:10:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3004777.127 ops/s
[info] # Warmup Iteration   2: 3334945.758 ops/s
[info] # Warmup Iteration   3: 3268278.076 ops/s
[info] Iteration   1: 3283792.562 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3290509.059 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3289449.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3289872.342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3284676.008 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3287659.847 ±(99.9%) 12188.116 ops/s [Average]
[info]   (min, avg, max) = (3283792.562, 3287659.847, 3290509.059), stdev = 3165.215
[info]   CI (99.9%): [3275471.731, 3299847.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.16% complete, ETA 01:10:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148599.736 ops/s
[info] # Warmup Iteration   2: 251083.387 ops/s
[info] # Warmup Iteration   3: 256883.077 ops/s
[info] Iteration   1: 264696.657 ops/s
[info]                  ·gc.alloc.rate:                                  2163.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12144.292 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 261058.399 ops/s
[info]                  ·gc.alloc.rate:            2133.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       12864.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12313.556 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 264077.396 ops/s
[info]                  ·gc.alloc.rate:                                  2158.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14198.321 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 264606.319 ops/s
[info]                  ·gc.alloc.rate:                                  2162.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12148.100 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 262135.815 ops/s
[info]                  ·gc.alloc.rate:            2143.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       12864.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12262.597 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   263314.917 ±(99.9%) 6280.344 ops/s [Average]
[info]   (min, avg, max) = (261058.399, 263314.917, 264696.657), stdev = 1630.985
[info]   CI (99.9%): [257034.573, 269595.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2152.135 ±(99.9%) 49.956 MB/sec [Average]
[info]   (min, avg, max) = (2133.905, 2152.135, 2163.019), stdev = 12.973
[info]   CI (99.9%): [2102.179, 2202.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.002, 12864.002, 12864.002), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.145), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.180 ±(99.9%) 1.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.865), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 1.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2110.337 ±(99.9%) 585.098 MB/sec [Average]
[info]   (min, avg, max) = (2041.988, 2110.337, 2382.149), stdev = 151.948
[info]   CI (99.9%): [1525.239, 2695.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12613.373 ±(99.9%) 3423.346 B/op [Average]
[info]   (min, avg, max) = (12144.292, 12613.373, 14198.321), stdev = 889.032
[info]   CI (99.9%): [9190.028, 16036.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.41% complete, ETA 01:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18507.107 ops/s
[info] # Warmup Iteration   2: 25089.953 ops/s
[info] # Warmup Iteration   3: 25572.729 ops/s
[info] Iteration   1: 25362.228 ops/s
[info]                  ·gc.alloc.rate:                   1484.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              92168.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83664.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 206.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 25883.451 ops/s
[info]                  ·gc.alloc.rate:                                  1515.379 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92154.580 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.512 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82787.645 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 25971.989 ops/s
[info]                  ·gc.alloc.rate:                                  1520.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92136.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103130.021 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 25950.920 ops/s
[info]                  ·gc.alloc.rate:                                  1519.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92136.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82573.946 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25668.704 ops/s
[info]                  ·gc.alloc.rate:                                  1502.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92136.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104355.225 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25767.458 ±(99.9%) 987.202 ops/s [Average]
[info]   (min, avg, max) = (25362.228, 25767.458, 25971.989), stdev = 256.373
[info]   CI (99.9%): [24780.256, 26754.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1508.498 ±(99.9%) 57.542 MB/sec [Average]
[info]   (min, avg, max) = (1484.906, 1508.498, 1520.337), stdev = 14.943
[info]   CI (99.9%): [1450.956, 1566.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92146.129 ±(99.9%) 56.373 B/op [Average]
[info]   (min, avg, max) = (92136.016, 92146.129, 92168.017), stdev = 14.640
[info]   CI (99.9%): [92089.756, 92202.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.091), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.610 ±(99.9%) 8.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.610, 5.512), stdev = 2.232
[info]   CI (99.9%): [≈ 0, 10.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.898 ±(99.9%) 727.746 MB/sec [Average]
[info]   (min, avg, max) = (1347.907, 1494.898, 1701.934), stdev = 188.993
[info]   CI (99.9%): [767.152, 2222.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91302.271 ±(99.9%) 43789.671 B/op [Average]
[info]   (min, avg, max) = (82573.946, 91302.271, 104355.225), stdev = 11372.039
[info]   CI (99.9%): [47512.600, 135091.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.336 ±(99.9%) 355.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.336, 206.681), stdev = 92.431
[info]   CI (99.9%): [≈ 0, 397.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 18.66% complete, ETA 01:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2644.654 ops/s
[info] # Warmup Iteration   2: 91286.937 ops/s
[info] # Warmup Iteration   3: 93455.022 ops/s
[info] Iteration   1: 93524.050 ops/s
[info]                  ·gc.alloc.rate:                   842.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11221.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 93988.382 ops/s
[info]                  ·gc.alloc.rate:            846.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16764.991 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 92429.771 ops/s
[info]                  ·gc.alloc.rate:                   832.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11354.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 93307.105 ops/s
[info]                  ·gc.alloc.rate:                   840.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16887.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 67.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 93063.797 ops/s
[info]                  ·gc.alloc.rate:                                  838.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.474 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11467.357 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.058 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   93262.621 ±(99.9%) 2220.576 ops/s [Average]
[info]   (min, avg, max) = (92429.771, 93262.621, 93988.382), stdev = 576.677
[info]   CI (99.9%): [91042.045, 95483.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   840.021 ±(99.9%) 19.568 MB/sec [Average]
[info]   (min, avg, max) = (832.716, 840.021, 846.441), stdev = 5.082
[info]   CI (99.9%): [820.453, 859.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.005, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.095 ±(99.9%) 0.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.474), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.602 ±(99.9%) 13.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.602, 8.010), stdev = 3.582
[info]   CI (99.9%): [≈ 0, 15.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   802.796 ±(99.9%) 697.452 MB/sec [Average]
[info]   (min, avg, max) = (666.722, 802.796, 1001.267), stdev = 181.126
[info]   CI (99.9%): [105.344, 1500.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13539.005 ±(99.9%) 11560.542 B/op [Average]
[info]   (min, avg, max) = (11221.491, 13539.005, 16887.145), stdev = 3002.236
[info]   CI (99.9%): [1978.464, 25099.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 8.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   27.005 ±(99.9%) 108.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.005, 67.414), stdev = 28.208
[info]   CI (99.9%): [≈ 0, 135.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.200, 15.000), stdev = 3.962
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.91% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34218.435 ops/s
[info] # Warmup Iteration   2: 58385.114 ops/s
[info] # Warmup Iteration   3: 57007.714 ops/s
[info] Iteration   1: 58510.772 ops/s
[info]                  ·gc.alloc.rate:                   966.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27127.767 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.918 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 59118.090 ops/s
[info]                  ·gc.alloc.rate:            976.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26867.011 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 59207.121 ops/s
[info]                  ·gc.alloc.rate:                                  978.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.716 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26932.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                106.244 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 59866.178 ops/s
[info]                  ·gc.alloc.rate:                                  989.455 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17896.239 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 59837.187 ops/s
[info]                  ·gc.alloc.rate:            988.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26859.160 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59307.870 ±(99.9%) 2172.643 ops/s [Average]
[info]   (min, avg, max) = (58510.772, 59307.870, 59866.178), stdev = 564.229
[info]   CI (99.9%): [57135.226, 61480.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   979.969 ±(99.9%) 36.333 MB/sec [Average]
[info]   (min, avg, max) = (966.690, 979.969, 989.455), stdev = 9.435
[info]   CI (99.9%): [943.636, 1016.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.819 ±(99.9%) 4.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.819, 2.716), stdev = 1.217
[info]   CI (99.9%): [≈ 0, 5.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.453 ±(99.9%) 572.064 MB/sec [Average]
[info]   (min, avg, max) = (680.849, 946.453, 1021.074), stdev = 148.563
[info]   CI (99.9%): [374.388, 1518.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25136.611 ±(99.9%) 15591.033 B/op [Average]
[info]   (min, avg, max) = (17896.239, 25136.611, 27127.767), stdev = 4048.942
[info]   CI (99.9%): [9545.577, 40727.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.832 ±(99.9%) 177.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.832, 106.244), stdev = 46.167
[info]   CI (99.9%): [≈ 0, 202.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.404
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.15% complete, ETA 01:09:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65526.321 ops/s
[info] # Warmup Iteration   2: 71936.678 ops/s
[info] # Warmup Iteration   3: 71851.067 ops/s
[info] Iteration   1: 72110.865 ops/s
[info]                  ·gc.alloc.rate:            464.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7356.592 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 72206.775 ops/s
[info]                  ·gc.alloc.rate:            465.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7346.813 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 72038.190 ops/s
[info]                  ·gc.alloc.rate:            464.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14728.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 72118.545 ops/s
[info]                  ·gc.alloc.rate:            464.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7355.776 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 72129.508 ops/s
[info]                  ·gc.alloc.rate:            464.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7354.654 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   72120.777 ±(99.9%) 231.003 ops/s [Average]
[info]   (min, avg, max) = (72038.190, 72120.777, 72206.775), stdev = 59.991
[info]   CI (99.9%): [71889.773, 72351.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   464.779 ±(99.9%) 1.506 MB/sec [Average]
[info]   (min, avg, max) = (464.191, 464.779, 465.292), stdev = 0.391
[info]   CI (99.9%): [463.273, 466.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.006, 10144.006, 10144.006), stdev = 0.001
[info]   CI (99.9%): [10144.005, 10144.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.414 ±(99.9%) 580.216 MB/sec [Average]
[info]   (min, avg, max) = (336.989, 404.414, 673.959), stdev = 150.680
[info]   CI (99.9%): [≈ 0, 984.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   8828.385 ±(99.9%) 12699.570 B/op [Average]
[info]   (min, avg, max) = (7346.813, 8828.385, 14728.090), stdev = 3298.038
[info]   CI (99.9%): [≈ 0, 21527.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.40% complete, ETA 01:09:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13894.256 ops/s
[info] # Warmup Iteration   2: 31563.047 ops/s
[info] # Warmup Iteration   3: 32203.547 ops/s
[info] Iteration   1: 32382.305 ops/s
[info]                  ·gc.alloc.rate:                                  1691.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82139.047 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                194.259 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 32405.784 ops/s
[info]                  ·gc.alloc.rate:                                  1692.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.562 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82660.568 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 32433.462 ops/s
[info]                  ·gc.alloc.rate:                                  1694.061 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.573 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82589.219 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 32458.300 ops/s
[info]                  ·gc.alloc.rate:                                  1695.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82525.619 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 32480.999 ops/s
[info]                  ·gc.alloc.rate:                                  1696.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82467.192 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   32432.170 ±(99.9%) 152.228 ops/s [Average]
[info]   (min, avg, max) = (32382.305, 32432.170, 32480.999), stdev = 39.533
[info]   CI (99.9%): [32279.942, 32584.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1693.895 ±(99.9%) 8.170 MB/sec [Average]
[info]   (min, avg, max) = (1691.222, 1693.895, 1696.493), stdev = 2.122
[info]   CI (99.9%): [1685.725, 1702.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.014 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (82216.013, 82216.014, 82216.017), stdev = 0.002
[info]   CI (99.9%): [82216.007, 82216.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.030, 0.105), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.449 ±(99.9%) 7.903 B/op [Average]
[info]   (min, avg, max) = (0.302, 1.449, 5.112), stdev = 2.052
[info]   CI (99.9%): [≈ 0, 9.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.260 ±(99.9%) 20.712 MB/sec [Average]
[info]   (min, avg, max) = (1689.639, 1699.260, 1701.751), stdev = 5.379
[info]   CI (99.9%): [1678.548, 1719.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82476.329 ±(99.9%) 777.221 B/op [Average]
[info]   (min, avg, max) = (82139.047, 82476.329, 82660.568), stdev = 201.842
[info]   CI (99.9%): [81699.108, 83253.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.852 ±(99.9%) 334.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.852, 194.259), stdev = 86.875
[info]   CI (99.9%): [≈ 0, 373.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.278
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.65% complete, ETA 01:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27234.092 ops/s
[info] # Warmup Iteration   2: 38194.500 ops/s
[info] # Warmup Iteration   3: 38949.731 ops/s
[info] Iteration   1: 39042.371 ops/s
[info]                  ·gc.alloc.rate:            437.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       17630.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13587.530 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 38664.221 ops/s
[info]                  ·gc.alloc.rate:            433.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27440.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 38963.807 ops/s
[info]                  ·gc.alloc.rate:            436.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13614.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 39110.219 ops/s
[info]                  ·gc.alloc.rate:            438.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13564.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 39021.844 ops/s
[info]                  ·gc.alloc.rate:            437.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27188.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38960.492 ±(99.9%) 668.821 ops/s [Average]
[info]   (min, avg, max) = (38664.221, 38960.492, 39110.219), stdev = 173.691
[info]   CI (99.9%): [38291.672, 39629.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   436.417 ±(99.9%) 7.496 MB/sec [Average]
[info]   (min, avg, max) = (433.092, 436.417, 438.075), stdev = 1.947
[info]   CI (99.9%): [428.921, 443.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17631.801 ±(99.9%) 1.805 B/op [Average]
[info]   (min, avg, max) = (17630.963, 17631.801, 17632.011), stdev = 0.469
[info]   CI (99.9%): [17629.996, 17633.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.826 ±(99.9%) 710.796 MB/sec [Average]
[info]   (min, avg, max) = (337.010, 471.826, 674.051), stdev = 184.592
[info]   CI (99.9%): [≈ 0, 1182.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19079.098 ±(99.9%) 28950.682 B/op [Average]
[info]   (min, avg, max) = (13564.256, 19079.098, 27440.690), stdev = 7518.400
[info]   CI (99.9%): [≈ 0, 48029.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.90% complete, ETA 01:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23084.102 ops/s
[info] # Warmup Iteration   2: 40262.871 ops/s
[info] # Warmup Iteration   3: 39768.796 ops/s
[info] Iteration   1: 39789.831 ops/s
[info]                  ·gc.alloc.rate:            359.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13305.465 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 40019.527 ops/s
[info]                  ·gc.alloc.rate:            361.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13229.342 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 40377.431 ops/s
[info]                  ·gc.alloc.rate:            364.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26224.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 40409.267 ops/s
[info]                  ·gc.alloc.rate:            364.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13102.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 40558.826 ops/s
[info]                  ·gc.alloc.rate:            366.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13053.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40230.976 ±(99.9%) 1217.745 ops/s [Average]
[info]   (min, avg, max) = (39789.831, 40230.976, 40558.826), stdev = 316.245
[info]   CI (99.9%): [39013.231, 41448.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   363.356 ±(99.9%) 11.097 MB/sec [Average]
[info]   (min, avg, max) = (359.362, 363.356, 366.381), stdev = 2.882
[info]   CI (99.9%): [352.259, 374.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.631 ±(99.9%) 579.150 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 403.631, 672.680), stdev = 150.404
[info]   CI (99.9%): [≈ 0, 982.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15782.968 ±(99.9%) 22478.697 B/op [Average]
[info]   (min, avg, max) = (13053.886, 15782.968, 26224.137), stdev = 5837.646
[info]   CI (99.9%): [≈ 0, 38261.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.15% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35590.279 ops/s
[info] # Warmup Iteration   2: 42315.078 ops/s
[info] # Warmup Iteration   3: 44306.727 ops/s
[info] Iteration   1: 44491.020 ops/s
[info]                  ·gc.alloc.rate:            390.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11900.373 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44613.764 ops/s
[info]                  ·gc.alloc.rate:            392.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11867.036 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44608.802 ops/s
[info]                  ·gc.alloc.rate:                   392.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11868.632 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 44699.807 ops/s
[info]                  ·gc.alloc.rate:            392.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11867.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44379.944 ops/s
[info]                  ·gc.alloc.rate:                   390.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23883.352 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44558.667 ±(99.9%) 479.354 ops/s [Average]
[info]   (min, avg, max) = (44379.944, 44558.667, 44699.807), stdev = 124.487
[info]   CI (99.9%): [44079.313, 45038.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   391.582 ±(99.9%) 4.272 MB/sec [Average]
[info]   (min, avg, max) = (390.027, 391.582, 392.882), stdev = 1.109
[info]   CI (99.9%): [387.310, 395.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.921 ±(99.9%) 580.180 MB/sec [Average]
[info]   (min, avg, max) = (336.335, 403.921, 673.448), stdev = 150.671
[info]   CI (99.9%): [≈ 0, 984.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14277.411 ±(99.9%) 20677.583 B/op [Average]
[info]   (min, avg, max) = (11867.036, 14277.411, 23883.352), stdev = 5369.903
[info]   CI (99.9%): [≈ 0, 34954.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.425 ±(99.9%) 49.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.425, 23.623), stdev = 12.906
[info]   CI (99.9%): [≈ 0, 59.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.40% complete, ETA 01:08:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36842.028 ops/s
[info] # Warmup Iteration   2: 43510.331 ops/s
[info] # Warmup Iteration   3: 43145.839 ops/s
[info] Iteration   1: 44457.754 ops/s
[info]                  ·gc.alloc.rate:            339.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11932.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 43205.666 ops/s
[info]                  ·gc.alloc.rate:            330.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12253.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44397.594 ops/s
[info]                  ·gc.alloc.rate:            339.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11924.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 44482.388 ops/s
[info]                  ·gc.alloc.rate:            340.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11901.977 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44553.206 ops/s
[info]                  ·gc.alloc.rate:            340.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11883.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44219.322 ±(99.9%) 2192.510 ops/s [Average]
[info]   (min, avg, max) = (43205.666, 44219.322, 44553.206), stdev = 569.388
[info]   CI (99.9%): [42026.811, 46411.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   338.001 ±(99.9%) 16.743 MB/sec [Average]
[info]   (min, avg, max) = (330.256, 338.001, 340.531), stdev = 4.348
[info]   CI (99.9%): [321.258, 354.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.010), stdev = 0.001
[info]   CI (99.9%): [12032.008, 12032.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.474 ±(99.9%) 1.053 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 336.474, 336.960), stdev = 0.273
[info]   CI (99.9%): [335.421, 337.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   11979.248 ±(99.9%) 596.015 B/op [Average]
[info]   (min, avg, max) = (11883.281, 11979.248, 12253.972), stdev = 154.783
[info]   CI (99.9%): [11383.233, 12575.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.65% complete, ETA 01:08:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15448.696 ops/s
[info] # Warmup Iteration   2: 19119.690 ops/s
[info] # Warmup Iteration   3: 19586.740 ops/s
[info] Iteration   1: 19559.405 ops/s
[info]                  ·gc.alloc.rate:                   733.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54296.759 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 19603.894 ops/s
[info]                  ·gc.alloc.rate:            735.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       59016.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54225.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19589.426 ops/s
[info]                  ·gc.alloc.rate:            734.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       59016.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54267.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 19718.925 ops/s
[info]                  ·gc.alloc.rate:                   739.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53856.284 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 19513.980 ops/s
[info]                  ·gc.alloc.rate:                   731.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54421.943 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 268.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19597.126 ±(99.9%) 293.737 ops/s [Average]
[info]   (min, avg, max) = (19513.980, 19597.126, 19718.925), stdev = 76.283
[info]   CI (99.9%): [19303.389, 19890.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   734.854 ±(99.9%) 11.133 MB/sec [Average]
[info]   (min, avg, max) = (731.587, 734.854, 739.332), stdev = 2.891
[info]   CI (99.9%): [723.721, 745.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59016.023 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (59016.021, 59016.023, 59016.026), stdev = 0.002
[info]   CI (99.9%): [59016.015, 59016.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   675.046 ±(99.9%) 2.033 MB/sec [Average]
[info]   (min, avg, max) = (674.637, 675.046, 675.662), stdev = 0.528
[info]   CI (99.9%): [673.013, 677.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54213.550 ±(99.9%) 819.129 B/op [Average]
[info]   (min, avg, max) = (53856.284, 54213.550, 54421.943), stdev = 212.725
[info]   CI (99.9%): [53394.421, 55032.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   75.077 ±(99.9%) 429.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.077, 268.618), stdev = 111.437
[info]   CI (99.9%): [≈ 0, 504.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.90% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10878.619 ops/s
[info] # Warmup Iteration   2: 17784.226 ops/s
[info] # Warmup Iteration   3: 17983.518 ops/s
[info] Iteration   1: 18540.367 ops/s
[info]                  ·gc.alloc.rate:            526.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       44655.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57110.751 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 18375.215 ops/s
[info]                  ·gc.alloc.rate:            521.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57623.470 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18431.284 ops/s
[info]                  ·gc.alloc.rate:            523.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28724.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18511.124 ops/s
[info]                  ·gc.alloc.rate:            525.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57197.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 18504.282 ops/s
[info]                  ·gc.alloc.rate:            525.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28610.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18472.454 ±(99.9%) 260.246 ops/s [Average]
[info]   (min, avg, max) = (18375.215, 18472.454, 18540.367), stdev = 67.585
[info]   CI (99.9%): [18212.209, 18732.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   524.357 ±(99.9%) 7.449 MB/sec [Average]
[info]   (min, avg, max) = (521.567, 524.357, 526.162), stdev = 1.934
[info]   CI (99.9%): [516.908, 531.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44674.766 ±(99.9%) 41.582 B/op [Average]
[info]   (min, avg, max) = (44655.498, 44674.766, 44680.030), stdev = 10.799
[info]   CI (99.9%): [44633.185, 44716.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.241 ±(99.9%) 709.745 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 538.241, 672.966), stdev = 184.319
[info]   CI (99.9%): [≈ 0, 1247.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   45853.293 ±(99.9%) 60415.073 B/op [Average]
[info]   (min, avg, max) = (28610.919, 45853.293, 57623.470), stdev = 15689.603
[info]   CI (99.9%): [≈ 0, 106268.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.14% complete, ETA 01:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70941.138 ops/s
[info] # Warmup Iteration   2: 73280.507 ops/s
[info] # Warmup Iteration   3: 74438.813 ops/s
[info] Iteration   1: 74741.931 ops/s
[info]                  ·gc.alloc.rate:            194.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7125.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 74899.284 ops/s
[info]                  ·gc.alloc.rate:      194.891 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74430.660 ops/s
[info]                  ·gc.alloc.rate:            193.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7141.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 74652.479 ops/s
[info]                  ·gc.alloc.rate:            194.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7120.177 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 74889.746 ops/s
[info]                  ·gc.alloc.rate:      194.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74722.820 ±(99.9%) 744.865 ops/s [Average]
[info]   (min, avg, max) = (74430.660, 74722.820, 74899.284), stdev = 193.439
[info]   CI (99.9%): [73977.955, 75467.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   194.456 ±(99.9%) 1.913 MB/sec [Average]
[info]   (min, avg, max) = (193.674, 194.456, 194.891), stdev = 0.497
[info]   CI (99.9%): [192.543, 196.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.773 ±(99.9%) 712.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.773, 338.373), stdev = 185.106
[info]   CI (99.9%): [≈ 0, 915.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4277.425 ±(99.9%) 15035.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4277.425, 7141.219), stdev = 3904.744
[info]   CI (99.9%): [≈ 0, 19313.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.39% complete, ETA 01:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8411.814 ops/s
[info] # Warmup Iteration   2: 15401.299 ops/s
[info] # Warmup Iteration   3: 15486.587 ops/s
[info] Iteration   1: 15472.003 ops/s
[info]                  ·gc.alloc.rate:            1003.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102648.788 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 15484.636 ops/s
[info]                  ·gc.alloc.rate:            1003.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       102066.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102569.256 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 15760.594 ops/s
[info]                  ·gc.alloc.rate:                                  1021.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102064.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.239 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101172.551 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                399.103 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 16010.173 ops/s
[info]                  ·gc.alloc.rate:                                  1038.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102064.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100378.857 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 15960.609 ops/s
[info]                  ·gc.alloc.rate:                                  1034.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102064.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100693.248 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15737.603 ±(99.9%) 980.007 ops/s [Average]
[info]   (min, avg, max) = (15472.003, 15737.603, 16010.173), stdev = 254.505
[info]   CI (99.9%): [14757.596, 16717.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1020.387 ±(99.9%) 63.656 MB/sec [Average]
[info]   (min, avg, max) = (1003.086, 1020.387, 1038.099), stdev = 16.531
[info]   CI (99.9%): [956.732, 1084.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102064.441 ±(99.9%) 3.553 B/op [Average]
[info]   (min, avg, max) = (102064.026, 102064.441, 102066.091), stdev = 0.923
[info]   CI (99.9%): [102060.888, 102067.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.072), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.300 ±(99.9%) 12.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.300, 7.239), stdev = 3.242
[info]   CI (99.9%): [≈ 0, 14.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.534 ±(99.9%) 23.445 MB/sec [Average]
[info]   (min, avg, max) = (1008.833, 1014.534, 1020.959), stdev = 6.089
[info]   CI (99.9%): [991.088, 1037.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   101492.540 ±(99.9%) 4074.128 B/op [Average]
[info]   (min, avg, max) = (100378.857, 101492.540, 102648.788), stdev = 1058.038
[info]   CI (99.9%): [97418.412, 105566.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.821 ±(99.9%) 687.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.821, 399.103), stdev = 178.484
[info]   CI (99.9%): [≈ 0, 767.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.919
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.64% complete, ETA 01:07:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42556.933 ops/s
[info] # Warmup Iteration   2: 57569.840 ops/s
[info] # Warmup Iteration   3: 57727.634 ops/s
[info] Iteration   1: 57932.811 ops/s
[info]                  ·gc.alloc.rate:            877.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18314.157 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 57840.941 ops/s
[info]                  ·gc.alloc.rate:            876.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27515.400 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58069.814 ops/s
[info]                  ·gc.alloc.rate:                   879.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18288.696 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 56790.587 ops/s
[info]                  ·gc.alloc.rate:                                  860.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28116.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                92.307 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 57175.331 ops/s
[info]                  ·gc.alloc.rate:                                  866.196 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28108.958 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   57561.897 ±(99.9%) 2124.648 ops/s [Average]
[info]   (min, avg, max) = (56790.587, 57561.897, 58069.814), stdev = 551.764
[info]   CI (99.9%): [55437.249, 59686.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   872.027 ±(99.9%) 32.025 MB/sec [Average]
[info]   (min, avg, max) = (860.405, 872.027, 879.696), stdev = 8.317
[info]   CI (99.9%): [840.001, 904.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.008), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.884 ±(99.9%) 5.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.884, 3.106), stdev = 1.366
[info]   CI (99.9%): [≈ 0, 6.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.989 ±(99.9%) 719.662 MB/sec [Average]
[info]   (min, avg, max) = (673.963, 878.989, 1020.961), stdev = 186.894
[info]   CI (99.9%): [159.326, 1598.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24068.814 ±(99.9%) 20294.958 B/op [Average]
[info]   (min, avg, max) = (18288.696, 24068.814, 28116.857), stdev = 5270.536
[info]   CI (99.9%): [3773.856, 44363.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   22.072 ±(99.9%) 154.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.072, 92.307), stdev = 40.033
[info]   CI (99.9%): [≈ 0, 176.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:07:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54673.895 ops/s
[info] # Warmup Iteration   2: 83961.978 ops/s
[info] # Warmup Iteration   3: 86559.691 ops/s
[info] Iteration   1: 86904.945 ops/s
[info]                  ·gc.alloc.rate:            1030.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24368.655 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 87332.958 ops/s
[info]                  ·gc.alloc.rate:            1035.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18186.938 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 86438.403 ops/s
[info]                  ·gc.alloc.rate:                                  1025.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18520.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                72.774 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 87866.649 ops/s
[info]                  ·gc.alloc.rate:                                  1041.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.487 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18291.406 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 87648.096 ops/s
[info]                  ·gc.alloc.rate:            1039.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18336.265 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   87238.210 ±(99.9%) 2214.267 ops/s [Average]
[info]   (min, avg, max) = (86438.403, 87238.210, 87866.649), stdev = 575.038
[info]   CI (99.9%): [85023.944, 89452.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1034.414 ±(99.9%) 26.139 MB/sec [Average]
[info]   (min, avg, max) = (1025.027, 1034.414, 1041.789), stdev = 6.788
[info]   CI (99.9%): [1008.276, 1060.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.447 ±(99.9%) 2.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.447, 1.748), stdev = 0.757
[info]   CI (99.9%): [≈ 0, 3.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.725 ±(99.9%) 565.488 MB/sec [Average]
[info]   (min, avg, max) = (1009.121, 1082.725, 1345.284), stdev = 146.855
[info]   CI (99.9%): [517.237, 1648.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19540.848 ±(99.9%) 10402.630 B/op [Average]
[info]   (min, avg, max) = (18186.938, 19540.848, 24368.655), stdev = 2701.530
[info]   CI (99.9%): [9138.218, 29943.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.555 ±(99.9%) 125.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.555, 72.774), stdev = 32.546
[info]   CI (99.9%): [≈ 0, 139.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 6.364
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.14% complete, ETA 01:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189559.616 ops/s
[info] # Warmup Iteration   2: 199949.502 ops/s
[info] # Warmup Iteration   3: 208202.194 ops/s
[info] Iteration   1: 208437.528 ops/s
[info]                  ·gc.alloc.rate:            330.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2545.026 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 208654.860 ops/s
[info]                  ·gc.alloc.rate:            330.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2537.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 208611.640 ops/s
[info]                  ·gc.alloc.rate:            330.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2538.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 207878.587 ops/s
[info]                  ·gc.alloc.rate:            329.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2546.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 209283.695 ops/s
[info]                  ·gc.alloc.rate:                   331.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2529.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   208573.262 ±(99.9%) 1938.603 ops/s [Average]
[info]   (min, avg, max) = (207878.587, 208573.262, 209283.695), stdev = 503.449
[info]   CI (99.9%): [206634.659, 210511.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   330.719 ±(99.9%) 3.079 MB/sec [Average]
[info]   (min, avg, max) = (329.643, 330.719, 331.879), stdev = 0.800
[info]   CI (99.9%): [327.639, 333.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.469 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (336.288, 336.469, 336.999), stdev = 0.298
[info]   CI (99.9%): [335.322, 337.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2539.415 ±(99.9%) 26.348 B/op [Average]
[info]   (min, avg, max) = (2529.731, 2539.415, 2546.899), stdev = 6.842
[info]   CI (99.9%): [2513.067, 2565.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.002 ±(99.9%) 8.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.002, 5.009), stdev = 2.240
[info]   CI (99.9%): [≈ 0, 9.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.39% complete, ETA 01:06:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213515.004 ops/s
[info] # Warmup Iteration   2: 237350.446 ops/s
[info] # Warmup Iteration   3: 237218.161 ops/s
[info] Iteration   1: 238535.386 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 238333.345 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 234225.383 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 238401.575 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 238406.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   237580.350 ±(99.9%) 7227.297 ops/s [Average]
[info]   (min, avg, max) = (234225.383, 237580.350, 238535.386), stdev = 1876.906
[info]   CI (99.9%): [230353.053, 244807.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.64% complete, ETA 01:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43315.661 ops/s
[info] # Warmup Iteration   2: 62467.445 ops/s
[info] # Warmup Iteration   3: 61475.289 ops/s
[info] Iteration   1: 62368.822 ops/s
[info]                  ·gc.alloc.rate:            971.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25466.786 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 62155.123 ops/s
[info]                  ·gc.alloc.rate:            968.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25554.865 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 62023.706 ops/s
[info]                  ·gc.alloc.rate:                   966.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              24520.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25607.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 101.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 62939.384 ops/s
[info]                  ·gc.alloc.rate:                                  980.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.897 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25534.804 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 62904.417 ops/s
[info]                  ·gc.alloc.rate:            979.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25549.009 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   62478.291 ±(99.9%) 1630.578 ops/s [Average]
[info]   (min, avg, max) = (62023.706, 62478.291, 62939.384), stdev = 423.456
[info]   CI (99.9%): [60847.713, 64108.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   973.239 ±(99.9%) 25.407 MB/sec [Average]
[info]   (min, avg, max) = (966.094, 973.239, 980.405), stdev = 6.598
[info]   CI (99.9%): [947.832, 998.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24520.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24520.006, 24520.007, 24520.007), stdev = 0.001
[info]   CI (99.9%): [24520.006, 24520.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.779 ±(99.9%) 6.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.897), stdev = 1.743
[info]   CI (99.9%): [≈ 0, 7.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.825 ±(99.9%) 25.272 MB/sec [Average]
[info]   (min, avg, max) = (1008.914, 1013.825, 1021.045), stdev = 6.563
[info]   CI (99.9%): [988.552, 1039.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   25542.612 ±(99.9%) 194.678 B/op [Average]
[info]   (min, avg, max) = (25466.786, 25542.612, 25607.593), stdev = 50.557
[info]   CI (99.9%): [25347.934, 25737.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.283 ±(99.9%) 174.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.283, 101.416), stdev = 45.355
[info]   CI (99.9%): [≈ 0, 194.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 4.382
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:06:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19745.474 ops/s
[info] # Warmup Iteration   2: 27317.986 ops/s
[info] # Warmup Iteration   3: 27805.700 ops/s
[info] Iteration   1: 27757.934 ops/s
[info]                  ·gc.alloc.rate:            577.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38222.055 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27939.936 ops/s
[info]                  ·gc.alloc.rate:            580.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       32699.979 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37973.123 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 27877.364 ops/s
[info]                  ·gc.alloc.rate:            579.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19028.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28047.673 ops/s
[info]                  ·gc.alloc.rate:            582.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37828.280 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 27895.919 ops/s
[info]                  ·gc.alloc.rate:            579.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38031.643 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27903.765 ±(99.9%) 404.057 ops/s [Average]
[info]   (min, avg, max) = (27757.934, 27903.765, 28047.673), stdev = 104.932
[info]   CI (99.9%): [27499.708, 28307.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   579.760 ±(99.9%) 8.173 MB/sec [Average]
[info]   (min, avg, max) = (577.005, 579.760, 582.822), stdev = 2.123
[info]   CI (99.9%): [571.587, 587.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32700.008 ±(99.9%) 26.685 B/op [Average]
[info]   (min, avg, max) = (32696.015, 32700.008, 32712.018), stdev = 6.930
[info]   CI (99.9%): [32673.324, 32726.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.718 ±(99.9%) 580.584 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 606.718, 674.307), stdev = 150.776
[info]   CI (99.9%): [26.134, 1187.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34216.776 ±(99.9%) 32697.829 B/op [Average]
[info]   (min, avg, max) = (19028.779, 34216.776, 38222.055), stdev = 8491.522
[info]   CI (99.9%): [1518.947, 66914.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.13% complete, ETA 01:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17253.198 ops/s
[info] # Warmup Iteration   2: 27791.051 ops/s
[info] # Warmup Iteration   3: 27490.983 ops/s
[info] Iteration   1: 28277.414 ops/s
[info]                  ·gc.alloc.rate:            371.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18722.585 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 27892.930 ops/s
[info]                  ·gc.alloc.rate:            366.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       20686.845 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37961.924 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 26921.124 ops/s
[info]                  ·gc.alloc.rate:            353.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19666.155 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28414.772 ops/s
[info]                  ·gc.alloc.rate:                   373.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18595.436 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28157.481 ops/s
[info]                  ·gc.alloc.rate:            370.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18802.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   27932.744 ±(99.9%) 2299.624 ops/s [Average]
[info]   (min, avg, max) = (26921.124, 27932.744, 28414.772), stdev = 597.205
[info]   CI (99.9%): [25633.120, 30232.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   367.151 ±(99.9%) 30.265 MB/sec [Average]
[info]   (min, avg, max) = (353.838, 367.151, 373.511), stdev = 7.860
[info]   CI (99.9%): [336.886, 397.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.781 ±(99.9%) 2.015 B/op [Average]
[info]   (min, avg, max) = (20686.845, 20687.781, 20688.017), stdev = 0.523
[info]   CI (99.9%): [20685.766, 20689.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.523 ±(99.9%) 579.625 MB/sec [Average]
[info]   (min, avg, max) = (335.731, 403.523, 672.793), stdev = 150.527
[info]   CI (99.9%): [≈ 0, 983.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22749.692 ±(99.9%) 32785.755 B/op [Average]
[info]   (min, avg, max) = (18595.436, 22749.692, 37961.924), stdev = 8514.356
[info]   CI (99.9%): [≈ 0, 55535.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.379 ±(99.9%) 63.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.379, 36.896), stdev = 16.500
[info]   CI (99.9%): [≈ 0, 70.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.38% complete, ETA 01:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101591.391 ops/s
[info] # Warmup Iteration   2: 119345.666 ops/s
[info] # Warmup Iteration   3: 114188.166 ops/s
[info] Iteration   1: 118198.629 ops/s
[info]                  ·gc.alloc.rate:            461.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8976.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 119876.665 ops/s
[info]                  ·gc.alloc.rate:            467.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4425.331 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 119685.091 ops/s
[info]                  ·gc.alloc.rate:            467.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8864.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 119506.030 ops/s
[info]                  ·gc.alloc.rate:            466.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4439.067 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 119635.856 ops/s
[info]                  ·gc.alloc.rate:            466.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4434.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   119380.454 ±(99.9%) 2595.073 ops/s [Average]
[info]   (min, avg, max) = (118198.629, 119380.454, 119876.665), stdev = 673.932
[info]   CI (99.9%): [116785.382, 121975.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   465.939 ±(99.9%) 10.128 MB/sec [Average]
[info]   (min, avg, max) = (461.321, 465.939, 467.874), stdev = 2.630
[info]   CI (99.9%): [455.811, 476.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.781 ±(99.9%) 710.631 MB/sec [Average]
[info]   (min, avg, max) = (336.995, 471.781, 673.983), stdev = 184.549
[info]   CI (99.9%): [≈ 0, 1182.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6227.898 ±(99.9%) 9466.238 B/op [Average]
[info]   (min, avg, max) = (4425.331, 6227.898, 8976.289), stdev = 2458.352
[info]   CI (99.9%): [≈ 0, 15694.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.63% complete, ETA 01:05:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17185.807 ops/s
[info] # Warmup Iteration   2: 38568.052 ops/s
[info] # Warmup Iteration   3: 39118.406 ops/s
[info] Iteration   1: 40833.587 ops/s
[info]                  ·gc.alloc.rate:                                  2201.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84856.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.970 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78718.298 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 40366.105 ops/s
[info]                  ·gc.alloc.rate:                                  2176.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84856.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92902.592 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 39453.209 ops/s
[info]                  ·gc.alloc.rate:                                  2127.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84856.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81471.174 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 40259.550 ops/s
[info]                  ·gc.alloc.rate:                                  2170.555 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84856.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79840.416 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 40710.070 ops/s
[info]                  ·gc.alloc.rate:                                  2194.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84856.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92113.174 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   40324.504 ±(99.9%) 2085.162 ops/s [Average]
[info]   (min, avg, max) = (39453.209, 40324.504, 40833.587), stdev = 541.510
[info]   CI (99.9%): [38239.342, 42409.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2174.042 ±(99.9%) 111.593 MB/sec [Average]
[info]   (min, avg, max) = (2127.470, 2174.042, 2201.349), stdev = 28.980
[info]   CI (99.9%): [2062.449, 2285.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84856.011 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (84856.010, 84856.011, 84856.013), stdev = 0.001
[info]   CI (99.9%): [84856.006, 84856.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.025), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.342 ±(99.9%) 1.354 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.342, 0.970), stdev = 0.352
[info]   CI (99.9%): [≈ 0, 1.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.376 ±(99.9%) 717.329 MB/sec [Average]
[info]   (min, avg, max) = (2042.123, 2178.376, 2382.445), stdev = 186.288
[info]   CI (99.9%): [1461.047, 2895.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85009.131 ±(99.9%) 26648.953 B/op [Average]
[info]   (min, avg, max) = (78718.298, 85009.131, 92902.592), stdev = 6920.648
[info]   CI (99.9%): [58360.178, 111658.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.88% complete, ETA 01:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139791.579 ops/s
[info] # Warmup Iteration   2: 174332.761 ops/s
[info] # Warmup Iteration   3: 179026.791 ops/s
[info] Iteration   1: 179817.712 ops/s
[info]                  ·gc.alloc.rate:            627.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5900.572 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 179667.591 ops/s
[info]                  ·gc.alloc.rate:            627.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2952.617 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 178720.814 ops/s
[info]                  ·gc.alloc.rate:            624.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5936.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 179365.350 ops/s
[info]                  ·gc.alloc.rate:            626.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5915.242 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 176349.159 ops/s
[info]                  ·gc.alloc.rate:            615.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6016.390 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   178784.125 ±(99.9%) 5486.224 ops/s [Average]
[info]   (min, avg, max) = (176349.159, 178784.125, 179817.712), stdev = 1424.755
[info]   CI (99.9%): [173297.901, 184270.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   624.243 ±(99.9%) 19.211 MB/sec [Average]
[info]   (min, avg, max) = (615.715, 624.243, 627.878), stdev = 4.989
[info]   CI (99.9%): [605.032, 643.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.649 ±(99.9%) 580.450 MB/sec [Average]
[info]   (min, avg, max) = (336.995, 606.649, 674.100), stdev = 150.741
[info]   CI (99.9%): [26.199, 1187.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5344.275 ±(99.9%) 5151.101 B/op [Average]
[info]   (min, avg, max) = (2952.617, 5344.275, 6016.390), stdev = 1337.725
[info]   CI (99.9%): [193.174, 10495.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.13% complete, ETA 01:05:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181604.483 ops/s
[info] # Warmup Iteration   2: 264346.947 ops/s
[info] # Warmup Iteration   3: 270166.108 ops/s
[info] Iteration   1: 272532.909 ops/s
[info]                  ·gc.alloc.rate:      275.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 268068.229 ops/s
[info]                  ·gc.alloc.rate:            271.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1975.029 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 272848.331 ops/s
[info]                  ·gc.alloc.rate:            275.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1940.434 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 273773.113 ops/s
[info]                  ·gc.alloc.rate:            276.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1933.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 274106.768 ops/s
[info]                  ·gc.alloc.rate:            277.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1931.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   272265.870 ±(99.9%) 9371.287 ops/s [Average]
[info]   (min, avg, max) = (268068.229, 272265.870, 274106.768), stdev = 2433.693
[info]   CI (99.9%): [262894.584, 281637.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   275.377 ±(99.9%) 9.539 MB/sec [Average]
[info]   (min, avg, max) = (271.094, 275.377, 277.240), stdev = 2.477
[info]   CI (99.9%): [265.838, 284.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.002, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.076 ±(99.9%) 579.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.076, 336.365), stdev = 150.418
[info]   CI (99.9%): [≈ 0, 848.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1556.172 ±(99.9%) 3350.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1556.172, 1975.029), stdev = 870.103
[info]   CI (99.9%): [≈ 0, 4906.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.38% complete, ETA 01:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 428258.923 ops/s
[info] # Warmup Iteration   2: 462277.882 ops/s
[info] # Warmup Iteration   3: 455387.527 ops/s
[info] Iteration   1: 464455.700 ops/s
[info]                  ·gc.alloc.rate:                   356.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1139.948 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.257 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 460706.737 ops/s
[info]                  ·gc.alloc.rate:            353.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1151.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 451923.859 ops/s
[info]                  ·gc.alloc.rate:                   346.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1171.567 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 464948.735 ops/s
[info]                  ·gc.alloc.rate:            356.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1141.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 465321.048 ops/s
[info]                  ·gc.alloc.rate:            357.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1137.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   461471.216 ±(99.9%) 21744.885 ops/s [Average]
[info]   (min, avg, max) = (451923.859, 461471.216, 465321.048), stdev = 5647.077
[info]   CI (99.9%): [439726.331, 483216.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   354.138 ±(99.9%) 16.700 MB/sec [Average]
[info]   (min, avg, max) = (346.819, 354.138, 357.095), stdev = 4.337
[info]   CI (99.9%): [337.438, 370.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.617 ±(99.9%) 1.392 MB/sec [Average]
[info]   (min, avg, max) = (336.348, 336.617, 337.046), stdev = 0.361
[info]   CI (99.9%): [335.225, 338.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1148.372 ±(99.9%) 53.912 B/op [Average]
[info]   (min, avg, max) = (1137.836, 1148.372, 1171.567), stdev = 14.001
[info]   CI (99.9%): [1094.460, 1202.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.915 ±(99.9%) 4.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.915, 2.320), stdev = 1.254
[info]   CI (99.9%): [≈ 0, 5.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 24.63% complete, ETA 01:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467615.655 ops/s
[info] # Warmup Iteration   2: 521815.387 ops/s
[info] # Warmup Iteration   3: 524598.476 ops/s
[info] Iteration   1: 524506.184 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 524538.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 519906.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 523762.416 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 516929.351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   521928.536 ±(99.9%) 13043.836 ops/s [Average]
[info]   (min, avg, max) = (516929.351, 521928.536, 524538.307), stdev = 3387.443
[info]   CI (99.9%): [508884.700, 534972.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.88% complete, ETA 01:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153000.699 ops/s
[info] # Warmup Iteration   2: 276557.746 ops/s
[info] # Warmup Iteration   3: 280504.478 ops/s
[info] Iteration   1: 279089.508 ops/s
[info]                  ·gc.alloc.rate:                   768.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5687.207 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 281349.858 ops/s
[info]                  ·gc.alloc.rate:                   775.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3759.860 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 274915.676 ops/s
[info]                  ·gc.alloc.rate:                   757.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3847.894 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 277424.236 ops/s
[info]                  ·gc.alloc.rate:                   764.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5710.110 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.989 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 279879.745 ops/s
[info]                  ·gc.alloc.rate:                                  770.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3828.218 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   278531.805 ±(99.9%) 9505.027 ops/s [Average]
[info]   (min, avg, max) = (274915.676, 278531.805, 281349.858), stdev = 2468.425
[info]   CI (99.9%): [269026.778, 288036.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   767.411 ±(99.9%) 25.948 MB/sec [Average]
[info]   (min, avg, max) = (757.319, 767.411, 775.048), stdev = 6.739
[info]   CI (99.9%): [741.463, 793.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.002, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.104 ±(99.9%) 702.289 MB/sec [Average]
[info]   (min, avg, max) = (672.064, 808.104, 1008.496), stdev = 182.382
[info]   CI (99.9%): [105.815, 1510.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4566.658 ±(99.9%) 3981.253 B/op [Average]
[info]   (min, avg, max) = (3759.860, 4566.658, 5710.110), stdev = 1033.919
[info]   CI (99.9%): [585.405, 8547.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.197 ±(99.9%) 6.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.197, 3.989), stdev = 1.587
[info]   CI (99.9%): [≈ 0, 7.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.782 ±(99.9%) 34.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.782, 22.614), stdev = 8.999
[info]   CI (99.9%): [≈ 0, 41.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.12% complete, ETA 01:04:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26979.056 ops/s
[info] # Warmup Iteration   2: 35129.378 ops/s
[info] # Warmup Iteration   3: 36176.884 ops/s
[info] Iteration   1: 36294.918 ops/s
[info]                  ·gc.alloc.rate:                                  1618.148 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58605.644 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                144.420 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 36544.068 ops/s
[info]                  ·gc.alloc.rate:                                  1629.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73299.909 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 36760.967 ops/s
[info]                  ·gc.alloc.rate:                                  1638.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72867.291 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 36585.808 ops/s
[info]                  ·gc.alloc.rate:                                  1631.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73213.775 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36807.467 ops/s
[info]                  ·gc.alloc.rate:                                  1641.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72774.262 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36598.646 ±(99.9%) 782.895 ops/s [Average]
[info]   (min, avg, max) = (36294.918, 36598.646, 36807.467), stdev = 203.315
[info]   CI (99.9%): [35815.751, 37381.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1631.673 ±(99.9%) 34.889 MB/sec [Average]
[info]   (min, avg, max) = (1618.148, 1631.673, 1641.024), stdev = 9.061
[info]   CI (99.9%): [1596.784, 1666.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70176.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (70176.011, 70176.012, 70176.014), stdev = 0.001
[info]   CI (99.9%): [70176.007, 70176.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.023, 0.079), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.998 ±(99.9%) 5.277 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.998, 3.405), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 6.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.663 ±(99.9%) 603.386 MB/sec [Average]
[info]   (min, avg, max) = (1351.354, 1631.663, 1701.860), stdev = 156.697
[info]   CI (99.9%): [1028.276, 2235.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70152.176 ±(99.9%) 24869.555 B/op [Average]
[info]   (min, avg, max) = (58605.644, 70152.176, 73299.909), stdev = 6458.545
[info]   CI (99.9%): [45282.621, 95021.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.884 ±(99.9%) 248.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.884, 144.420), stdev = 64.587
[info]   CI (99.9%): [≈ 0, 277.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.37% complete, ETA 01:04:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11209.399 ops/s
[info] # Warmup Iteration   2: 296526.820 ops/s
[info] # Warmup Iteration   3: 298320.938 ops/s
[info] Iteration   1: 297289.020 ops/s
[info]                  ·gc.alloc.rate:            308.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1766.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 297546.877 ops/s
[info]                  ·gc.alloc.rate:            308.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1765.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 292786.425 ops/s
[info]                  ·gc.alloc.rate:            303.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1793.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 305049.818 ops/s
[info]                  ·gc.alloc.rate:            316.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1721.845 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 297189.059 ops/s
[info]                  ·gc.alloc.rate:            308.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1767.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   297972.240 ±(99.9%) 17030.764 ops/s [Average]
[info]   (min, avg, max) = (292786.425, 297972.240, 305049.818), stdev = 4422.835
[info]   CI (99.9%): [280941.476, 315003.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   308.990 ±(99.9%) 17.549 MB/sec [Average]
[info]   (min, avg, max) = (303.652, 308.990, 316.285), stdev = 4.558
[info]   CI (99.9%): [291.441, 326.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.752 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (333.697, 333.752, 333.788), stdev = 0.044
[info]   CI (99.9%): [333.583, 333.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1763.094 ±(99.9%) 99.910 B/op [Average]
[info]   (min, avg, max) = (1721.845, 1763.094, 1793.968), stdev = 25.946
[info]   CI (99.9%): [1663.184, 1863.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.62% complete, ETA 01:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62970.064 ops/s
[info] # Warmup Iteration   2: 97816.488 ops/s
[info] # Warmup Iteration   3: 96081.345 ops/s
[info] Iteration   1: 96162.381 ops/s
[info]                  ·gc.alloc.rate:            1062.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16517.214 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 97336.412 ops/s
[info]                  ·gc.alloc.rate:            1075.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16317.860 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 96505.989 ops/s
[info]                  ·gc.alloc.rate:                                  1066.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.214 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16589.055 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                65.183 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 98613.797 ops/s
[info]                  ·gc.alloc.rate:            1089.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21731.704 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 98175.706 ops/s
[info]                  ·gc.alloc.rate:            1084.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16370.985 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   97358.857 ±(99.9%) 4039.305 ops/s [Average]
[info]   (min, avg, max) = (96162.381, 97358.857, 98613.797), stdev = 1048.995
[info]   CI (99.9%): [93319.552, 101398.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1075.795 ±(99.9%) 44.826 MB/sec [Average]
[info]   (min, avg, max) = (1062.523, 1075.795, 1089.682), stdev = 11.641
[info]   CI (99.9%): [1030.969, 1120.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.214), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.700 ±(99.9%) 6.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.498), stdev = 1.564
[info]   CI (99.9%): [≈ 0, 6.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.617 ±(99.9%) 598.676 MB/sec [Average]
[info]   (min, avg, max) = (1009.080, 1083.617, 1361.583), stdev = 155.474
[info]   CI (99.9%): [484.940, 1682.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17505.364 ±(99.9%) 9107.200 B/op [Average]
[info]   (min, avg, max) = (16317.860, 17505.364, 21731.704), stdev = 2365.111
[info]   CI (99.9%): [8398.164, 26612.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.037 ±(99.9%) 112.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.037, 65.183), stdev = 29.151
[info]   CI (99.9%): [≈ 0, 125.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 13.000), stdev = 4.879
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.87% complete, ETA 01:03:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136366.943 ops/s
[info] # Warmup Iteration   2: 144028.164 ops/s
[info] # Warmup Iteration   3: 144205.222 ops/s
[info] Iteration   1: 140581.678 ops/s
[info]                  ·gc.alloc.rate:            91.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3818.047 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 144163.120 ops/s
[info]                  ·gc.alloc.rate:      93.782 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 143882.242 ops/s
[info]                  ·gc.alloc.rate:      93.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 142514.252 ops/s
[info]                  ·gc.alloc.rate:      92.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 143653.687 ops/s
[info]                  ·gc.alloc.rate:            93.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3692.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   142958.996 ±(99.9%) 5657.410 ops/s [Average]
[info]   (min, avg, max) = (140581.678, 142958.996, 144163.120), stdev = 1469.212
[info]   CI (99.9%): [137301.585, 148616.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   93.013 ±(99.9%) 3.635 MB/sec [Average]
[info]   (min, avg, max) = (91.487, 93.013, 93.782), stdev = 0.944
[info]   CI (99.9%): [89.378, 96.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.646 ±(99.9%) 715.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.646, 341.113), stdev = 185.747
[info]   CI (99.9%): [≈ 0, 850.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1502.187 ±(99.9%) 7922.432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1502.187, 3818.047), stdev = 2057.430
[info]   CI (99.9%): [≈ 0, 9424.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:03:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19265.302 ops/s
[info] # Warmup Iteration   2: 35225.456 ops/s
[info] # Warmup Iteration   3: 35155.942 ops/s
[info] Iteration   1: 36112.679 ops/s
[info]                  ·gc.alloc.rate:                                  1927.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73996.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                174.177 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 35657.850 ops/s
[info]                  ·gc.alloc.rate:                                  1903.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90145.077 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 35554.435 ops/s
[info]                  ·gc.alloc.rate:                                  1897.769 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90406.176 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36509.716 ops/s
[info]                  ·gc.alloc.rate:                                  1948.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73370.168 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36256.351 ops/s
[info]                  ·gc.alloc.rate:                                  1936.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88656.041 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   36018.206 ±(99.9%) 1554.821 ops/s [Average]
[info]   (min, avg, max) = (35554.435, 36018.206, 36509.716), stdev = 403.782
[info]   CI (99.9%): [34463.385, 37573.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1922.701 ±(99.9%) 83.235 MB/sec [Average]
[info]   (min, avg, max) = (1897.769, 1922.701, 1948.657), stdev = 21.616
[info]   CI (99.9%): [1839.466, 2005.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (84016.011, 84016.012, 84016.014), stdev = 0.001
[info]   CI (99.9%): [84016.007, 84016.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.024, 0.092), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.051 ±(99.9%) 6.339 B/op [Average]
[info]   (min, avg, max) = (0.234, 1.051, 3.994), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1905.371 ±(99.9%) 723.152 MB/sec [Average]
[info]   (min, avg, max) = (1697.567, 1905.371, 2043.105), stdev = 187.800
[info]   CI (99.9%): [1182.219, 2628.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83314.752 ±(99.9%) 33964.304 B/op [Average]
[info]   (min, avg, max) = (73370.168, 83314.752, 90406.176), stdev = 8820.422
[info]   CI (99.9%): [49350.448, 117279.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.835 ±(99.9%) 299.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.835, 174.177), stdev = 77.894
[info]   CI (99.9%): [≈ 0, 334.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.37% complete, ETA 01:03:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64183.902 ops/s
[info] # Warmup Iteration   2: 79511.574 ops/s
[info] # Warmup Iteration   3: 81708.740 ops/s
[info] Iteration   1: 82372.104 ops/s
[info]                  ·gc.alloc.rate:            397.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6440.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 82583.035 ops/s
[info]                  ·gc.alloc.rate:            398.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6423.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 82575.244 ops/s
[info]                  ·gc.alloc.rate:            398.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6423.869 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 82294.095 ops/s
[info]                  ·gc.alloc.rate:            397.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12892.223 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 82120.338 ops/s
[info]                  ·gc.alloc.rate:            396.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6459.925 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   82388.963 ±(99.9%) 755.081 ops/s [Average]
[info]   (min, avg, max) = (82120.338, 82388.963, 82583.035), stdev = 196.092
[info]   CI (99.9%): [81633.882, 83144.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   397.813 ±(99.9%) 3.624 MB/sec [Average]
[info]   (min, avg, max) = (396.547, 397.813, 398.778), stdev = 0.941
[info]   CI (99.9%): [394.188, 401.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.005, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.432 ±(99.9%) 580.363 MB/sec [Average]
[info]   (min, avg, max) = (336.997, 404.432, 674.045), stdev = 150.718
[info]   CI (99.9%): [≈ 0, 984.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7727.979 ±(99.9%) 11116.573 B/op [Average]
[info]   (min, avg, max) = (6423.713, 7727.979, 12892.223), stdev = 2886.939
[info]   CI (99.9%): [≈ 0, 18844.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 26.62% complete, ETA 01:03:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6649.093 ops/s
[info] # Warmup Iteration   2: 111033.423 ops/s
[info] # Warmup Iteration   3: 111783.404 ops/s
[info] Iteration   1: 113900.525 ops/s
[info]                  ·gc.alloc.rate:            348.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4611.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 113854.440 ops/s
[info]                  ·gc.alloc.rate:            348.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4613.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 113853.944 ops/s
[info]                  ·gc.alloc.rate:            348.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4613.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 113893.450 ops/s
[info]                  ·gc.alloc.rate:            348.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4611.776 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 113948.856 ops/s
[info]                  ·gc.alloc.rate:            348.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4609.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   113890.243 ±(99.9%) 150.999 ops/s [Average]
[info]   (min, avg, max) = (113853.944, 113890.243, 113948.856), stdev = 39.214
[info]   CI (99.9%): [113739.244, 114041.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   348.486 ±(99.9%) 0.369 MB/sec [Average]
[info]   (min, avg, max) = (348.391, 348.486, 348.646), stdev = 0.096
[info]   CI (99.9%): [348.117, 348.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.717 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (333.674, 333.717, 333.797), stdev = 0.050
[info]   CI (99.9%): [333.526, 333.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4611.906 ±(99.9%) 6.070 B/op [Average]
[info]   (min, avg, max) = (4609.550, 4611.906, 4613.355), stdev = 1.576
[info]   CI (99.9%): [4605.836, 4617.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.87% complete, ETA 01:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63607.877 ops/s
[info] # Warmup Iteration   2: 96189.044 ops/s
[info] # Warmup Iteration   3: 96618.523 ops/s
[info] Iteration   1: 95119.919 ops/s
[info]                  ·gc.alloc.rate:            314.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5566.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 97341.971 ops/s
[info]                  ·gc.alloc.rate:            321.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5438.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 97250.101 ops/s
[info]                  ·gc.alloc.rate:            321.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5444.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 97500.448 ops/s
[info]                  ·gc.alloc.rate:            322.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5430.195 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 97672.051 ops/s
[info]                  ·gc.alloc.rate:            322.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5420.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   96976.898 ±(99.9%) 4044.840 ops/s [Average]
[info]   (min, avg, max) = (95119.919, 96976.898, 97672.051), stdev = 1050.432
[info]   CI (99.9%): [92932.058, 101021.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   320.406 ±(99.9%) 13.239 MB/sec [Average]
[info]   (min, avg, max) = (314.326, 320.406, 322.670), stdev = 3.438
[info]   CI (99.9%): [307.167, 333.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.005), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.397 ±(99.9%) 0.312 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 336.397, 336.501), stdev = 0.081
[info]   CI (99.9%): [336.085, 336.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5460.041 ±(99.9%) 231.111 B/op [Average]
[info]   (min, avg, max) = (5420.745, 5460.041, 5566.217), stdev = 60.019
[info]   CI (99.9%): [5228.930, 5691.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:02:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101094.591 ops/s
[info] # Warmup Iteration   2: 111503.316 ops/s
[info] # Warmup Iteration   3: 112026.754 ops/s
[info] Iteration   1: 115274.573 ops/s
[info]                  ·gc.alloc.rate:                   352.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4592.914 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 114545.863 ops/s
[info]                  ·gc.alloc.rate:            350.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4631.253 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 114771.781 ops/s
[info]                  ·gc.alloc.rate:            351.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4613.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 111693.235 ops/s
[info]                  ·gc.alloc.rate:            341.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4740.186 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 114736.485 ops/s
[info]                  ·gc.alloc.rate:            351.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4614.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   114204.388 ±(99.9%) 5504.150 ops/s [Average]
[info]   (min, avg, max) = (111693.235, 114204.388, 115274.573), stdev = 1429.410
[info]   CI (99.9%): [108700.237, 119708.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   349.445 ±(99.9%) 16.922 MB/sec [Average]
[info]   (min, avg, max) = (341.712, 349.445, 352.694), stdev = 4.395
[info]   CI (99.9%): [332.522, 366.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.508 ±(99.9%) 1.331 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 336.508, 337.126), stdev = 0.346
[info]   CI (99.9%): [335.177, 337.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4638.304 ±(99.9%) 225.458 B/op [Average]
[info]   (min, avg, max) = (4592.914, 4638.304, 4740.186), stdev = 58.551
[info]   CI (99.9%): [4412.846, 4863.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.819 ±(99.9%) 15.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.819, 9.095), stdev = 4.067
[info]   CI (99.9%): [≈ 0, 17.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.36% complete, ETA 01:02:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104174.304 ops/s
[info] # Warmup Iteration   2: 111168.556 ops/s
[info] # Warmup Iteration   3: 114616.757 ops/s
[info] Iteration   1: 117234.085 ops/s
[info]                  ·gc.alloc.rate:            266.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4525.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 117598.924 ops/s
[info]                  ·gc.alloc.rate:      267.182 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 117273.270 ops/s
[info]                  ·gc.alloc.rate:            266.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4523.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 117253.424 ops/s
[info]                  ·gc.alloc.rate:            266.453 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4515.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115236.528 ops/s
[info]                  ·gc.alloc.rate:            261.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4594.429 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116919.246 ±(99.9%) 3668.045 ops/s [Average]
[info]   (min, avg, max) = (115236.528, 116919.246, 117598.924), stdev = 952.580
[info]   CI (99.9%): [113251.201, 120587.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   265.644 ±(99.9%) 8.305 MB/sec [Average]
[info]   (min, avg, max) = (261.834, 265.644, 267.182), stdev = 2.157
[info]   CI (99.9%): [257.339, 273.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.003, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.374 ±(99.9%) 579.849 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.374, 337.017), stdev = 150.585
[info]   CI (99.9%): [≈ 0, 849.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3631.668 ±(99.9%) 7818.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3631.668, 4594.429), stdev = 2030.415
[info]   CI (99.9%): [≈ 0, 11450.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.61% complete, ETA 01:02:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5718.091 ops/s
[info] # Warmup Iteration   2: 8348.650 ops/s
[info] # Warmup Iteration   3: 8646.516 ops/s
[info] Iteration   1: 8634.457 ops/s
[info]                  ·gc.alloc.rate:                   1431.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              260880.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245845.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8544.301 ops/s
[info]                  ·gc.alloc.rate:                                  1415.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260880.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250180.958 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                613.489 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 8544.763 ops/s
[info]                  ·gc.alloc.rate:                                  1416.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260880.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.461 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250794.447 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8717.150 ops/s
[info]                  ·gc.alloc.rate:                                  1444.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260880.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.653 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       307272.816 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8715.495 ops/s
[info]                  ·gc.alloc.rate:                                  1444.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260880.087 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245846.449 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8631.233 ±(99.9%) 330.833 ops/s [Average]
[info]   (min, avg, max) = (8544.301, 8631.233, 8717.150), stdev = 85.916
[info]   CI (99.9%): [8300.400, 8962.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1430.716 ±(99.9%) 54.538 MB/sec [Average]
[info]   (min, avg, max) = (1415.999, 1430.716, 1444.751), stdev = 14.163
[info]   CI (99.9%): [1376.178, 1485.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260880.056 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (260880.047, 260880.056, 260880.087), stdev = 0.017
[info]   CI (99.9%): [260879.989, 260880.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.317 ±(99.9%) 16.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.317, 10.080), stdev = 4.346
[info]   CI (99.9%): [≈ 0, 19.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.383 ±(99.9%) 592.915 MB/sec [Average]
[info]   (min, avg, max) = (1349.071, 1426.383, 1701.674), stdev = 153.978
[info]   CI (99.9%): [833.467, 2019.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   259988.006 ±(99.9%) 102179.123 B/op [Average]
[info]   (min, avg, max) = (245845.363, 259988.006, 307272.816), stdev = 26535.594
[info]   CI (99.9%): [157808.884, 362167.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   146.979 ±(99.9%) 1024.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 146.979, 613.489), stdev = 266.033
[info]   CI (99.9%): [≈ 0, 1171.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.86% complete, ETA 01:02:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4285.253 ops/s
[info] # Warmup Iteration   2: 8529.518 ops/s
[info] # Warmup Iteration   3: 8638.323 ops/s
[info] Iteration   1: 8565.349 ops/s
[info]                  ·gc.alloc.rate:            1336.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       245528.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247213.296 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 8680.076 ops/s
[info]                  ·gc.alloc.rate:                                  1353.878 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245528.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.588 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245416.544 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                724.655 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 8765.414 ops/s
[info]                  ·gc.alloc.rate:                                  1368.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245528.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1700.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305207.528 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 8790.921 ops/s
[info]                  ·gc.alloc.rate:            1371.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       245528.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243749.499 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8773.499 ops/s
[info]                  ·gc.alloc.rate:            1369.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       245543.906 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244249.498 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8715.052 ±(99.9%) 361.954 ops/s [Average]
[info]   (min, avg, max) = (8565.349, 8715.052, 8790.921), stdev = 93.998
[info]   CI (99.9%): [8353.097, 9077.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1359.694 ±(99.9%) 57.260 MB/sec [Average]
[info]   (min, avg, max) = (1336.086, 1359.694, 1371.219), stdev = 14.870
[info]   CI (99.9%): [1302.434, 1416.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245531.219 ±(99.9%) 27.309 B/op [Average]
[info]   (min, avg, max) = (245528.046, 245531.219, 245543.906), stdev = 7.092
[info]   CI (99.9%): [245503.911, 245558.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.945 ±(99.9%) 19.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.945, 11.588), stdev = 5.019
[info]   CI (99.9%): [≈ 0, 22.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1424.489 ±(99.9%) 595.355 MB/sec [Average]
[info]   (min, avg, max) = (1345.257, 1424.489, 1700.801), stdev = 154.612
[info]   CI (99.9%): [829.134, 2019.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   257167.273 ±(99.9%) 103537.453 B/op [Average]
[info]   (min, avg, max) = (243749.499, 257167.273, 305207.528), stdev = 26888.348
[info]   CI (99.9%): [153629.820, 360704.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   144.931 ±(99.9%) 1247.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 144.931, 724.655), stdev = 324.076
[info]   CI (99.9%): [≈ 0, 1392.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 16.000), stdev = 5.683
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86424.219 ops/s
[info] # Warmup Iteration   2: 89028.933 ops/s
[info] # Warmup Iteration   3: 93153.771 ops/s
[info] Iteration   1: 92675.804 ops/s
[info]                  ·gc.alloc.rate:      241.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 91916.963 ops/s
[info]                  ·gc.alloc.rate:            239.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5782.777 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 91885.121 ops/s
[info]                  ·gc.alloc.rate:            239.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5784.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 92408.550 ops/s
[info]                  ·gc.alloc.rate:      240.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 92272.945 ops/s
[info]                  ·gc.alloc.rate:            240.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5760.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   92231.876 ±(99.9%) 1290.658 ops/s [Average]
[info]   (min, avg, max) = (91885.121, 92231.876, 92675.804), stdev = 335.180
[info]   CI (99.9%): [90941.219, 93522.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   240.015 ±(99.9%) 3.268 MB/sec [Average]
[info]   (min, avg, max) = (239.106, 240.015, 241.150), stdev = 0.849
[info]   CI (99.9%): [236.747, 243.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.629 ±(99.9%) 712.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.629, 337.796), stdev = 184.974
[info]   CI (99.9%): [≈ 0, 914.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3465.595 ±(99.9%) 12182.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3465.595, 5784.728), stdev = 3163.655
[info]   CI (99.9%): [≈ 0, 15647.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.36% complete, ETA 01:01:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1965.706 ops/s
[info] # Warmup Iteration   2: 4621.169 ops/s
[info] # Warmup Iteration   3: 4659.631 ops/s
[info] Iteration   1: 4720.532 ops/s
[info]                  ·gc.alloc.rate:            1253.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 448564.913 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 4623.890 ops/s
[info]                  ·gc.alloc.rate:                                  1228.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418040.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       459332.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1360.315 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 4650.509 ops/s
[info]                  ·gc.alloc.rate:                                  1235.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418040.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       345543.209 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4654.206 ops/s
[info]                  ·gc.alloc.rate:                                  1236.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418040.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.983 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       460427.356 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4651.498 ops/s
[info]                  ·gc.alloc.rate:            1235.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 460625.262 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4660.127 ±(99.9%) 138.355 ops/s [Average]
[info]   (min, avg, max) = (4623.890, 4660.127, 4720.532), stdev = 35.930
[info]   CI (99.9%): [4521.772, 4798.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1237.800 ±(99.9%) 37.044 MB/sec [Average]
[info]   (min, avg, max) = (1228.021, 1237.800, 1253.932), stdev = 9.620
[info]   CI (99.9%): [1200.756, 1274.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418040.090 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (418040.088, 418040.090, 418040.095), stdev = 0.003
[info]   CI (99.9%): [418040.077, 418040.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.197 ±(99.9%) 29.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.197, 17.602), stdev = 7.591
[info]   CI (99.9%): [≈ 0, 34.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.775 ±(99.9%) 574.956 MB/sec [Average]
[info]   (min, avg, max) = (1020.984, 1287.775, 1361.806), stdev = 149.314
[info]   CI (99.9%): [712.819, 1862.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   434898.742 ±(99.9%) 193317.770 B/op [Average]
[info]   (min, avg, max) = (345543.209, 434898.742, 460625.262), stdev = 50204.011
[info]   CI (99.9%): [241580.971, 628216.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   272.063 ±(99.9%) 2342.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 272.063, 1360.315), stdev = 608.351
[info]   CI (99.9%): [≈ 0, 2614.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 17.000), stdev = 6.557
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.61% complete, ETA 01:01:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15918.996 ops/s
[info] # Warmup Iteration   2: 24613.936 ops/s
[info] # Warmup Iteration   3: 24840.370 ops/s
[info] Iteration   1: 24922.501 ops/s
[info]                  ·gc.alloc.rate:            1292.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       81592.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85134.495 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 24930.584 ops/s
[info]                  ·gc.alloc.rate:                                  1292.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81584.912 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.867 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64043.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                210.253 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 25075.666 ops/s
[info]                  ·gc.alloc.rate:                                  1299.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85454.701 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24925.756 ops/s
[info]                  ·gc.alloc.rate:                                  1292.148 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85972.296 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25322.116 ops/s
[info]                  ·gc.alloc.rate:                                  1312.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84621.342 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25035.325 ±(99.9%) 665.788 ops/s [Average]
[info]   (min, avg, max) = (24922.501, 25035.325, 25322.116), stdev = 172.903
[info]   CI (99.9%): [24369.537, 25701.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1297.710 ±(99.9%) 33.592 MB/sec [Average]
[info]   (min, avg, max) = (1292.148, 1297.710, 1312.282), stdev = 8.724
[info]   CI (99.9%): [1264.118, 1331.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81576.196 ±(99.9%) 44.199 B/op [Average]
[info]   (min, avg, max) = (81568.016, 81576.196, 81592.018), stdev = 11.478
[info]   CI (99.9%): [81531.996, 81620.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.061), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.533 ±(99.9%) 6.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.533, 3.867), stdev = 1.766
[info]   CI (99.9%): [≈ 0, 8.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1289.522 ±(99.9%) 592.542 MB/sec [Average]
[info]   (min, avg, max) = (1014.439, 1289.522, 1361.918), stdev = 153.881
[info]   CI (99.9%): [696.980, 1882.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   81045.207 ±(99.9%) 36646.878 B/op [Average]
[info]   (min, avg, max) = (64043.201, 81045.207, 85972.296), stdev = 9517.078
[info]   CI (99.9%): [44398.329, 117692.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   42.051 ±(99.9%) 362.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.051, 210.253), stdev = 94.028
[info]   CI (99.9%): [≈ 0, 404.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.159
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.86% complete, ETA 01:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13833.257 ops/s
[info] # Warmup Iteration   2: 25384.154 ops/s
[info] # Warmup Iteration   3: 25524.506 ops/s
[info] Iteration   1: 25369.159 ops/s
[info]                  ·gc.alloc.rate:                   1289.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              80016.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83438.101 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.326 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 25575.882 ops/s
[info]                  ·gc.alloc.rate:                                  1300.100 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83295.795 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                245.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 25827.291 ops/s
[info]                  ·gc.alloc.rate:                                  1313.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82967.110 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25542.995 ops/s
[info]                  ·gc.alloc.rate:                                  1298.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83889.363 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25243.304 ops/s
[info]                  ·gc.alloc.rate:            1283.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84889.470 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   25511.726 ±(99.9%) 854.659 ops/s [Average]
[info]   (min, avg, max) = (25243.304, 25511.726, 25827.291), stdev = 221.952
[info]   CI (99.9%): [24657.068, 26366.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1296.954 ±(99.9%) 44.077 MB/sec [Average]
[info]   (min, avg, max) = (1283.179, 1296.954, 1313.205), stdev = 11.447
[info]   CI (99.9%): [1252.877, 1341.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80016.017 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (80016.016, 80016.017, 80016.020), stdev = 0.002
[info]   CI (99.9%): [80016.011, 80016.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.295 ±(99.9%) 10.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.295, 5.947), stdev = 2.608
[info]   CI (99.9%): [≈ 0, 11.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.533 ±(99.9%) 29.151 MB/sec [Average]
[info]   (min, avg, max) = (1344.568, 1356.533, 1361.739), stdev = 7.571
[info]   CI (99.9%): [1327.382, 1385.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   83695.968 ±(99.9%) 2868.483 B/op [Average]
[info]   (min, avg, max) = (82967.110, 83695.968, 84889.470), stdev = 744.936
[info]   CI (99.9%): [80827.485, 86564.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   57.456 ±(99.9%) 411.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.456, 245.952), stdev = 106.881
[info]   CI (99.9%): [≈ 0, 469.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.10% complete, ETA 01:01:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304805.471 ops/s
[info] # Warmup Iteration   2: 337591.187 ops/s
[info] # Warmup Iteration   3: 360437.155 ops/s
[info] Iteration   1: 357817.204 ops/s
[info]                  ·gc.alloc.rate:            790.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4438.910 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 358058.370 ops/s
[info]                  ·gc.alloc.rate:            791.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2957.241 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 351632.359 ops/s
[info]                  ·gc.alloc.rate:            777.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3011.410 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 358061.197 ops/s
[info]                  ·gc.alloc.rate:                   791.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4438.987 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 360612.587 ops/s
[info]                  ·gc.alloc.rate:                                  797.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3480.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.366 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2971.253 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   357236.343 ±(99.9%) 12843.091 ops/s [Average]
[info]   (min, avg, max) = (351632.359, 357236.343, 360612.587), stdev = 3335.310
[info]   CI (99.9%): [344393.252, 370079.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   789.785 ±(99.9%) 28.441 MB/sec [Average]
[info]   (min, avg, max) = (777.404, 789.785, 797.326), stdev = 7.386
[info]   CI (99.9%): [761.344, 818.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.366), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.972 ±(99.9%) 704.414 MB/sec [Average]
[info]   (min, avg, max) = (672.705, 808.972, 1009.722), stdev = 182.934
[info]   CI (99.9%): [104.558, 1513.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3563.560 ±(99.9%) 3078.066 B/op [Average]
[info]   (min, avg, max) = (2957.241, 3563.560, 4438.987), stdev = 799.364
[info]   CI (99.9%): [485.494, 6641.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.514 ±(99.9%) 30.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.514, 17.569), stdev = 7.857
[info]   CI (99.9%): [≈ 0, 33.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.35% complete, ETA 01:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357484.265 ops/s
[info] # Warmup Iteration   2: 369295.676 ops/s
[info] # Warmup Iteration   3: 387389.068 ops/s
[info] Iteration   1: 390989.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 390811.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 385930.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 390879.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 390911.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   389904.485 ±(99.9%) 8557.525 ops/s [Average]
[info]   (min, avg, max) = (385930.648, 389904.485, 390989.006), stdev = 2222.362
[info]   CI (99.9%): [381346.960, 398462.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.60% complete, ETA 01:00:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17720.115 ops/s
[info] # Warmup Iteration   2: 26997.496 ops/s
[info] # Warmup Iteration   3: 26562.956 ops/s
[info] Iteration   1: 26882.579 ops/s
[info]                  ·gc.alloc.rate:            1414.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78772.863 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 27053.558 ops/s
[info]                  ·gc.alloc.rate:                                  1423.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78972.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                232.500 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 27476.089 ops/s
[info]                  ·gc.alloc.rate:                                  1446.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77988.842 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27492.729 ops/s
[info]                  ·gc.alloc.rate:            1446.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97425.786 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27521.931 ops/s
[info]                  ·gc.alloc.rate:            1448.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77858.520 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27285.377 ±(99.9%) 1141.165 ops/s [Average]
[info]   (min, avg, max) = (26882.579, 27285.377, 27521.931), stdev = 296.357
[info]   CI (99.9%): [26144.212, 28426.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1435.842 ±(99.9%) 60.751 MB/sec [Average]
[info]   (min, avg, max) = (1414.470, 1435.842, 1448.221), stdev = 15.777
[info]   CI (99.9%): [1375.091, 1496.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (82824.015, 82824.016, 82824.020), stdev = 0.002
[info]   CI (99.9%): [82824.007, 82824.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.514 ±(99.9%) 12.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.514, 7.471), stdev = 3.331
[info]   CI (99.9%): [≈ 0, 14.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.536 ±(99.9%) 595.763 MB/sec [Average]
[info]   (min, avg, max) = (1345.284, 1425.536, 1702.046), stdev = 154.718
[info]   CI (99.9%): [829.773, 2021.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82203.717 ±(99.9%) 32819.163 B/op [Average]
[info]   (min, avg, max) = (77858.520, 82203.717, 97425.786), stdev = 8523.032
[info]   CI (99.9%): [49384.555, 115022.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.500 ±(99.9%) 400.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.500, 232.500), stdev = 103.977
[info]   CI (99.9%): [≈ 0, 446.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.85% complete, ETA 01:00:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107913.468 ops/s
[info] # Warmup Iteration   2: 128060.717 ops/s
[info] # Warmup Iteration   3: 126648.706 ops/s
[info] Iteration   1: 129455.323 ops/s
[info]                  ·gc.alloc.rate:                                  2106.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.661 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24830.155 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 130880.584 ops/s
[info]                  ·gc.alloc.rate:                                  2130.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28653.382 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 130937.342 ops/s
[info]                  ·gc.alloc.rate:                                  2131.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24549.352 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 128188.320 ops/s
[info]                  ·gc.alloc.rate:                                  2087.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25074.946 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 127444.952 ops/s
[info]                  ·gc.alloc.rate:                                  2074.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25220.510 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   129381.304 ±(99.9%) 6041.721 ops/s [Average]
[info]   (min, avg, max) = (127444.952, 129381.304, 130937.342), stdev = 1569.016
[info]   CI (99.9%): [123339.583, 135423.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2105.954 ±(99.9%) 97.495 MB/sec [Average]
[info]   (min, avg, max) = (2074.665, 2105.954, 2131.029), stdev = 25.319
[info]   CI (99.9%): [2008.460, 2203.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25616.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25616.003, 25616.003, 25616.003), stdev = 0.001
[info]   CI (99.9%): [25616.003, 25616.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.015, 0.054), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.178 ±(99.9%) 1.048 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.178, 0.661), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2110.581 ±(99.9%) 586.435 MB/sec [Average]
[info]   (min, avg, max) = (2042.015, 2110.581, 2383.014), stdev = 152.295
[info]   CI (99.9%): [1524.146, 2697.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25665.669 ±(99.9%) 6505.707 B/op [Average]
[info]   (min, avg, max) = (24549.352, 25665.669, 28653.382), stdev = 1689.512
[info]   CI (99.9%): [19159.962, 32171.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 30.10% complete, ETA 01:00:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16048.235 ops/s
[info] # Warmup Iteration   2: 435962.196 ops/s
[info] # Warmup Iteration   3: 437982.888 ops/s
[info] Iteration   1: 439047.338 ops/s
[info]                  ·gc.alloc.rate:            455.176 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2392.701 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 457451.125 ops/s
[info]                  ·gc.alloc.rate:            474.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1148.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 453019.227 ops/s
[info]                  ·gc.alloc.rate:            469.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2318.850 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 457504.358 ops/s
[info]                  ·gc.alloc.rate:            474.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1148.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 457462.906 ops/s
[info]                  ·gc.alloc.rate:            474.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1148.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   452896.991 ±(99.9%) 30723.419 ops/s [Average]
[info]   (min, avg, max) = (439047.338, 452896.991, 457504.358), stdev = 7978.774
[info]   CI (99.9%): [422173.571, 483620.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   469.591 ±(99.9%) 31.982 MB/sec [Average]
[info]   (min, avg, max) = (455.176, 469.591, 474.377), stdev = 8.306
[info]   CI (99.9%): [437.609, 501.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.177 ±(99.9%) 703.699 MB/sec [Average]
[info]   (min, avg, max) = (333.693, 467.177, 667.395), stdev = 182.748
[info]   CI (99.9%): [≈ 0, 1170.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1631.192 ±(99.9%) 2548.997 B/op [Average]
[info]   (min, avg, max) = (1148.006, 1631.192, 2392.701), stdev = 661.966
[info]   CI (99.9%): [≈ 0, 4180.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 00:59:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168026.249 ops/s
[info] # Warmup Iteration   2: 267609.103 ops/s
[info] # Warmup Iteration   3: 264520.660 ops/s
[info] Iteration   1: 269027.168 ops/s
[info]                  ·gc.alloc.rate:            385.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1967.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 267948.933 ops/s
[info]                  ·gc.alloc.rate:            383.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1975.928 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 266708.932 ops/s
[info]                  ·gc.alloc.rate:            382.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1985.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 268198.432 ops/s
[info]                  ·gc.alloc.rate:            384.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1974.123 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 268113.715 ops/s
[info]                  ·gc.alloc.rate:            384.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1974.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   267999.436 ±(99.9%) 3208.329 ops/s [Average]
[info]   (min, avg, max) = (266708.932, 267999.436, 269027.168), stdev = 833.193
[info]   CI (99.9%): [264791.107, 271207.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   384.104 ±(99.9%) 4.710 MB/sec [Average]
[info]   (min, avg, max) = (382.214, 384.104, 385.601), stdev = 1.223
[info]   CI (99.9%): [379.394, 388.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.002, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.359 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (336.324, 336.359, 336.444), stdev = 0.052
[info]   CI (99.9%): [336.158, 336.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1975.591 ±(99.9%) 23.750 B/op [Average]
[info]   (min, avg, max) = (1967.997, 1975.591, 1985.158), stdev = 6.168
[info]   CI (99.9%): [1951.841, 1999.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.60% complete, ETA 00:59:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575270.012 ops/s
[info] # Warmup Iteration   2: 607246.306 ops/s
[info] # Warmup Iteration   3: 611611.280 ops/s
[info] Iteration   1: 625064.867 ops/s
[info]                  ·gc.alloc.rate:            406.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 848.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 627042.598 ops/s
[info]                  ·gc.alloc.rate:            407.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 846.064 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 610820.927 ops/s
[info]                  ·gc.alloc.rate:            397.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1737.045 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 610835.454 ops/s
[info]                  ·gc.alloc.rate:            397.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 608814.307 ops/s
[info]                  ·gc.alloc.rate:            396.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 871.362 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   616515.630 ±(99.9%) 33784.378 ops/s [Average]
[info]   (min, avg, max) = (608814.307, 616515.630, 627042.598), stdev = 8773.696
[info]   CI (99.9%): [582731.253, 650300.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   401.123 ±(99.9%) 21.929 MB/sec [Average]
[info]   (min, avg, max) = (396.036, 401.123, 407.860), stdev = 5.695
[info]   CI (99.9%): [379.195, 423.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.490 ±(99.9%) 580.563 MB/sec [Average]
[info]   (min, avg, max) = (336.988, 404.490, 674.196), stdev = 150.770
[info]   CI (99.9%): [≈ 0, 985.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1034.326 ±(99.9%) 1513.286 B/op [Average]
[info]   (min, avg, max) = (846.064, 1034.326, 1737.045), stdev = 392.996
[info]   CI (99.9%): [≈ 0, 2547.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.85% complete, ETA 00:59:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36591.358 ops/s
[info] # Warmup Iteration   2: 63306.438 ops/s
[info] # Warmup Iteration   3: 66422.454 ops/s
[info] Iteration   1: 67589.756 ops/s
[info]                  ·gc.alloc.rate:                                  2960.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71337.293 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 67134.984 ops/s
[info]                  ·gc.alloc.rate:                                  2939.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63838.722 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 66951.957 ops/s
[info]                  ·gc.alloc.rate:                                  2932.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72014.829 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 66936.619 ops/s
[info]                  ·gc.alloc.rate:                                  2930.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72032.040 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 65820.711 ops/s
[info]                  ·gc.alloc.rate:                                  2881.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65113.906 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   66886.805 ±(99.9%) 2509.586 ops/s [Average]
[info]   (min, avg, max) = (65820.711, 66886.805, 67589.756), stdev = 651.732
[info]   CI (99.9%): [64377.219, 69396.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2928.936 ±(99.9%) 110.977 MB/sec [Average]
[info]   (min, avg, max) = (2881.860, 2928.936, 2960.131), stdev = 28.820
[info]   CI (99.9%): [2817.959, 3039.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.007), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.010, 0.014), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.238 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.238, 0.339), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2927.321 ±(99.9%) 718.574 MB/sec [Average]
[info]   (min, avg, max) = (2722.710, 2927.321, 3064.101), stdev = 186.611
[info]   CI (99.9%): [2208.747, 3645.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68867.358 ±(99.9%) 15569.885 B/op [Average]
[info]   (min, avg, max) = (63838.722, 68867.358, 72032.040), stdev = 4043.450
[info]   CI (99.9%): [53297.473, 84437.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.09% complete, ETA 00:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190358.272 ops/s
[info] # Warmup Iteration   2: 242270.628 ops/s
[info] # Warmup Iteration   3: 240913.633 ops/s
[info] Iteration   1: 241298.464 ops/s
[info]                  ·gc.alloc.rate:                   1434.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10992.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.723 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 246220.171 ops/s
[info]                  ·gc.alloc.rate:                                  1463.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.862 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8703.360 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 248243.167 ops/s
[info]                  ·gc.alloc.rate:            1475.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8632.132 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 245680.977 ops/s
[info]                  ·gc.alloc.rate:                                  1459.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10903.108 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 247933.661 ops/s
[info]                  ·gc.alloc.rate:            1473.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8643.202 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   245875.288 ±(99.9%) 10710.706 ops/s [Average]
[info]   (min, avg, max) = (241298.464, 245875.288, 248243.167), stdev = 2781.536
[info]   CI (99.9%): [235164.582, 256585.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1461.174 ±(99.9%) 63.852 MB/sec [Average]
[info]   (min, avg, max) = (1434.004, 1461.174, 1475.438), stdev = 16.582
[info]   CI (99.9%): [1397.322, 1525.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.001, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.178 ±(99.9%) 1.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.862), stdev = 0.383
[info]   CI (99.9%): [≈ 0, 1.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.543 ±(99.9%) 700.222 MB/sec [Average]
[info]   (min, avg, max) = (1361.742, 1494.543, 1701.805), stdev = 181.845
[info]   CI (99.9%): [794.321, 2194.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9574.769 ±(99.9%) 4828.258 B/op [Average]
[info]   (min, avg, max) = (8632.132, 9574.769, 10992.046), stdev = 1253.883
[info]   CI (99.9%): [4746.511, 14403.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.345 ±(99.9%) 37.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.345, 21.723), stdev = 9.715
[info]   CI (99.9%): [≈ 0, 41.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 17.000), stdev = 5.933
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 31.34% complete, ETA 00:59:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45333.964 ops/s
[info] # Warmup Iteration   2: 931430.025 ops/s
[info] # Warmup Iteration   3: 926161.349 ops/s
[info] Iteration   1: 919874.661 ops/s
[info]                  ·gc.alloc.rate:            500.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.033 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 910988.493 ops/s
[info]                  ·gc.alloc.rate:            495.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1153.210 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 918782.816 ops/s
[info]                  ·gc.alloc.rate:            499.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 907609.130 ops/s
[info]                  ·gc.alloc.rate:            493.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1157.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 907723.542 ops/s
[info]                  ·gc.alloc.rate:            493.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 578.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   912995.728 ±(99.9%) 22914.606 ops/s [Average]
[info]   (min, avg, max) = (907609.130, 912995.728, 919874.661), stdev = 5950.850
[info]   CI (99.9%): [890081.123, 935910.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   496.520 ±(99.9%) 12.383 MB/sec [Average]
[info]   (min, avg, max) = (493.618, 496.520, 500.212), stdev = 3.216
[info]   CI (99.9%): [484.138, 508.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.211 ±(99.9%) 703.875 MB/sec [Average]
[info]   (min, avg, max) = (333.688, 467.211, 667.475), stdev = 182.794
[info]   CI (99.9%): [≈ 0, 1171.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   806.423 ±(99.9%) 1226.596 B/op [Average]
[info]   (min, avg, max) = (571.033, 806.423, 1157.491), stdev = 318.543
[info]   CI (99.9%): [≈ 0, 2033.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.59% complete, ETA 00:58:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522274.186 ops/s
[info] # Warmup Iteration   2: 804620.076 ops/s
[info] # Warmup Iteration   3: 804109.430 ops/s
[info] Iteration   1: 801401.195 ops/s
[info]                  ·gc.alloc.rate:            631.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 660.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 781222.645 ops/s
[info]                  ·gc.alloc.rate:            615.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1355.387 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 782346.180 ops/s
[info]                  ·gc.alloc.rate:            616.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1353.480 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 780040.898 ops/s
[info]                  ·gc.alloc.rate:            614.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1357.493 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 802270.115 ops/s
[info]                  ·gc.alloc.rate:            632.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1319.894 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   789456.207 ±(99.9%) 43644.593 ops/s [Average]
[info]   (min, avg, max) = (780040.898, 789456.207, 802270.115), stdev = 11334.362
[info]   CI (99.9%): [745811.614, 833100.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   621.988 ±(99.9%) 34.733 MB/sec [Average]
[info]   (min, avg, max) = (614.491, 621.988, 632.282), stdev = 9.020
[info]   CI (99.9%): [587.255, 656.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.518 ±(99.9%) 579.292 MB/sec [Average]
[info]   (min, avg, max) = (336.402, 605.518, 673.020), stdev = 150.440
[info]   CI (99.9%): [26.226, 1184.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1209.384 ±(99.9%) 1182.656 B/op [Average]
[info]   (min, avg, max) = (660.667, 1209.384, 1357.493), stdev = 307.132
[info]   CI (99.9%): [26.728, 2392.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.84% complete, ETA 00:58:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 888573.322 ops/s
[info] # Warmup Iteration   2: 990904.780 ops/s
[info] # Warmup Iteration   3: 992236.940 ops/s
[info] Iteration   1: 973948.831 ops/s
[info]                  ·gc.alloc.rate:                   529.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1087.195 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 973630.706 ops/s
[info]                  ·gc.alloc.rate:            529.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 544.846 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 981029.741 ops/s
[info]                  ·gc.alloc.rate:                   533.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1080.435 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 996007.868 ops/s
[info]                  ·gc.alloc.rate:                   541.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1064.183 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 994799.848 ops/s
[info]                  ·gc.alloc.rate:            541.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 533.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   983883.399 ±(99.9%) 42099.370 ops/s [Average]
[info]   (min, avg, max) = (973630.706, 983883.399, 996007.868), stdev = 10933.073
[info]   CI (99.9%): [941784.029, 1025982.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   535.138 ±(99.9%) 22.963 MB/sec [Average]
[info]   (min, avg, max) = (529.566, 535.138, 541.658), stdev = 5.963
[info]   CI (99.9%): [512.174, 558.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.769 ±(99.9%) 708.865 MB/sec [Average]
[info]   (min, avg, max) = (337.070, 538.769, 673.475), stdev = 184.090
[info]   CI (99.9%): [≈ 0, 1247.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   861.985 ±(99.9%) 1135.708 B/op [Average]
[info]   (min, avg, max) = (533.266, 861.985, 1087.195), stdev = 294.940
[info]   CI (99.9%): [≈ 0, 1997.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.640 ±(99.9%) 2.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.640, 1.076), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 2.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.09% complete, ETA 00:58:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006891.096 ops/s
[info] # Warmup Iteration   2: 1092286.710 ops/s
[info] # Warmup Iteration   3: 1095250.542 ops/s
[info] Iteration   1: 1094487.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1091420.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1091393.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1091047.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1092752.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1092220.234 ±(99.9%) 5487.568 ops/s [Average]
[info]   (min, avg, max) = (1091047.632, 1092220.234, 1094487.627), stdev = 1425.104
[info]   CI (99.9%): [1086732.665, 1097707.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.34% complete, ETA 00:58:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18408.992 ops/s
[info] # Warmup Iteration   2: 28806.423 ops/s
[info] # Warmup Iteration   3: 29073.528 ops/s
[info] Iteration   1: 29057.640 ops/s
[info]                  ·gc.alloc.rate:                   1523.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72882.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 216.484 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 29112.090 ops/s
[info]                  ·gc.alloc.rate:                                  1525.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82490.887 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.153 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92015.101 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29748.738 ops/s
[info]                  ·gc.alloc.rate:            1559.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72036.075 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 29747.873 ops/s
[info]                  ·gc.alloc.rate:            1558.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90045.094 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29806.058 ops/s
[info]                  ·gc.alloc.rate:                                  1562.736 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71893.511 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29494.480 ±(99.9%) 1444.616 ops/s [Average]
[info]   (min, avg, max) = (29057.640, 29494.480, 29806.058), stdev = 375.162
[info]   CI (99.9%): [28049.864, 30939.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1545.896 ±(99.9%) 75.712 MB/sec [Average]
[info]   (min, avg, max) = (1523.126, 1545.896, 1562.736), stdev = 19.662
[info]   CI (99.9%): [1470.184, 1621.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82491.790 ±(99.9%) 26.756 B/op [Average]
[info]   (min, avg, max) = (82488.014, 82491.790, 82504.019), stdev = 6.949
[info]   CI (99.9%): [82465.033, 82518.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.153), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.670 ±(99.9%) 14.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.670, 8.282), stdev = 3.696
[info]   CI (99.9%): [≈ 0, 15.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.516 ±(99.9%) 729.048 MB/sec [Average]
[info]   (min, avg, max) = (1345.509, 1494.516, 1701.935), stdev = 189.332
[info]   CI (99.9%): [765.468, 2223.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79774.541 ±(99.9%) 39682.397 B/op [Average]
[info]   (min, avg, max) = (71893.511, 79774.541, 92015.101), stdev = 10305.392
[info]   CI (99.9%): [40092.144, 119456.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   43.297 ±(99.9%) 372.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.297, 216.484), stdev = 96.815
[info]   CI (99.9%): [≈ 0, 416.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 16.000), stdev = 5.612
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.59% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93896.905 ops/s
[info] # Warmup Iteration   2: 120031.251 ops/s
[info] # Warmup Iteration   3: 119818.769 ops/s
[info] Iteration   1: 120166.202 ops/s
[info]                  ·gc.alloc.rate:                   1481.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              19400.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17658.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.623 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 124527.033 ops/s
[info]                  ·gc.alloc.rate:                                  1534.555 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21510.849 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 123580.691 ops/s
[info]                  ·gc.alloc.rate:            1523.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       19400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17339.968 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 124883.049 ops/s
[info]                  ·gc.alloc.rate:                                  1539.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21449.538 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 125045.757 ops/s
[info]                  ·gc.alloc.rate:                                  1541.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19400.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17136.581 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   123640.547 ±(99.9%) 7791.951 ops/s [Average]
[info]   (min, avg, max) = (120166.202, 123640.547, 125045.757), stdev = 2023.545
[info]   CI (99.9%): [115848.595, 131432.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1523.943 ±(99.9%) 95.865 MB/sec [Average]
[info]   (min, avg, max) = (1481.129, 1523.943, 1541.338), stdev = 24.896
[info]   CI (99.9%): [1428.077, 1619.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19400.003, 19400.003, 19400.004), stdev = 0.001
[info]   CI (99.9%): [19400.003, 19400.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.150 ±(99.9%) 1.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.654), stdev = 0.283
[info]   CI (99.9%): [≈ 0, 1.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.945 ±(99.9%) 726.843 MB/sec [Average]
[info]   (min, avg, max) = (1348.179, 1494.945, 1701.741), stdev = 188.759
[info]   CI (99.9%): [768.102, 2221.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19019.109 ±(99.9%) 8681.075 B/op [Average]
[info]   (min, avg, max) = (17136.581, 19019.109, 21510.849), stdev = 2254.448
[info]   CI (99.9%): [10338.034, 27700.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.725 ±(99.9%) 75.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.725, 43.623), stdev = 19.509
[info]   CI (99.9%): [≈ 0, 83.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.84% complete, ETA 00:57:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100905.432 ops/s
[info] # Warmup Iteration   2: 162704.077 ops/s
[info] # Warmup Iteration   3: 164479.237 ops/s
[info] Iteration   1: 164125.949 ops/s
[info]                  ·gc.alloc.rate:            875.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9677.748 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 163070.320 ops/s
[info]                  ·gc.alloc.rate:                   870.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9733.980 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.429 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 165144.039 ops/s
[info]                  ·gc.alloc.rate:            881.427 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6411.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 165092.486 ops/s
[info]                  ·gc.alloc.rate:                                  880.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.529 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9697.218 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.103 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 166155.811 ops/s
[info]                  ·gc.alloc.rate:                                  886.749 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6448.349 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   164717.721 ±(99.9%) 4496.532 ops/s [Average]
[info]   (min, avg, max) = (163070.320, 164717.721, 166155.811), stdev = 1167.735
[info]   CI (99.9%): [160221.188, 169214.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   879.073 ±(99.9%) 23.933 MB/sec [Average]
[info]   (min, avg, max) = (870.351, 879.073, 886.749), stdev = 6.215
[info]   CI (99.9%): [855.140, 903.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.163 ±(99.9%) 0.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.529), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.643 ±(99.9%) 706.312 MB/sec [Average]
[info]   (min, avg, max) = (672.809, 877.643, 1017.029), stdev = 183.427
[info]   CI (99.9%): [171.331, 1583.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8393.834 ±(99.9%) 6903.379 B/op [Average]
[info]   (min, avg, max) = (6411.872, 8393.834, 9733.980), stdev = 1792.786
[info]   CI (99.9%): [1490.454, 15297.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.906 ±(99.9%) 63.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.906, 38.103), stdev = 16.557
[info]   CI (99.9%): [≈ 0, 72.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.08% complete, ETA 00:57:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240310.279 ops/s
[info] # Warmup Iteration   2: 255754.207 ops/s
[info] # Warmup Iteration   3: 258804.182 ops/s
[info] Iteration   1: 258767.299 ops/s
[info]                  ·gc.alloc.rate:            673.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4100.099 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 256516.533 ops/s
[info]                  ·gc.alloc.rate:            667.394 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4136.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 257664.040 ops/s
[info]                  ·gc.alloc.rate:            670.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4117.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 256270.578 ops/s
[info]                  ·gc.alloc.rate:            666.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4140.171 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 251248.143 ops/s
[info]                  ·gc.alloc.rate:            653.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4223.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   256093.318 ±(99.9%) 11110.892 ops/s [Average]
[info]   (min, avg, max) = (251248.143, 256093.318, 258767.299), stdev = 2885.463
[info]   CI (99.9%): [244982.426, 267204.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   666.413 ±(99.9%) 28.987 MB/sec [Average]
[info]   (min, avg, max) = (653.775, 666.413, 673.420), stdev = 7.528
[info]   CI (99.9%): [637.427, 695.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.061 ±(99.9%) 0.357 MB/sec [Average]
[info]   (min, avg, max) = (673.933, 674.061, 674.189), stdev = 0.093
[info]   CI (99.9%): [673.703, 674.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4143.433 ±(99.9%) 182.060 B/op [Average]
[info]   (min, avg, max) = (4100.099, 4143.433, 4223.047), stdev = 47.280
[info]   CI (99.9%): [3961.373, 4325.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 00:57:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26914.241 ops/s
[info] # Warmup Iteration   2: 61491.087 ops/s
[info] # Warmup Iteration   3: 61400.536 ops/s
[info] Iteration   1: 63201.208 ops/s
[info]                  ·gc.alloc.rate:                                  2667.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67812.736 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 61921.393 ops/s
[info]                  ·gc.alloc.rate:                                  2613.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69214.278 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 62282.081 ops/s
[info]                  ·gc.alloc.rate:                                  2628.457 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68814.273 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 63908.668 ops/s
[info]                  ·gc.alloc.rate:                                  2697.573 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67063.717 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 63681.463 ops/s
[info]                  ·gc.alloc.rate:                                  2687.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.365 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58888.047 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   62998.963 ±(99.9%) 3339.948 ops/s [Average]
[info]   (min, avg, max) = (61921.393, 62998.963, 63908.668), stdev = 867.374
[info]   CI (99.9%): [59659.014, 66338.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2658.844 ±(99.9%) 140.906 MB/sec [Average]
[info]   (min, avg, max) = (2613.613, 2658.844, 2697.573), stdev = 36.593
[info]   CI (99.9%): [2517.938, 2799.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.006, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.005, 66432.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.009, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.219 ±(99.9%) 0.359 B/op [Average]
[info]   (min, avg, max) = (0.138, 0.219, 0.365), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2654.768 ±(99.9%) 586.575 MB/sec [Average]
[info]   (min, avg, max) = (2382.269, 2654.768, 2723.224), stdev = 152.332
[info]   CI (99.9%): [2068.192, 3241.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66358.610 ±(99.9%) 16405.517 B/op [Average]
[info]   (min, avg, max) = (58888.047, 66358.610, 69214.278), stdev = 4260.461
[info]   CI (99.9%): [49953.093, 82764.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.58% complete, ETA 00:57:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138072.700 ops/s
[info] # Warmup Iteration   2: 174659.523 ops/s
[info] # Warmup Iteration   3: 171487.749 ops/s
[info] Iteration   1: 178100.290 ops/s
[info]                  ·gc.alloc.rate:            621.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2978.524 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 178866.346 ops/s
[info]                  ·gc.alloc.rate:            624.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5931.642 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 178629.809 ops/s
[info]                  ·gc.alloc.rate:            623.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5939.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 179312.556 ops/s
[info]                  ·gc.alloc.rate:            626.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5916.957 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 178201.554 ops/s
[info]                  ·gc.alloc.rate:            622.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5953.740 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   178622.111 ±(99.9%) 1911.400 ops/s [Average]
[info]   (min, avg, max) = (178100.290, 178622.111, 179312.556), stdev = 496.384
[info]   CI (99.9%): [176710.711, 180533.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   623.747 ±(99.9%) 6.951 MB/sec [Average]
[info]   (min, avg, max) = (621.819, 623.747, 626.217), stdev = 1.805
[info]   CI (99.9%): [616.796, 630.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.706 ±(99.9%) 580.581 MB/sec [Average]
[info]   (min, avg, max) = (336.991, 606.706, 674.180), stdev = 150.775
[info]   CI (99.9%): [26.125, 1187.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5344.048 ±(99.9%) 5092.225 B/op [Average]
[info]   (min, avg, max) = (2978.524, 5344.048, 5953.740), stdev = 1322.435
[info]   CI (99.9%): [251.823, 10436.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.83% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327664.199 ops/s
[info] # Warmup Iteration   2: 531063.354 ops/s
[info] # Warmup Iteration   3: 536109.214 ops/s
[info] Iteration   1: 540861.510 ops/s
[info]                  ·gc.alloc.rate:            547.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 978.858 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 538778.569 ops/s
[info]                  ·gc.alloc.rate:                   544.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1963.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 536892.930 ops/s
[info]                  ·gc.alloc.rate:            543.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1972.226 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 540038.005 ops/s
[info]                  ·gc.alloc.rate:            546.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 980.377 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 532408.627 ops/s
[info]                  ·gc.alloc.rate:            538.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1988.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   537795.928 ±(99.9%) 12948.231 ops/s [Average]
[info]   (min, avg, max) = (532408.627, 537795.928, 540861.510), stdev = 3362.614
[info]   CI (99.9%): [524847.697, 550744.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   543.945 ±(99.9%) 13.282 MB/sec [Average]
[info]   (min, avg, max) = (538.429, 543.945, 547.076), stdev = 3.449
[info]   CI (99.9%): [530.663, 557.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.038 ±(99.9%) 708.792 MB/sec [Average]
[info]   (min, avg, max) = (336.375, 538.038, 672.701), stdev = 184.071
[info]   CI (99.9%): [≈ 0, 1246.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1576.751 ±(99.9%) 2099.308 B/op [Average]
[info]   (min, avg, max) = (978.858, 1576.751, 1988.901), stdev = 545.184
[info]   CI (99.9%): [≈ 0, 3676.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 3.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.946), stdev = 0.870
[info]   CI (99.9%): [≈ 0, 3.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.08% complete, ETA 00:56:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427073.174 ops/s
[info] # Warmup Iteration   2: 456264.110 ops/s
[info] # Warmup Iteration   3: 482447.160 ops/s
[info] Iteration   1: 483644.850 ops/s
[info]                  ·gc.alloc.rate:            371.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1094.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 481888.399 ops/s
[info]                  ·gc.alloc.rate:            369.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1098.710 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 483741.181 ops/s
[info]                  ·gc.alloc.rate:                   371.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1094.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.167 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 484926.485 ops/s
[info]                  ·gc.alloc.rate:            372.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1093.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 483524.594 ops/s
[info]                  ·gc.alloc.rate:                   371.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1095.002 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   483545.102 ±(99.9%) 4174.754 ops/s [Average]
[info]   (min, avg, max) = (481888.399, 483545.102, 484926.485), stdev = 1084.170
[info]   CI (99.9%): [479370.347, 487719.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   371.162 ±(99.9%) 3.366 MB/sec [Average]
[info]   (min, avg, max) = (369.794, 371.162, 372.236), stdev = 0.874
[info]   CI (99.9%): [367.796, 374.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.561 ±(99.9%) 1.196 MB/sec [Average]
[info]   (min, avg, max) = (336.337, 336.561, 337.106), stdev = 0.311
[info]   CI (99.9%): [335.364, 337.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1095.388 ±(99.9%) 7.288 B/op [Average]
[info]   (min, avg, max) = (1093.996, 1095.388, 1098.710), stdev = 1.893
[info]   CI (99.9%): [1088.100, 1102.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.867 ±(99.9%) 4.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.867, 2.168), stdev = 1.187
[info]   CI (99.9%): [≈ 0, 5.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.33% complete, ETA 00:56:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450050.905 ops/s
[info] # Warmup Iteration   2: 500277.517 ops/s
[info] # Warmup Iteration   3: 500802.626 ops/s
[info] Iteration   1: 500692.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 500632.453 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 500882.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 501123.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 499546.830 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   500575.645 ±(99.9%) 2334.429 ops/s [Average]
[info]   (min, avg, max) = (499546.830, 500575.645, 501123.988), stdev = 606.244
[info]   CI (99.9%): [498241.216, 502910.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.58% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164760.736 ops/s
[info] # Warmup Iteration   2: 281229.888 ops/s
[info] # Warmup Iteration   3: 284034.656 ops/s
[info] Iteration   1: 284205.374 ops/s
[info]                  ·gc.alloc.rate:            783.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3725.706 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 285535.985 ops/s
[info]                  ·gc.alloc.rate:                   786.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3704.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 284098.096 ops/s
[info]                  ·gc.alloc.rate:                   782.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5583.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 284300.359 ops/s
[info]                  ·gc.alloc.rate:                   783.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3720.944 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 287964.782 ops/s
[info]                  ·gc.alloc.rate:                                  793.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3720.756 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   285220.919 ±(99.9%) 6317.738 ops/s [Average]
[info]   (min, avg, max) = (284098.096, 285220.919, 287964.782), stdev = 1640.697
[info]   CI (99.9%): [278903.181, 291538.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   785.903 ±(99.9%) 17.827 MB/sec [Average]
[info]   (min, avg, max) = (782.772, 785.903, 793.616), stdev = 4.630
[info]   CI (99.9%): [768.076, 803.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   741.235 ±(99.9%) 574.278 MB/sec [Average]
[info]   (min, avg, max) = (672.030, 741.235, 1007.938), stdev = 149.138
[info]   CI (99.9%): [166.957, 1315.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4091.052 ±(99.9%) 3212.244 B/op [Average]
[info]   (min, avg, max) = (3704.593, 4091.052, 5583.263), stdev = 834.210
[info]   CI (99.9%): [878.808, 7303.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.635 ±(99.9%) 41.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.635, 25.814), stdev = 10.878
[info]   CI (99.9%): [≈ 0, 48.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 3.578
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.83% complete, ETA 00:56:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6218.037 ops/s
[info] # Warmup Iteration   2: 8552.814 ops/s
[info] # Warmup Iteration   3: 8517.437 ops/s
[info] Iteration   1: 8571.790 ops/s
[info]                  ·gc.alloc.rate:                   1095.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              201256.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        247745.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 122.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8607.574 ops/s
[info]                  ·gc.alloc.rate:                   1100.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              201256.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        185114.462 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.786 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8659.469 ops/s
[info]                  ·gc.alloc.rate:                                  1107.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       184971.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                605.274 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8723.731 ops/s
[info]                  ·gc.alloc.rate:                                  1115.636 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       184215.793 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8708.201 ops/s
[info]                  ·gc.alloc.rate:                                  1113.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246072.255 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8654.153 ±(99.9%) 249.132 ops/s [Average]
[info]   (min, avg, max) = (8571.790, 8654.153, 8723.731), stdev = 64.699
[info]   CI (99.9%): [8405.021, 8903.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1106.571 ±(99.9%) 32.245 MB/sec [Average]
[info]   (min, avg, max) = (1095.967, 1106.571, 1115.636), stdev = 8.374
[info]   CI (99.9%): [1074.325, 1138.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201256.049 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (201256.047, 201256.049, 201256.054), stdev = 0.003
[info]   CI (99.9%): [201256.037, 201256.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.237 ±(99.9%) 6.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.237, 4.056), stdev = 1.670
[info]   CI (99.9%): [≈ 0, 7.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1152.329 ±(99.9%) 713.668 MB/sec [Average]
[info]   (min, avg, max) = (1012.165, 1152.329, 1361.409), stdev = 185.337
[info]   CI (99.9%): [438.661, 1865.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   209623.862 ±(99.9%) 131087.914 B/op [Average]
[info]   (min, avg, max) = (184215.793, 209623.862, 247745.187), stdev = 34043.115
[info]   CI (99.9%): [78535.948, 340711.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   169.868 ±(99.9%) 966.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 169.868, 605.274), stdev = 250.931
[info]   CI (99.9%): [≈ 0, 1136.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.494
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.07% complete, ETA 00:55:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5060.539 ops/s
[info] # Warmup Iteration   2: 9057.808 ops/s
[info] # Warmup Iteration   3: 9190.909 ops/s
[info] Iteration   1: 9131.406 ops/s
[info]                  ·gc.alloc.rate:                   1082.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        173825.037 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 114.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 9088.731 ops/s
[info]                  ·gc.alloc.rate:            1077.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 174743.443 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 9206.680 ops/s
[info]                  ·gc.alloc.rate:                                  1091.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173870.730 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                683.186 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 9245.403 ops/s
[info]                  ·gc.alloc.rate:            1095.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231782.129 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 9284.037 ops/s
[info]                  ·gc.alloc.rate:            1100.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 173106.505 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9191.252 ±(99.9%) 309.681 ops/s [Average]
[info]   (min, avg, max) = (9088.731, 9191.252, 9284.037), stdev = 80.423
[info]   CI (99.9%): [8881.571, 9500.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1089.483 ±(99.9%) 37.130 MB/sec [Average]
[info]   (min, avg, max) = (1077.264, 1089.483, 1100.684), stdev = 9.642
[info]   CI (99.9%): [1052.353, 1126.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.046 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (186576.044, 186576.046, 186576.052), stdev = 0.003
[info]   CI (99.9%): [186576.034, 186576.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.672 ±(99.9%) 14.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.672, 8.361), stdev = 3.739
[info]   CI (99.9%): [≈ 0, 16.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.375 ±(99.9%) 598.849 MB/sec [Average]
[info]   (min, avg, max) = (1008.262, 1083.375, 1361.404), stdev = 155.519
[info]   CI (99.9%): [484.526, 1682.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   185465.569 ±(99.9%) 99724.921 B/op [Average]
[info]   (min, avg, max) = (173106.505, 185465.569, 231782.129), stdev = 25898.245
[info]   CI (99.9%): [85740.648, 285190.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   159.599 ±(99.9%) 1143.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.599, 683.186), stdev = 296.886
[info]   CI (99.9%): [≈ 0, 1302.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 13.000), stdev = 4.879
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.32% complete, ETA 00:55:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98798.543 ops/s
[info] # Warmup Iteration   2: 106986.965 ops/s
[info] # Warmup Iteration   3: 106625.303 ops/s
[info] Iteration   1: 107780.227 ops/s
[info]                  ·gc.alloc.rate:            701.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9863.503 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 107913.111 ops/s
[info]                  ·gc.alloc.rate:            702.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9851.531 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 107642.986 ops/s
[info]                  ·gc.alloc.rate:            700.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9876.238 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 107596.813 ops/s
[info]                  ·gc.alloc.rate:            700.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9880.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 107624.967 ops/s
[info]                  ·gc.alloc.rate:                   700.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9877.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   107711.621 ±(99.9%) 511.954 ops/s [Average]
[info]   (min, avg, max) = (107596.813, 107711.621, 107913.111), stdev = 132.953
[info]   CI (99.9%): [107199.666, 108223.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   700.838 ±(99.9%) 3.190 MB/sec [Average]
[info]   (min, avg, max) = (700.225, 700.838, 702.144), stdev = 0.829
[info]   CI (99.9%): [697.648, 704.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.004, 10240.004, 10240.004), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.498 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (675.406, 675.498, 675.608), stdev = 0.076
[info]   CI (99.9%): [675.204, 675.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9869.778 ±(99.9%) 46.367 B/op [Average]
[info]   (min, avg, max) = (9851.531, 9869.778, 9880.001), stdev = 12.041
[info]   CI (99.9%): [9823.411, 9916.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.793 ±(99.9%) 67.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.793, 38.965), stdev = 17.426
[info]   CI (99.9%): [≈ 0, 74.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.57% complete, ETA 00:55:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3460.498 ops/s
[info] # Warmup Iteration   2: 6613.668 ops/s
[info] # Warmup Iteration   3: 6803.183 ops/s
[info] Iteration   1: 6856.512 ops/s
[info]                  ·gc.alloc.rate:            1276.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 308854.407 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 6863.512 ops/s
[info]                  ·gc.alloc.rate:                                  1278.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.970 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       232321.063 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                916.454 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 6903.040 ops/s
[info]                  ·gc.alloc.rate:                                  1285.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       310396.719 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6915.719 ops/s
[info]                  ·gc.alloc.rate:                                  1288.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       309813.435 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6802.507 ops/s
[info]                  ·gc.alloc.rate:                                  1266.775 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       315004.313 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6868.258 ±(99.9%) 171.625 ops/s [Average]
[info]   (min, avg, max) = (6802.507, 6868.258, 6915.719), stdev = 44.570
[info]   CI (99.9%): [6696.633, 7039.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1279.150 ±(99.9%) 32.516 MB/sec [Average]
[info]   (min, avg, max) = (1266.775, 1279.150, 1288.231), stdev = 8.444
[info]   CI (99.9%): [1246.633, 1311.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293112.062 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (293112.059, 293112.062, 293112.065), stdev = 0.003
[info]   CI (99.9%): [293112.051, 293112.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.070), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.801 ±(99.9%) 26.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.801, 15.970), stdev = 6.874
[info]   CI (99.9%): [≈ 0, 30.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.616 ±(99.9%) 593.801 MB/sec [Average]
[info]   (min, avg, max) = (1013.041, 1288.616, 1361.634), stdev = 154.208
[info]   CI (99.9%): [694.815, 1882.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   295277.987 ±(99.9%) 135825.654 B/op [Average]
[info]   (min, avg, max) = (232321.063, 295277.987, 315004.313), stdev = 35273.491
[info]   CI (99.9%): [159452.333, 431103.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   183.291 ±(99.9%) 1578.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 183.291, 916.454), stdev = 409.851
[info]   CI (99.9%): [≈ 0, 1761.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.82% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16706.815 ops/s
[info] # Warmup Iteration   2: 22808.029 ops/s
[info] # Warmup Iteration   3: 22916.318 ops/s
[info] Iteration   1: 22668.704 ops/s
[info]                  ·gc.alloc.rate:            952.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       66104.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70204.136 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 22506.408 ops/s
[info]                  ·gc.alloc.rate:                   945.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70755.939 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.581 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 22595.259 ops/s
[info]                  ·gc.alloc.rate:                   948.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70430.901 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 231.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 22171.544 ops/s
[info]                  ·gc.alloc.rate:                                  930.746 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72486.788 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 22391.058 ops/s
[info]                  ·gc.alloc.rate:            940.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47851.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22466.595 ±(99.9%) 750.007 ops/s [Average]
[info]   (min, avg, max) = (22171.544, 22466.595, 22668.704), stdev = 194.774
[info]   CI (99.9%): [21716.588, 23216.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   943.319 ±(99.9%) 32.121 MB/sec [Average]
[info]   (min, avg, max) = (930.746, 943.319, 952.219), stdev = 8.342
[info]   CI (99.9%): [911.198, 975.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66089.662 ±(99.9%) 50.478 B/op [Average]
[info]   (min, avg, max) = (66080.018, 66089.662, 66104.024), stdev = 13.109
[info]   CI (99.9%): [66039.184, 66140.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.086 ±(99.9%) 9.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.086, 5.428), stdev = 2.428
[info]   CI (99.9%): [≈ 0, 10.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.110 ±(99.9%) 573.647 MB/sec [Average]
[info]   (min, avg, max) = (680.722, 947.110, 1020.987), stdev = 148.974
[info]   CI (99.9%): [373.462, 1520.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   66345.945 ±(99.9%) 39959.497 B/op [Average]
[info]   (min, avg, max) = (47851.961, 66345.945, 72486.788), stdev = 10377.354
[info]   CI (99.9%): [26386.448, 106305.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   55.713 ±(99.9%) 387.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.713, 231.986), stdev = 100.582
[info]   CI (99.9%): [≈ 0, 443.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 4.123
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.07% complete, ETA 00:55:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14343.415 ops/s
[info] # Warmup Iteration   2: 24312.229 ops/s
[info] # Warmup Iteration   3: 25343.146 ops/s
[info] Iteration   1: 25338.402 ops/s
[info]                  ·gc.alloc.rate:            974.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62683.685 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 25286.551 ops/s
[info]                  ·gc.alloc.rate:            972.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62812.567 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 25415.620 ops/s
[info]                  ·gc.alloc.rate:                                  978.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.499 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62741.310 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                247.500 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 25463.478 ops/s
[info]                  ·gc.alloc.rate:                                  979.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42078.085 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 25470.946 ops/s
[info]                  ·gc.alloc.rate:            979.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63097.308 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25394.999 ±(99.9%) 309.533 ops/s [Average]
[info]   (min, avg, max) = (25286.551, 25394.999, 25470.946), stdev = 80.385
[info]   CI (99.9%): [25085.467, 25704.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   976.998 ±(99.9%) 11.855 MB/sec [Average]
[info]   (min, avg, max) = (972.736, 976.998, 979.841), stdev = 3.079
[info]   CI (99.9%): [965.144, 988.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.020), stdev = 0.002
[info]   CI (99.9%): [60552.011, 60552.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.073), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.469 ±(99.9%) 8.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.469, 4.499), stdev = 2.095
[info]   CI (99.9%): [≈ 0, 9.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.668 ±(99.9%) 572.917 MB/sec [Average]
[info]   (min, avg, max) = (680.656, 946.668, 1021.029), stdev = 148.785
[info]   CI (99.9%): [373.751, 1519.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   58682.591 ±(99.9%) 35747.687 B/op [Average]
[info]   (min, avg, max) = (42078.085, 58682.591, 63097.308), stdev = 9283.561
[info]   CI (99.9%): [22934.904, 94430.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   49.500 ±(99.9%) 426.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.500, 247.500), stdev = 110.685
[info]   CI (99.9%): [≈ 0, 475.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.070
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.32% complete, ETA 00:54:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727300.978 ops/s
[info] # Warmup Iteration   2: 860671.808 ops/s
[info] # Warmup Iteration   3: 861088.269 ops/s
[info] Iteration   1: 860755.838 ops/s
[info]                  ·gc.alloc.rate:                                  1552.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2467.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.308 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 864043.241 ops/s
[info]                  ·gc.alloc.rate:                                  1559.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3100.171 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 873201.351 ops/s
[info]                  ·gc.alloc.rate:            1575.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3067.574 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 873179.541 ops/s
[info]                  ·gc.alloc.rate:            1575.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2454.180 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 860109.049 ops/s
[info]                  ·gc.alloc.rate:                                  1552.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3114.276 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   866257.804 ±(99.9%) 25037.062 ops/s [Average]
[info]   (min, avg, max) = (860109.049, 866257.804, 873201.351), stdev = 6502.046
[info]   CI (99.9%): [841220.742, 891294.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1563.030 ±(99.9%) 44.820 MB/sec [Average]
[info]   (min, avg, max) = (1552.150, 1563.030, 1575.419), stdev = 11.640
[info]   CI (99.9%): [1518.210, 1607.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.073), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.134), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.298 ±(99.9%) 731.204 MB/sec [Average]
[info]   (min, avg, max) = (1349.277, 1563.298, 1702.121), stdev = 189.891
[info]   CI (99.9%): [832.095, 2294.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2840.763 ±(99.9%) 1336.997 B/op [Average]
[info]   (min, avg, max) = (2454.180, 2840.763, 3114.276), stdev = 347.214
[info]   CI (99.9%): [1503.766, 4177.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.462 ±(99.9%) 12.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.462, 7.308), stdev = 3.268
[info]   CI (99.9%): [≈ 0, 14.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.57% complete, ETA 00:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 889465.870 ops/s
[info] # Warmup Iteration   2: 1037555.903 ops/s
[info] # Warmup Iteration   3: 1046176.883 ops/s
[info] Iteration   1: 1046213.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1045340.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1045955.292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1046294.726 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1043255.673 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1045411.896 ±(99.9%) 4859.891 ops/s [Average]
[info]   (min, avg, max) = (1043255.673, 1045411.896, 1046294.726), stdev = 1262.098
[info]   CI (99.9%): [1040552.004, 1050271.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.82% complete, ETA 00:54:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15986.329 ops/s
[info] # Warmup Iteration   2: 22878.147 ops/s
[info] # Warmup Iteration   3: 23269.222 ops/s
[info] Iteration   1: 23762.235 ops/s
[info]                  ·gc.alloc.rate:            1033.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       68480.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66840.268 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 23381.971 ops/s
[info]                  ·gc.alloc.rate:            1017.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       68480.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67929.216 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 23744.060 ops/s
[info]                  ·gc.alloc.rate:                                  1032.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.123 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67155.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                264.915 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 24050.075 ops/s
[info]                  ·gc.alloc.rate:                                  1046.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66824.652 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 24077.122 ops/s
[info]                  ·gc.alloc.rate:                                  1047.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66752.502 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   23803.092 ±(99.9%) 1086.724 ops/s [Average]
[info]   (min, avg, max) = (23381.971, 23803.092, 24077.122), stdev = 282.219
[info]   CI (99.9%): [22716.368, 24889.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1035.409 ±(99.9%) 46.690 MB/sec [Average]
[info]   (min, avg, max) = (1017.382, 1035.409, 1047.232), stdev = 12.125
[info]   CI (99.9%): [988.719, 1082.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68470.443 ±(99.9%) 33.699 B/op [Average]
[info]   (min, avg, max) = (68464.017, 68470.443, 68480.041), stdev = 8.751
[info]   CI (99.9%): [68436.745, 68504.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.491 ±(99.9%) 8.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.491, 5.066), stdev = 2.180
[info]   CI (99.9%): [≈ 0, 9.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.630 ±(99.9%) 23.326 MB/sec [Average]
[info]   (min, avg, max) = (1008.898, 1014.630, 1021.052), stdev = 6.058
[info]   CI (99.9%): [991.304, 1037.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67100.496 ±(99.9%) 1881.255 B/op [Average]
[info]   (min, avg, max) = (66752.502, 67100.496, 67929.216), stdev = 488.556
[info]   CI (99.9%): [65219.241, 68981.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   52.983 ±(99.9%) 456.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.983, 264.915), stdev = 118.473
[info]   CI (99.9%): [≈ 0, 509.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 4.382
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.06% complete, ETA 00:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16454.991 ops/s
[info] # Warmup Iteration   2: 24750.226 ops/s
[info] # Warmup Iteration   3: 24691.003 ops/s
[info] Iteration   1: 24703.337 ops/s
[info]                  ·gc.alloc.rate:                   1340.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85941.895 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 23914.630 ops/s
[info]                  ·gc.alloc.rate:                                  1297.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89167.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                219.193 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 24904.241 ops/s
[info]                  ·gc.alloc.rate:                                  1351.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86041.323 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24848.256 ops/s
[info]                  ·gc.alloc.rate:                                  1348.909 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86238.657 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25036.310 ops/s
[info]                  ·gc.alloc.rate:                                  1358.667 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85591.204 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24681.355 ±(99.9%) 1713.297 ops/s [Average]
[info]   (min, avg, max) = (23914.630, 24681.355, 25036.310), stdev = 444.938
[info]   CI (99.9%): [22968.058, 26394.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1339.530 ±(99.9%) 93.387 MB/sec [Average]
[info]   (min, avg, max) = (1297.740, 1339.530, 1358.667), stdev = 24.252
[info]   CI (99.9%): [1246.143, 1432.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85416.018 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (85416.016, 85416.018, 85416.023), stdev = 0.003
[info]   CI (99.9%): [85416.007, 85416.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.949 ±(99.9%) 4.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.949, 2.956), stdev = 1.242
[info]   CI (99.9%): [≈ 0, 5.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1357.716 ±(99.9%) 22.492 MB/sec [Average]
[info]   (min, avg, max) = (1348.765, 1357.716, 1361.901), stdev = 5.841
[info]   CI (99.9%): [1335.223, 1380.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86596.167 ±(99.9%) 5608.858 B/op [Average]
[info]   (min, avg, max) = (85591.204, 86596.167, 89167.757), stdev = 1456.603
[info]   CI (99.9%): [80987.309, 92205.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.327 ±(99.9%) 366.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.327, 219.193), stdev = 95.074
[info]   CI (99.9%): [≈ 0, 418.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.31% complete, ETA 00:53:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14624.680 ops/s
[info] # Warmup Iteration   2: 26154.243 ops/s
[info] # Warmup Iteration   3: 26051.809 ops/s
[info] Iteration   1: 26292.002 ops/s
[info]                  ·gc.alloc.rate:                   1200.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60372.074 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.876 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 25432.797 ops/s
[info]                  ·gc.alloc.rate:                                  1161.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.667 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83516.727 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                247.335 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 26378.927 ops/s
[info]                  ·gc.alloc.rate:                                  1204.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.750 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60928.136 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26689.802 ops/s
[info]                  ·gc.alloc.rate:                                  1219.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80288.044 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26664.474 ops/s
[info]                  ·gc.alloc.rate:            1217.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60272.479 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   26291.600 ±(99.9%) 1966.063 ops/s [Average]
[info]   (min, avg, max) = (25432.797, 26291.600, 26689.802), stdev = 510.580
[info]   CI (99.9%): [24325.537, 28257.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1200.829 ±(99.9%) 89.654 MB/sec [Average]
[info]   (min, avg, max) = (1161.684, 1200.829, 1219.006), stdev = 23.283
[info]   CI (99.9%): [1111.174, 1290.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.146 ±(99.9%) 1.122 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.146, 71888.667), stdev = 0.291
[info]   CI (99.9%): [71887.025, 71889.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.283 ±(99.9%) 8.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.283, 5.334), stdev = 2.285
[info]   CI (99.9%): [≈ 0, 10.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.333 ±(99.9%) 714.678 MB/sec [Average]
[info]   (min, avg, max) = (1008.415, 1152.333, 1361.445), stdev = 185.600
[info]   CI (99.9%): [437.656, 1867.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   69075.492 ±(99.9%) 45312.301 B/op [Average]
[info]   (min, avg, max) = (60272.479, 69075.492, 83516.727), stdev = 11767.461
[info]   CI (99.9%): [23763.191, 114387.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   57.442 ±(99.9%) 414.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.442, 247.335), stdev = 107.548
[info]   CI (99.9%): [≈ 0, 471.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 5.413
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.56% complete, ETA 00:53:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239443.255 ops/s
[info] # Warmup Iteration   2: 243547.957 ops/s
[info] # Warmup Iteration   3: 249340.901 ops/s
[info] Iteration   1: 252508.857 ops/s
[info]                  ·gc.alloc.rate:            657.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4210.081 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 252407.838 ops/s
[info]                  ·gc.alloc.rate:            656.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4211.782 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 252622.642 ops/s
[info]                  ·gc.alloc.rate:            657.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4208.182 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 251209.308 ops/s
[info]                  ·gc.alloc.rate:            653.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4231.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 245584.943 ops/s
[info]                  ·gc.alloc.rate:            639.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4328.866 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   250866.718 ±(99.9%) 11579.089 ops/s [Average]
[info]   (min, avg, max) = (245584.943, 250866.718, 252622.642), stdev = 3007.053
[info]   CI (99.9%): [239287.629, 262445.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   652.921 ±(99.9%) 30.239 MB/sec [Average]
[info]   (min, avg, max) = (639.161, 652.921, 657.634), stdev = 7.853
[info]   CI (99.9%): [622.682, 683.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.502 ±(99.9%) 0.469 MB/sec [Average]
[info]   (min, avg, max) = (675.350, 675.502, 675.645), stdev = 0.122
[info]   CI (99.9%): [675.034, 675.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4238.162 ±(99.9%) 198.688 B/op [Average]
[info]   (min, avg, max) = (4208.182, 4238.162, 4328.866), stdev = 51.599
[info]   CI (99.9%): [4039.474, 4436.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.81% complete, ETA 00:53:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7960.983 ops/s
[info] # Warmup Iteration   2: 14891.824 ops/s
[info] # Warmup Iteration   3: 15300.276 ops/s
[info] Iteration   1: 15333.424 ops/s
[info]                  ·gc.alloc.rate:                                  1578.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173053.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                410.241 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 15245.300 ops/s
[info]                  ·gc.alloc.rate:                                  1569.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162026.901 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.406 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       175702.497 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 15511.141 ops/s
[info]                  ·gc.alloc.rate:            1596.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       162024.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138151.949 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 15423.098 ops/s
[info]                  ·gc.alloc.rate:                                  1588.095 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173675.073 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 15467.570 ops/s
[info]                  ·gc.alloc.rate:                                  1592.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.267 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173181.104 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15396.107 ±(99.9%) 411.768 ops/s [Average]
[info]   (min, avg, max) = (15245.300, 15396.107, 15511.141), stdev = 106.935
[info]   CI (99.9%): [14984.339, 15807.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1584.878 ±(99.9%) 42.731 MB/sec [Average]
[info]   (min, avg, max) = (1569.212, 1584.878, 1596.659), stdev = 11.097
[info]   CI (99.9%): [1542.147, 1627.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.603 ±(99.9%) 4.948 B/op [Average]
[info]   (min, avg, max) = (162024.026, 162024.603, 162026.901), stdev = 1.285
[info]   CI (99.9%): [162019.655, 162029.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.034 ±(99.9%) 15.618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.034, 9.285), stdev = 4.056
[info]   CI (99.9%): [≈ 0, 17.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.572 ±(99.9%) 580.022 MB/sec [Average]
[info]   (min, avg, max) = (1361.413, 1630.572, 1702.294), stdev = 150.630
[info]   CI (99.9%): [1050.550, 2210.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   166752.791 ±(99.9%) 61701.789 B/op [Average]
[info]   (min, avg, max) = (138151.949, 166752.791, 175702.497), stdev = 16023.759
[info]   CI (99.9%): [105051.002, 228454.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.048 ±(99.9%) 706.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.048, 410.241), stdev = 183.465
[info]   CI (99.9%): [≈ 0, 788.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 18.000), stdev = 6.387
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.06% complete, ETA 00:53:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38847.475 ops/s
[info] # Warmup Iteration   2: 50252.582 ops/s
[info] # Warmup Iteration   3: 51242.936 ops/s
[info] Iteration   1: 52864.826 ops/s
[info]                  ·gc.alloc.rate:            1283.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40061.249 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 52642.693 ops/s
[info]                  ·gc.alloc.rate:                                  1276.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30330.875 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                99.576 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 53096.790 ops/s
[info]                  ·gc.alloc.rate:                                  1287.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40357.184 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 53172.720 ops/s
[info]                  ·gc.alloc.rate:                                  1289.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40301.029 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 53058.178 ops/s
[info]                  ·gc.alloc.rate:            1286.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40386.842 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   52967.041 ±(99.9%) 823.836 ops/s [Average]
[info]   (min, avg, max) = (52642.693, 52967.041, 53172.720), stdev = 213.948
[info]   CI (99.9%): [52143.205, 53790.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1284.915 ±(99.9%) 19.459 MB/sec [Average]
[info]   (min, avg, max) = (1276.792, 1284.915, 1289.640), stdev = 5.053
[info]   CI (99.9%): [1265.457, 1304.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.013), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 0.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.382), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1289.093 ±(99.9%) 591.763 MB/sec [Average]
[info]   (min, avg, max) = (1014.412, 1289.093, 1361.426), stdev = 153.679
[info]   CI (99.9%): [697.330, 1880.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   38287.436 ±(99.9%) 17134.197 B/op [Average]
[info]   (min, avg, max) = (30330.875, 38287.436, 40386.842), stdev = 4449.696
[info]   CI (99.9%): [21153.239, 55421.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.915 ±(99.9%) 171.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.915, 99.576), stdev = 44.532
[info]   CI (99.9%): [≈ 0, 191.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.31% complete, ETA 00:53:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80661.164 ops/s
[info] # Warmup Iteration   2: 129973.978 ops/s
[info] # Warmup Iteration   3: 126291.025 ops/s
[info] Iteration   1: 125256.016 ops/s
[info]                  ·gc.alloc.rate:            1061.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12680.944 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 128182.679 ops/s
[info]                  ·gc.alloc.rate:                   1085.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12383.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 129809.919 ops/s
[info]                  ·gc.alloc.rate:                                  1100.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.217 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.627 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16459.716 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                48.458 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 130843.071 ops/s
[info]                  ·gc.alloc.rate:                                  1108.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12283.399 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 130810.111 ops/s
[info]                  ·gc.alloc.rate:            1108.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12286.497 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   128980.359 ±(99.9%) 9033.204 ops/s [Average]
[info]   (min, avg, max) = (125256.016, 128980.359, 130843.071), stdev = 2345.895
[info]   CI (99.9%): [119947.155, 138013.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1092.822 ±(99.9%) 76.750 MB/sec [Average]
[info]   (min, avg, max) = (1061.147, 1092.822, 1108.493), stdev = 19.932
[info]   CI (99.9%): [1016.072, 1169.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.217), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.527 ±(99.9%) 4.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.627), stdev = 1.174
[info]   CI (99.9%): [≈ 0, 5.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.481 ±(99.9%) 591.317 MB/sec [Average]
[info]   (min, avg, max) = (1008.385, 1083.481, 1357.962), stdev = 153.563
[info]   CI (99.9%): [492.164, 1674.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13218.760 ±(99.9%) 7004.349 B/op [Average]
[info]   (min, avg, max) = (12283.399, 13218.760, 16459.716), stdev = 1819.007
[info]   CI (99.9%): [6214.411, 20223.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.328 ±(99.9%) 81.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.328, 48.458), stdev = 21.057
[info]   CI (99.9%): [≈ 0, 92.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 13.000), stdev = 5.030
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.56% complete, ETA 00:52:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1185158.225 ops/s
[info] # Warmup Iteration   2: 1448465.387 ops/s
[info] # Warmup Iteration   3: 1460467.096 ops/s
[info] Iteration   1: 1448444.924 ops/s
[info]                  ·gc.alloc.rate:                                  1553.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1467.131 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.343 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1459258.652 ops/s
[info]                  ·gc.alloc.rate:                                  1564.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1835.648 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1454461.905 ops/s
[info]                  ·gc.alloc.rate:                                  1560.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1473.303 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1460725.108 ops/s
[info]                  ·gc.alloc.rate:            1566.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1833.762 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1454749.608 ops/s
[info]                  ·gc.alloc.rate:                                  1560.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1841.344 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1455528.039 ±(99.9%) 18551.166 ops/s [Average]
[info]   (min, avg, max) = (1448444.924, 1455528.039, 1460725.108), stdev = 4817.679
[info]   CI (99.9%): [1436976.873, 1474079.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1561.009 ±(99.9%) 19.901 MB/sec [Average]
[info]   (min, avg, max) = (1553.193, 1561.009, 1566.460), stdev = 5.168
[info]   CI (99.9%): [1541.108, 1580.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.034 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.091), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.451 ±(99.9%) 729.844 MB/sec [Average]
[info]   (min, avg, max) = (1349.963, 1563.451, 1702.034), stdev = 189.538
[info]   CI (99.9%): [833.607, 2293.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1690.238 ±(99.9%) 773.524 B/op [Average]
[info]   (min, avg, max) = (1467.131, 1690.238, 1841.344), stdev = 200.882
[info]   CI (99.9%): [916.714, 2463.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.869 ±(99.9%) 7.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.869, 4.343), stdev = 1.942
[info]   CI (99.9%): [≈ 0, 8.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.81% complete, ETA 00:52:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1343448.185 ops/s
[info] # Warmup Iteration   2: 1549215.443 ops/s
[info] # Warmup Iteration   3: 1496942.373 ops/s
[info] Iteration   1: 1549909.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1550543.883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1523873.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1550293.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1550329.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1544989.808 ±(99.9%) 45463.218 ops/s [Average]
[info]   (min, avg, max) = (1523873.385, 1544989.808, 1550543.883), stdev = 11806.653
[info]   CI (99.9%): [1499526.591, 1590453.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.05% complete, ETA 00:52:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42144.566 ops/s
[info] # Warmup Iteration   2: 57475.675 ops/s
[info] # Warmup Iteration   3: 58072.330 ops/s
[info] Iteration   1: 58334.050 ops/s
[info]                  ·gc.alloc.rate:            1355.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       36584.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36304.050 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 58859.857 ops/s
[info]                  ·gc.alloc.rate:                                  1367.926 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36584.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.491 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36300.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                106.870 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 60016.626 ops/s
[info]                  ·gc.alloc.rate:                                  1394.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36584.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35706.611 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 60793.414 ops/s
[info]                  ·gc.alloc.rate:            1413.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       36584.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35247.411 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 59618.776 ops/s
[info]                  ·gc.alloc.rate:            1385.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       36584.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35943.741 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   59524.545 ±(99.9%) 3713.496 ops/s [Average]
[info]   (min, avg, max) = (58334.050, 59524.545, 60793.414), stdev = 964.383
[info]   CI (99.9%): [55811.049, 63238.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1383.553 ±(99.9%) 86.960 MB/sec [Average]
[info]   (min, avg, max) = (1355.754, 1383.553, 1413.391), stdev = 22.583
[info]   CI (99.9%): [1296.593, 1470.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (36584.007, 36584.007, 36584.008), stdev = 0.001
[info]   CI (99.9%): [36584.005, 36584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.131), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.720 ±(99.9%) 5.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.491), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.487 ±(99.9%) 27.019 MB/sec [Average]
[info]   (min, avg, max) = (1345.379, 1357.487, 1361.753), stdev = 7.017
[info]   CI (99.9%): [1330.468, 1384.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   35900.420 ±(99.9%) 1709.822 B/op [Average]
[info]   (min, avg, max) = (35247.411, 35900.420, 36304.050), stdev = 444.035
[info]   CI (99.9%): [34190.598, 37610.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.374 ±(99.9%) 184.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.374, 106.870), stdev = 47.794
[info]   CI (99.9%): [≈ 0, 205.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 15.000), stdev = 4.930
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.30% complete, ETA 00:52:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10231.447 ops/s
[info] # Warmup Iteration   2: 13657.966 ops/s
[info] # Warmup Iteration   3: 14109.983 ops/s
[info] Iteration   1: 14075.130 ops/s
[info]                  ·gc.alloc.rate:                   1237.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              138376.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        150903.181 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.483 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 14066.346 ops/s
[info]                  ·gc.alloc.rate:                                  1236.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             138386.815 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       151372.369 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                372.655 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 14266.994 ops/s
[info]                  ·gc.alloc.rate:                                  1254.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             138408.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150195.469 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 14270.661 ops/s
[info]                  ·gc.alloc.rate:                                  1254.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             138408.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112615.035 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 14235.440 ops/s
[info]                  ·gc.alloc.rate:            1251.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       138408.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150522.463 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14182.914 ±(99.9%) 398.004 ops/s [Average]
[info]   (min, avg, max) = (14066.346, 14182.914, 14270.661), stdev = 103.360
[info]   CI (99.9%): [13784.911, 14580.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1247.030 ±(99.9%) 35.384 MB/sec [Average]
[info]   (min, avg, max) = (1236.853, 1247.030, 1254.896), stdev = 9.189
[info]   CI (99.9%): [1211.646, 1282.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   138397.389 ±(99.9%) 58.006 B/op [Average]
[info]   (min, avg, max) = (138376.034, 138397.389, 138408.036), stdev = 15.064
[info]   CI (99.9%): [138339.383, 138455.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.027), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.086 ±(99.9%) 5.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.086, 2.932), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.151 ±(99.9%) 577.482 MB/sec [Average]
[info]   (min, avg, max) = (1021.040, 1289.151, 1361.314), stdev = 149.970
[info]   CI (99.9%): [711.669, 1866.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   143121.703 ±(99.9%) 65689.635 B/op [Average]
[info]   (min, avg, max) = (112615.035, 143121.703, 151372.369), stdev = 17059.390
[info]   CI (99.9%): [77432.068, 208811.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   89.428 ±(99.9%) 622.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.428, 372.655), stdev = 161.580
[info]   CI (99.9%): [≈ 0, 711.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 5.099
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.55% complete, ETA 00:52:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7788.833 ops/s
[info] # Warmup Iteration   2: 13743.365 ops/s
[info] # Warmup Iteration   3: 13913.034 ops/s
[info] Iteration   1: 13838.071 ops/s
[info]                  ·gc.alloc.rate:            1144.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       130224.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153032.550 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 13732.653 ops/s
[info]                  ·gc.alloc.rate:                   1136.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              130227.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        115651.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 458.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13586.319 ops/s
[info]                  ·gc.alloc.rate:                                  1124.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             130256.661 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.707 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       118300.486 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 13639.626 ops/s
[info]                  ·gc.alloc.rate:                                  1128.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             130256.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       157109.613 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 14015.933 ops/s
[info]                  ·gc.alloc.rate:            1160.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       130256.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114663.457 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13762.521 ±(99.9%) 658.470 ops/s [Average]
[info]   (min, avg, max) = (13586.319, 13762.521, 14015.933), stdev = 171.003
[info]   CI (99.9%): [13104.050, 14420.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1138.852 ±(99.9%) 54.937 MB/sec [Average]
[info]   (min, avg, max) = (1124.365, 1138.852, 1160.313), stdev = 14.267
[info]   CI (99.9%): [1083.916, 1193.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   130244.033 ±(99.9%) 64.554 B/op [Average]
[info]   (min, avg, max) = (130224.029, 130244.033, 130256.661), stdev = 16.764
[info]   CI (99.9%): [130179.479, 130308.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.836 ±(99.9%) 6.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.836, 3.707), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 7.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.644 ±(99.9%) 709.731 MB/sec [Average]
[info]   (min, avg, max) = (1008.892, 1151.644, 1361.509), stdev = 184.315
[info]   CI (99.9%): [441.914, 1861.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   131751.574 ±(99.9%) 82318.478 B/op [Average]
[info]   (min, avg, max) = (114663.457, 131751.574, 157109.613), stdev = 21377.847
[info]   CI (99.9%): [49433.096, 214070.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   91.605 ±(99.9%) 788.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.605, 458.027), stdev = 204.836
[info]   CI (99.9%): [≈ 0, 880.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 16.000), stdev = 6.229
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.80% complete, ETA 00:51:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247450.206 ops/s
[info] # Warmup Iteration   2: 262462.872 ops/s
[info] # Warmup Iteration   3: 262201.625 ops/s
[info] Iteration   1: 271689.966 ops/s
[info]                  ·gc.alloc.rate:            707.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3912.669 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 273014.501 ops/s
[info]                  ·gc.alloc.rate:            710.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3893.884 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 271865.489 ops/s
[info]                  ·gc.alloc.rate:            707.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3910.266 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 272353.943 ops/s
[info]                  ·gc.alloc.rate:            708.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3903.304 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 272368.618 ops/s
[info]                  ·gc.alloc.rate:                   708.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3903.103 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   272258.503 ±(99.9%) 1991.998 ops/s [Average]
[info]   (min, avg, max) = (271689.966, 272258.503, 273014.501), stdev = 517.315
[info]   CI (99.9%): [270266.505, 274250.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   708.527 ±(99.9%) 5.134 MB/sec [Average]
[info]   (min, avg, max) = (707.054, 708.527, 710.366), stdev = 1.333
[info]   CI (99.9%): [703.393, 713.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.424 ±(99.9%) 0.462 MB/sec [Average]
[info]   (min, avg, max) = (675.313, 675.424, 675.609), stdev = 0.120
[info]   CI (99.9%): [674.962, 675.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3904.645 ±(99.9%) 28.294 B/op [Average]
[info]   (min, avg, max) = (3893.884, 3904.645, 3912.669), stdev = 7.348
[info]   CI (99.9%): [3876.351, 3932.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.079 ±(99.9%) 26.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.079, 15.397), stdev = 6.886
[info]   CI (99.9%): [≈ 0, 29.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.05% complete, ETA 00:51:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5502.015 ops/s
[info] # Warmup Iteration   2: 10115.617 ops/s
[info] # Warmup Iteration   3: 10520.252 ops/s
[info] Iteration   1: 10485.439 ops/s
[info]                  ·gc.alloc.rate:                   1447.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        252446.072 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 599.872 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 10706.736 ops/s
[info]                  ·gc.alloc.rate:                                  1478.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200139.074 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 10717.709 ops/s
[info]                  ·gc.alloc.rate:                                  1479.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.533 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       199933.707 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 10580.246 ops/s
[info]                  ·gc.alloc.rate:                                  1460.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217321.421 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       253176.307 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 10707.381 ops/s
[info]                  ·gc.alloc.rate:                                  1478.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200120.387 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10639.502 ±(99.9%) 396.873 ops/s [Average]
[info]   (min, avg, max) = (10485.439, 10639.502, 10717.709), stdev = 103.067
[info]   CI (99.9%): [10242.629, 11036.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1469.098 ±(99.9%) 54.689 MB/sec [Average]
[info]   (min, avg, max) = (1447.981, 1469.098, 1479.798), stdev = 14.202
[info]   CI (99.9%): [1414.409, 1523.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.316 ±(99.9%) 2.378 B/op [Average]
[info]   (min, avg, max) = (217320.038, 217320.316, 217321.421), stdev = 0.617
[info]   CI (99.9%): [217317.938, 217322.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.059 ±(99.9%) 32.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.059, 19.373), stdev = 8.563
[info]   CI (99.9%): [≈ 0, 37.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.648 ±(99.9%) 697.322 MB/sec [Average]
[info]   (min, avg, max) = (1361.289, 1493.648, 1701.734), stdev = 181.092
[info]   CI (99.9%): [796.326, 2190.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   221163.109 ±(99.9%) 111252.332 B/op [Average]
[info]   (min, avg, max) = (199933.707, 221163.109, 253176.307), stdev = 28891.877
[info]   CI (99.9%): [109910.778, 332415.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   119.974 ±(99.9%) 1033.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119.974, 599.872), stdev = 268.271
[info]   CI (99.9%): [≈ 0, 1152.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 21.000), stdev = 7.759
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.30% complete, ETA 00:51:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27557.398 ops/s
[info] # Warmup Iteration   2: 36744.150 ops/s
[info] # Warmup Iteration   3: 36838.889 ops/s
[info] Iteration   1: 37093.547 ops/s
[info]                  ·gc.alloc.rate:            1153.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       48932.721 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42901.686 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 36858.089 ops/s
[info]                  ·gc.alloc.rate:                   1145.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57569.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 142.218 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 37657.738 ops/s
[info]                  ·gc.alloc.rate:                                  1170.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42679.137 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 37094.888 ops/s
[info]                  ·gc.alloc.rate:            1153.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57769.045 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 36760.786 ops/s
[info]                  ·gc.alloc.rate:            1142.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43716.807 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37093.009 ±(99.9%) 1340.115 ops/s [Average]
[info]   (min, avg, max) = (36760.786, 37093.009, 37657.738), stdev = 348.024
[info]   CI (99.9%): [35752.894, 38433.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1153.096 ±(99.9%) 42.377 MB/sec [Average]
[info]   (min, avg, max) = (1142.657, 1153.096, 1170.943), stdev = 11.005
[info]   CI (99.9%): [1110.719, 1195.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.953 ±(99.9%) 8.111 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.953, 48932.721), stdev = 2.106
[info]   CI (99.9%): [48920.842, 48937.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.835 ±(99.9%) 7.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.835, 4.176), stdev = 1.868
[info]   CI (99.9%): [≈ 0, 8.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.563 ±(99.9%) 711.072 MB/sec [Average]
[info]   (min, avg, max) = (1011.004, 1152.563, 1361.578), stdev = 184.663
[info]   CI (99.9%): [441.491, 1863.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   48927.334 ±(99.9%) 30767.188 B/op [Average]
[info]   (min, avg, max) = (42679.137, 48927.334, 57769.045), stdev = 7990.141
[info]   CI (99.9%): [18160.146, 79694.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.444 ±(99.9%) 244.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.444, 142.218), stdev = 63.602
[info]   CI (99.9%): [≈ 0, 273.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.775
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.55% complete, ETA 00:51:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26369.170 ops/s
[info] # Warmup Iteration   2: 42396.547 ops/s
[info] # Warmup Iteration   3: 42592.118 ops/s
[info] Iteration   1: 42241.139 ops/s
[info]                  ·gc.alloc.rate:            1120.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50135.474 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 43318.280 ops/s
[info]                  ·gc.alloc.rate:                   1148.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36641.833 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 169.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 43926.760 ops/s
[info]                  ·gc.alloc.rate:                                  1165.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.202 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48764.319 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 43913.232 ops/s
[info]                  ·gc.alloc.rate:            1165.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36599.053 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 43961.206 ops/s
[info]                  ·gc.alloc.rate:                                  1166.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36559.099 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   43472.123 ±(99.9%) 2842.353 ops/s [Average]
[info]   (min, avg, max) = (42241.139, 43472.123, 43961.206), stdev = 738.150
[info]   CI (99.9%): [40629.770, 46314.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1153.237 ±(99.9%) 75.941 MB/sec [Average]
[info]   (min, avg, max) = (1120.436, 1153.237, 1166.163), stdev = 19.722
[info]   CI (99.9%): [1077.296, 1229.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.010, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.477 ±(99.9%) 12.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.477, 7.243), stdev = 3.224
[info]   CI (99.9%): [≈ 0, 13.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.491 ±(99.9%) 710.212 MB/sec [Average]
[info]   (min, avg, max) = (1008.260, 1151.491, 1361.304), stdev = 184.440
[info]   CI (99.9%): [441.279, 1861.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   41739.956 ±(99.9%) 27165.974 B/op [Average]
[info]   (min, avg, max) = (36559.099, 41739.956, 50135.474), stdev = 7054.917
[info]   CI (99.9%): [14573.982, 68905.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   33.883 ±(99.9%) 291.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.883, 169.414), stdev = 75.764
[info]   CI (99.9%): [≈ 0, 325.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 16.000), stdev = 6.618
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.80% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1448526.651 ops/s
[info] # Warmup Iteration   2: 1687924.848 ops/s
[info] # Warmup Iteration   3: 1692011.024 ops/s
[info] Iteration   1: 1686005.573 ops/s
[info]                  ·gc.alloc.rate:                                  1533.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1350.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1260.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.353 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1678963.252 ops/s
[info]                  ·gc.alloc.rate:                                  1527.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1595.437 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1664795.639 ops/s
[info]                  ·gc.alloc.rate:            1514.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1287.213 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1655000.237 ops/s
[info]                  ·gc.alloc.rate:                                  1505.694 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1618.530 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1686465.027 ops/s
[info]                  ·gc.alloc.rate:            1534.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1270.736 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1674245.946 ±(99.9%) 53410.019 ops/s [Average]
[info]   (min, avg, max) = (1655000.237, 1674245.946, 1686465.027), stdev = 13870.412
[info]   CI (99.9%): [1620835.926, 1727655.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1523.211 ±(99.9%) 48.852 MB/sec [Average]
[info]   (min, avg, max) = (1505.694, 1523.211, 1534.816), stdev = 12.687
[info]   CI (99.9%): [1474.359, 1572.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.074), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.070), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.361 ±(99.9%) 725.588 MB/sec [Average]
[info]   (min, avg, max) = (1350.000, 1495.361, 1701.823), stdev = 188.433
[info]   CI (99.9%): [769.772, 2220.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1406.476 ±(99.9%) 706.467 B/op [Average]
[info]   (min, avg, max) = (1260.466, 1406.476, 1618.530), stdev = 183.467
[info]   CI (99.9%): [700.009, 2112.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.871 ±(99.9%) 7.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 4.353), stdev = 1.947
[info]   CI (99.9%): [≈ 0, 8.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.04% complete, ETA 00:50:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1657501.069 ops/s
[info] # Warmup Iteration   2: 1841479.244 ops/s
[info] # Warmup Iteration   3: 1833956.221 ops/s
[info] Iteration   1: 1831754.606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1831803.637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1829483.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1830965.304 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1830940.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1830989.557 ±(99.9%) 3611.854 ops/s [Average]
[info]   (min, avg, max) = (1829483.475, 1830989.557, 1831803.637), stdev = 937.987
[info]   CI (99.9%): [1827377.703, 1834601.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.29% complete, ETA 00:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25076.216 ops/s
[info] # Warmup Iteration   2: 34095.773 ops/s
[info] # Warmup Iteration   3: 33447.082 ops/s
[info] Iteration   1: 33384.420 ops/s
[info]                  ·gc.alloc.rate:            1053.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       49672.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47575.474 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 33673.199 ops/s
[info]                  ·gc.alloc.rate:            1062.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       49664.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62891.521 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 34558.254 ops/s
[info]                  ·gc.alloc.rate:                                  1090.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             49664.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46322.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                182.013 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 33863.142 ops/s
[info]                  ·gc.alloc.rate:                                  1068.330 MB/sec
[info]                  ·gc.alloc.rate.norm:                             49664.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47461.307 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 34335.059 ops/s
[info]                  ·gc.alloc.rate:            1083.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       49664.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46808.975 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   33962.815 ±(99.9%) 1848.175 ops/s [Average]
[info]   (min, avg, max) = (33384.420, 33962.815, 34558.254), stdev = 479.965
[info]   CI (99.9%): [32114.639, 35810.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1071.575 ±(99.9%) 58.699 MB/sec [Average]
[info]   (min, avg, max) = (1053.369, 1071.575, 1090.585), stdev = 15.244
[info]   CI (99.9%): [1012.877, 1130.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   49665.620 ±(99.9%) 13.845 B/op [Average]
[info]   (min, avg, max) = (49664.012, 49665.620, 49672.052), stdev = 3.595
[info]   CI (99.9%): [49651.776, 49679.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.087 ±(99.9%) 7.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.087, 4.284), stdev = 1.856
[info]   CI (99.9%): [≈ 0, 8.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.657 ±(99.9%) 565.352 MB/sec [Average]
[info]   (min, avg, max) = (1008.908, 1082.657, 1345.148), stdev = 146.820
[info]   CI (99.9%): [517.305, 1648.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   50211.909 ±(99.9%) 27363.859 B/op [Average]
[info]   (min, avg, max) = (46322.269, 50211.909, 62891.521), stdev = 7106.307
[info]   CI (99.9%): [22848.050, 77575.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.403 ±(99.9%) 313.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.403, 182.013), stdev = 81.399
[info]   CI (99.9%): [≈ 0, 349.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 16.000), stdev = 5.857
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.54% complete, ETA 00:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103157.477 ops/s
[info] # Warmup Iteration   2: 127296.206 ops/s
[info] # Warmup Iteration   3: 128074.899 ops/s
[info] Iteration   1: 129548.081 ops/s
[info]                  ·gc.alloc.rate:                                  2220.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24812.142 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 129370.068 ops/s
[info]                  ·gc.alloc.rate:                                  2217.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28987.544 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 130272.123 ops/s
[info]                  ·gc.alloc.rate:                                  2233.090 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24674.081 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 129999.607 ops/s
[info]                  ·gc.alloc.rate:                                  2228.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28847.312 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 129379.588 ops/s
[info]                  ·gc.alloc.rate:                                  2217.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26976.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28985.528 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   129713.893 ±(99.9%) 1553.106 ops/s [Average]
[info]   (min, avg, max) = (129370.068, 129713.893, 130272.123), stdev = 403.337
[info]   CI (99.9%): [128160.787, 131267.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2223.229 ±(99.9%) 27.131 MB/sec [Average]
[info]   (min, avg, max) = (2217.058, 2223.229, 2233.090), stdev = 7.046
[info]   CI (99.9%): [2196.098, 2250.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26976.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26976.003, 26976.003, 26976.003), stdev = 0.001
[info]   CI (99.9%): [26976.003, 26976.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.008, 0.019), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.101 ±(99.9%) 0.346 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.101, 0.228), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.519 ±(99.9%) 717.892 MB/sec [Average]
[info]   (min, avg, max) = (2042.046, 2246.519, 2382.968), stdev = 186.434
[info]   CI (99.9%): [1528.627, 2964.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27261.321 ±(99.9%) 8856.564 B/op [Average]
[info]   (min, avg, max) = (24674.081, 27261.321, 28987.544), stdev = 2300.022
[info]   CI (99.9%): [18404.757, 36117.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 41.79% complete, ETA 00:50:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 960.562 ops/s
[info] # Warmup Iteration   2: 330435.316 ops/s
[info] # Warmup Iteration   3: 324713.218 ops/s
[info] Iteration   1: 335031.373 ops/s
[info]                  ·gc.alloc.rate:            670.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3135.561 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 337923.376 ops/s
[info]                  ·gc.alloc.rate:            676.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3108.684 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 337572.587 ops/s
[info]                  ·gc.alloc.rate:            676.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3112.110 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 332288.084 ops/s
[info]                  ·gc.alloc.rate:            665.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3161.517 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 336951.743 ops/s
[info]                  ·gc.alloc.rate:            674.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3117.502 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   335953.433 ±(99.9%) 8986.105 ops/s [Average]
[info]   (min, avg, max) = (332288.084, 335953.433, 337923.376), stdev = 2333.663
[info]   CI (99.9%): [326967.327, 344939.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   672.770 ±(99.9%) 18.024 MB/sec [Average]
[info]   (min, avg, max) = (665.442, 672.770, 676.744), stdev = 4.681
[info]   CI (99.9%): [654.746, 690.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.423 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (667.330, 667.423, 667.503), stdev = 0.066
[info]   CI (99.9%): [667.169, 667.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3127.075 ±(99.9%) 84.188 B/op [Average]
[info]   (min, avg, max) = (3108.684, 3127.075, 3161.517), stdev = 21.863
[info]   CI (99.9%): [3042.886, 3211.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.04% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146797.171 ops/s
[info] # Warmup Iteration   2: 226976.093 ops/s
[info] # Warmup Iteration   3: 230894.530 ops/s
[info] Iteration   1: 232472.206 ops/s
[info]                  ·gc.alloc.rate:            515.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2277.425 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 231000.991 ops/s
[info]                  ·gc.alloc.rate:            511.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4583.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 232391.493 ops/s
[info]                  ·gc.alloc.rate:            514.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2278.228 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 231652.268 ops/s
[info]                  ·gc.alloc.rate:                   513.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4566.503 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 232656.065 ops/s
[info]                  ·gc.alloc.rate:            515.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2275.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   232034.605 ±(99.9%) 2667.537 ops/s [Average]
[info]   (min, avg, max) = (231000.991, 232034.605, 232656.065), stdev = 692.751
[info]   CI (99.9%): [229367.067, 234702.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   514.215 ±(99.9%) 5.779 MB/sec [Average]
[info]   (min, avg, max) = (511.893, 514.215, 515.540), stdev = 1.501
[info]   CI (99.9%): [508.436, 519.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.818 ±(99.9%) 709.016 MB/sec [Average]
[info]   (min, avg, max) = (336.313, 470.818, 672.697), stdev = 184.129
[info]   CI (99.9%): [≈ 0, 1179.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3196.302 ±(99.9%) 4846.751 B/op [Average]
[info]   (min, avg, max) = (2275.644, 3196.302, 4583.711), stdev = 1258.686
[info]   CI (99.9%): [≈ 0, 8043.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.905 ±(99.9%) 7.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.905, 4.526), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 8.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.29% complete, ETA 00:49:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 417116.826 ops/s
[info] # Warmup Iteration   2: 445155.482 ops/s
[info] # Warmup Iteration   3: 453077.844 ops/s
[info] Iteration   1: 450964.860 ops/s
[info]                  ·gc.alloc.rate:            568.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2352.819 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 450999.092 ops/s
[info]                  ·gc.alloc.rate:            568.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2352.636 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 452594.031 ops/s
[info]                  ·gc.alloc.rate:            570.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2344.346 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 453771.881 ops/s
[info]                  ·gc.alloc.rate:            571.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1169.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 449027.245 ops/s
[info]                  ·gc.alloc.rate:            565.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2362.962 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   451471.422 ±(99.9%) 6943.467 ops/s [Average]
[info]   (min, avg, max) = (449027.245, 451471.422, 453771.881), stdev = 1803.196
[info]   CI (99.9%): [444527.954, 458414.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   569.115 ±(99.9%) 8.810 MB/sec [Average]
[info]   (min, avg, max) = (565.918, 569.115, 571.947), stdev = 2.288
[info]   CI (99.9%): [560.304, 577.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.745 ±(99.9%) 580.569 MB/sec [Average]
[info]   (min, avg, max) = (337.036, 606.745, 674.316), stdev = 150.772
[info]   CI (99.9%): [26.176, 1187.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2116.378 ±(99.9%) 2039.186 B/op [Average]
[info]   (min, avg, max) = (1169.128, 2116.378, 2362.962), stdev = 529.570
[info]   CI (99.9%): [77.192, 4155.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.54% complete, ETA 00:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36687.767 ops/s
[info] # Warmup Iteration   2: 61496.133 ops/s
[info] # Warmup Iteration   3: 63212.809 ops/s
[info] Iteration   1: 64224.739 ops/s
[info]                  ·gc.alloc.rate:                                  2866.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66731.719 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 64381.475 ops/s
[info]                  ·gc.alloc.rate:                                  2872.309 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74891.307 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 65002.900 ops/s
[info]                  ·gc.alloc.rate:                                  2901.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65935.192 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 64718.039 ops/s
[info]                  ·gc.alloc.rate:                                  2887.879 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.574 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74501.399 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64749.809 ops/s
[info]                  ·gc.alloc.rate:                                  2889.383 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66190.743 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   64615.392 ±(99.9%) 1196.328 ops/s [Average]
[info]   (min, avg, max) = (64224.739, 64615.392, 65002.900), stdev = 310.683
[info]   CI (99.9%): [63419.064, 65811.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2883.400 ±(99.9%) 53.969 MB/sec [Average]
[info]   (min, avg, max) = (2866.298, 2883.400, 2901.132), stdev = 14.016
[info]   CI (99.9%): [2829.431, 2937.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.006, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.014, 0.024), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.338 ±(99.9%) 0.736 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.338, 0.574), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2859.301 ±(99.9%) 716.551 MB/sec [Average]
[info]   (min, avg, max) = (2723.123, 2859.301, 3063.432), stdev = 186.086
[info]   CI (99.9%): [2142.749, 3575.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69650.072 ±(99.9%) 17780.845 B/op [Average]
[info]   (min, avg, max) = (65935.192, 69650.072, 74891.307), stdev = 4617.629
[info]   CI (99.9%): [51869.227, 87430.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.79% complete, ETA 00:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160576.718 ops/s
[info] # Warmup Iteration   2: 213857.051 ops/s
[info] # Warmup Iteration   3: 214910.022 ops/s
[info] Iteration   1: 215529.849 ops/s
[info]                  ·gc.alloc.rate:                   1520.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9845.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.323 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 218139.078 ops/s
[info]                  ·gc.alloc.rate:                                  1539.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12279.871 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 219595.584 ops/s
[info]                  ·gc.alloc.rate:                                  1549.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12198.462 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 217329.192 ops/s
[info]                  ·gc.alloc.rate:                                  1533.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9860.868 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 219720.724 ops/s
[info]                  ·gc.alloc.rate:                                  1550.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12191.634 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   218062.886 ±(99.9%) 6685.603 ops/s [Average]
[info]   (min, avg, max) = (215529.849, 218062.886, 219720.724), stdev = 1736.230
[info]   CI (99.9%): [211377.283, 224748.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1538.580 ±(99.9%) 47.586 MB/sec [Average]
[info]   (min, avg, max) = (1520.378, 1538.580, 1550.025), stdev = 12.358
[info]   CI (99.9%): [1490.995, 1586.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 1.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.702), stdev = 0.305
[info]   CI (99.9%): [≈ 0, 1.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.298 ±(99.9%) 732.296 MB/sec [Average]
[info]   (min, avg, max) = (1348.107, 1563.298, 1702.475), stdev = 190.175
[info]   CI (99.9%): [831.002, 2295.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11275.333 ±(99.9%) 5000.303 B/op [Average]
[info]   (min, avg, max) = (9845.830, 11275.333, 12279.871), stdev = 1298.563
[info]   CI (99.9%): [6275.030, 16275.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.865 ±(99.9%) 41.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.865, 24.323), stdev = 10.877
[info]   CI (99.9%): [≈ 0, 46.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 43.03% complete, ETA 00:49:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29623.652 ops/s
[info] # Warmup Iteration   2: 697674.578 ops/s
[info] # Warmup Iteration   3: 713818.705 ops/s
[info] Iteration   1: 677040.756 ops/s
[info]                  ·gc.alloc.rate:            529.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1551.567 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 683520.010 ops/s
[info]                  ·gc.alloc.rate:            535.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 768.453 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 678011.793 ops/s
[info]                  ·gc.alloc.rate:            530.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1549.355 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 682836.421 ops/s
[info]                  ·gc.alloc.rate:            534.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 769.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 678993.888 ops/s
[info]                  ·gc.alloc.rate:            531.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1547.107 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   680080.573 ±(99.9%) 11247.184 ops/s [Average]
[info]   (min, avg, max) = (677040.756, 680080.573, 683520.010), stdev = 2920.858
[info]   CI (99.9%): [668833.390, 691327.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   532.351 ±(99.9%) 8.941 MB/sec [Average]
[info]   (min, avg, max) = (529.998, 532.351, 535.145), stdev = 2.322
[info]   CI (99.9%): [523.409, 541.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.942 ±(99.9%) 703.720 MB/sec [Average]
[info]   (min, avg, max) = (333.697, 533.942, 667.474), stdev = 182.754
[info]   CI (99.9%): [≈ 0, 1237.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1237.131 ±(99.9%) 1646.215 B/op [Average]
[info]   (min, avg, max) = (768.453, 1237.131, 1551.567), stdev = 427.517
[info]   CI (99.9%): [≈ 0, 2883.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.28% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309774.215 ops/s
[info] # Warmup Iteration   2: 455175.470 ops/s
[info] # Warmup Iteration   3: 454146.055 ops/s
[info] Iteration   1: 460426.847 ops/s
[info]                  ·gc.alloc.rate:            472.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2299.773 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 448026.503 ops/s
[info]                  ·gc.alloc.rate:            459.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1181.746 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 426698.026 ops/s
[info]                  ·gc.alloc.rate:            438.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1240.764 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 425307.743 ops/s
[info]                  ·gc.alloc.rate:            436.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2489.661 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 461477.438 ops/s
[info]                  ·gc.alloc.rate:            473.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1147.301 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   444387.311 ±(99.9%) 67784.557 ops/s [Average]
[info]   (min, avg, max) = (425307.743, 444387.311, 461477.438), stdev = 17603.434
[info]   CI (99.9%): [376602.754, 512171.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   456.238 ±(99.9%) 69.609 MB/sec [Average]
[info]   (min, avg, max) = (436.636, 456.238, 473.821), stdev = 18.077
[info]   CI (99.9%): [386.629, 525.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.904 ±(99.9%) 709.380 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 470.904, 672.728), stdev = 184.224
[info]   CI (99.9%): [≈ 0, 1180.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1671.849 ±(99.9%) 2557.340 B/op [Average]
[info]   (min, avg, max) = (1147.301, 1671.849, 2489.661), stdev = 664.133
[info]   CI (99.9%): [≈ 0, 4229.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 00:48:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 568402.189 ops/s
[info] # Warmup Iteration   2: 616812.877 ops/s
[info] # Warmup Iteration   3: 632654.635 ops/s
[info] Iteration   1: 634534.948 ops/s
[info]                  ·gc.alloc.rate:            496.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 836.006 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 631357.413 ops/s
[info]                  ·gc.alloc.rate:            494.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1677.169 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 631510.253 ops/s
[info]                  ·gc.alloc.rate:                   494.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        838.381 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 630470.048 ops/s
[info]                  ·gc.alloc.rate:            493.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1681.183 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 631297.143 ops/s
[info]                  ·gc.alloc.rate:            494.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 838.662 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   631833.961 ±(99.9%) 6019.717 ops/s [Average]
[info]   (min, avg, max) = (630470.048, 631833.961, 634534.948), stdev = 1563.302
[info]   CI (99.9%): [625814.243, 637853.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   494.578 ±(99.9%) 4.563 MB/sec [Average]
[info]   (min, avg, max) = (493.510, 494.578, 496.607), stdev = 1.185
[info]   CI (99.9%): [490.015, 499.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.206 ±(99.9%) 709.676 MB/sec [Average]
[info]   (min, avg, max) = (336.379, 471.206, 673.442), stdev = 184.301
[info]   CI (99.9%): [≈ 0, 1180.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1174.280 ±(99.9%) 1774.793 B/op [Average]
[info]   (min, avg, max) = (836.006, 1174.280, 1681.183), stdev = 460.908
[info]   CI (99.9%): [≈ 0, 2949.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.332 ±(99.9%) 2.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.660), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 00:48:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603509.419 ops/s
[info] # Warmup Iteration   2: 659411.514 ops/s
[info] # Warmup Iteration   3: 633898.959 ops/s
[info] Iteration   1: 661207.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 653608.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 661318.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 660763.595 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 661219.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   659623.658 ±(99.9%) 12973.361 ops/s [Average]
[info]   (min, avg, max) = (653608.972, 659623.658, 661318.850), stdev = 3369.141
[info]   CI (99.9%): [646650.297, 672597.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.03% complete, ETA 00:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18002.060 ops/s
[info] # Warmup Iteration   2: 26596.932 ops/s
[info] # Warmup Iteration   3: 26527.552 ops/s
[info] Iteration   1: 26396.819 ops/s
[info]                  ·gc.alloc.rate:            1353.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       80704.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80225.874 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 26381.219 ops/s
[info]                  ·gc.alloc.rate:                                  1352.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80695.934 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80754.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                238.448 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 27043.764 ops/s
[info]                  ·gc.alloc.rate:                                  1386.317 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.940 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99050.269 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 26425.128 ops/s
[info]                  ·gc.alloc.rate:                                  1354.518 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.496 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81093.051 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 26708.946 ops/s
[info]                  ·gc.alloc.rate:            1369.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80230.940 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26591.175 ±(99.9%) 1102.882 ops/s [Average]
[info]   (min, avg, max) = (26381.219, 26591.175, 27043.764), stdev = 286.415
[info]   CI (99.9%): [25488.294, 27694.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1363.211 ±(99.9%) 56.279 MB/sec [Average]
[info]   (min, avg, max) = (1352.662, 1363.211, 1386.317), stdev = 14.615
[info]   CI (99.9%): [1306.932, 1419.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80692.799 ±(99.9%) 27.518 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80692.799, 80704.015), stdev = 7.146
[info]   CI (99.9%): [80665.282, 80720.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.126), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.987 ±(99.9%) 12.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.987, 7.498), stdev = 3.182
[info]   CI (99.9%): [≈ 0, 14.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.709 ±(99.9%) 597.013 MB/sec [Average]
[info]   (min, avg, max) = (1345.316, 1424.709, 1701.803), stdev = 155.042
[info]   CI (99.9%): [827.697, 2021.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84270.919 ±(99.9%) 31845.159 B/op [Average]
[info]   (min, avg, max) = (80225.874, 84270.919, 99050.269), stdev = 8270.087
[info]   CI (99.9%): [52425.760, 116116.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   47.690 ±(99.9%) 410.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.690, 238.448), stdev = 106.637
[info]   CI (99.9%): [≈ 0, 458.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 15.000), stdev = 5.167
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.28% complete, ETA 00:47:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4168.314 ops/s
[info] # Warmup Iteration   2: 6127.768 ops/s
[info] # Warmup Iteration   3: 6347.294 ops/s
[info] Iteration   1: 6486.578 ops/s
[info]                  ·gc.alloc.rate:                   998.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245658.989 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6480.775 ops/s
[info]                  ·gc.alloc.rate:                   997.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245724.613 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 323.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6465.081 ops/s
[info]                  ·gc.alloc.rate:                   995.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246294.564 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 810.713 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 6545.121 ops/s
[info]                  ·gc.alloc.rate:                                  1007.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245527.266 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6528.920 ops/s
[info]                  ·gc.alloc.rate:                                  1005.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.948 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246128.772 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6501.295 ±(99.9%) 131.049 ops/s [Average]
[info]   (min, avg, max) = (6465.081, 6501.295, 6545.121), stdev = 34.033
[info]   CI (99.9%): [6370.246, 6632.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1000.768 ±(99.9%) 20.727 MB/sec [Average]
[info]   (min, avg, max) = (995.030, 1000.768, 1007.663), stdev = 5.383
[info]   CI (99.9%): [980.042, 1021.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242272.065 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (242272.062, 242272.065, 242272.068), stdev = 0.003
[info]   CI (99.9%): [242272.053, 242272.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.216 ±(99.9%) 25.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.216, 15.131), stdev = 6.674
[info]   CI (99.9%): [≈ 0, 28.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1015.615 ±(99.9%) 19.652 MB/sec [Average]
[info]   (min, avg, max) = (1011.551, 1015.615, 1021.202), stdev = 5.104
[info]   CI (99.9%): [995.963, 1035.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   245866.841 ±(99.9%) 1262.954 B/op [Average]
[info]   (min, avg, max) = (245527.266, 245866.841, 246294.564), stdev = 327.985
[info]   CI (99.9%): [244603.887, 247129.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.317 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   259.173 ±(99.9%) 1294.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 259.173, 810.713), stdev = 336.228
[info]   CI (99.9%): [≈ 0, 1553.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.674
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.53% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2871.190 ops/s
[info] # Warmup Iteration   2: 6325.418 ops/s
[info] # Warmup Iteration   3: 6526.688 ops/s
[info] Iteration   1: 6556.677 ops/s
[info]                  ·gc.alloc.rate:                   945.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242077.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 159.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 6568.607 ops/s
[info]                  ·gc.alloc.rate:            946.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241794.922 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 6545.672 ops/s
[info]                  ·gc.alloc.rate:                   943.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242644.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 960.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 6408.464 ops/s
[info]                  ·gc.alloc.rate:                                  923.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.959 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167183.256 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6432.724 ops/s
[info]                  ·gc.alloc.rate:                                  927.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.700 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       249839.448 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6502.429 ±(99.9%) 291.231 ops/s [Average]
[info]   (min, avg, max) = (6408.464, 6502.429, 6568.607), stdev = 75.632
[info]   CI (99.9%): [6211.198, 6793.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   937.217 ±(99.9%) 41.883 MB/sec [Average]
[info]   (min, avg, max) = (923.680, 937.217, 946.662), stdev = 10.877
[info]   CI (99.9%): [895.334, 979.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.066 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (226864.062, 226864.066, 226864.072), stdev = 0.004
[info]   CI (99.9%): [226864.050, 226864.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.132 ±(99.9%) 34.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.132, 19.959), stdev = 8.853
[info]   CI (99.9%): [≈ 0, 38.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.661 ±(99.9%) 570.740 MB/sec [Average]
[info]   (min, avg, max) = (680.689, 945.661, 1021.121), stdev = 148.219
[info]   CI (99.9%): [374.921, 1516.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   228707.892 ±(99.9%) 133057.227 B/op [Average]
[info]   (min, avg, max) = (167183.256, 228707.892, 249839.448), stdev = 34554.539
[info]   CI (99.9%): [95650.666, 361765.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   224.172 ±(99.9%) 1608.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 224.172, 960.968), stdev = 417.660
[info]   CI (99.9%): [≈ 0, 1832.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 12.000), stdev = 5.215
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 00:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86900.668 ops/s
[info] # Warmup Iteration   2: 97272.105 ops/s
[info] # Warmup Iteration   3: 97883.685 ops/s
[info] Iteration   1: 96115.217 ops/s
[info]                  ·gc.alloc.rate:            931.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11060.376 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 97071.914 ops/s
[info]                  ·gc.alloc.rate:            940.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16427.201 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 95418.084 ops/s
[info]                  ·gc.alloc.rate:                   924.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16712.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 98179.056 ops/s
[info]                  ·gc.alloc.rate:                                  951.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16370.151 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 98274.806 ops/s
[info]                  ·gc.alloc.rate:            952.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16353.830 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   97011.815 ±(99.9%) 4834.466 ops/s [Average]
[info]   (min, avg, max) = (95418.084, 97011.815, 98274.806), stdev = 1255.495
[info]   CI (99.9%): [92177.350, 101846.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   939.891 ±(99.9%) 47.440 MB/sec [Average]
[info]   (min, avg, max) = (924.180, 939.891, 952.332), stdev = 12.320
[info]   CI (99.9%): [892.451, 987.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.164 ±(99.9%) 1.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.819), stdev = 0.366
[info]   CI (99.9%): [≈ 0, 1.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.862 ±(99.9%) 588.908 MB/sec [Average]
[info]   (min, avg, max) = (675.375, 948.862, 1021.397), stdev = 152.938
[info]   CI (99.9%): [359.954, 1537.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15384.763 ±(99.9%) 9325.263 B/op [Average]
[info]   (min, avg, max) = (11060.376, 15384.763, 16712.257), stdev = 2421.741
[info]   CI (99.9%): [6059.500, 24710.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.790 ±(99.9%) 75.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.790, 43.951), stdev = 19.655
[info]   CI (99.9%): [≈ 0, 84.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.02% complete, ETA 00:47:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2804.482 ops/s
[info] # Warmup Iteration   2: 6164.487 ops/s
[info] # Warmup Iteration   3: 6493.984 ops/s
[info] Iteration   1: 6534.069 ops/s
[info]                  ·gc.alloc.rate:            1175.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       283224.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243052.729 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 6492.773 ops/s
[info]                  ·gc.alloc.rate:                   1168.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              283224.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        326166.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 968.811 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 6560.019 ops/s
[info]                  ·gc.alloc.rate:                                  1180.330 MB/sec
[info]                  ·gc.alloc.rate.norm:                             283224.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.522 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244966.018 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6569.941 ops/s
[info]                  ·gc.alloc.rate:                                  1182.138 MB/sec
[info]                  ·gc.alloc.rate.norm:                             283224.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       326124.368 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6579.652 ops/s
[info]                  ·gc.alloc.rate:                                  1183.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             283224.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244221.666 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6547.291 ±(99.9%) 134.350 ops/s [Average]
[info]   (min, avg, max) = (6492.773, 6547.291, 6579.652), stdev = 34.890
[info]   CI (99.9%): [6412.941, 6681.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1178.044 ±(99.9%) 24.407 MB/sec [Average]
[info]   (min, avg, max) = (1168.093, 1178.044, 1183.911), stdev = 6.338
[info]   CI (99.9%): [1153.637, 1202.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   283224.063 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (283224.062, 283224.063, 283224.067), stdev = 0.002
[info]   CI (99.9%): [283224.054, 283224.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.367 ±(99.9%) 41.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.367, 24.522), stdev = 10.724
[info]   CI (99.9%): [≈ 0, 46.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.430 ±(99.9%) 709.826 MB/sec [Average]
[info]   (min, avg, max) = (1008.985, 1151.430, 1361.198), stdev = 184.340
[info]   CI (99.9%): [441.604, 1861.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   276906.203 ±(99.9%) 173102.296 B/op [Average]
[info]   (min, avg, max) = (243052.729, 276906.203, 326166.233), stdev = 44954.117
[info]   CI (99.9%): [103803.907, 450008.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   193.762 ±(99.9%) 1668.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 193.762, 968.811), stdev = 433.265
[info]   CI (99.9%): [≈ 0, 1862.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.542
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.27% complete, ETA 00:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13191.943 ops/s
[info] # Warmup Iteration   2: 17657.035 ops/s
[info] # Warmup Iteration   3: 18203.929 ops/s
[info] Iteration   1: 18098.053 ops/s
[info]                  ·gc.alloc.rate:            820.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       71388.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87931.630 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 18043.367 ops/s
[info]                  ·gc.alloc.rate:            818.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58799.740 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 18077.082 ops/s
[info]                  ·gc.alloc.rate:            821.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87853.978 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 18093.765 ops/s
[info]                  ·gc.alloc.rate:                   821.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              71414.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58637.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 289.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18257.823 ops/s
[info]                  ·gc.alloc.rate:                                  828.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71408.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58684.884 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18114.018 ±(99.9%) 320.442 ops/s [Average]
[info]   (min, avg, max) = (18043.367, 18114.018, 18257.823), stdev = 83.218
[info]   CI (99.9%): [17793.576, 18434.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   821.981 ±(99.9%) 13.939 MB/sec [Average]
[info]   (min, avg, max) = (818.805, 821.981, 828.235), stdev = 3.620
[info]   CI (99.9%): [808.042, 835.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.875 ±(99.9%) 70.586 B/op [Average]
[info]   (min, avg, max) = (71388.265, 71414.875, 71432.028), stdev = 18.331
[info]   CI (99.9%): [71344.289, 71485.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.442 ±(99.9%) 21.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.442, 12.211), stdev = 5.461
[info]   CI (99.9%): [≈ 0, 23.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   809.918 ±(99.9%) 704.716 MB/sec [Average]
[info]   (min, avg, max) = (674.005, 809.918, 1010.969), stdev = 183.013
[info]   CI (99.9%): [105.202, 1514.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70381.503 ±(99.9%) 61555.201 B/op [Average]
[info]   (min, avg, max) = (58637.283, 70381.503, 87931.630), stdev = 15985.690
[info]   CI (99.9%): [8826.303, 131936.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   57.942 ±(99.9%) 498.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.942, 289.710), stdev = 129.562
[info]   CI (99.9%): [≈ 0, 556.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 3.082
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.52% complete, ETA 00:46:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11355.383 ops/s
[info] # Warmup Iteration   2: 19467.929 ops/s
[info] # Warmup Iteration   3: 19458.430 ops/s
[info] Iteration   1: 19233.745 ops/s
[info]                  ·gc.alloc.rate:            814.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55053.374 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 19513.603 ops/s
[info]                  ·gc.alloc.rate:                   826.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81341.603 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 20143.162 ops/s
[info]                  ·gc.alloc.rate:            853.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52564.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 20080.616 ops/s
[info]                  ·gc.alloc.rate:                                  850.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79410.680 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                313.257 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 20283.791 ops/s
[info]                  ·gc.alloc.rate:                                  859.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52821.603 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   19850.983 ±(99.9%) 1743.698 ops/s [Average]
[info]   (min, avg, max) = (19233.745, 19850.983, 20283.791), stdev = 452.833
[info]   CI (99.9%): [18107.285, 21594.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   841.192 ±(99.9%) 74.064 MB/sec [Average]
[info]   (min, avg, max) = (814.929, 841.192, 859.537), stdev = 19.234
[info]   CI (99.9%): [767.128, 915.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.022, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.014, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.053), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.575 ±(99.9%) 8.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.575, 4.117), stdev = 2.160
[info]   CI (99.9%): [≈ 0, 9.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.556 ±(99.9%) 707.416 MB/sec [Average]
[info]   (min, avg, max) = (672.673, 809.556, 1013.015), stdev = 183.714
[info]   CI (99.9%): [102.140, 1516.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   64238.275 ±(99.9%) 56909.943 B/op [Average]
[info]   (min, avg, max) = (52564.114, 64238.275, 81341.603), stdev = 14779.331
[info]   CI (99.9%): [7328.332, 121148.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   73.397 ±(99.9%) 524.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.397, 313.257), stdev = 136.089
[info]   CI (99.9%): [≈ 0, 597.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.77% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 503912.563 ops/s
[info] # Warmup Iteration   2: 595099.012 ops/s
[info] # Warmup Iteration   3: 603723.549 ops/s
[info] Iteration   1: 603994.417 ops/s
[info]                  ·gc.alloc.rate:                   1369.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3506.351 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 600048.872 ops/s
[info]                  ·gc.alloc.rate:                                  1360.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3562.621 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.736 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 606779.560 ops/s
[info]                  ·gc.alloc.rate:                                  1375.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3531.670 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 595787.296 ops/s
[info]                  ·gc.alloc.rate:            1350.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3596.841 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 604157.523 ops/s
[info]                  ·gc.alloc.rate:                                  1369.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3546.995 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   602153.533 ±(99.9%) 16535.762 ops/s [Average]
[info]   (min, avg, max) = (595787.296, 602153.533, 606779.560), stdev = 4294.285
[info]   CI (99.9%): [585617.771, 618689.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1365.163 ±(99.9%) 37.211 MB/sec [Average]
[info]   (min, avg, max) = (1350.957, 1365.163, 1375.601), stdev = 9.664
[info]   CI (99.9%): [1327.952, 1402.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.277), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.790 ±(99.9%) 26.845 MB/sec [Average]
[info]   (min, avg, max) = (1345.631, 1357.790, 1361.877), stdev = 6.971
[info]   CI (99.9%): [1330.946, 1384.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3548.896 ±(99.9%) 130.547 B/op [Average]
[info]   (min, avg, max) = (3506.351, 3548.896, 3596.841), stdev = 33.903
[info]   CI (99.9%): [3418.349, 3679.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.094 ±(99.9%) 14.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.094, 8.736), stdev = 3.788
[info]   CI (99.9%): [≈ 0, 16.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 46.02% complete, ETA 00:46:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531186.324 ops/s
[info] # Warmup Iteration   2: 611780.717 ops/s
[info] # Warmup Iteration   3: 617349.523 ops/s
[info] Iteration   1: 616517.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 614823.321 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 615364.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 612639.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 616996.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   615268.326 ±(99.9%) 6576.396 ops/s [Average]
[info]   (min, avg, max) = (612639.257, 615268.326, 616996.732), stdev = 1707.869
[info]   CI (99.9%): [608691.930, 621844.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.27% complete, ETA 00:46:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13029.744 ops/s
[info] # Warmup Iteration   2: 17746.019 ops/s
[info] # Warmup Iteration   3: 18880.088 ops/s
[info] Iteration   1: 18756.525 ops/s
[info]                  ·gc.alloc.rate:            864.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       72542.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84670.752 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 18764.907 ops/s
[info]                  ·gc.alloc.rate:            864.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       72552.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84643.683 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 18111.817 ops/s
[info]                  ·gc.alloc.rate:            834.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       72552.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58460.022 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 18645.290 ops/s
[info]                  ·gc.alloc.rate:                                  859.200 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72539.607 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.670 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85521.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                337.362 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 18807.108 ops/s
[info]                  ·gc.alloc.rate:                                  866.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72536.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.888 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56969.043 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18617.130 ±(99.9%) 1111.854 ops/s [Average]
[info]   (min, avg, max) = (18111.817, 18617.130, 18807.108), stdev = 288.745
[info]   CI (99.9%): [17505.275, 19728.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   858.050 ±(99.9%) 51.190 MB/sec [Average]
[info]   (min, avg, max) = (834.807, 858.050, 866.725), stdev = 13.294
[info]   CI (99.9%): [806.860, 909.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72544.346 ±(99.9%) 28.230 B/op [Average]
[info]   (min, avg, max) = (72536.022, 72544.346, 72552.028), stdev = 7.331
[info]   CI (99.9%): [72516.117, 72572.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.142), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.912 ±(99.9%) 21.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.912, 11.888), stdev = 5.560
[info]   CI (99.9%): [≈ 0, 25.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   876.912 ±(99.9%) 703.925 MB/sec [Average]
[info]   (min, avg, max) = (672.660, 876.912, 1012.960), stdev = 182.807
[info]   CI (99.9%): [172.987, 1580.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74052.932 ±(99.9%) 57483.692 B/op [Average]
[info]   (min, avg, max) = (56969.043, 74052.932, 85521.159), stdev = 14928.332
[info]   CI (99.9%): [16569.240, 131536.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   67.472 ±(99.9%) 580.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.472, 337.362), stdev = 150.873
[info]   CI (99.9%): [≈ 0, 648.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.52% complete, ETA 00:46:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7787.359 ops/s
[info] # Warmup Iteration   2: 11593.146 ops/s
[info] # Warmup Iteration   3: 11510.472 ops/s
[info] Iteration   1: 11554.708 ops/s
[info]                  ·gc.alloc.rate:            1122.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       152968.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137729.373 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 11449.131 ops/s
[info]                  ·gc.alloc.rate:            1112.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       152968.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138992.173 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 11601.347 ops/s
[info]                  ·gc.alloc.rate:                                  1127.476 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152968.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138075.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                451.817 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 11660.207 ops/s
[info]                  ·gc.alloc.rate:                                  1133.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152968.035 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       183768.271 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11618.726 ops/s
[info]                  ·gc.alloc.rate:            1129.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       152968.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138324.327 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11576.824 ±(99.9%) 311.073 ops/s [Average]
[info]   (min, avg, max) = (11449.131, 11576.824, 11660.207), stdev = 80.785
[info]   CI (99.9%): [11265.751, 11887.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1125.072 ±(99.9%) 30.279 MB/sec [Average]
[info]   (min, avg, max) = (1112.683, 1125.072, 1133.236), stdev = 7.863
[info]   CI (99.9%): [1094.793, 1155.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   152968.043 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (152968.035, 152968.043, 152968.065), stdev = 0.013
[info]   CI (99.9%): [152967.994, 152968.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.399 ±(99.9%) 17.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.399, 10.330), stdev = 4.492
[info]   CI (99.9%): [≈ 0, 19.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.432 ±(99.9%) 596.459 MB/sec [Average]
[info]   (min, avg, max) = (1010.983, 1084.432, 1361.414), stdev = 154.899
[info]   CI (99.9%): [487.973, 1680.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   147377.860 ±(99.9%) 78353.313 B/op [Average]
[info]   (min, avg, max) = (137729.373, 147377.860, 183768.271), stdev = 20348.107
[info]   CI (99.9%): [69024.547, 225731.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   90.363 ±(99.9%) 778.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.363, 451.817), stdev = 202.059
[info]   CI (99.9%): [≈ 0, 868.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.77% complete, ETA 00:45:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6403.875 ops/s
[info] # Warmup Iteration   2: 11236.435 ops/s
[info] # Warmup Iteration   3: 11396.701 ops/s
[info] Iteration   1: 11339.329 ops/s
[info]                  ·gc.alloc.rate:            1038.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186750.443 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 11380.064 ops/s
[info]                  ·gc.alloc.rate:            1041.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139558.345 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 11456.581 ops/s
[info]                  ·gc.alloc.rate:                                  1049.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.043 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       139730.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                549.041 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 11520.759 ops/s
[info]                  ·gc.alloc.rate:            1054.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139500.738 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 11123.778 ops/s
[info]                  ·gc.alloc.rate:            1018.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144465.445 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11364.102 ±(99.9%) 583.083 ops/s [Average]
[info]   (min, avg, max) = (11123.778, 11364.102, 11520.759), stdev = 151.425
[info]   CI (99.9%): [10781.019, 11947.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1040.412 ±(99.9%) 53.262 MB/sec [Average]
[info]   (min, avg, max) = (1018.506, 1040.412, 1054.580), stdev = 13.832
[info]   CI (99.9%): [987.150, 1093.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144088.038 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (144088.035, 144088.038, 144088.043), stdev = 0.003
[info]   CI (99.9%): [144088.025, 144088.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.907 ±(99.9%) 7.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.907, 4.535), stdev = 2.028
[info]   CI (99.9%): [≈ 0, 8.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.807 ±(99.9%) 565.648 MB/sec [Average]
[info]   (min, avg, max) = (1008.930, 1082.807, 1345.435), stdev = 146.897
[info]   CI (99.9%): [517.159, 1648.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   150001.160 ±(99.9%) 79521.738 B/op [Average]
[info]   (min, avg, max) = (139500.738, 150001.160, 186750.443), stdev = 20651.543
[info]   CI (99.9%): [70479.422, 229522.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   109.808 ±(99.9%) 945.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 109.808, 549.041), stdev = 245.538
[info]   CI (99.9%): [≈ 0, 1055.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 17.000), stdev = 6.465
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.01% complete, ETA 00:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152018.191 ops/s
[info] # Warmup Iteration   2: 164860.711 ops/s
[info] # Warmup Iteration   3: 165542.423 ops/s
[info] Iteration   1: 166797.542 ops/s
[info]                  ·gc.alloc.rate:            964.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9541.137 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 166008.824 ops/s
[info]                  ·gc.alloc.rate:            960.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9586.706 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 165636.115 ops/s
[info]                  ·gc.alloc.rate:                   958.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6405.489 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 161520.131 ops/s
[info]                  ·gc.alloc.rate:                                  934.202 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9950.214 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 167107.126 ops/s
[info]                  ·gc.alloc.rate:            966.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9617.834 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   165413.947 ±(99.9%) 8684.511 ops/s [Average]
[info]   (min, avg, max) = (161520.131, 165413.947, 167107.126), stdev = 2255.340
[info]   CI (99.9%): [156729.437, 174098.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   956.774 ±(99.9%) 50.228 MB/sec [Average]
[info]   (min, avg, max) = (934.202, 956.774, 966.611), stdev = 13.044
[info]   CI (99.9%): [906.546, 1007.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 1.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.835), stdev = 0.373
[info]   CI (99.9%): [≈ 0, 1.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   947.681 ±(99.9%) 588.778 MB/sec [Average]
[info]   (min, avg, max) = (674.309, 947.681, 1021.167), stdev = 152.904
[info]   CI (99.9%): [358.903, 1536.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9020.276 ±(99.9%) 5662.905 B/op [Average]
[info]   (min, avg, max) = (6405.489, 9020.276, 9950.214), stdev = 1470.639
[info]   CI (99.9%): [3357.371, 14683.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.330 ±(99.9%) 54.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.330, 31.648), stdev = 14.153
[info]   CI (99.9%): [≈ 0, 60.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.26% complete, ETA 00:45:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3789.105 ops/s
[info] # Warmup Iteration   2: 10209.696 ops/s
[info] # Warmup Iteration   3: 10432.073 ops/s
[info] Iteration   1: 10415.235 ops/s
[info]                  ·gc.alloc.rate:                   1303.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        203232.691 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.660 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 10309.940 ops/s
[info]                  ·gc.alloc.rate:                   1290.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        154561.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 711.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 10549.619 ops/s
[info]                  ·gc.alloc.rate:                                  1320.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       203116.882 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10499.898 ops/s
[info]                  ·gc.alloc.rate:                                  1314.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204083.922 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10539.146 ops/s
[info]                  ·gc.alloc.rate:            1319.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 203309.556 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10462.768 ±(99.9%) 386.847 ops/s [Average]
[info]   (min, avg, max) = (10309.940, 10462.768, 10549.619), stdev = 100.463
[info]   CI (99.9%): [10075.921, 10849.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1309.697 ±(99.9%) 48.163 MB/sec [Average]
[info]   (min, avg, max) = (1290.571, 1309.697, 1320.477), stdev = 12.508
[info]   CI (99.9%): [1261.534, 1357.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.040 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (197000.039, 197000.040, 197000.042), stdev = 0.001
[info]   CI (99.9%): [197000.035, 197000.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.758 ±(99.9%) 5.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.448), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.447 ±(99.9%) 594.514 MB/sec [Average]
[info]   (min, avg, max) = (1012.549, 1288.447, 1361.746), stdev = 154.394
[info]   CI (99.9%): [693.932, 1882.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   193660.859 ±(99.9%) 84177.623 B/op [Average]
[info]   (min, avg, max) = (154561.241, 193660.859, 204083.922), stdev = 21860.661
[info]   CI (99.9%): [109483.236, 277838.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   162.491 ±(99.9%) 1194.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 162.491, 711.795), stdev = 310.148
[info]   CI (99.9%): [≈ 0, 1356.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.51% complete, ETA 00:45:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20235.284 ops/s
[info] # Warmup Iteration   2: 27837.619 ops/s
[info] # Warmup Iteration   3: 28123.697 ops/s
[info] Iteration   1: 27837.424 ops/s
[info]                  ·gc.alloc.rate:            961.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       54336.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57170.403 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 27979.561 ops/s
[info]                  ·gc.alloc.rate:            965.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       54315.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.238 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56880.302 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 28089.967 ops/s
[info]                  ·gc.alloc.rate:                   969.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56655.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 186.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 28124.253 ops/s
[info]                  ·gc.alloc.rate:                                  970.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57148.287 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28147.365 ops/s
[info]                  ·gc.alloc.rate:                                  971.322 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57101.595 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28035.714 ±(99.9%) 493.575 ops/s [Average]
[info]   (min, avg, max) = (27837.424, 28035.714, 28147.365), stdev = 128.180
[info]   CI (99.9%): [27542.139, 28529.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   967.623 ±(99.9%) 16.451 MB/sec [Average]
[info]   (min, avg, max) = (961.059, 967.623, 971.322), stdev = 4.272
[info]   CI (99.9%): [951.173, 984.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54317.469 ±(99.9%) 40.299 B/op [Average]
[info]   (min, avg, max) = (54312.014, 54317.469, 54336.018), stdev = 10.466
[info]   CI (99.9%): [54277.169, 54357.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.427 ±(99.9%) 3.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.427, 1.913), stdev = 0.836
[info]   CI (99.9%): [≈ 0, 3.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.252 ±(99.9%) 21.004 MB/sec [Average]
[info]   (min, avg, max) = (1011.192, 1015.252, 1021.242), stdev = 5.455
[info]   CI (99.9%): [994.248, 1036.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   56991.232 ±(99.9%) 847.841 B/op [Average]
[info]   (min, avg, max) = (56655.575, 56991.232, 57170.403), stdev = 220.182
[info]   CI (99.9%): [56143.391, 57839.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.323 ±(99.9%) 321.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.323, 186.613), stdev = 83.456
[info]   CI (99.9%): [≈ 0, 358.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 4.324
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:44:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47152.934 ops/s
[info] # Warmup Iteration   2: 75803.278 ops/s
[info] # Warmup Iteration   3: 77388.426 ops/s
[info] Iteration   1: 75676.431 ops/s
[info]                  ·gc.alloc.rate:                   1204.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27971.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 77830.910 ops/s
[info]                  ·gc.alloc.rate:                                  1238.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.773 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20488.208 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.821 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 78838.391 ops/s
[info]                  ·gc.alloc.rate:                                  1255.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27181.511 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 77865.931 ops/s
[info]                  ·gc.alloc.rate:            1239.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27520.054 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 77137.571 ops/s
[info]                  ·gc.alloc.rate:            1228.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20835.336 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   77469.847 ±(99.9%) 4509.904 ops/s [Average]
[info]   (min, avg, max) = (75676.431, 77469.847, 78838.391), stdev = 1171.208
[info]   CI (99.9%): [72959.943, 81979.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1233.311 ±(99.9%) 71.449 MB/sec [Average]
[info]   (min, avg, max) = (1204.936, 1233.311, 1255.050), stdev = 18.555
[info]   CI (99.9%): [1161.863, 1304.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.006), stdev = 0.001
[info]   CI (99.9%): [25056.005, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.109), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.788 ±(99.9%) 4.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 2.167), stdev = 1.088
[info]   CI (99.9%): [≈ 0, 4.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.479 ±(99.9%) 715.328 MB/sec [Average]
[info]   (min, avg, max) = (1013.116, 1220.479, 1361.516), stdev = 185.768
[info]   CI (99.9%): [505.151, 1935.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24799.311 ±(99.9%) 14591.664 B/op [Average]
[info]   (min, avg, max) = (20488.208, 24799.311, 27971.447), stdev = 3789.409
[info]   CI (99.9%): [10207.648, 39390.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.935 ±(99.9%) 135.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.935, 80.821), stdev = 35.112
[info]   CI (99.9%): [≈ 0, 154.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.01% complete, ETA 00:44:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 842766.691 ops/s
[info] # Warmup Iteration   2: 923434.681 ops/s
[info] # Warmup Iteration   3: 959989.571 ops/s
[info] Iteration   1: 957602.392 ops/s
[info]                  ·gc.alloc.rate:            1314.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2213.740 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 952941.502 ops/s
[info]                  ·gc.alloc.rate:                                  1307.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1679.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.601 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 940077.753 ops/s
[info]                  ·gc.alloc.rate:                                  1290.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2279.537 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 956822.449 ops/s
[info]                  ·gc.alloc.rate:                                  1312.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2239.643 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 955293.945 ops/s
[info]                  ·gc.alloc.rate:                                  1310.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2243.225 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   952547.608 ±(99.9%) 27701.892 ops/s [Average]
[info]   (min, avg, max) = (940077.753, 952547.608, 957602.392), stdev = 7194.093
[info]   CI (99.9%): [924845.716, 980249.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1307.132 ±(99.9%) 37.991 MB/sec [Average]
[info]   (min, avg, max) = (1290.001, 1307.132, 1314.000), stdev = 9.866
[info]   CI (99.9%): [1269.141, 1345.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.129), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.212), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.604 ±(99.9%) 586.951 MB/sec [Average]
[info]   (min, avg, max) = (1017.168, 1289.604, 1361.411), stdev = 152.429
[info]   CI (99.9%): [702.653, 1876.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2131.224 ±(99.9%) 975.533 B/op [Average]
[info]   (min, avg, max) = (1679.975, 2131.224, 2279.537), stdev = 253.343
[info]   CI (99.9%): [1155.691, 3106.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.320 ±(99.9%) 11.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.320, 6.601), stdev = 2.952
[info]   CI (99.9%): [≈ 0, 12.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 48.26% complete, ETA 00:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1011415.742 ops/s
[info] # Warmup Iteration   2: 1094196.725 ops/s
[info] # Warmup Iteration   3: 1107196.023 ops/s
[info] Iteration   1: 1108469.940 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1108160.851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1108424.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1108105.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1108095.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1108251.214 ±(99.9%) 698.542 ops/s [Average]
[info]   (min, avg, max) = (1108095.237, 1108251.214, 1108469.940), stdev = 181.409
[info]   CI (99.9%): [1107552.672, 1108949.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.51% complete, ETA 00:44:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32991.710 ops/s
[info] # Warmup Iteration   2: 63475.448 ops/s
[info] # Warmup Iteration   3: 62986.955 ops/s
[info] Iteration   1: 62493.990 ops/s
[info]                  ·gc.alloc.rate:            1347.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       33944.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33887.265 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 64630.914 ops/s
[info]                  ·gc.alloc.rate:                                  1394.041 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33059.481 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                97.329 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 64824.656 ops/s
[info]                  ·gc.alloc.rate:                                  1398.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33058.108 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 64857.297 ops/s
[info]                  ·gc.alloc.rate:            1398.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       33944.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33040.271 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 64628.981 ops/s
[info]                  ·gc.alloc.rate:            1394.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       33944.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33155.271 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   64287.168 ±(99.9%) 3881.530 ops/s [Average]
[info]   (min, avg, max) = (62493.990, 64287.168, 64857.297), stdev = 1008.021
[info]   CI (99.9%): [60405.637, 68168.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1386.623 ±(99.9%) 84.048 MB/sec [Average]
[info]   (min, avg, max) = (1347.768, 1386.623, 1398.638), stdev = 21.827
[info]   CI (99.9%): [1302.575, 1470.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33944.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33944.006, 33944.007, 33944.007), stdev = 0.001
[info]   CI (99.9%): [33944.005, 33944.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.276 ±(99.9%) 2.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 1.226), stdev = 0.535
[info]   CI (99.9%): [≈ 0, 2.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.681 ±(99.9%) 27.038 MB/sec [Average]
[info]   (min, avg, max) = (1345.515, 1357.681, 1361.936), stdev = 7.022
[info]   CI (99.9%): [1330.643, 1384.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   33240.079 ±(99.9%) 1403.895 B/op [Average]
[info]   (min, avg, max) = (33040.271, 33240.079, 33887.265), stdev = 364.587
[info]   CI (99.9%): [31836.184, 34643.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   19.466 ±(99.9%) 167.607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.466, 97.329), stdev = 43.527
[info]   CI (99.9%): [≈ 0, 187.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.958
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.76% complete, ETA 00:44:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7396.790 ops/s
[info] # Warmup Iteration   2: 18981.781 ops/s
[info] # Warmup Iteration   3: 20054.136 ops/s
[info] Iteration   1: 19740.244 ops/s
[info]                  ·gc.alloc.rate:                   713.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              56896.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53745.893 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 20206.935 ops/s
[info]                  ·gc.alloc.rate:                   730.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              56896.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52555.910 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 20179.137 ops/s
[info]                  ·gc.alloc.rate:            729.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       56896.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52680.774 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 20140.265 ops/s
[info]                  ·gc.alloc.rate:                   728.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              56896.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52730.713 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 20216.987 ops/s
[info]                  ·gc.alloc.rate:            730.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       56896.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52581.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   20096.713 ±(99.9%) 775.824 ops/s [Average]
[info]   (min, avg, max) = (19740.244, 20096.713, 20216.987), stdev = 201.479
[info]   CI (99.9%): [19320.889, 20872.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   726.516 ±(99.9%) 27.594 MB/sec [Average]
[info]   (min, avg, max) = (713.828, 726.516, 730.802), stdev = 7.166
[info]   CI (99.9%): [698.922, 754.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56896.022 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (56896.020, 56896.022, 56896.027), stdev = 0.003
[info]   CI (99.9%): [56896.010, 56896.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.917 ±(99.9%) 1.894 MB/sec [Average]
[info]   (min, avg, max) = (674.306, 674.917, 675.445), stdev = 0.492
[info]   CI (99.9%): [673.023, 676.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   52859.013 ±(99.9%) 1928.707 B/op [Average]
[info]   (min, avg, max) = (52555.910, 52859.013, 53745.893), stdev = 500.879
[info]   CI (99.9%): [50930.306, 54787.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   31.409 ±(99.9%) 110.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.409, 53.109), stdev = 28.676
[info]   CI (99.9%): [≈ 0, 141.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 00:43:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5574.520 ops/s
[info] # Warmup Iteration   2: 14452.182 ops/s
[info] # Warmup Iteration   3: 14364.118 ops/s
[info] Iteration   1: 14551.702 ops/s
[info]                  ·gc.alloc.rate:            407.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72752.749 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14651.174 ops/s
[info]                  ·gc.alloc.rate:            410.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       44089.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36135.586 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 14657.032 ops/s
[info]                  ·gc.alloc.rate:            410.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36120.797 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 15053.745 ops/s
[info]                  ·gc.alloc.rate:            421.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35168.419 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 14995.532 ops/s
[info]                  ·gc.alloc.rate:            419.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70608.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   14781.837 ±(99.9%) 872.174 ops/s [Average]
[info]   (min, avg, max) = (14551.702, 14781.837, 15053.745), stdev = 226.501
[info]   CI (99.9%): [13909.663, 15654.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   414.045 ±(99.9%) 24.440 MB/sec [Average]
[info]   (min, avg, max) = (407.604, 414.045, 421.705), stdev = 6.347
[info]   CI (99.9%): [389.604, 438.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.241 ±(99.9%) 1.816 B/op [Average]
[info]   (min, avg, max) = (44088.027, 44088.241, 44089.084), stdev = 0.472
[info]   CI (99.9%): [44086.425, 44090.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.867 ±(99.9%) 709.195 MB/sec [Average]
[info]   (min, avg, max) = (336.335, 470.867, 672.627), stdev = 184.176
[info]   CI (99.9%): [≈ 0, 1180.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   50157.275 ±(99.9%) 75729.489 B/op [Average]
[info]   (min, avg, max) = (35168.419, 50157.275, 72752.749), stdev = 19666.708
[info]   CI (99.9%): [≈ 0, 125886.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.25% complete, ETA 00:43:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90337.038 ops/s
[info] # Warmup Iteration   2: 94552.403 ops/s
[info] # Warmup Iteration   3: 97452.042 ops/s
[info] Iteration   1: 97799.696 ops/s
[info]                  ·gc.alloc.rate:      245.537 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 97095.084 ops/s
[info]                  ·gc.alloc.rate:            243.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5474.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 97605.341 ops/s
[info]                  ·gc.alloc.rate:            245.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5445.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 97238.896 ops/s
[info]                  ·gc.alloc.rate:            244.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5466.331 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 97663.014 ops/s
[info]                  ·gc.alloc.rate:      245.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   97480.406 ±(99.9%) 1151.499 ops/s [Average]
[info]   (min, avg, max) = (97095.084, 97480.406, 97799.696), stdev = 299.041
[info]   CI (99.9%): [96328.907, 98631.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   244.787 ±(99.9%) 2.783 MB/sec [Average]
[info]   (min, avg, max) = (243.840, 244.787, 245.537), stdev = 0.723
[info]   CI (99.9%): [242.004, 247.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.004), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.663 ±(99.9%) 712.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.663, 337.797), stdev = 185.005
[info]   CI (99.9%): [≈ 0, 915.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3277.332 ±(99.9%) 11520.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3277.332, 5474.380), stdev = 2991.799
[info]   CI (99.9%): [≈ 0, 14797.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.50% complete, ETA 00:43:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3193.619 ops/s
[info] # Warmup Iteration   2: 12963.146 ops/s
[info] # Warmup Iteration   3: 13604.092 ops/s
[info] Iteration   1: 13682.217 ops/s
[info]                  ·gc.alloc.rate:            864.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116082.765 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 13739.548 ops/s
[info]                  ·gc.alloc.rate:            867.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77067.513 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 13339.815 ops/s
[info]                  ·gc.alloc.rate:            842.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 119058.131 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 13616.949 ops/s
[info]                  ·gc.alloc.rate:                   859.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77757.838 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 461.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 13802.331 ops/s
[info]                  ·gc.alloc.rate:                                  871.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             99392.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116440.928 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   13636.172 ±(99.9%) 690.470 ops/s [Average]
[info]   (min, avg, max) = (13339.815, 13636.172, 13802.331), stdev = 179.313
[info]   CI (99.9%): [12945.702, 14326.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   861.167 ±(99.9%) 43.703 MB/sec [Average]
[info]   (min, avg, max) = (842.444, 861.167, 871.758), stdev = 11.350
[info]   CI (99.9%): [817.464, 904.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.032 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (99392.030, 99392.032, 99392.034), stdev = 0.002
[info]   CI (99.9%): [99392.023, 99392.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.852 ±(99.9%) 15.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.852, 9.258), stdev = 4.140
[info]   CI (99.9%): [≈ 0, 17.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   877.029 ±(99.9%) 718.462 MB/sec [Average]
[info]   (min, avg, max) = (672.676, 877.029, 1021.292), stdev = 186.582
[info]   CI (99.9%): [158.568, 1595.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   101281.435 ±(99.9%) 84023.798 B/op [Average]
[info]   (min, avg, max) = (77067.513, 101281.435, 119058.131), stdev = 21820.713
[info]   CI (99.9%): [17257.637, 185305.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   92.386 ±(99.9%) 795.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.386, 461.928), stdev = 206.580
[info]   CI (99.9%): [≈ 0, 887.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 12.000), stdev = 3.130
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.75% complete, ETA 00:43:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43181.554 ops/s
[info] # Warmup Iteration   2: 56485.932 ops/s
[info] # Warmup Iteration   3: 55023.617 ops/s
[info] Iteration   1: 57419.205 ops/s
[info]                  ·gc.alloc.rate:            1024.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27716.630 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 56358.178 ops/s
[info]                  ·gc.alloc.rate:            1005.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28238.333 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 57118.964 ops/s
[info]                  ·gc.alloc.rate:                                  1018.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28072.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.805 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27953.951 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                91.773 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 56876.874 ops/s
[info]                  ·gc.alloc.rate:                                  1014.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28072.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28256.698 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 57761.976 ops/s
[info]                  ·gc.alloc.rate:                                  1030.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28072.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27822.400 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   57107.040 ±(99.9%) 2055.954 ops/s [Average]
[info]   (min, avg, max) = (56358.178, 57107.040, 57761.976), stdev = 533.925
[info]   CI (99.9%): [55051.086, 59162.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1018.594 ±(99.9%) 36.655 MB/sec [Average]
[info]   (min, avg, max) = (1005.199, 1018.594, 1030.304), stdev = 9.519
[info]   CI (99.9%): [981.939, 1055.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.007, 28072.007, 28072.008), stdev = 0.001
[info]   CI (99.9%): [28072.006, 28072.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.298 ±(99.9%) 1.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 0.805), stdev = 0.386
[info]   CI (99.9%): [≈ 0, 1.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.838 ±(99.9%) 19.660 MB/sec [Average]
[info]   (min, avg, max) = (1011.138, 1015.838, 1021.327), stdev = 5.106
[info]   CI (99.9%): [996.178, 1035.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27997.602 ±(99.9%) 936.562 B/op [Average]
[info]   (min, avg, max) = (27716.630, 27997.602, 28256.698), stdev = 243.222
[info]   CI (99.9%): [27061.041, 28934.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.355 ±(99.9%) 158.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.355, 91.773), stdev = 41.042
[info]   CI (99.9%): [≈ 0, 176.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 4.099
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 00:43:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49803.939 ops/s
[info] # Warmup Iteration   2: 77554.918 ops/s
[info] # Warmup Iteration   3: 78874.363 ops/s
[info] Iteration   1: 77693.494 ops/s
[info]                  ·gc.alloc.rate:            1256.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27257.120 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 77821.227 ops/s
[info]                  ·gc.alloc.rate:                                  1258.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.203 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27374.657 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.831 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 79556.841 ops/s
[info]                  ·gc.alloc.rate:                                  1286.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26935.559 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 79600.201 ops/s
[info]                  ·gc.alloc.rate:                                  1286.550 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20190.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 79545.288 ops/s
[info]                  ·gc.alloc.rate:            1285.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26938.606 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   78843.410 ±(99.9%) 3822.389 ops/s [Average]
[info]   (min, avg, max) = (77693.494, 78843.410, 79600.201), stdev = 992.662
[info]   CI (99.9%): [75021.021, 82665.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1274.588 ±(99.9%) 61.359 MB/sec [Average]
[info]   (min, avg, max) = (1256.097, 1274.588, 1286.550), stdev = 15.935
[info]   CI (99.9%): [1213.229, 1335.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25440.005, 25440.005, 25440.006), stdev = 0.001
[info]   CI (99.9%): [25440.004, 25440.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.203), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.849 ±(99.9%) 7.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.114), stdev = 1.825
[info]   CI (99.9%): [≈ 0, 7.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.846 ±(99.9%) 576.959 MB/sec [Average]
[info]   (min, avg, max) = (1021.073, 1288.846, 1361.744), stdev = 149.834
[info]   CI (99.9%): [711.887, 1865.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25739.289 ±(99.9%) 11967.494 B/op [Average]
[info]   (min, avg, max) = (20190.504, 25739.289, 27374.657), stdev = 3107.920
[info]   CI (99.9%): [13771.795, 37706.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.166 ±(99.9%) 139.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.166, 80.831), stdev = 36.149
[info]   CI (99.9%): [≈ 0, 155.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 6.017
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.25% complete, ETA 00:42:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228678.841 ops/s
[info] # Warmup Iteration   2: 249011.918 ops/s
[info] # Warmup Iteration   3: 254252.778 ops/s
[info] Iteration   1: 253645.560 ops/s
[info]                  ·gc.alloc.rate:            486.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2087.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 253250.423 ops/s
[info]                  ·gc.alloc.rate:                   485.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4181.321 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 254270.581 ops/s
[info]                  ·gc.alloc.rate:            487.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2086.398 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 252596.923 ops/s
[info]                  ·gc.alloc.rate:                   483.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4196.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 255375.641 ops/s
[info]                  ·gc.alloc.rate:                   489.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2073.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   253827.826 ±(99.9%) 4072.182 ops/s [Average]
[info]   (min, avg, max) = (252596.923, 253827.826, 255375.641), stdev = 1057.533
[info]   CI (99.9%): [249755.644, 257900.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   486.403 ±(99.9%) 7.887 MB/sec [Average]
[info]   (min, avg, max) = (483.978, 486.403, 489.364), stdev = 2.048
[info]   CI (99.9%): [478.516, 494.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.214 ±(99.9%) 709.596 MB/sec [Average]
[info]   (min, avg, max) = (336.390, 471.214, 673.380), stdev = 184.280
[info]   CI (99.9%): [≈ 0, 1180.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2924.906 ±(99.9%) 4442.894 B/op [Average]
[info]   (min, avg, max) = (2073.210, 2924.906, 4196.296), stdev = 1153.805
[info]   CI (99.9%): [≈ 0, 7367.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.479 ±(99.9%) 8.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.479, 4.151), stdev = 2.263
[info]   CI (99.9%): [≈ 0, 11.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.50% complete, ETA 00:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262225.231 ops/s
[info] # Warmup Iteration   2: 290590.956 ops/s
[info] # Warmup Iteration   3: 290648.450 ops/s
[info] Iteration   1: 290618.327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 275599.475 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 290495.498 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 290635.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 290591.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   287588.153 ±(99.9%) 25807.376 ops/s [Average]
[info]   (min, avg, max) = (275599.475, 287588.153, 290635.682), stdev = 6702.094
[info]   CI (99.9%): [261780.777, 313395.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.75% complete, ETA 00:42:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52648.159 ops/s
[info] # Warmup Iteration   2: 70994.267 ops/s
[info] # Warmup Iteration   3: 72388.790 ops/s
[info] Iteration   1: 72614.001 ops/s
[info]                  ·gc.alloc.rate:            1168.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21873.005 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 71157.833 ops/s
[info]                  ·gc.alloc.rate:                   1145.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29761.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 88.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 73764.811 ops/s
[info]                  ·gc.alloc.rate:                                  1186.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25320.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.876 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21787.891 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 73551.369 ops/s
[info]                  ·gc.alloc.rate:                                  1183.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25320.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29135.030 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 73707.262 ops/s
[info]                  ·gc.alloc.rate:            1185.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       25320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21805.624 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   72959.055 ±(99.9%) 4272.026 ops/s [Average]
[info]   (min, avg, max) = (71157.833, 72959.055, 73764.811), stdev = 1109.431
[info]   CI (99.9%): [68687.030, 77231.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1173.713 ±(99.9%) 68.164 MB/sec [Average]
[info]   (min, avg, max) = (1145.025, 1173.713, 1186.626), stdev = 17.702
[info]   CI (99.9%): [1105.549, 1241.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25320.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25320.006, 25320.006, 25320.006), stdev = 0.001
[info]   CI (99.9%): [25320.005, 25320.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.584 ±(99.9%) 4.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 2.876), stdev = 1.281
[info]   CI (99.9%): [≈ 0, 5.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.715 ±(99.9%) 710.478 MB/sec [Average]
[info]   (min, avg, max) = (1009.065, 1151.715, 1361.467), stdev = 184.509
[info]   CI (99.9%): [441.237, 1862.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   24872.603 ±(99.9%) 16107.094 B/op [Average]
[info]   (min, avg, max) = (21787.891, 24872.603, 29761.466), stdev = 4182.961
[info]   CI (99.9%): [8765.509, 40979.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   17.680 ±(99.9%) 152.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.680, 88.400), stdev = 39.534
[info]   CI (99.9%): [≈ 0, 169.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.657
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 00:42:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117572.952 ops/s
[info] # Warmup Iteration   2: 145562.427 ops/s
[info] # Warmup Iteration   3: 146527.441 ops/s
[info] Iteration   1: 148829.202 ops/s
[info]                  ·gc.alloc.rate:                                  2153.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22776.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25197.382 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 148830.046 ops/s
[info]                  ·gc.alloc.rate:                                  2153.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22776.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21597.901 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 148744.671 ops/s
[info]                  ·gc.alloc.rate:                                  2152.875 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22776.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21609.951 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 147532.831 ops/s
[info]                  ·gc.alloc.rate:                                  2135.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22776.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21787.153 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 145882.813 ops/s
[info]                  ·gc.alloc.rate:                                  2110.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22776.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25707.368 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147963.913 ±(99.9%) 4955.715 ops/s [Average]
[info]   (min, avg, max) = (145882.813, 147963.913, 148830.046), stdev = 1286.983
[info]   CI (99.9%): [143008.198, 152919.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2141.195 ±(99.9%) 71.966 MB/sec [Average]
[info]   (min, avg, max) = (2110.804, 2141.195, 2153.615), stdev = 18.689
[info]   CI (99.9%): [2069.230, 2213.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22776.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22776.003, 22776.003, 22776.003), stdev = 0.001
[info]   CI (99.9%): [22776.002, 22776.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.016, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.170 ±(99.9%) 1.310 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.170, 0.778), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.451 ±(99.9%) 716.867 MB/sec [Average]
[info]   (min, avg, max) = (2042.218, 2178.451, 2382.473), stdev = 186.168
[info]   CI (99.9%): [1461.584, 2895.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23179.951 ±(99.9%) 8023.196 B/op [Average]
[info]   (min, avg, max) = (21597.901, 23179.951, 25707.368), stdev = 2083.599
[info]   CI (99.9%): [15156.755, 31203.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 51.24% complete, ETA 00:41:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24987.497 ops/s
[info] # Warmup Iteration   2: 628191.782 ops/s
[info] # Warmup Iteration   3: 630220.060 ops/s
[info] Iteration   1: 633556.307 ops/s
[info]                  ·gc.alloc.rate:            351.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 829.059 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 633865.523 ops/s
[info]                  ·gc.alloc.rate:            351.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 828.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 634231.598 ops/s
[info]                  ·gc.alloc.rate:            351.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 828.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 633789.350 ops/s
[info]                  ·gc.alloc.rate:                   351.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        827.101 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 634089.491 ops/s
[info]                  ·gc.alloc.rate:            351.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 828.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   633906.454 ±(99.9%) 1013.701 ops/s [Average]
[info]   (min, avg, max) = (633556.307, 633906.454, 634231.598), stdev = 263.255
[info]   CI (99.9%): [632892.752, 634920.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   351.231 ±(99.9%) 0.682 MB/sec [Average]
[info]   (min, avg, max) = (351.001, 351.231, 351.433), stdev = 0.177
[info]   CI (99.9%): [350.549, 351.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.613 ±(99.9%) 1.280 MB/sec [Average]
[info]   (min, avg, max) = (333.022, 333.613, 333.810), stdev = 0.332
[info]   CI (99.9%): [332.334, 334.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   828.262 ±(99.9%) 2.817 B/op [Average]
[info]   (min, avg, max) = (827.101, 828.262, 829.059), stdev = 0.732
[info]   CI (99.9%): [825.445, 831.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.331 ±(99.9%) 2.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 1.654), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.49% complete, ETA 00:41:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206184.317 ops/s
[info] # Warmup Iteration   2: 319524.280 ops/s
[info] # Warmup Iteration   3: 327337.143 ops/s
[info] Iteration   1: 328419.111 ops/s
[info]                  ·gc.alloc.rate:            342.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1611.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 327488.083 ops/s
[info]                  ·gc.alloc.rate:            341.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1616.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 327478.259 ops/s
[info]                  ·gc.alloc.rate:            341.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1616.676 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 328335.451 ops/s
[info]                  ·gc.alloc.rate:            342.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1612.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 328444.879 ops/s
[info]                  ·gc.alloc.rate:            342.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1611.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   328033.156 ±(99.9%) 1939.588 ops/s [Average]
[info]   (min, avg, max) = (327478.259, 328033.156, 328444.879), stdev = 503.705
[info]   CI (99.9%): [326093.568, 329972.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   341.812 ±(99.9%) 2.010 MB/sec [Average]
[info]   (min, avg, max) = (341.182, 341.812, 342.255), stdev = 0.522
[info]   CI (99.9%): [339.802, 343.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.385 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (336.331, 336.385, 336.452), stdev = 0.050
[info]   CI (99.9%): [336.191, 336.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1613.964 ±(99.9%) 9.576 B/op [Average]
[info]   (min, avg, max) = (1611.971, 1613.964, 1616.681), stdev = 2.487
[info]   CI (99.9%): [1604.388, 1623.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.74% complete, ETA 00:41:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 741568.425 ops/s
[info] # Warmup Iteration   2: 779012.927 ops/s
[info] # Warmup Iteration   3: 782917.334 ops/s
[info] Iteration   1: 790758.045 ops/s
[info]                  ·gc.alloc.rate:            273.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 670.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 800749.224 ops/s
[info]                  ·gc.alloc.rate:            276.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 662.531 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 805272.594 ops/s
[info]                  ·gc.alloc.rate:      278.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 792659.092 ops/s
[info]                  ·gc.alloc.rate:            273.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 669.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 799810.492 ops/s
[info]                  ·gc.alloc.rate:            276.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 663.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   797849.890 ±(99.9%) 23150.767 ops/s [Average]
[info]   (min, avg, max) = (790758.045, 797849.890, 805272.594), stdev = 6012.181
[info]   CI (99.9%): [774699.122, 821000.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   275.760 ±(99.9%) 8.011 MB/sec [Average]
[info]   (min, avg, max) = (273.292, 275.760, 278.286), stdev = 2.080
[info]   CI (99.9%): [267.748, 283.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.656 ±(99.9%) 580.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.656, 337.141), stdev = 150.742
[info]   CI (99.9%): [≈ 0, 850.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   533.197 ±(99.9%) 1147.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 533.197, 670.861), stdev = 298.088
[info]   CI (99.9%): [≈ 0, 1681.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.99% complete, ETA 00:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38343.510 ops/s
[info] # Warmup Iteration   2: 68687.815 ops/s
[info] # Warmup Iteration   3: 71098.706 ops/s
[info] Iteration   1: 72341.628 ops/s
[info]                  ·gc.alloc.rate:                                  3101.944 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66650.096 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 71812.724 ops/s
[info]                  ·gc.alloc.rate:                                  3079.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67142.852 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 71049.257 ops/s
[info]                  ·gc.alloc.rate:                                  3046.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67862.836 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 71842.700 ops/s
[info]                  ·gc.alloc.rate:                                  3080.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67112.016 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 71591.940 ops/s
[info]                  ·gc.alloc.rate:                                  3070.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67345.386 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   71727.650 ±(99.9%) 1802.083 ops/s [Average]
[info]   (min, avg, max) = (71049.257, 71727.650, 72341.628), stdev = 467.995
[info]   CI (99.9%): [69925.567, 73529.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3075.976 ±(99.9%) 76.735 MB/sec [Average]
[info]   (min, avg, max) = (3046.887, 3075.976, 3101.944), stdev = 19.928
[info]   CI (99.9%): [2999.241, 3152.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67504.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67504.006, 67504.006, 67504.006), stdev = 0.001
[info]   CI (99.9%): [67504.005, 67504.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.009, 0.013), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.188 ±(99.9%) 0.350 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.188, 0.287), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.051 ±(99.9%) 0.981 MB/sec [Average]
[info]   (min, avg, max) = (3062.705, 3063.051, 3063.318), stdev = 0.255
[info]   CI (99.9%): [3062.070, 3064.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67222.637 ±(99.9%) 1690.920 B/op [Average]
[info]   (min, avg, max) = (66650.096, 67222.637, 67862.836), stdev = 439.127
[info]   CI (99.9%): [65531.717, 68913.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:41:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202014.583 ops/s
[info] # Warmup Iteration   2: 276385.931 ops/s
[info] # Warmup Iteration   3: 281203.772 ops/s
[info] Iteration   1: 276456.900 ops/s
[info]                  ·gc.alloc.rate:                   1440.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9594.739 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.962 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 282811.149 ops/s
[info]                  ·gc.alloc.rate:                                  1473.551 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.926 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7577.236 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 284338.123 ops/s
[info]                  ·gc.alloc.rate:                                  1481.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7536.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 287135.006 ops/s
[info]                  ·gc.alloc.rate:                                  1496.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9328.773 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 288049.836 ops/s
[info]                  ·gc.alloc.rate:                                  1500.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7439.316 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   283758.203 ±(99.9%) 17683.972 ops/s [Average]
[info]   (min, avg, max) = (276456.900, 283758.203, 288049.836), stdev = 4592.471
[info]   CI (99.9%): [266074.231, 301442.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1478.489 ±(99.9%) 92.600 MB/sec [Average]
[info]   (min, avg, max) = (1440.266, 1478.489, 1500.861), stdev = 24.048
[info]   CI (99.9%): [1385.888, 1571.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8200.001, 8200.001, 8200.002), stdev = 0.001
[info]   CI (99.9%): [8200.001, 8200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.190 ±(99.9%) 1.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.926), stdev = 0.411
[info]   CI (99.9%): [≈ 0, 1.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.480 ±(99.9%) 700.958 MB/sec [Average]
[info]   (min, avg, max) = (1361.567, 1494.480, 1702.322), stdev = 182.037
[info]   CI (99.9%): [793.522, 2195.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8295.328 ±(99.9%) 4120.636 B/op [Average]
[info]   (min, avg, max) = (7439.316, 8295.328, 9594.739), stdev = 1070.116
[info]   CI (99.9%): [4174.692, 12415.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.792 ±(99.9%) 32.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.792, 18.962), stdev = 8.480
[info]   CI (99.9%): [≈ 0, 36.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 16.000), stdev = 5.718
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 52.49% complete, ETA 00:40:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17234.696 ops/s
[info] # Warmup Iteration   2: 1516419.631 ops/s
[info] # Warmup Iteration   3: 1472196.245 ops/s
[info] Iteration   1: 1523653.590 ops/s
[info]                  ·gc.alloc.rate:            518.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.723 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1516773.618 ops/s
[info]                  ·gc.alloc.rate:            516.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.597 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1523936.107 ops/s
[info]                  ·gc.alloc.rate:            519.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1518524.086 ops/s
[info]                  ·gc.alloc.rate:            517.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 691.774 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1525694.871 ops/s
[info]                  ·gc.alloc.rate:            519.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.260 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1521716.455 ±(99.9%) 14804.962 ops/s [Average]
[info]   (min, avg, max) = (1516773.618, 1521716.455, 1525694.871), stdev = 3844.802
[info]   CI (99.9%): [1506911.492, 1536521.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   518.211 ±(99.9%) 5.202 MB/sec [Average]
[info]   (min, avg, max) = (516.456, 518.211, 519.552), stdev = 1.351
[info]   CI (99.9%): [513.009, 523.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.180 ±(99.9%) 703.663 MB/sec [Average]
[info]   (min, avg, max) = (333.696, 467.180, 667.380), stdev = 182.739
[info]   CI (99.9%): [≈ 0, 1170.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   483.603 ±(99.9%) 733.199 B/op [Average]
[info]   (min, avg, max) = (344.260, 483.603, 692.597), stdev = 190.409
[info]   CI (99.9%): [≈ 0, 1216.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.74% complete, ETA 00:40:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 866109.503 ops/s
[info] # Warmup Iteration   2: 1448289.154 ops/s
[info] # Warmup Iteration   3: 1499926.219 ops/s
[info] Iteration   1: 1489436.838 ops/s
[info]                  ·gc.alloc.rate:            870.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1066.382 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1448604.033 ops/s
[info]                  ·gc.alloc.rate:            846.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.972 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1446470.002 ops/s
[info]                  ·gc.alloc.rate:            845.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1098.075 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1499037.883 ops/s
[info]                  ·gc.alloc.rate:                                  876.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       710.576 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.196 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1485424.173 ops/s
[info]                  ·gc.alloc.rate:                                  868.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1081.978 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1473794.586 ±(99.9%) 94288.665 ops/s [Average]
[info]   (min, avg, max) = (1446470.002, 1473794.586, 1499037.883), stdev = 24486.467
[info]   CI (99.9%): [1379505.921, 1568083.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   861.428 ±(99.9%) 54.777 MB/sec [Average]
[info]   (min, avg, max) = (845.472, 861.428, 876.128), stdev = 14.225
[info]   CI (99.9%): [806.651, 916.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.081), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.741 ±(99.9%) 713.694 MB/sec [Average]
[info]   (min, avg, max) = (672.877, 877.741, 1021.106), stdev = 185.344
[info]   CI (99.9%): [164.047, 1591.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   937.596 ±(99.9%) 763.888 B/op [Average]
[info]   (min, avg, max) = (710.576, 937.596, 1098.075), stdev = 198.379
[info]   CI (99.9%): [173.709, 1701.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.839 ±(99.9%) 7.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 4.196), stdev = 1.877
[info]   CI (99.9%): [≈ 0, 8.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.99% complete, ETA 00:40:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1408165.061 ops/s
[info] # Warmup Iteration   2: 1554165.764 ops/s
[info] # Warmup Iteration   3: 1584429.392 ops/s
[info] Iteration   1: 1582868.994 ops/s
[info]                  ·gc.alloc.rate:            538.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 669.650 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1610705.022 ops/s
[info]                  ·gc.alloc.rate:                   548.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        328.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.651 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1608459.224 ops/s
[info]                  ·gc.alloc.rate:                   547.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        658.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1551864.508 ops/s
[info]                  ·gc.alloc.rate:                   528.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        683.026 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1621585.750 ops/s
[info]                  ·gc.alloc.rate:            552.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327.148 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1595096.700 ±(99.9%) 107927.747 ops/s [Average]
[info]   (min, avg, max) = (1551864.508, 1595096.700, 1621585.750), stdev = 28028.493
[info]   CI (99.9%): [1487168.952, 1703024.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   543.174 ±(99.9%) 36.738 MB/sec [Average]
[info]   (min, avg, max) = (528.452, 543.174, 552.119), stdev = 9.541
[info]   CI (99.9%): [506.437, 579.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.746 ±(99.9%) 710.387 MB/sec [Average]
[info]   (min, avg, max) = (336.319, 538.746, 673.638), stdev = 184.485
[info]   CI (99.9%): [≈ 0, 1249.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   533.506 ±(99.9%) 723.375 B/op [Average]
[info]   (min, avg, max) = (327.148, 533.506, 683.026), stdev = 187.858
[info]   CI (99.9%): [≈ 0, 1256.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.396 ±(99.9%) 1.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 0.676), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 53.23% complete, ETA 00:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1663428.989 ops/s
[info] # Warmup Iteration   2: 1811041.206 ops/s
[info] # Warmup Iteration   3: 1819673.563 ops/s
[info] Iteration   1: 1817832.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1817499.941 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1812688.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1810646.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1812447.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1814222.819 ±(99.9%) 12487.953 ops/s [Average]
[info]   (min, avg, max) = (1810646.177, 1814222.819, 1817832.587), stdev = 3243.082
[info]   CI (99.9%): [1801734.865, 1826710.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.48% complete, ETA 00:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22665.701 ops/s
[info] # Warmup Iteration   2: 33873.015 ops/s
[info] # Warmup Iteration   3: 34007.628 ops/s
[info] Iteration   1: 33623.707 ops/s
[info]                  ·gc.alloc.rate:                                  1559.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72985.543 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78916.023 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                187.079 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 34752.592 ops/s
[info]                  ·gc.alloc.rate:                                  1611.796 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61659.647 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 34517.087 ops/s
[info]                  ·gc.alloc.rate:                                  1600.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77603.675 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 33888.935 ops/s
[info]                  ·gc.alloc.rate:                                  1571.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79041.501 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 34646.827 ops/s
[info]                  ·gc.alloc.rate:                                  1606.671 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77312.547 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34285.830 ±(99.9%) 1923.008 ops/s [Average]
[info]   (min, avg, max) = (33623.707, 34285.830, 34752.592), stdev = 499.399
[info]   CI (99.9%): [32362.821, 36208.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1590.103 ±(99.9%) 88.709 MB/sec [Average]
[info]   (min, avg, max) = (1559.626, 1590.103, 1611.796), stdev = 23.038
[info]   CI (99.9%): [1501.393, 1678.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72977.919 ±(99.9%) 16.413 B/op [Average]
[info]   (min, avg, max) = (72976.012, 72977.919, 72985.543), stdev = 4.262
[info]   CI (99.9%): [72961.505, 72994.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.038, 0.095), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.733 ±(99.9%) 8.613 B/op [Average]
[info]   (min, avg, max) = (0.046, 1.733, 4.316), stdev = 2.237
[info]   CI (99.9%): [≈ 0, 10.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.983 ±(99.9%) 579.924 MB/sec [Average]
[info]   (min, avg, max) = (1361.855, 1630.983, 1702.378), stdev = 150.604
[info]   CI (99.9%): [1051.059, 2210.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74906.679 ±(99.9%) 28668.388 B/op [Average]
[info]   (min, avg, max) = (61659.647, 74906.679, 79041.501), stdev = 7445.089
[info]   CI (99.9%): [46238.290, 103575.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.416 ±(99.9%) 322.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.416, 187.079), stdev = 83.664
[info]   CI (99.9%): [≈ 0, 359.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.73% complete, ETA 00:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36732.374 ops/s
[info] # Warmup Iteration   2: 47005.233 ops/s
[info] # Warmup Iteration   3: 46865.738 ops/s
[info] Iteration   1: 46401.545 ops/s
[info]                  ·gc.alloc.rate:            925.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34298.054 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 46438.430 ops/s
[info]                  ·gc.alloc.rate:            926.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34271.469 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 46223.680 ops/s
[info]                  ·gc.alloc.rate:                   922.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              31400.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34431.599 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 113.411 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 46763.286 ops/s
[info]                  ·gc.alloc.rate:                                  933.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.584 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22913.568 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 46557.839 ops/s
[info]                  ·gc.alloc.rate:                                  929.136 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34520.928 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   46476.956 ±(99.9%) 769.761 ops/s [Average]
[info]   (min, avg, max) = (46223.680, 46476.956, 46763.286), stdev = 199.904
[info]   CI (99.9%): [45707.195, 47246.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   927.238 ±(99.9%) 16.150 MB/sec [Average]
[info]   (min, avg, max) = (922.042, 927.238, 933.229), stdev = 4.194
[info]   CI (99.9%): [911.088, 943.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31400.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31400.009, 31400.009, 31400.010), stdev = 0.001
[info]   CI (99.9%): [31400.008, 31400.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 1.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.584), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   947.093 ±(99.9%) 573.039 MB/sec [Average]
[info]   (min, avg, max) = (681.006, 947.093, 1021.484), stdev = 148.816
[info]   CI (99.9%): [374.054, 1520.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32087.123 ±(99.9%) 19750.619 B/op [Average]
[info]   (min, avg, max) = (22913.568, 32087.123, 34520.928), stdev = 5129.173
[info]   CI (99.9%): [12336.505, 51837.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   22.682 ±(99.9%) 195.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.682, 113.411), stdev = 50.719
[info]   CI (99.9%): [≈ 0, 217.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 12.000), stdev = 4.550
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.98% complete, ETA 00:39:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51744.635 ops/s
[info] # Warmup Iteration   2: 77760.844 ops/s
[info] # Warmup Iteration   3: 79752.802 ops/s
[info] Iteration   1: 79590.798 ops/s
[info]                  ·gc.alloc.rate:            839.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19956.191 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 80090.171 ops/s
[info]                  ·gc.alloc.rate:            844.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13220.920 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 79689.581 ops/s
[info]                  ·gc.alloc.rate:            840.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19931.403 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 78769.189 ops/s
[info]                  ·gc.alloc.rate:                                  830.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13522.457 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                79.857 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 79062.033 ops/s
[info]                  ·gc.alloc.rate:                                  833.496 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20328.385 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   79440.354 ±(99.9%) 2019.845 ops/s [Average]
[info]   (min, avg, max) = (78769.189, 79440.354, 80090.171), stdev = 524.547
[info]   CI (99.9%): [77420.509, 81460.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   837.505 ±(99.9%) 21.429 MB/sec [Average]
[info]   (min, avg, max) = (830.367, 837.505, 844.342), stdev = 5.565
[info]   CI (99.9%): [816.076, 858.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.072), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.494 ±(99.9%) 2.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.494, 1.448), stdev = 0.693
[info]   CI (99.9%): [≈ 0, 3.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.859 ±(99.9%) 714.153 MB/sec [Average]
[info]   (min, avg, max) = (672.793, 877.859, 1021.192), stdev = 185.463
[info]   CI (99.9%): [163.707, 1592.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17391.871 ±(99.9%) 14150.433 B/op [Average]
[info]   (min, avg, max) = (13220.920, 17391.871, 20328.385), stdev = 3674.822
[info]   CI (99.9%): [3241.438, 31542.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.971 ±(99.9%) 137.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.971, 79.857), stdev = 35.713
[info]   CI (99.9%): [≈ 0, 153.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.23% complete, ETA 00:39:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236162.449 ops/s
[info] # Warmup Iteration   2: 259069.656 ops/s
[info] # Warmup Iteration   3: 259862.737 ops/s
[info] Iteration   1: 260876.430 ops/s
[info]                  ·gc.alloc.rate:            848.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4066.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 259933.001 ops/s
[info]                  ·gc.alloc.rate:            845.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6122.730 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 260743.528 ops/s
[info]                  ·gc.alloc.rate:            848.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4068.986 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 258792.798 ops/s
[info]                  ·gc.alloc.rate:                                  841.960 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6169.762 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.255 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 257974.327 ops/s
[info]                  ·gc.alloc.rate:                                  839.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4153.291 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   259664.017 ±(99.9%) 4840.841 ops/s [Average]
[info]   (min, avg, max) = (257974.327, 259664.017, 260876.430), stdev = 1257.151
[info]   CI (99.9%): [254823.176, 264504.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   844.693 ±(99.9%) 15.635 MB/sec [Average]
[info]   (min, avg, max) = (839.139, 844.693, 848.494), stdev = 4.060
[info]   CI (99.9%): [829.057, 860.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.081), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.153 ±(99.9%) 0.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.495), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 1.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.926 ±(99.9%) 710.226 MB/sec [Average]
[info]   (min, avg, max) = (673.961, 810.926, 1014.589), stdev = 184.443
[info]   CI (99.9%): [100.700, 1521.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4916.321 ±(99.9%) 4325.919 B/op [Average]
[info]   (min, avg, max) = (4066.834, 4916.321, 6169.762), stdev = 1123.428
[info]   CI (99.9%): [590.401, 9242.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.051 ±(99.9%) 34.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.051, 20.255), stdev = 9.058
[info]   CI (99.9%): [≈ 0, 38.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.48% complete, ETA 00:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13213.387 ops/s
[info] # Warmup Iteration   2: 23591.015 ops/s
[info] # Warmup Iteration   3: 23717.350 ops/s
[info] Iteration   1: 23241.553 ops/s
[info]                  ·gc.alloc.rate:            1091.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68338.322 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 23063.679 ops/s
[info]                  ·gc.alloc.rate:                   1083.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        91824.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 272.747 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 23921.904 ops/s
[info]                  ·gc.alloc.rate:                                  1124.020 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.227 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.911 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67184.946 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 23370.754 ops/s
[info]                  ·gc.alloc.rate:                                  1098.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68768.642 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 23757.438 ops/s
[info]                  ·gc.alloc.rate:                                  1116.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67651.488 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23471.066 ±(99.9%) 1380.292 ops/s [Average]
[info]   (min, avg, max) = (23063.679, 23471.066, 23921.904), stdev = 358.458
[info]   CI (99.9%): [22090.773, 24851.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1102.837 ±(99.9%) 64.980 MB/sec [Average]
[info]   (min, avg, max) = (1083.488, 1102.837, 1124.020), stdev = 16.875
[info]   CI (99.9%): [1037.857, 1167.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.019 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (73960.017, 73960.019, 73960.022), stdev = 0.002
[info]   CI (99.9%): [73960.012, 73960.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.227), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.999 ±(99.9%) 25.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.999, 14.911), stdev = 6.659
[info]   CI (99.9%): [≈ 0, 28.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.524 ±(99.9%) 563.648 MB/sec [Average]
[info]   (min, avg, max) = (1008.946, 1083.524, 1345.201), stdev = 146.378
[info]   CI (99.9%): [519.875, 1647.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72753.647 ±(99.9%) 41119.402 B/op [Average]
[info]   (min, avg, max) = (67184.946, 72753.647, 91824.837), stdev = 10678.578
[info]   CI (99.9%): [31634.245, 113873.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   54.549 ±(99.9%) 469.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.549, 272.747), stdev = 121.976
[info]   CI (99.9%): [≈ 0, 524.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 17.000), stdev = 6.914
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 54.73% complete, ETA 00:38:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46002.537 ops/s
[info] # Warmup Iteration   2: 59096.387 ops/s
[info] # Warmup Iteration   3: 58836.827 ops/s
[info] Iteration   1: 59560.406 ops/s
[info]                  ·gc.alloc.rate:            883.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17813.945 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 59342.512 ops/s
[info]                  ·gc.alloc.rate:            880.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26818.614 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 59362.299 ops/s
[info]                  ·gc.alloc.rate:            880.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26809.580 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 59514.341 ops/s
[info]                  ·gc.alloc.rate:                                  882.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.341 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17915.794 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.082 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 59647.555 ops/s
[info]                  ·gc.alloc.rate:                                  884.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.574 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26944.250 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   59485.423 ±(99.9%) 503.273 ops/s [Average]
[info]   (min, avg, max) = (59342.512, 59485.423, 59647.555), stdev = 130.698
[info]   CI (99.9%): [58982.149, 59988.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   882.504 ±(99.9%) 7.393 MB/sec [Average]
[info]   (min, avg, max) = (880.258, 882.504, 884.959), stdev = 1.920
[info]   CI (99.9%): [875.112, 889.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.007), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.051), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.383 ±(99.9%) 2.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.341), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 2.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.940 ±(99.9%) 714.715 MB/sec [Average]
[info]   (min, avg, max) = (673.962, 878.940, 1021.092), stdev = 185.609
[info]   CI (99.9%): [164.225, 1593.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23260.437 ±(99.9%) 18967.792 B/op [Average]
[info]   (min, avg, max) = (17813.945, 23260.437, 26944.250), stdev = 4925.875
[info]   CI (99.9%): [4292.644, 42228.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.616 ±(99.9%) 151.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.616, 88.082), stdev = 39.391
[info]   CI (99.9%): [≈ 0, 169.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.98% complete, ETA 00:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55806.226 ops/s
[info] # Warmup Iteration   2: 88530.042 ops/s
[info] # Warmup Iteration   3: 88277.245 ops/s
[info] Iteration   1: 88187.606 ops/s
[info]                  ·gc.alloc.rate:            1207.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       21559.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24014.189 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 89364.162 ops/s
[info]                  ·gc.alloc.rate:                                  1223.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.356 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17843.859 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                70.390 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 89900.326 ops/s
[info]                  ·gc.alloc.rate:                                  1231.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23836.574 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 89171.395 ops/s
[info]                  ·gc.alloc.rate:            1221.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18024.164 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 89908.680 ops/s
[info]                  ·gc.alloc.rate:            1231.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23834.983 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   89306.434 ±(99.9%) 2715.149 ops/s [Average]
[info]   (min, avg, max) = (88187.606, 89306.434, 89908.680), stdev = 705.116
[info]   CI (99.9%): [86591.284, 92021.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1223.420 ±(99.9%) 37.777 MB/sec [Average]
[info]   (min, avg, max) = (1207.843, 1223.420, 1231.868), stdev = 9.811
[info]   CI (99.9%): [1185.642, 1261.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.000 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.000, 21560.005), stdev = 0.010
[info]   CI (99.9%): [21559.962, 21560.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.303 ±(99.9%) 1.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.303, 1.161), stdev = 0.504
[info]   CI (99.9%): [≈ 0, 2.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.659 ±(99.9%) 715.782 MB/sec [Average]
[info]   (min, avg, max) = (1012.957, 1220.659, 1361.852), stdev = 185.886
[info]   CI (99.9%): [504.877, 1936.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21510.754 ±(99.9%) 12578.277 B/op [Average]
[info]   (min, avg, max) = (17843.859, 21510.754, 24014.189), stdev = 3266.539
[info]   CI (99.9%): [8932.477, 34089.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.078 ±(99.9%) 121.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.078, 70.390), stdev = 31.479
[info]   CI (99.9%): [≈ 0, 135.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 00:38:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248435.262 ops/s
[info] # Warmup Iteration   2: 283822.790 ops/s
[info] # Warmup Iteration   3: 284828.731 ops/s
[info] Iteration   1: 272151.224 ops/s
[info]                  ·gc.alloc.rate:            867.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5835.908 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 287454.244 ops/s
[info]                  ·gc.alloc.rate:            915.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5525.482 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 289451.024 ops/s
[info]                  ·gc.alloc.rate:                   922.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3661.879 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 290575.968 ops/s
[info]                  ·gc.alloc.rate:                                  926.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5509.326 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.648 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 291407.057 ops/s
[info]                  ·gc.alloc.rate:                                  928.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5515.337 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   286207.904 ±(99.9%) 30791.468 ops/s [Average]
[info]   (min, avg, max) = (272151.224, 286207.904, 291407.057), stdev = 7996.446
[info]   CI (99.9%): [255416.436, 316999.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   912.055 ±(99.9%) 98.343 MB/sec [Average]
[info]   (min, avg, max) = (867.170, 912.055, 928.638), stdev = 25.539
[info]   CI (99.9%): [813.712, 1010.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.101 ±(99.9%) 0.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.101, 0.401), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.917 ±(99.9%) 587.057 MB/sec [Average]
[info]   (min, avg, max) = (673.357, 945.917, 1021.082), stdev = 152.457
[info]   CI (99.9%): [358.860, 1532.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5209.587 ±(99.9%) 3373.873 B/op [Average]
[info]   (min, avg, max) = (3661.879, 5209.587, 5835.908), stdev = 876.184
[info]   CI (99.9%): [1835.713, 8583.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.054 ±(99.9%) 36.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.054, 21.648), stdev = 9.408
[info]   CI (99.9%): [≈ 0, 41.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 55.47% complete, ETA 00:38:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292284.340 ops/s
[info] # Warmup Iteration   2: 319671.586 ops/s
[info] # Warmup Iteration   3: 320620.805 ops/s
[info] Iteration   1: 320730.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 320415.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 320693.312 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 320554.309 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 320786.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   320636.005 ±(99.9%) 577.981 ops/s [Average]
[info]   (min, avg, max) = (320415.483, 320636.005, 320786.217), stdev = 150.100
[info]   CI (99.9%): [320058.024, 321213.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.72% complete, ETA 00:38:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56393.715 ops/s
[info] # Warmup Iteration   2: 75738.616 ops/s
[info] # Warmup Iteration   3: 75690.748 ops/s
[info] Iteration   1: 76590.258 ops/s
[info]                  ·gc.alloc.rate:            1134.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20737.995 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 76975.698 ops/s
[info]                  ·gc.alloc.rate:                   1141.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27512.385 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 76964.382 ops/s
[info]                  ·gc.alloc.rate:                                  1140.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.211 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20882.161 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 78413.033 ops/s
[info]                  ·gc.alloc.rate:            1162.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20496.870 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 78331.277 ops/s
[info]                  ·gc.alloc.rate:                                  1160.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.267 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27356.019 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   77454.929 ±(99.9%) 3280.912 ops/s [Average]
[info]   (min, avg, max) = (76590.258, 77454.929, 78413.033), stdev = 852.042
[info]   CI (99.9%): [74174.018, 80735.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1147.975 ±(99.9%) 48.399 MB/sec [Average]
[info]   (min, avg, max) = (1134.967, 1147.975, 1162.128), stdev = 12.569
[info]   CI (99.9%): [1099.576, 1196.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.005 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.005, 23328.031), stdev = 0.018
[info]   CI (99.9%): [23327.935, 23328.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.211), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.914 ±(99.9%) 7.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.914, 4.305), stdev = 1.899
[info]   CI (99.9%): [≈ 0, 8.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.659 ±(99.9%) 709.919 MB/sec [Average]
[info]   (min, avg, max) = (1008.955, 1151.659, 1361.243), stdev = 184.364
[info]   CI (99.9%): [441.740, 1861.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23397.086 ±(99.9%) 14202.522 B/op [Average]
[info]   (min, avg, max) = (20496.870, 23397.086, 27512.385), stdev = 3688.350
[info]   CI (99.9%): [9194.564, 37599.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.344 ±(99.9%) 140.727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.344, 81.720), stdev = 36.546
[info]   CI (99.9%): [≈ 0, 157.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 16.000), stdev = 6.066
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.97% complete, ETA 00:37:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49555.833 ops/s
[info] # Warmup Iteration   2: 77267.905 ops/s
[info] # Warmup Iteration   3: 78054.834 ops/s
[info] Iteration   1: 78125.635 ops/s
[info]                  ·gc.alloc.rate:            1466.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       29552.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27107.123 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 77697.643 ops/s
[info]                  ·gc.alloc.rate:                                  1458.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29552.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.418 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34394.804 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.961 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 78374.204 ops/s
[info]                  ·gc.alloc.rate:                                  1471.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29552.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27342.059 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 77308.902 ops/s
[info]                  ·gc.alloc.rate:                                  1451.664 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29552.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27719.011 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 78372.444 ops/s
[info]                  ·gc.alloc.rate:                                  1471.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29552.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34178.882 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   77975.766 ±(99.9%) 1786.121 ops/s [Average]
[info]   (min, avg, max) = (77308.902, 77975.766, 78374.204), stdev = 463.850
[info]   CI (99.9%): [76189.645, 79761.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1463.982 ±(99.9%) 33.377 MB/sec [Average]
[info]   (min, avg, max) = (1451.664, 1463.982, 1471.713), stdev = 8.668
[info]   CI (99.9%): [1430.605, 1497.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29552.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29552.005, 29552.005, 29552.006), stdev = 0.001
[info]   CI (99.9%): [29552.004, 29552.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.119), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.574 ±(99.9%) 3.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.418), stdev = 1.037
[info]   CI (99.9%): [≈ 0, 4.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1493.577 ±(99.9%) 725.052 MB/sec [Average]
[info]   (min, avg, max) = (1345.195, 1493.577, 1701.713), stdev = 188.294
[info]   CI (99.9%): [768.524, 2218.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   30148.376 ±(99.9%) 14574.519 B/op [Average]
[info]   (min, avg, max) = (27107.123, 30148.376, 34394.804), stdev = 3784.956
[info]   CI (99.9%): [15573.857, 44722.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   16.192 ±(99.9%) 139.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.192, 80.961), stdev = 36.207
[info]   CI (99.9%): [≈ 0, 155.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.506
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41685.670 ops/s
[info] # Warmup Iteration   2: 76405.165 ops/s
[info] # Warmup Iteration   3: 77902.656 ops/s
[info] Iteration   1: 77830.982 ops/s
[info]                  ·gc.alloc.rate:            897.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20367.761 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 77906.490 ops/s
[info]                  ·gc.alloc.rate:            898.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20347.634 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 76032.316 ops/s
[info]                  ·gc.alloc.rate:            876.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13899.199 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 75331.650 ops/s
[info]                  ·gc.alloc.rate:                                  868.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.967 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21237.898 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                97.422 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 76311.707 ops/s
[info]                  ·gc.alloc.rate:                                  879.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14040.546 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   76682.629 ±(99.9%) 4391.332 ops/s [Average]
[info]   (min, avg, max) = (75331.650, 76682.629, 77906.490), stdev = 1140.415
[info]   CI (99.9%): [72291.297, 81073.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   884.065 ±(99.9%) 50.334 MB/sec [Average]
[info]   (min, avg, max) = (868.572, 884.065, 898.004), stdev = 13.072
[info]   CI (99.9%): [833.731, 934.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.005, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.409 ±(99.9%) 3.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 1.967), stdev = 0.872
[info]   CI (99.9%): [≈ 0, 3.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.682 ±(99.9%) 705.050 MB/sec [Average]
[info]   (min, avg, max) = (671.531, 876.682, 1016.680), stdev = 183.099
[info]   CI (99.9%): [171.632, 1581.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17978.608 ±(99.9%) 14160.376 B/op [Average]
[info]   (min, avg, max) = (13899.199, 17978.608, 21237.898), stdev = 3677.405
[info]   CI (99.9%): [3818.232, 32138.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.484 ±(99.9%) 167.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.484, 97.422), stdev = 43.568
[info]   CI (99.9%): [≈ 0, 187.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.800, 14.000), stdev = 5.215
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:37:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80813.598 ops/s
[info] # Warmup Iteration   2: 96140.745 ops/s
[info] # Warmup Iteration   3: 97906.033 ops/s
[info] Iteration   1: 96104.909 ops/s
[info]                  ·gc.alloc.rate:            1032.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16527.009 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 96252.620 ops/s
[info]                  ·gc.alloc.rate:            1034.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16501.944 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 95612.361 ops/s
[info]                  ·gc.alloc.rate:                                  1027.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.403 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22281.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                65.793 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 98472.078 ops/s
[info]                  ·gc.alloc.rate:                                  1057.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.335 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16321.119 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 98589.173 ops/s
[info]                  ·gc.alloc.rate:            1059.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16302.084 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   97006.228 ±(99.9%) 5438.003 ops/s [Average]
[info]   (min, avg, max) = (95612.361, 97006.228, 98589.173), stdev = 1412.232
[info]   CI (99.9%): [91568.226, 102444.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1042.199 ±(99.9%) 58.533 MB/sec [Average]
[info]   (min, avg, max) = (1027.271, 1042.199, 1059.244), stdev = 15.201
[info]   CI (99.9%): [983.666, 1100.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16912.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16912.004, 16912.004, 16912.005), stdev = 0.001
[info]   CI (99.9%): [16912.004, 16912.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.348 ±(99.9%) 2.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.403), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.686 ±(99.9%) 583.303 MB/sec [Average]
[info]   (min, avg, max) = (1008.940, 1082.686, 1353.450), stdev = 151.482
[info]   CI (99.9%): [499.383, 1665.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17586.811 ±(99.9%) 10114.164 B/op [Average]
[info]   (min, avg, max) = (16302.084, 17586.811, 22281.897), stdev = 2626.616
[info]   CI (99.9%): [7472.647, 27700.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.159 ±(99.9%) 113.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.159, 65.793), stdev = 29.424
[info]   CI (99.9%): [≈ 0, 126.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.72% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21877.905 ops/s
[info] # Warmup Iteration   2: 42735.234 ops/s
[info] # Warmup Iteration   3: 42657.862 ops/s
[info] Iteration   1: 43491.835 ops/s
[info]                  ·gc.alloc.rate:                                  2077.933 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.366 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73906.529 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 44106.004 ops/s
[info]                  ·gc.alloc.rate:                                  2106.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72876.210 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 43931.739 ops/s
[info]                  ·gc.alloc.rate:                                  2098.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73166.455 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 43694.122 ops/s
[info]                  ·gc.alloc.rate:                                  2087.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73564.917 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 43742.184 ops/s
[info]                  ·gc.alloc.rate:                                  2089.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85727.655 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   43793.177 ±(99.9%) 903.630 ops/s [Average]
[info]   (min, avg, max) = (43491.835, 43793.177, 44106.004), stdev = 234.670
[info]   CI (99.9%): [42889.547, 44696.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2091.985 ±(99.9%) 42.445 MB/sec [Average]
[info]   (min, avg, max) = (2077.933, 2091.985, 2106.772), stdev = 11.023
[info]   CI (99.9%): [2049.540, 2134.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75176.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75176.009, 75176.009, 75176.010), stdev = 0.001
[info]   CI (99.9%): [75176.008, 75176.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.030, 0.121), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.095 ±(99.9%) 7.064 B/op [Average]
[info]   (min, avg, max) = (0.153, 1.095, 4.366), stdev = 1.835
[info]   CI (99.9%): [≈ 0, 8.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2110.568 ±(99.9%) 585.953 MB/sec [Average]
[info]   (min, avg, max) = (2042.322, 2110.568, 2382.778), stdev = 152.170
[info]   CI (99.9%): [1524.615, 2696.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75848.353 ±(99.9%) 21319.111 B/op [Average]
[info]   (min, avg, max) = (72876.210, 75848.353, 85727.655), stdev = 5536.506
[info]   CI (99.9%): [54529.242, 97167.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.97% complete, ETA 00:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97045.073 ops/s
[info] # Warmup Iteration   2: 128104.932 ops/s
[info] # Warmup Iteration   3: 131199.805 ops/s
[info] Iteration   1: 127477.129 ops/s
[info]                  ·gc.alloc.rate:            565.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8306.692 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 127256.369 ops/s
[info]                  ·gc.alloc.rate:            564.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8321.116 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 130418.549 ops/s
[info]                  ·gc.alloc.rate:            578.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4059.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 128838.016 ops/s
[info]                  ·gc.alloc.rate:            571.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8218.956 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 125982.578 ops/s
[info]                  ·gc.alloc.rate:            559.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8405.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   127994.528 ±(99.9%) 6514.270 ops/s [Average]
[info]   (min, avg, max) = (125982.578, 127994.528, 130418.549), stdev = 1691.735
[info]   CI (99.9%): [121480.258, 134508.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   567.970 ±(99.9%) 28.685 MB/sec [Average]
[info]   (min, avg, max) = (559.194, 567.970, 578.707), stdev = 7.449
[info]   CI (99.9%): [539.285, 596.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   605.532 ±(99.9%) 579.346 MB/sec [Average]
[info]   (min, avg, max) = (336.392, 605.532, 673.007), stdev = 150.454
[info]   CI (99.9%): [26.186, 1184.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7462.377 ±(99.9%) 7329.014 B/op [Average]
[info]   (min, avg, max) = (4059.668, 7462.377, 8405.452), stdev = 1903.322
[info]   CI (99.9%): [133.363, 14791.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.21% complete, ETA 00:36:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109671.864 ops/s
[info] # Warmup Iteration   2: 159437.008 ops/s
[info] # Warmup Iteration   3: 162570.029 ops/s
[info] Iteration   1: 159787.585 ops/s
[info]                  ·gc.alloc.rate:            237.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3306.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 154839.727 ops/s
[info]                  ·gc.alloc.rate:            229.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3412.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 160543.117 ops/s
[info]                  ·gc.alloc.rate:            238.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3291.228 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 161524.465 ops/s
[info]                  ·gc.alloc.rate:      239.743 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 160587.655 ops/s
[info]                  ·gc.alloc.rate:            238.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3290.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   159456.510 ±(99.9%) 10217.083 ops/s [Average]
[info]   (min, avg, max) = (154839.727, 159456.510, 161524.465), stdev = 2653.344
[info]   CI (99.9%): [149239.427, 169673.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   236.682 ±(99.9%) 15.265 MB/sec [Average]
[info]   (min, avg, max) = (229.788, 236.682, 239.743), stdev = 3.964
[info]   CI (99.9%): [221.417, 251.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.003, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.595 ±(99.9%) 578.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.595, 335.819), stdev = 150.149
[info]   CI (99.9%): [≈ 0, 846.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2660.194 ±(99.9%) 5729.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2660.194, 3412.557), stdev = 1487.962
[info]   CI (99.9%): [≈ 0, 8389.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.46% complete, ETA 00:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 661492.786 ops/s
[info] # Warmup Iteration   2: 709172.538 ops/s
[info] # Warmup Iteration   3: 737709.006 ops/s
[info] Iteration   1: 740248.449 ops/s
[info]                  ·gc.alloc.rate:            918.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2145.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 718347.753 ops/s
[info]                  ·gc.alloc.rate:            890.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2211.096 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 731127.431 ops/s
[info]                  ·gc.alloc.rate:            906.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1448.303 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 716104.877 ops/s
[info]                  ·gc.alloc.rate:                                  888.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2235.576 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.784 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 720242.777 ops/s
[info]                  ·gc.alloc.rate:                                  893.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2231.496 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   725214.257 ±(99.9%) 39261.363 ops/s [Average]
[info]   (min, avg, max) = (716104.877, 725214.257, 740248.449), stdev = 10196.051
[info]   CI (99.9%): [685952.894, 764475.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   899.447 ±(99.9%) 48.564 MB/sec [Average]
[info]   (min, avg, max) = (888.199, 899.447, 918.115), stdev = 12.612
[info]   CI (99.9%): [850.882, 948.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.213), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.909 ±(99.9%) 588.528 MB/sec [Average]
[info]   (min, avg, max) = (672.668, 945.909, 1021.417), stdev = 152.839
[info]   CI (99.9%): [357.381, 1534.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2054.410 ±(99.9%) 1312.058 B/op [Average]
[info]   (min, avg, max) = (1448.303, 2054.410, 2235.576), stdev = 340.737
[info]   CI (99.9%): [742.352, 3366.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.757 ±(99.9%) 15.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.757, 8.784), stdev = 3.928
[info]   CI (99.9%): [≈ 0, 16.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.130
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 57.71% complete, ETA 00:36:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 717672.347 ops/s
[info] # Warmup Iteration   2: 750007.974 ops/s
[info] # Warmup Iteration   3: 763634.660 ops/s
[info] Iteration   1: 763577.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 771312.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 763113.733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 750662.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 774028.600 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   764538.869 ±(99.9%) 35051.999 ops/s [Average]
[info]   (min, avg, max) = (750662.121, 764538.869, 774028.600), stdev = 9102.893
[info]   CI (99.9%): [729486.870, 799590.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.96% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144320.108 ops/s
[info] # Warmup Iteration   2: 196141.986 ops/s
[info] # Warmup Iteration   3: 194888.432 ops/s
[info] Iteration   1: 193598.152 ops/s
[info]                  ·gc.alloc.rate:            630.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5458.626 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 192758.624 ops/s
[info]                  ·gc.alloc.rate:            627.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5482.466 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 194380.255 ops/s
[info]                  ·gc.alloc.rate:            633.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2718.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 192236.321 ops/s
[info]                  ·gc.alloc.rate:            626.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5497.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 191273.760 ops/s
[info]                  ·gc.alloc.rate:                   623.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5519.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   192849.423 ±(99.9%) 4625.141 ops/s [Average]
[info]   (min, avg, max) = (191273.760, 192849.423, 194380.255), stdev = 1201.134
[info]   CI (99.9%): [188224.282, 197474.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   628.304 ±(99.9%) 15.056 MB/sec [Average]
[info]   (min, avg, max) = (623.270, 628.304, 633.282), stdev = 3.910
[info]   CI (99.9%): [613.248, 643.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   604.146 ±(99.9%) 577.814 MB/sec [Average]
[info]   (min, avg, max) = (335.718, 604.146, 671.536), stdev = 150.056
[info]   CI (99.9%): [26.333, 1181.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4935.303 ±(99.9%) 4772.655 B/op [Average]
[info]   (min, avg, max) = (2718.474, 4935.303, 5519.513), stdev = 1239.443
[info]   CI (99.9%): [162.648, 9707.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.096 ±(99.9%) 9.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.096, 5.481), stdev = 2.451
[info]   CI (99.9%): [≈ 0, 10.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.21% complete, ETA 00:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90659.713 ops/s
[info] # Warmup Iteration   2: 120511.088 ops/s
[info] # Warmup Iteration   3: 122741.452 ops/s
[info] Iteration   1: 122962.193 ops/s
[info]                  ·gc.alloc.rate:                                  1672.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21408.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21656.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.631 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 121797.669 ops/s
[info]                  ·gc.alloc.rate:                                  1656.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21993.282 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 123350.194 ops/s
[info]                  ·gc.alloc.rate:                                  1677.747 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21408.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21715.367 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 124356.425 ops/s
[info]                  ·gc.alloc.rate:                                  1691.346 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21408.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21540.943 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 124586.216 ops/s
[info]                  ·gc.alloc.rate:                                  1694.245 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21408.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21499.973 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   123410.539 ±(99.9%) 4340.703 ops/s [Average]
[info]   (min, avg, max) = (121797.669, 123410.539, 124586.216), stdev = 1127.267
[info]   CI (99.9%): [119069.836, 127751.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1678.378 ±(99.9%) 59.231 MB/sec [Average]
[info]   (min, avg, max) = (1656.265, 1678.378, 1694.245), stdev = 15.382
[info]   CI (99.9%): [1619.147, 1737.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21408.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21408.003, 21408.003, 21408.004), stdev = 0.001
[info]   CI (99.9%): [21408.003, 21408.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.024, 0.075), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.307 ±(99.9%) 1.471 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.307, 0.957), stdev = 0.382
[info]   CI (99.9%): [≈ 0, 1.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.693 ±(99.9%) 17.193 MB/sec [Average]
[info]   (min, avg, max) = (1691.710, 1699.693, 1701.849), stdev = 4.465
[info]   CI (99.9%): [1682.500, 1716.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21681.251 ±(99.9%) 749.835 B/op [Average]
[info]   (min, avg, max) = (21499.973, 21681.251, 21993.282), stdev = 194.730
[info]   CI (99.9%): [20931.416, 22431.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.526 ±(99.9%) 73.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.526, 42.631), stdev = 19.065
[info]   CI (99.9%): [≈ 0, 81.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.46% complete, ETA 00:35:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99926.559 ops/s
[info] # Warmup Iteration   2: 156645.721 ops/s
[info] # Warmup Iteration   3: 157657.188 ops/s
[info] Iteration   1: 157724.543 ops/s
[info]                  ·gc.alloc.rate:            841.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10070.318 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 158452.471 ops/s
[info]                  ·gc.alloc.rate:            845.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6682.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 155230.122 ops/s
[info]                  ·gc.alloc.rate:            828.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10232.613 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 153098.308 ops/s
[info]                  ·gc.alloc.rate:                                  817.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.940 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6957.727 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.089 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 156290.216 ops/s
[info]                  ·gc.alloc.rate:                                  834.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6855.718 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   156159.132 ±(99.9%) 8159.096 ops/s [Average]
[info]   (min, avg, max) = (153098.308, 156159.132, 158452.471), stdev = 2118.891
[info]   CI (99.9%): [148000.036, 164318.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   833.392 ±(99.9%) 43.378 MB/sec [Average]
[info]   (min, avg, max) = (817.035, 833.392, 845.544), stdev = 11.265
[info]   CI (99.9%): [790.014, 876.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.003, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.280 ±(99.9%) 1.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 0.940), stdev = 0.419
[info]   CI (99.9%): [≈ 0, 1.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.717 ±(99.9%) 701.171 MB/sec [Average]
[info]   (min, avg, max) = (672.689, 809.717, 1009.310), stdev = 182.092
[info]   CI (99.9%): [108.546, 1510.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8159.833 ±(99.9%) 7014.569 B/op [Average]
[info]   (min, avg, max) = (6682.790, 8159.833, 10232.613), stdev = 1821.661
[info]   CI (99.9%): [1145.264, 15174.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.218 ±(99.9%) 70.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.218, 41.089), stdev = 18.376
[info]   CI (99.9%): [≈ 0, 78.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.868
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.71% complete, ETA 00:35:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287260.333 ops/s
[info] # Warmup Iteration   2: 310168.745 ops/s
[info] # Warmup Iteration   3: 305723.000 ops/s
[info] Iteration   1: 310146.445 ops/s
[info]                  ·gc.alloc.rate:            602.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3420.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 310433.851 ops/s
[info]                  ·gc.alloc.rate:            602.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1708.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 309245.979 ops/s
[info]                  ·gc.alloc.rate:            600.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3430.785 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 310005.468 ops/s
[info]                  ·gc.alloc.rate:            602.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3422.387 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 307124.829 ops/s
[info]                  ·gc.alloc.rate:            596.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3454.676 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   309391.314 ±(99.9%) 5163.443 ops/s [Average]
[info]   (min, avg, max) = (307124.829, 309391.314, 310433.851), stdev = 1340.930
[info]   CI (99.9%): [304227.871, 314554.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   600.825 ±(99.9%) 10.390 MB/sec [Average]
[info]   (min, avg, max) = (596.251, 600.825, 602.832), stdev = 2.698
[info]   CI (99.9%): [590.435, 611.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.779 ±(99.9%) 580.534 MB/sec [Average]
[info]   (min, avg, max) = (337.086, 606.779, 674.305), stdev = 150.763
[info]   CI (99.9%): [26.245, 1187.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3087.479 ±(99.9%) 2968.108 B/op [Average]
[info]   (min, avg, max) = (1708.829, 3087.479, 3454.676), stdev = 770.808
[info]   CI (99.9%): [119.371, 6055.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.96% complete, ETA 00:35:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25549.570 ops/s
[info] # Warmup Iteration   2: 59675.366 ops/s
[info] # Warmup Iteration   3: 60067.331 ops/s
[info] Iteration   1: 61486.748 ops/s
[info]                  ·gc.alloc.rate:                                  2595.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60989.892 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 61151.553 ops/s
[info]                  ·gc.alloc.rate:                                  2581.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70084.507 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 59414.123 ops/s
[info]                  ·gc.alloc.rate:                                  2507.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.417 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63119.606 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 59807.075 ops/s
[info]                  ·gc.alloc.rate:                                  2523.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71660.348 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 59858.666 ops/s
[info]                  ·gc.alloc.rate:                                  2526.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62649.390 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   60343.633 ±(99.9%) 3522.089 ops/s [Average]
[info]   (min, avg, max) = (59414.123, 60343.633, 61486.748), stdev = 914.675
[info]   CI (99.9%): [56821.544, 63865.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2547.105 ±(99.9%) 149.410 MB/sec [Average]
[info]   (min, avg, max) = (2507.891, 2547.105, 2595.717), stdev = 38.801
[info]   CI (99.9%): [2397.694, 2696.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.007, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.009, 0.016), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.235 ±(99.9%) 0.530 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.235, 0.417), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2518.905 ±(99.9%) 717.005 MB/sec [Average]
[info]   (min, avg, max) = (2382.843, 2518.905, 2723.202), stdev = 186.204
[info]   CI (99.9%): [1801.899, 3235.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65700.749 ±(99.9%) 18557.089 B/op [Average]
[info]   (min, avg, max) = (60989.892, 65700.749, 71660.348), stdev = 4819.217
[info]   CI (99.9%): [47143.659, 84257.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.20% complete, ETA 00:35:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134635.138 ops/s
[info] # Warmup Iteration   2: 179627.532 ops/s
[info] # Warmup Iteration   3: 180696.126 ops/s
[info] Iteration   1: 184607.506 ops/s
[info]                  ·gc.alloc.rate:            632.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2873.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 183201.116 ops/s
[info]                  ·gc.alloc.rate:            627.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5791.372 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 184004.514 ops/s
[info]                  ·gc.alloc.rate:            630.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5766.071 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 183981.669 ops/s
[info]                  ·gc.alloc.rate:            630.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5766.761 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 183585.271 ops/s
[info]                  ·gc.alloc.rate:            628.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5779.040 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   183876.015 ±(99.9%) 2021.841 ops/s [Average]
[info]   (min, avg, max) = (183201.116, 183876.015, 184607.506), stdev = 525.066
[info]   CI (99.9%): [181854.175, 185897.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   629.936 ±(99.9%) 6.766 MB/sec [Average]
[info]   (min, avg, max) = (627.808, 629.936, 632.459), stdev = 1.757
[info]   CI (99.9%): [623.170, 636.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.002, 5392.002, 5392.002), stdev = 0.001
[info]   CI (99.9%): [5392.002, 5392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.691 ±(99.9%) 580.394 MB/sec [Average]
[info]   (min, avg, max) = (337.064, 606.691, 674.308), stdev = 150.726
[info]   CI (99.9%): [26.297, 1187.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5195.373 ±(99.9%) 4997.907 B/op [Average]
[info]   (min, avg, max) = (2873.620, 5195.373, 5791.372), stdev = 1297.941
[info]   CI (99.9%): [197.466, 10193.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.45% complete, ETA 00:34:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182990.153 ops/s
[info] # Warmup Iteration   2: 285636.183 ops/s
[info] # Warmup Iteration   3: 287650.737 ops/s
[info] Iteration   1: 287369.209 ops/s
[info]                  ·gc.alloc.rate:            283.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1842.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 278091.783 ops/s
[info]                  ·gc.alloc.rate:      274.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 288385.813 ops/s
[info]                  ·gc.alloc.rate:            284.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1835.882 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 291479.679 ops/s
[info]                  ·gc.alloc.rate:            287.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1816.454 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 289601.436 ops/s
[info]                  ·gc.alloc.rate:            285.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1828.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   286985.584 ±(99.9%) 20031.408 ops/s [Average]
[info]   (min, avg, max) = (278091.783, 286985.584, 291479.679), stdev = 5202.093
[info]   CI (99.9%): [266954.176, 307016.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   283.009 ±(99.9%) 19.897 MB/sec [Average]
[info]   (min, avg, max) = (274.172, 283.009, 287.485), stdev = 5.167
[info]   CI (99.9%): [263.112, 302.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.144 ±(99.9%) 579.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.144, 336.470), stdev = 150.456
[info]   CI (99.9%): [≈ 0, 848.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1464.578 ±(99.9%) 3152.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1464.578, 1842.430), stdev = 818.781
[info]   CI (99.9%): [≈ 0, 4617.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.70% complete, ETA 00:34:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1354035.530 ops/s
[info] # Warmup Iteration   2: 1523557.281 ops/s
[info] # Warmup Iteration   3: 1525091.921 ops/s
[info] Iteration   1: 1512913.565 ops/s
[info]                  ·gc.alloc.rate:                   1122.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1401.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.386 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1521141.913 ops/s
[info]                  ·gc.alloc.rate:                   1128.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1044.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1492918.458 ops/s
[info]                  ·gc.alloc.rate:                                  1108.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1076.526 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1500286.807 ops/s
[info]                  ·gc.alloc.rate:                                  1113.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1428.326 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1510289.528 ops/s
[info]                  ·gc.alloc.rate:            1121.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1064.147 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1507510.054 ±(99.9%) 42524.821 ops/s [Average]
[info]   (min, avg, max) = (1492918.458, 1507510.054, 1521141.913), stdev = 11043.561
[info]   CI (99.9%): [1464985.233, 1550034.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1118.764 ±(99.9%) 30.904 MB/sec [Average]
[info]   (min, avg, max) = (1108.035, 1118.764, 1128.577), stdev = 8.026
[info]   CI (99.9%): [1087.859, 1149.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.142 ±(99.9%) 710.987 MB/sec [Average]
[info]   (min, avg, max) = (1009.597, 1152.142, 1361.809), stdev = 184.641
[info]   CI (99.9%): [441.155, 1863.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1203.011 ±(99.9%) 746.508 B/op [Average]
[info]   (min, avg, max) = (1044.864, 1203.011, 1428.326), stdev = 193.866
[info]   CI (99.9%): [456.504, 1949.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.104 ±(99.9%) 6.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.104, 4.135), stdev = 1.798
[info]   CI (99.9%): [≈ 0, 8.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 59.95% complete, ETA 00:34:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1611210.617 ops/s
[info] # Warmup Iteration   2: 1752729.482 ops/s
[info] # Warmup Iteration   3: 1750979.570 ops/s
[info] Iteration   1: 1752421.421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1748710.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1750176.883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1751692.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1751981.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1750996.461 ±(99.9%) 5896.760 ops/s [Average]
[info]   (min, avg, max) = (1748710.715, 1750996.461, 1752421.421), stdev = 1531.370
[info]   CI (99.9%): [1745099.701, 1756893.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.20% complete, ETA 00:34:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179192.684 ops/s
[info] # Warmup Iteration   2: 309469.250 ops/s
[info] # Warmup Iteration   3: 309512.262 ops/s
[info] Iteration   1: 309118.186 ops/s
[info]                  ·gc.alloc.rate:            840.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5137.170 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 311134.401 ops/s
[info]                  ·gc.alloc.rate:                   846.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3399.927 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 308583.057 ops/s
[info]                  ·gc.alloc.rate:            839.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5147.023 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 308609.935 ops/s
[info]                  ·gc.alloc.rate:                                  839.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3451.588 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.383 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 310209.559 ops/s
[info]                  ·gc.alloc.rate:                                  843.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3454.099 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   309531.028 ±(99.9%) 4283.013 ops/s [Average]
[info]   (min, avg, max) = (308583.057, 309531.028, 311134.401), stdev = 1112.285
[info]   CI (99.9%): [305248.015, 313814.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   841.881 ±(99.9%) 11.940 MB/sec [Average]
[info]   (min, avg, max) = (839.190, 841.881, 846.297), stdev = 3.101
[info]   CI (99.9%): [829.941, 853.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.280), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.704 ±(99.9%) 701.444 MB/sec [Average]
[info]   (min, avg, max) = (672.278, 809.704, 1009.402), stdev = 182.163
[info]   CI (99.9%): [108.259, 1511.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4117.961 ±(99.9%) 3600.966 B/op [Average]
[info]   (min, avg, max) = (3399.927, 4117.961, 5147.023), stdev = 935.159
[info]   CI (99.9%): [516.995, 7718.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.751 ±(99.9%) 34.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.751, 20.383), stdev = 8.860
[info]   CI (99.9%): [≈ 0, 38.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.722
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.45% complete, ETA 00:34:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2829.992 ops/s
[info] # Warmup Iteration   2: 4353.970 ops/s
[info] # Warmup Iteration   3: 4509.632 ops/s
[info] Iteration   1: 4519.581 ops/s
[info]                  ·gc.alloc.rate:                   889.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              309816.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1003.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        349525.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 231.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 4511.966 ops/s
[info]                  ·gc.alloc.rate:            888.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       309816.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1003.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350144.922 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 4471.110 ops/s
[info]                  ·gc.alloc.rate:            880.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       309816.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235413.753 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 4469.097 ops/s
[info]                  ·gc.alloc.rate:                   880.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              309816.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        355075.836 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2110.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 4511.707 ops/s
[info]                  ·gc.alloc.rate:                                  888.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             309816.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.183 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 63.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       356185.909 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4496.692 ±(99.9%) 94.293 ops/s [Average]
[info]   (min, avg, max) = (4469.097, 4496.692, 4519.581), stdev = 24.488
[info]   CI (99.9%): [4402.399, 4590.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   885.236 ±(99.9%) 18.467 MB/sec [Average]
[info]   (min, avg, max) = (880.019, 885.236, 889.737), stdev = 4.796
[info]   CI (99.9%): [866.769, 903.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   309816.092 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (309816.090, 309816.092, 309816.098), stdev = 0.004
[info]   CI (99.9%): [309816.079, 309816.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   12.787 ±(99.9%) 110.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.787, 63.934), stdev = 28.592
[info]   CI (99.9%): [≈ 0, 122.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   941.197 ±(99.9%) 587.227 MB/sec [Average]
[info]   (min, avg, max) = (668.696, 941.197, 1021.243), stdev = 152.501
[info]   CI (99.9%): [353.971, 1528.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   329269.151 ±(99.9%) 202346.148 B/op [Average]
[info]   (min, avg, max) = (235413.753, 329269.151, 356185.909), stdev = 52548.652
[info]   CI (99.9%): [126923.003, 531615.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.996), stdev = 2.623
[info]   CI (99.9%): [≈ 0, 11.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   468.538 ±(99.9%) 3556.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 468.538, 2110.755), stdev = 923.504
[info]   CI (99.9%): [≈ 0, 4024.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 14.000), stdev = 4.393
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.70% complete, ETA 00:33:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2367.647 ops/s
[info] # Warmup Iteration   2: 4421.718 ops/s
[info] # Warmup Iteration   3: 4538.218 ops/s
[info] Iteration   1: 4629.713 ops/s
[info]                  ·gc.alloc.rate:            806.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       273992.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340317.367 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4618.101 ops/s
[info]                  ·gc.alloc.rate:            803.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       273992.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 227467.667 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4577.177 ops/s
[info]                  ·gc.alloc.rate:            796.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       273992.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344182.076 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 4656.629 ops/s
[info]                  ·gc.alloc.rate:                   810.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              273992.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        225563.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2026.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 4706.241 ops/s
[info]                  ·gc.alloc.rate:                                  819.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             273992.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       341282.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                222.769 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4637.572 ±(99.9%) 184.340 ops/s [Average]
[info]   (min, avg, max) = (4577.177, 4637.572, 4706.241), stdev = 47.872
[info]   CI (99.9%): [4453.233, 4821.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   807.369 ±(99.9%) 32.504 MB/sec [Average]
[info]   (min, avg, max) = (796.760, 807.369, 819.516), stdev = 8.441
[info]   CI (99.9%): [774.865, 839.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   273992.091 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (273992.088, 273992.091, 273992.095), stdev = 0.003
[info]   CI (99.9%): [273992.078, 273992.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.102 ±(99.9%) 18.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.102, 10.510), stdev = 4.700
[info]   CI (99.9%): [≈ 0, 20.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   871.510 ±(99.9%) 718.235 MB/sec [Average]
[info]   (min, avg, max) = (667.370, 871.510, 1020.784), stdev = 186.523
[info]   CI (99.9%): [153.275, 1589.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   295762.624 ±(99.9%) 243489.129 B/op [Average]
[info]   (min, avg, max) = (225563.150, 295762.624, 344182.076), stdev = 63233.354
[info]   CI (99.9%): [52273.496, 539251.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.994), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   449.757 ±(99.9%) 3413.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 449.757, 2026.016), stdev = 886.420
[info]   CI (99.9%): [≈ 0, 3863.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 16.000), stdev = 5.320
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.95% complete, ETA 00:33:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19527.533 ops/s
[info] # Warmup Iteration   2: 29058.848 ops/s
[info] # Warmup Iteration   3: 29247.307 ops/s
[info] Iteration   1: 29466.810 ops/s
[info]                  ·gc.alloc.rate:                   483.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             669.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35756.612 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 29663.421 ops/s
[info]                  ·gc.alloc.rate:                   486.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17742.522 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 29473.015 ops/s
[info]                  ·gc.alloc.rate:            483.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35784.906 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 29435.218 ops/s
[info]                  ·gc.alloc.rate:            482.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17915.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29089.320 ops/s
[info]                  ·gc.alloc.rate:                   476.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             669.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36221.176 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   29425.557 ±(99.9%) 802.381 ops/s [Average]
[info]   (min, avg, max) = (29089.320, 29425.557, 29663.421), stdev = 208.376
[info]   CI (99.9%): [28623.175, 30227.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   482.351 ±(99.9%) 13.200 MB/sec [Average]
[info]   (min, avg, max) = (476.806, 482.351, 486.245), stdev = 3.428
[info]   CI (99.9%): [469.151, 495.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25800.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (25800.014, 25800.015, 25800.017), stdev = 0.002
[info]   CI (99.9%): [25800.009, 25800.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   535.680 ±(99.9%) 706.336 MB/sec [Average]
[info]   (min, avg, max) = (334.388, 535.680, 670.085), stdev = 183.433
[info]   CI (99.9%): [≈ 0, 1242.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28684.153 ±(99.9%) 38164.584 B/op [Average]
[info]   (min, avg, max) = (17742.522, 28684.153, 36221.176), stdev = 9911.221
[info]   CI (99.9%): [≈ 0, 66848.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.393 ±(99.9%) 75.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.393, 36.041), stdev = 19.530
[info]   CI (99.9%): [≈ 0, 96.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.19% complete, ETA 00:33:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1695.749 ops/s
[info] # Warmup Iteration   2: 3787.331 ops/s
[info] # Warmup Iteration   3: 3841.831 ops/s
[info] Iteration   1: 3900.872 ops/s
[info]                  ·gc.alloc.rate:            993.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       401008.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 403897.931 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 3918.181 ops/s
[info]                  ·gc.alloc.rate:            998.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       401008.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 402145.886 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 3920.411 ops/s
[info]                  ·gc.alloc.rate:                   998.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              401008.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        404511.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.659 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2673.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 3934.300 ops/s
[info]                  ·gc.alloc.rate:                                  1002.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             401008.112 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       408504.958 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 3961.944 ops/s
[info]                  ·gc.alloc.rate:            1009.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       401008.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 405618.725 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3927.142 ±(99.9%) 87.769 ops/s [Average]
[info]   (min, avg, max) = (3900.872, 3927.142, 3961.944), stdev = 22.793
[info]   CI (99.9%): [3839.373, 4014.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1000.613 ±(99.9%) 22.951 MB/sec [Average]
[info]   (min, avg, max) = (993.782, 1000.613, 1009.736), stdev = 5.960
[info]   CI (99.9%): [977.663, 1023.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401008.109 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (401008.103, 401008.109, 401008.113), stdev = 0.005
[info]   CI (99.9%): [401008.090, 401008.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.344 ±(99.9%) 28.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.344, 16.720), stdev = 7.477
[info]   CI (99.9%): [≈ 0, 32.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1010.428 ±(99.9%) 39.507 MB/sec [Average]
[info]   (min, avg, max) = (1000.943, 1010.428, 1021.346), stdev = 10.260
[info]   CI (99.9%): [970.921, 1049.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   404935.871 ±(99.9%) 9080.867 B/op [Average]
[info]   (min, avg, max) = (402145.886, 404935.871, 408504.958), stdev = 2358.272
[info]   CI (99.9%): [395855.004, 414016.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.659), stdev = 2.978
[info]   CI (99.9%): [≈ 0, 12.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   534.715 ±(99.9%) 4604.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 534.715, 2673.575), stdev = 1195.659
[info]   CI (99.9%): [≈ 0, 5138.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 16.000), stdev = 6.760
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.44% complete, ETA 00:33:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10356.614 ops/s
[info] # Warmup Iteration   2: 14113.787 ops/s
[info] # Warmup Iteration   3: 14205.344 ops/s
[info] Iteration   1: 13905.715 ops/s
[info]                  ·gc.alloc.rate:            773.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       87584.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75689.863 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14031.434 ops/s
[info]                  ·gc.alloc.rate:            780.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       87607.695 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1003.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112523.547 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 14074.526 ops/s
[info]                  ·gc.alloc.rate:            783.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74781.241 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 13830.429 ops/s
[info]                  ·gc.alloc.rate:            770.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76105.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 14096.924 ops/s
[info]                  ·gc.alloc.rate:                                  785.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87648.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.676 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113261.081 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                669.304 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13987.806 ±(99.9%) 442.560 ops/s [Average]
[info]   (min, avg, max) = (13830.429, 13987.806, 14096.924), stdev = 114.931
[info]   CI (99.9%): [13545.246, 14430.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   778.812 ±(99.9%) 25.112 MB/sec [Average]
[info]   (min, avg, max) = (770.125, 778.812, 785.352), stdev = 6.522
[info]   CI (99.9%): [753.700, 803.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87627.164 ±(99.9%) 114.650 B/op [Average]
[info]   (min, avg, max) = (87584.029, 87627.164, 87648.036), stdev = 29.774
[info]   CI (99.9%): [87512.514, 87741.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.535 ±(99.9%) 30.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.535, 17.676), stdev = 7.905
[info]   CI (99.9%): [≈ 0, 33.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   804.820 ±(99.9%) 717.743 MB/sec [Average]
[info]   (min, avg, max) = (668.635, 804.820, 1014.852), stdev = 186.396
[info]   CI (99.9%): [87.077, 1522.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90472.289 ±(99.9%) 78837.520 B/op [Average]
[info]   (min, avg, max) = (74781.241, 90472.289, 113261.081), stdev = 20473.854
[info]   CI (99.9%): [11634.769, 169309.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 10.327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.997), stdev = 2.682
[info]   CI (99.9%): [≈ 0, 11.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   133.861 ±(99.9%) 1152.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.861, 669.304), stdev = 299.322
[info]   CI (99.9%): [≈ 0, 1286.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 13.000), stdev = 2.074
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.69% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9161.954 ops/s
[info] # Warmup Iteration   2: 15737.115 ops/s
[info] # Warmup Iteration   3: 15759.178 ops/s
[info] Iteration   1: 15879.679 ops/s
[info]                  ·gc.alloc.rate:            822.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       81535.923 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66146.635 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 15802.212 ops/s
[info]                  ·gc.alloc.rate:                   818.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99715.895 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.345 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 16275.133 ops/s
[info]                  ·gc.alloc.rate:            843.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64606.040 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 16289.055 ops/s
[info]                  ·gc.alloc.rate:                   843.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97308.471 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 643.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 16520.232 ops/s
[info]                  ·gc.alloc.rate:                                  856.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64857.754 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16153.262 ±(99.9%) 1164.848 ops/s [Average]
[info]   (min, avg, max) = (15802.212, 16153.262, 16520.232), stdev = 302.507
[info]   CI (99.9%): [14988.414, 17318.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   836.860 ±(99.9%) 60.574 MB/sec [Average]
[info]   (min, avg, max) = (818.607, 836.860, 856.134), stdev = 15.731
[info]   CI (99.9%): [776.286, 897.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.028 ±(99.9%) 0.291 B/op [Average]
[info]   (min, avg, max) = (81535.923, 81536.028, 81536.135), stdev = 0.076
[info]   CI (99.9%): [81535.737, 81536.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.638 ±(99.9%) 14.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.638, 8.192), stdev = 3.664
[info]   CI (99.9%): [≈ 0, 15.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   804.919 ±(99.9%) 700.427 MB/sec [Average]
[info]   (min, avg, max) = (667.459, 804.919, 1007.025), stdev = 181.899
[info]   CI (99.9%): [104.492, 1505.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   78526.959 ±(99.9%) 70363.282 B/op [Average]
[info]   (min, avg, max) = (64606.040, 78526.959, 99715.895), stdev = 18273.121
[info]   CI (99.9%): [8163.678, 148890.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 11.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 6.660), stdev = 2.918
[info]   CI (99.9%): [≈ 0, 12.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   141.984 ±(99.9%) 1085.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.984, 643.575), stdev = 281.866
[info]   CI (99.9%): [≈ 0, 1227.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 15.000), stdev = 4.827
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.94% complete, ETA 00:32:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248937.210 ops/s
[info] # Warmup Iteration   2: 273255.997 ops/s
[info] # Warmup Iteration   3: 279247.357 ops/s
[info] Iteration   1: 276342.533 ops/s
[info]                  ·gc.alloc.rate:                   974.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5721.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 273530.741 ops/s
[info]                  ·gc.alloc.rate:                   965.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5776.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.833 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 275203.076 ops/s
[info]                  ·gc.alloc.rate:                   970.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5775.578 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 273603.885 ops/s
[info]                  ·gc.alloc.rate:                                  965.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.520 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5874.429 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 271514.905 ops/s
[info]                  ·gc.alloc.rate:            957.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3946.108 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   274039.028 ±(99.9%) 7068.854 ops/s [Average]
[info]   (min, avg, max) = (271514.905, 274039.028, 276342.533), stdev = 1835.759
[info]   CI (99.9%): [266970.173, 281107.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   966.694 ±(99.9%) 24.882 MB/sec [Average]
[info]   (min, avg, max) = (957.755, 966.694, 974.697), stdev = 6.462
[info]   CI (99.9%): [941.812, 991.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.104 ±(99.9%) 0.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.520), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 0.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   944.052 ±(99.9%) 567.442 MB/sec [Average]
[info]   (min, avg, max) = (680.728, 944.052, 1021.080), stdev = 147.363
[info]   CI (99.9%): [376.609, 1511.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5418.701 ±(99.9%) 3177.009 B/op [Average]
[info]   (min, avg, max) = (3946.108, 5418.701, 5874.429), stdev = 825.059
[info]   CI (99.9%): [2241.692, 8595.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.330), stdev = 2.259
[info]   CI (99.9%): [≈ 0, 10.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.621 ±(99.9%) 49.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.621, 30.478), stdev = 12.919
[info]   CI (99.9%): [≈ 0, 57.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 5.177
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.19% complete, ETA 00:32:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291229.323 ops/s
[info] # Warmup Iteration   2: 318519.757 ops/s
[info] # Warmup Iteration   3: 305748.149 ops/s
[info] Iteration   1: 314849.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 315668.345 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 310318.007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 309584.637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 309518.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   311987.698 ±(99.9%) 11614.982 ops/s [Average]
[info]   (min, avg, max) = (309518.470, 311987.698, 315668.345), stdev = 3016.374
[info]   CI (99.9%): [300372.716, 323602.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.44% complete, ETA 00:32:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10304.961 ops/s
[info] # Warmup Iteration   2: 14737.835 ops/s
[info] # Warmup Iteration   3: 14967.537 ops/s
[info] Iteration   1: 14537.580 ops/s
[info]                  ·gc.alloc.rate:                   826.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108463.432 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 14751.116 ops/s
[info]                  ·gc.alloc.rate:                   838.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              89451.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:             668.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71283.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 71.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 14988.030 ops/s
[info]                  ·gc.alloc.rate:            851.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       89440.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1002.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105200.340 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 14974.263 ops/s
[info]                  ·gc.alloc.rate:                   851.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              89440.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105759.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.657 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 699.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 15102.344 ops/s
[info]                  ·gc.alloc.rate:                                  858.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89437.643 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.230 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70941.657 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14870.667 ±(99.9%) 868.361 ops/s [Average]
[info]   (min, avg, max) = (14537.580, 14870.667, 15102.344), stdev = 225.510
[info]   CI (99.9%): [14002.306, 15739.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   845.243 ±(99.9%) 49.157 MB/sec [Average]
[info]   (min, avg, max) = (826.269, 845.243, 858.164), stdev = 12.766
[info]   CI (99.9%): [796.085, 894.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89446.587 ±(99.9%) 42.669 B/op [Average]
[info]   (min, avg, max) = (89437.643, 89446.587, 89464.010), stdev = 11.081
[info]   CI (99.9%): [89403.918, 89489.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.230), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.801 ±(99.9%) 41.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.801, 24.005), stdev = 10.735
[info]   CI (99.9%): [≈ 0, 46.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   871.869 ±(99.9%) 694.064 MB/sec [Average]
[info]   (min, avg, max) = (668.283, 871.869, 1006.553), stdev = 180.246
[info]   CI (99.9%): [177.805, 1565.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   92329.837 ±(99.9%) 74733.702 B/op [Average]
[info]   (min, avg, max) = (70941.657, 92329.837, 108463.432), stdev = 19408.105
[info]   CI (99.9%): [17596.135, 167063.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.598 ±(99.9%) 10.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.598, 6.657), stdev = 2.848
[info]   CI (99.9%): [≈ 0, 12.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   168.532 ±(99.9%) 1151.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 168.532, 699.470), stdev = 298.955
[info]   CI (99.9%): [≈ 0, 1319.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.800, 15.000), stdev = 5.357
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Run progress: 62.69% complete, ETA 00:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531733.887 ops/s
[info] # Warmup Iteration   2: 593191.881 ops/s
[info] # Warmup Iteration   3: 586670.673 ops/s
[info] Iteration   1: 586887.300 ops/s
[info]                  ·gc.alloc.rate:      38.773 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 587141.705 ops/s
[info]                  ·gc.alloc.rate:      38.790 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 585678.473 ops/s
[info]                  ·gc.alloc.rate:      38.702 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 586946.824 ops/s
[info]                  ·gc.alloc.rate:      38.777 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 588740.936 ops/s
[info]                  ·gc.alloc.rate:      38.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   587079.048 ±(99.9%) 4210.102 ops/s [Average]
[info]   (min, avg, max) = (585678.473, 587079.048, 588740.936), stdev = 1093.350
[info]   CI (99.9%): [582868.946, 591289.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   38.789 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (38.702, 38.789, 38.903), stdev = 0.072
[info]   CI (99.9%): [38.511, 39.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.001, 104.001, 104.001), stdev = 0.001
[info]   CI (99.9%): [104.001, 104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Run progress: 62.94% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28702.479 ops/s
[info] # Warmup Iteration   2: 63510.777 ops/s
[info] # Warmup Iteration   3: 64251.130 ops/s
[info] Iteration   1: 65914.884 ops/s
[info]                  ·gc.alloc.rate:                                  2973.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65021.064 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 66362.982 ops/s
[info]                  ·gc.alloc.rate:                                  2994.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72654.971 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 65707.996 ops/s
[info]                  ·gc.alloc.rate:                                  2965.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73373.517 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 65569.531 ops/s
[info]                  ·gc.alloc.rate:                                  2957.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73534.630 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 66087.414 ops/s
[info]                  ·gc.alloc.rate:                                  2981.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64850.886 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   65928.561 ±(99.9%) 1204.972 ops/s [Average]
[info]   (min, avg, max) = (65569.531, 65928.561, 66362.982), stdev = 312.927
[info]   CI (99.9%): [64723.589, 67133.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2974.732 ±(99.9%) 55.022 MB/sec [Average]
[info]   (min, avg, max) = (2957.725, 2974.732, 2994.661), stdev = 14.289
[info]   CI (99.9%): [2919.710, 3029.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71008.006, 71008.006, 71008.007), stdev = 0.001
[info]   CI (99.9%): [71008.005, 71008.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.015), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.164 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (0.086, 0.164, 0.370), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2927.574 ±(99.9%) 718.548 MB/sec [Average]
[info]   (min, avg, max) = (2723.093, 2927.574, 3064.465), stdev = 186.605
[info]   CI (99.9%): [2209.027, 3646.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69887.013 ±(99.9%) 17451.792 B/op [Average]
[info]   (min, avg, max) = (64850.886, 69887.013, 73534.630), stdev = 4532.175
[info]   CI (99.9%): [52435.221, 87338.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Run progress: 63.18% complete, ETA 00:31:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 629413.517 ops/s
[info] # Warmup Iteration   2: 967086.266 ops/s
[info] # Warmup Iteration   3: 993694.145 ops/s
[info] Iteration   1: 998619.225 ops/s
[info]                  ·gc.alloc.rate:                   573.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1059.280 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 970228.672 ops/s
[info]                  ·gc.alloc.rate:            557.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 545.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 997955.526 ops/s
[info]                  ·gc.alloc.rate:            573.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1061.057 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1001816.876 ops/s
[info]                  ·gc.alloc.rate:                   575.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1054.877 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1001636.720 ops/s
[info]                  ·gc.alloc.rate:            575.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 528.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   994051.404 ±(99.9%) 51714.495 ops/s [Average]
[info]   (min, avg, max) = (970228.672, 994051.404, 1001816.876), stdev = 13430.090
[info]   CI (99.9%): [942336.909, 1045765.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   570.919 ±(99.9%) 29.523 MB/sec [Average]
[info]   (min, avg, max) = (557.318, 570.919, 575.348), stdev = 7.667
[info]   CI (99.9%): [541.395, 600.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.779 ±(99.9%) 707.950 MB/sec [Average]
[info]   (min, avg, max) = (336.350, 537.779, 672.754), stdev = 183.852
[info]   CI (99.9%): [≈ 0, 1245.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   849.891 ±(99.9%) 1099.714 B/op [Average]
[info]   (min, avg, max) = (528.568, 849.891, 1061.057), stdev = 285.592
[info]   CI (99.9%): [≈ 0, 1949.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.419 ±(99.9%) 2.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 1.050), stdev = 0.574
[info]   CI (99.9%): [≈ 0, 2.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Run progress: 63.43% complete, ETA 00:31:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656793.916 ops/s
[info] # Warmup Iteration   2: 675453.452 ops/s
[info] # Warmup Iteration   3: 688579.043 ops/s
[info] Iteration   1: 690228.384 ops/s
[info]                  ·gc.alloc.rate:            185.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 768.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 692138.525 ops/s
[info]                  ·gc.alloc.rate:      186.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 690376.875 ops/s
[info]                  ·gc.alloc.rate:            185.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 766.915 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 692544.730 ops/s
[info]                  ·gc.alloc.rate:      186.558 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 690389.500 ops/s
[info]                  ·gc.alloc.rate:            185.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 766.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   691135.603 ±(99.9%) 4282.220 ops/s [Average]
[info]   (min, avg, max) = (690228.384, 691135.603, 692544.730), stdev = 1112.079
[info]   CI (99.9%): [686853.383, 695417.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   186.175 ±(99.9%) 1.168 MB/sec [Average]
[info]   (min, avg, max) = (185.946, 186.175, 186.558), stdev = 0.303
[info]   CI (99.9%): [185.007, 187.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.001, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.949 ±(99.9%) 709.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.949, 337.055), stdev = 184.354
[info]   CI (99.9%): [≈ 0, 911.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   460.468 ±(99.9%) 1618.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 460.468, 768.565), stdev = 420.348
[info]   CI (99.9%): [≈ 0, 2079.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.68% complete, ETA 00:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 807791.449 ops/s
[info] # Warmup Iteration   2: 869673.409 ops/s
[info] # Warmup Iteration   3: 867808.475 ops/s
[info] Iteration   1: 871291.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 872267.307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 826086.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 856103.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 872084.265 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   859566.530 ±(99.9%) 76733.242 ops/s [Average]
[info]   (min, avg, max) = (826086.257, 859566.530, 872267.307), stdev = 19927.379
[info]   CI (99.9%): [782833.287, 936299.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Run progress: 63.93% complete, ETA 00:31:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17152.312 ops/s
[info] # Warmup Iteration   2: 33399.203 ops/s
[info] # Warmup Iteration   3: 33212.808 ops/s
[info] Iteration   1: 33205.049 ops/s
[info]                  ·gc.alloc.rate:                                  1714.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81267.591 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80103.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                189.445 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 33765.929 ops/s
[info]                  ·gc.alloc.rate:                                  1743.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81280.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95198.070 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 33180.901 ops/s
[info]                  ·gc.alloc.rate:                                  1713.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81280.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80727.745 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 33209.149 ops/s
[info]                  ·gc.alloc.rate:                                  1714.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81280.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80659.692 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 33873.713 ops/s
[info]                  ·gc.alloc.rate:            1749.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       81280.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79076.496 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   33446.948 ±(99.9%) 1319.542 ops/s [Average]
[info]   (min, avg, max) = (33180.901, 33446.948, 33873.713), stdev = 342.681
[info]   CI (99.9%): [32127.406, 34766.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1727.225 ±(99.9%) 68.595 MB/sec [Average]
[info]   (min, avg, max) = (1713.902, 1727.225, 1749.315), stdev = 17.814
[info]   CI (99.9%): [1658.630, 1795.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81277.528 ±(99.9%) 21.391 B/op [Average]
[info]   (min, avg, max) = (81267.591, 81277.528, 81280.013), stdev = 5.555
[info]   CI (99.9%): [81256.137, 81298.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.031), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.373 ±(99.9%) 2.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.478), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.607 ±(99.9%) 592.204 MB/sec [Average]
[info]   (min, avg, max) = (1689.710, 1767.607, 2042.559), stdev = 153.793
[info]   CI (99.9%): [1175.404, 2359.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83153.101 ±(99.9%) 26052.351 B/op [Average]
[info]   (min, avg, max) = (79076.496, 83153.101, 95198.070), stdev = 6765.713
[info]   CI (99.9%): [57100.751, 109205.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.889 ±(99.9%) 326.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.889, 189.445), stdev = 84.722
[info]   CI (99.9%): [≈ 0, 364.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.18% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362675.758 ops/s
[info] # Warmup Iteration   2: 662605.994 ops/s
[info] # Warmup Iteration   3: 653204.668 ops/s
[info] Iteration   1: 675585.299 ops/s
[info]                  ·gc.alloc.rate:                                  2197.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.274 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4757.741 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 676302.729 ops/s
[info]                  ·gc.alloc.rate:            2199.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5545.085 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 677186.101 ops/s
[info]                  ·gc.alloc.rate:                                  2202.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4746.726 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 672324.194 ops/s
[info]                  ·gc.alloc.rate:                                  2187.283 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5577.922 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 675971.806 ops/s
[info]                  ·gc.alloc.rate:            2198.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4755.208 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   675474.026 ±(99.9%) 7152.139 ops/s [Average]
[info]   (min, avg, max) = (672324.194, 675474.026, 677186.101), stdev = 1857.388
[info]   CI (99.9%): [668321.887, 682626.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2197.216 ±(99.9%) 22.510 MB/sec [Average]
[info]   (min, avg, max) = (2187.283, 2197.216, 2202.553), stdev = 5.846
[info]   CI (99.9%): [2174.706, 2219.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.274), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.323 ±(99.9%) 718.337 MB/sec [Average]
[info]   (min, avg, max) = (2041.975, 2178.323, 2382.909), stdev = 186.550
[info]   CI (99.9%): [1459.985, 2896.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5076.536 ±(99.9%) 1705.386 B/op [Average]
[info]   (min, avg, max) = (4746.726, 5076.536, 5577.922), stdev = 442.883
[info]   CI (99.9%): [3371.151, 6781.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.43% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.922 ops/s
[info] # Warmup Iteration   2: 4853596.169 ops/s
[info] # Warmup Iteration   3: 4955341.598 ops/s
[info] Iteration   1: 5048791.814 ops/s
[info]                  ·gc.alloc.rate:            307.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5082819.191 ops/s
[info]                  ·gc.alloc.rate:            309.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 5079597.063 ops/s
[info]                  ·gc.alloc.rate:            309.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 5090887.335 ops/s
[info]                  ·gc.alloc.rate:            310.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103.173 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 5088745.798 ops/s
[info]                  ·gc.alloc.rate:            310.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5078168.240 ±(99.9%) 65582.792 ops/s [Average]
[info]   (min, avg, max) = (5048791.814, 5078168.240, 5090887.335), stdev = 17031.643
[info]   CI (99.9%): [5012585.449, 5143751.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   309.734 ±(99.9%) 4.051 MB/sec [Average]
[info]   (min, avg, max) = (307.921, 309.734, 310.507), stdev = 1.052
[info]   CI (99.9%): [305.683, 313.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.714 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (333.681, 333.714, 333.760), stdev = 0.031
[info]   CI (99.9%): [333.596, 333.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   103.434 ±(99.9%) 1.335 B/op [Average]
[info]   (min, avg, max) = (103.173, 103.434, 104.031), stdev = 0.347
[info]   CI (99.9%): [102.099, 104.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.68% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146960.243 ops/s
[info] # Warmup Iteration   2: 735828.430 ops/s
[info] # Warmup Iteration   3: 772630.056 ops/s
[info] Iteration   1: 773267.183 ops/s
[info]                  ·gc.alloc.rate:                   959.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2051.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.355 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 766052.557 ops/s
[info]                  ·gc.alloc.rate:                   950.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1380.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 763819.068 ops/s
[info]                  ·gc.alloc.rate:            947.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2079.484 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 776540.395 ops/s
[info]                  ·gc.alloc.rate:                                  963.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2061.657 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.101 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 781592.426 ops/s
[info]                  ·gc.alloc.rate:                                  969.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2056.339 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   772254.326 ±(99.9%) 28310.214 ops/s [Average]
[info]   (min, avg, max) = (763819.068, 772254.326, 781592.426), stdev = 7352.073
[info]   CI (99.9%): [743944.112, 800564.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   957.764 ±(99.9%) 35.088 MB/sec [Average]
[info]   (min, avg, max) = (947.146, 957.764, 969.299), stdev = 9.112
[info]   CI (99.9%): [922.676, 992.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.197), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.400), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.484 ±(99.9%) 588.629 MB/sec [Average]
[info]   (min, avg, max) = (672.208, 945.484, 1021.110), stdev = 152.865
[info]   CI (99.9%): [356.855, 1534.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1925.956 ±(99.9%) 1173.991 B/op [Average]
[info]   (min, avg, max) = (1380.897, 1925.956, 2079.484), stdev = 304.882
[info]   CI (99.9%): [751.965, 3099.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.165 ±(99.9%) 13.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.165, 8.101), stdev = 3.387
[info]   CI (99.9%): [≈ 0, 15.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 64.93% complete, ETA 00:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6932473.246 ops/s
[info] # Warmup Iteration   2: 7429195.425 ops/s
[info] # Warmup Iteration   3: 7538576.691 ops/s
[info] Iteration   1: 7606401.775 ops/s
[info]                  ·gc.alloc.rate:                   347.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        69.739 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7578577.797 ops/s
[info]                  ·gc.alloc.rate:            346.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.139 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7460253.836 ops/s
[info]                  ·gc.alloc.rate:            341.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 7408153.168 ops/s
[info]                  ·gc.alloc.rate:            338.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.614 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7476151.146 ops/s
[info]                  ·gc.alloc.rate:            341.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7505907.544 ±(99.9%) 321624.895 ops/s [Average]
[info]   (min, avg, max) = (7408153.168, 7505907.544, 7606401.775), stdev = 83524.964
[info]   CI (99.9%): [7184282.649, 7827532.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   343.361 ±(99.9%) 14.811 MB/sec [Average]
[info]   (min, avg, max) = (338.869, 343.361, 347.997), stdev = 3.846
[info]   CI (99.9%): [328.549, 358.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.192 ±(99.9%) 1.184 MB/sec [Average]
[info]   (min, avg, max) = (337.048, 337.192, 337.741), stdev = 0.307
[info]   CI (99.9%): [336.008, 338.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   70.713 ±(99.9%) 2.927 B/op [Average]
[info]   (min, avg, max) = (69.739, 70.713, 71.614), stdev = 0.760
[info]   CI (99.9%): [67.786, 73.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.17% complete, ETA 00:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27431.128 ops/s
[info] # Warmup Iteration   2: 242639.149 ops/s
[info] # Warmup Iteration   3: 256843.648 ops/s
[info] Iteration   1: 253256.427 ops/s
[info]                  ·gc.alloc.rate:            1398.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8345.588 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 254672.863 ops/s
[info]                  ·gc.alloc.rate:                                  1407.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10436.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                28.817 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 261571.520 ops/s
[info]                  ·gc.alloc.rate:                                  1445.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8192.313 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 261320.768 ops/s
[info]                  ·gc.alloc.rate:            1444.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8200.431 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 261630.795 ops/s
[info]                  ·gc.alloc.rate:            1445.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8190.372 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   258490.475 ±(99.9%) 16031.636 ops/s [Average]
[info]   (min, avg, max) = (253256.427, 258490.475, 261630.795), stdev = 4163.365
[info]   CI (99.9%): [242458.838, 274522.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1428.304 ±(99.9%) 89.255 MB/sec [Average]
[info]   (min, avg, max) = (1398.892, 1428.304, 1445.767), stdev = 23.179
[info]   CI (99.9%): [1339.048, 1517.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8696.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8696.002, 8696.002, 8696.002), stdev = 0.001
[info]   CI (99.9%): [8696.001, 8696.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.126), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.197 ±(99.9%) 1.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.780), stdev = 0.338
[info]   CI (99.9%): [≈ 0, 1.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.335 ±(99.9%) 572.716 MB/sec [Average]
[info]   (min, avg, max) = (1342.523, 1423.335, 1688.980), stdev = 148.732
[info]   CI (99.9%): [850.620, 1996.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8672.947 ±(99.9%) 3803.562 B/op [Average]
[info]   (min, avg, max) = (8190.372, 8672.947, 10436.029), stdev = 987.773
[info]   CI (99.9%): [4869.385, 12476.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.763 ±(99.9%) 49.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.763, 28.817), stdev = 12.888
[info]   CI (99.9%): [≈ 0, 55.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 7.950
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 65.42% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4981.297 ops/s
[info] # Warmup Iteration   2: 6988.425 ops/s
[info] # Warmup Iteration   3: 7199.680 ops/s
[info] Iteration   1: 7201.126 ops/s
[info]                  ·gc.alloc.rate:                                  1733.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378960.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 39.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       369760.244 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                727.874 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 7245.135 ops/s
[info]                  ·gc.alloc.rate:                                  1744.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378960.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       443622.743 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 7288.190 ops/s
[info]                  ·gc.alloc.rate:                                  1754.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378960.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.851 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       367505.032 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7277.105 ops/s
[info]                  ·gc.alloc.rate:                                  1752.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378960.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       368060.404 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7246.881 ops/s
[info]                  ·gc.alloc.rate:                                  1745.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378960.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       369583.623 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7251.687 ±(99.9%) 130.596 ops/s [Average]
[info]   (min, avg, max) = (7201.126, 7251.687, 7288.190), stdev = 33.915
[info]   CI (99.9%): [7121.092, 7382.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1746.047 ±(99.9%) 31.370 MB/sec [Average]
[info]   (min, avg, max) = (1733.640, 1746.047, 1754.498), stdev = 8.147
[info]   CI (99.9%): [1714.677, 1777.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378960.057 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (378960.056, 378960.057, 378960.061), stdev = 0.002
[info]   CI (99.9%): [378960.049, 378960.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.109 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (0.087, 0.109, 0.182), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   23.676 ±(99.9%) 34.749 B/op [Average]
[info]   (min, avg, max) = (18.851, 23.676, 39.777), stdev = 9.024
[info]   CI (99.9%): [≈ 0, 58.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1767.839 ±(99.9%) 590.744 MB/sec [Average]
[info]   (min, avg, max) = (1691.554, 1767.839, 2042.159), stdev = 153.414
[info]   CI (99.9%): [1177.095, 2358.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   383706.409 ±(99.9%) 129028.145 B/op [Average]
[info]   (min, avg, max) = (367505.032, 383706.409, 443622.743), stdev = 33508.200
[info]   CI (99.9%): [254678.264, 512734.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   145.575 ±(99.9%) 1253.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.575, 727.874), stdev = 325.515
[info]   CI (99.9%): [≈ 0, 1399.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 65.67% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260.839 ops/s
[info] # Warmup Iteration   2: 11191.401 ops/s
[info] # Warmup Iteration   3: 10831.706 ops/s
[info] Iteration   1: 11030.496 ops/s
[info]                  ·gc.alloc.rate:            254.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47619.342 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 11297.137 ops/s
[info]                  ·gc.alloc.rate:            260.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46489.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11373.368 ops/s
[info]                  ·gc.alloc.rate:      262.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11328.990 ops/s
[info]                  ·gc.alloc.rate:                   261.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46270.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11311.818 ops/s
[info]                  ·gc.alloc.rate:            260.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46432.436 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11268.362 ±(99.9%) 523.739 ops/s [Average]
[info]   (min, avg, max) = (11030.496, 11268.362, 11373.368), stdev = 136.013
[info]   CI (99.9%): [10744.622, 11792.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   259.788 ±(99.9%) 12.010 MB/sec [Average]
[info]   (min, avg, max) = (254.333, 259.788, 262.196), stdev = 3.119
[info]   CI (99.9%): [247.778, 271.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.037 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.037, 36280.040), stdev = 0.002
[info]   CI (99.9%): [36280.030, 36280.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.886 ±(99.9%) 574.493 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.886, 333.825), stdev = 149.194
[info]   CI (99.9%): [≈ 0, 841.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   37362.394 ±(99.9%) 80451.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37362.394, 47619.342), stdev = 20893.068
[info]   CI (99.9%): [≈ 0, 117814.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   18.508 ±(99.9%) 159.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.508, 92.540), stdev = 41.385
[info]   CI (99.9%): [≈ 0, 177.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 65.92% complete, ETA 00:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5888.701 ops/s
[info] # Warmup Iteration   2: 12360.381 ops/s
[info] # Warmup Iteration   3: 12318.790 ops/s
[info] Iteration   1: 12882.957 ops/s
[info]                  ·gc.alloc.rate:            449.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41012.130 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 12905.174 ops/s
[info]                  ·gc.alloc.rate:            450.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40945.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 12821.189 ops/s
[info]                  ·gc.alloc.rate:            447.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82427.249 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 12881.473 ops/s
[info]                  ·gc.alloc.rate:            449.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41018.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 12618.800 ops/s
[info]                  ·gc.alloc.rate:            440.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41873.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12821.918 ±(99.9%) 453.419 ops/s [Average]
[info]   (min, avg, max) = (12618.800, 12821.918, 12905.174), stdev = 117.751
[info]   CI (99.9%): [12368.499, 13275.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   447.372 ±(99.9%) 15.754 MB/sec [Average]
[info]   (min, avg, max) = (440.332, 447.372, 450.335), stdev = 4.091
[info]   CI (99.9%): [431.618, 463.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54920.033 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (54920.032, 54920.033, 54920.037), stdev = 0.002
[info]   CI (99.9%): [54920.025, 54920.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   402.823 ±(99.9%) 577.984 MB/sec [Average]
[info]   (min, avg, max) = (335.646, 402.823, 671.331), stdev = 150.101
[info]   CI (99.9%): [≈ 0, 980.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   49455.306 ±(99.9%) 70989.887 B/op [Average]
[info]   (min, avg, max) = (40945.402, 49455.306, 82427.249), stdev = 18435.848
[info]   CI (99.9%): [≈ 0, 120445.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 66.17% complete, ETA 00:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19288.593 ops/s
[info] # Warmup Iteration   2: 23060.587 ops/s
[info] # Warmup Iteration   3: 23586.979 ops/s
[info] Iteration   1: 23459.727 ops/s
[info]                  ·gc.alloc.rate:            439.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45223.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 23396.146 ops/s
[info]                  ·gc.alloc.rate:            438.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22673.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 24260.651 ops/s
[info]                  ·gc.alloc.rate:            454.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21865.139 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 23219.300 ops/s
[info]                  ·gc.alloc.rate:            435.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22846.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 24101.966 ops/s
[info]                  ·gc.alloc.rate:            451.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44020.531 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23687.558 ±(99.9%) 1781.588 ops/s [Average]
[info]   (min, avg, max) = (23219.300, 23687.558, 24260.651), stdev = 462.673
[info]   CI (99.9%): [21905.970, 25469.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   443.918 ±(99.9%) 33.217 MB/sec [Average]
[info]   (min, avg, max) = (435.297, 443.918, 454.627), stdev = 8.626
[info]   CI (99.9%): [410.702, 477.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.019 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (29496.017, 29496.019, 29496.023), stdev = 0.003
[info]   CI (99.9%): [29496.009, 29496.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.847 ±(99.9%) 710.715 MB/sec [Average]
[info]   (min, avg, max) = (336.996, 471.847, 674.048), stdev = 184.570
[info]   CI (99.9%): [≈ 0, 1182.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   31325.652 ±(99.9%) 46788.201 B/op [Average]
[info]   (min, avg, max) = (21865.139, 31325.652, 45223.052), stdev = 12150.747
[info]   CI (99.9%): [≈ 0, 78113.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 66.42% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 687.430 ops/s
[info] # Warmup Iteration   2: 2067.534 ops/s
[info] # Warmup Iteration   3: 2068.192 ops/s
[info] Iteration   1: 2081.145 ops/s
[info]                  ·gc.alloc.rate:            1321.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       999805.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1015335.839 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 2116.474 ops/s
[info]                  ·gc.alloc.rate:                   1344.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1004988.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3467.186 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 2138.905 ops/s
[info]                  ·gc.alloc.rate:                                  1358.869 MB/sec
[info]                  ·gc.alloc.rate.norm:                             999800.191 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1001537.077 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2109.857 ops/s
[info]                  ·gc.alloc.rate:                                  1340.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             999800.208 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.814 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1015295.757 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2109.781 ops/s
[info]                  ·gc.alloc.rate:                                  1340.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             999800.208 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.743 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1015295.757 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2111.232 ±(99.9%) 79.441 ops/s [Average]
[info]   (min, avg, max) = (2081.145, 2111.232, 2138.905), stdev = 20.631
[info]   CI (99.9%): [2031.791, 2190.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1341.187 ±(99.9%) 50.824 MB/sec [Average]
[info]   (min, avg, max) = (1321.880, 1341.187, 1358.869), stdev = 13.199
[info]   CI (99.9%): [1290.363, 1392.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999801.217 ±(99.9%) 8.711 B/op [Average]
[info]   (min, avg, max) = (999800.191, 999801.217, 999805.264), stdev = 2.262
[info]   CI (99.9%): [999792.506, 999809.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.020), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.738 ±(99.9%) 29.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.738, 14.814), stdev = 7.547
[info]   CI (99.9%): [≈ 0, 34.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.471 ±(99.9%) 32.582 MB/sec [Average]
[info]   (min, avg, max) = (1342.413, 1355.471, 1361.501), stdev = 8.462
[info]   CI (99.9%): [1322.889, 1388.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1010490.591 ±(99.9%) 25837.637 B/op [Average]
[info]   (min, avg, max) = (1001537.077, 1010490.591, 1015335.839), stdev = 6709.952
[info]   CI (99.9%): [984652.953, 1036328.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   693.437 ±(99.9%) 5970.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 693.437, 3467.186), stdev = 1550.573
[info]   CI (99.9%): [≈ 0, 6664.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 19.000), stdev = 6.950
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 66.67% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5195.888 ops/s
[info] # Warmup Iteration   2: 7056.485 ops/s
[info] # Warmup Iteration   3: 7442.314 ops/s
[info] Iteration   1: 7480.062 ops/s
[info]                  ·gc.alloc.rate:                   1534.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              323016.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        283656.485 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 700.732 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 7587.111 ops/s
[info]                  ·gc.alloc.rate:                                  1556.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             323016.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.198 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       353025.653 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7583.046 ops/s
[info]                  ·gc.alloc.rate:                                  1556.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             323016.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       282569.459 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7433.353 ops/s
[info]                  ·gc.alloc.rate:                                  1525.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             323016.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.610 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       360337.818 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7578.750 ops/s
[info]                  ·gc.alloc.rate:                                  1555.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             323016.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.367 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       282718.552 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7532.464 ±(99.9%) 274.020 ops/s [Average]
[info]   (min, avg, max) = (7433.353, 7532.464, 7587.111), stdev = 71.162
[info]   CI (99.9%): [7258.445, 7806.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1545.843 ±(99.9%) 56.043 MB/sec [Average]
[info]   (min, avg, max) = (1525.710, 1545.843, 1556.845), stdev = 14.554
[info]   CI (99.9%): [1489.800, 1601.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   323016.057 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (323016.054, 323016.057, 323016.063), stdev = 0.004
[info]   CI (99.9%): [323016.040, 323016.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.083 ±(99.9%) 0.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.198), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   17.268 ±(99.9%) 61.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.268, 41.171), stdev = 15.966
[info]   CI (99.9%): [≈ 0, 78.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.837 ±(99.9%) 727.597 MB/sec [Average]
[info]   (min, avg, max) = (1347.894, 1494.837, 1701.993), stdev = 188.955
[info]   CI (99.9%): [767.240, 2222.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   312461.594 ±(99.9%) 155766.737 B/op [Average]
[info]   (min, avg, max) = (282569.459, 312461.594, 360337.818), stdev = 40452.127
[info]   CI (99.9%): [156694.856, 468228.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   140.146 ±(99.9%) 1206.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.146, 700.732), stdev = 313.377
[info]   CI (99.9%): [≈ 0, 1346.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 14.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 66.92% complete, ETA 00:28:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3093.571 ops/s
[info] # Warmup Iteration   2: 53204.033 ops/s
[info] # Warmup Iteration   3: 53146.900 ops/s
[info] Iteration   1: 53482.976 ops/s
[info]                  ·gc.alloc.rate:            528.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9820.477 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 52802.001 ops/s
[info]                  ·gc.alloc.rate:                   521.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19875.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 53654.057 ops/s
[info]                  ·gc.alloc.rate:                   529.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19559.558 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 53972.141 ops/s
[info]                  ·gc.alloc.rate:            533.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9731.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 53721.560 ops/s
[info]                  ·gc.alloc.rate:            530.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19553.592 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   53526.547 ±(99.9%) 1700.081 ops/s [Average]
[info]   (min, avg, max) = (52802.001, 53526.547, 53972.141), stdev = 441.506
[info]   CI (99.9%): [51826.466, 55226.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   528.611 ±(99.9%) 16.525 MB/sec [Average]
[info]   (min, avg, max) = (521.610, 528.611, 533.000), stdev = 4.291
[info]   CI (99.9%): [512.086, 545.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15544.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15544.008, 15544.008, 15544.009), stdev = 0.001
[info]   CI (99.9%): [15544.006, 15544.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.673 ±(99.9%) 703.024 MB/sec [Average]
[info]   (min, avg, max) = (333.645, 533.673, 667.368), stdev = 182.573
[info]   CI (99.9%): [≈ 0, 1236.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   15708.124 ±(99.9%) 20857.987 B/op [Average]
[info]   (min, avg, max) = (9731.879, 15708.124, 19875.113), stdev = 5416.753
[info]   CI (99.9%): [≈ 0, 36566.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   7.879 ±(99.9%) 41.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.879, 19.855), stdev = 10.789
[info]   CI (99.9%): [≈ 0, 49.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 67.16% complete, ETA 00:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d6f7c3ad/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 16551.394 ops/s
[info] # Warmup Iteration   2: 35539.847 ops/s
[info] # Warmup Iteration   3: 35787.422 ops/s
[info] Iteration   1: 35651.483 ops/s
[info]                  ·gc.alloc.rate:            530.726 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.817 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29639.231 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 35684.986 ops/s
[info]                  ·gc.alloc.rate:            531.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29613.488 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 35744.470 ops/s
[info]                  ·gc.alloc.rate:            532.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14782.308 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 35651.765 ops/s
[info]                  ·gc.alloc.rate:                   530.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.991 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29610.657 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 35766.856 ops/s
[info]                  ·gc.alloc.rate:            532.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14773.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   35699.912 ±(99.9%) 205.146 ops/s [Average]
[info]   (min, avg, max) = (35651.483, 35699.912, 35766.856), stdev = 53.276
[info]   CI (99.9%): [35494.766, 35905.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   531.506 ±(99.9%) 3.174 MB/sec [Average]
[info]   (min, avg, max) = (530.717, 531.506, 532.577), stdev = 0.824
[info]   CI (99.9%): [528.332, 534.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.848 ±(99.9%) 0.338 B/op [Average]
[info]   (min, avg, max) = (23431.778, 23431.848, 23431.991), stdev = 0.088
[info]   CI (99.9%): [23431.510, 23432.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.011 ±(99.9%) 707.550 MB/sec [Average]
[info]   (min, avg, max) = (335.672, 537.011, 671.625), stdev = 183.748
[info]   CI (99.9%): [≈ 0, 1244.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23683.780 ±(99.9%) 31305.938 B/op [Average]
[info]   (min, avg, max) = (14773.217, 23683.780, 29639.231), stdev = 8130.053
[info]   CI (99.9%): [≈ 0, 54989.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.881 ±(99.9%) 50.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.881, 29.405), stdev = 13.150
[info]   CI (99.9%): [≈ 0, 56.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 2.049
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.41% complete, ETA 00:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63347.585 ops/s
[info] # Warmup Iteration   2: 72854.274 ops/s
[info] # Warmup Iteration   3: 73724.504 ops/s
[info] Iteration   1: 73661.350 ops/s
[info]                  ·gc.alloc.rate:            553.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14373.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 72214.437 ops/s
[info]                  ·gc.alloc.rate:            542.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14663.368 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 71695.442 ops/s
[info]                  ·gc.alloc.rate:            538.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7384.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 73489.200 ops/s
[info]                  ·gc.alloc.rate:            552.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14408.611 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 73876.038 ops/s
[info]                  ·gc.alloc.rate:            555.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7166.573 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   72987.294 ±(99.9%) 3734.487 ops/s [Average]
[info]   (min, avg, max) = (71695.442, 72987.294, 73876.038), stdev = 969.835
[info]   CI (99.9%): [69252.806, 76721.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   548.653 ±(99.9%) 28.230 MB/sec [Average]
[info]   (min, avg, max) = (538.922, 548.653, 555.451), stdev = 7.331
[info]   CI (99.9%): [520.423, 576.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.006, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.166 ±(99.9%) 709.240 MB/sec [Average]
[info]   (min, avg, max) = (336.364, 538.166, 672.700), stdev = 184.187
[info]   CI (99.9%): [≈ 0, 1247.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11599.481 ±(99.9%) 15207.646 B/op [Average]
[info]   (min, avg, max) = (7166.573, 11599.481, 14663.368), stdev = 3949.377
[info]   CI (99.9%): [≈ 0, 26807.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.66% complete, ETA 00:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82158.742 ops/s
[info] # Warmup Iteration   2: 94258.999 ops/s
[info] # Warmup Iteration   3: 93591.696 ops/s
[info] Iteration   1: 94312.474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 94287.410 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 94308.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 94353.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 94424.113 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   94337.273 ±(99.9%) 208.368 ops/s [Average]
[info]   (min, avg, max) = (94287.410, 94337.273, 94424.113), stdev = 54.113
[info]   CI (99.9%): [94128.905, 94545.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 67.91% complete, ETA 00:27:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1802.960 ops/s
[info] # Warmup Iteration   2: 4588.372 ops/s
[info] # Warmup Iteration   3: 4629.699 ops/s
[info] Iteration   1: 4728.574 ops/s
[info]                  ·gc.alloc.rate:            1431.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       476734.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 446919.496 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 4704.854 ops/s
[info]                  ·gc.alloc.rate:                                  1424.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476736.573 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       453655.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1559.718 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 4784.456 ops/s
[info]                  ·gc.alloc.rate:                                  1449.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476735.626 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.813 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       447824.769 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4829.544 ops/s
[info]                  ·gc.alloc.rate:                                  1463.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476736.295 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.647 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       554566.690 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4810.317 ops/s
[info]                  ·gc.alloc.rate:                                  1457.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476735.067 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.324 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       445405.101 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   4771.549 ±(99.9%) 204.919 ops/s [Average]
[info]   (min, avg, max) = (4704.854, 4771.549, 4829.544), stdev = 53.217
[info]   CI (99.9%): [4566.630, 4976.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1445.318 ±(99.9%) 62.978 MB/sec [Average]
[info]   (min, avg, max) = (1424.980, 1445.318, 1463.173), stdev = 16.355
[info]   CI (99.9%): [1382.340, 1508.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   476735.704 ±(99.9%) 2.768 B/op [Average]
[info]   (min, avg, max) = (476734.962, 476735.704, 476736.573), stdev = 0.719
[info]   CI (99.9%): [476732.937, 476738.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.050), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   11.433 ±(99.9%) 25.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.433, 16.324), stdev = 6.725
[info]   CI (99.9%): [≈ 0, 37.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.653 ±(99.9%) 597.857 MB/sec [Average]
[info]   (min, avg, max) = (1342.435, 1424.653, 1702.046), stdev = 155.262
[info]   CI (99.9%): [826.796, 2022.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   469674.224 ±(99.9%) 183133.554 B/op [Average]
[info]   (min, avg, max) = (445405.101, 469674.224, 554566.690), stdev = 47559.202
[info]   CI (99.9%): [286540.670, 652807.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   311.944 ±(99.9%) 2685.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 311.944, 1559.718), stdev = 697.527
[info]   CI (99.9%): [≈ 0, 2997.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 17.000), stdev = 5.683
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 68.16% complete, ETA 00:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4434087.746 ops/s
[info] # Warmup Iteration   2: 6431274.864 ops/s
[info] # Warmup Iteration   3: 6459209.030 ops/s
[info] Iteration   1: 6406934.548 ops/s
[info]                  ·gc.alloc.rate:                                  3876.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       919.793 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 6432852.974 ops/s
[info]                  ·gc.alloc.rate:                                  3891.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3745.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       916.111 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 6453918.304 ops/s
[info]                  ·gc.alloc.rate:                                  3903.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4084.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       996.129 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 6493699.330 ops/s
[info]                  ·gc.alloc.rate:            3927.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4084.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 989.930 B/op
[info]                  ·gc.count:                 12.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 6497182.119 ops/s
[info]                  ·gc.alloc.rate:                                  3929.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       907.005 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6456917.455 ±(99.9%) 149885.228 ops/s [Average]
[info]   (min, avg, max) = (6406934.548, 6456917.455, 6497182.119), stdev = 38924.718
[info]   CI (99.9%): [6307032.227, 6606802.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3905.660 ±(99.9%) 88.644 MB/sec [Average]
[info]   (min, avg, max) = (3876.066, 3905.660, 3929.349), stdev = 23.021
[info]   CI (99.9%): [3817.016, 3994.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3880.431 ±(99.9%) 716.347 MB/sec [Average]
[info]   (min, avg, max) = (3743.633, 3880.431, 4084.220), stdev = 186.033
[info]   CI (99.9%): [3164.084, 4596.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   945.793 ±(99.9%) 167.219 B/op [Average]
[info]   (min, avg, max) = (907.005, 945.793, 996.129), stdev = 43.426
[info]   CI (99.9%): [778.574, 1113.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 68.41% complete, ETA 00:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.917 ops/s
[info] # Warmup Iteration   2: 35204715.027 ops/s
[info] # Warmup Iteration   3: 34300575.036 ops/s
[info] Iteration   1: 36879043.374 ops/s
[info]                  ·gc.alloc.rate:            374.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 37169809.143 ops/s
[info]                  ·gc.alloc.rate:            377.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 37163987.460 ops/s
[info]                  ·gc.alloc.rate:            377.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 37504233.624 ops/s
[info]                  ·gc.alloc.rate:                   381.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13.977 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 37818917.089 ops/s
[info]                  ·gc.alloc.rate:            384.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   37307198.138 ±(99.9%) 1392875.374 ops/s [Average]
[info]   (min, avg, max) = (36879043.374, 37307198.138, 37818917.089), stdev = 361725.311
[info]   CI (99.9%): [35914322.764, 38700073.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   379.246 ±(99.9%) 14.268 MB/sec [Average]
[info]   (min, avg, max) = (374.859, 379.246, 384.482), stdev = 3.705
[info]   CI (99.9%): [364.978, 393.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.578 ±(99.9%) 1.109 MB/sec [Average]
[info]   (min, avg, max) = (333.064, 333.578, 333.731), stdev = 0.288
[info]   CI (99.9%): [332.469, 334.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14.074 ±(99.9%) 0.542 B/op [Average]
[info]   (min, avg, max) = (13.888, 14.074, 14.243), stdev = 0.141
[info]   CI (99.9%): [13.532, 14.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 68.66% complete, ETA 00:27:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2482082.463 ops/s
[info] # Warmup Iteration   2: 6135324.537 ops/s
[info] # Warmup Iteration   3: 6127045.544 ops/s
[info] Iteration   1: 6264767.850 ops/s
[info]                  ·gc.alloc.rate:                                  2642.503 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       684.143 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 6308916.399 ops/s
[info]                  ·gc.alloc.rate:                                  2661.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       679.340 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 6234343.147 ops/s
[info]                  ·gc.alloc.rate:                                  2629.858 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       601.544 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 6278692.633 ops/s
[info]                  ·gc.alloc.rate:            2648.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       664.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 682.608 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 6297419.753 ops/s
[info]                  ·gc.alloc.rate:                                  2656.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             664.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       680.575 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   6276827.957 ±(99.9%) 112389.546 ops/s [Average]
[info]   (min, avg, max) = (6234343.147, 6276827.957, 6308916.399), stdev = 29187.208
[info]   CI (99.9%): [6164438.411, 6389217.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2647.845 ±(99.9%) 48.230 MB/sec [Average]
[info]   (min, avg, max) = (2629.858, 2647.845, 2661.978), stdev = 12.525
[info]   CI (99.9%): [2599.615, 2696.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2654.810 ±(99.9%) 586.188 MB/sec [Average]
[info]   (min, avg, max) = (2382.492, 2654.810, 2723.477), stdev = 152.231
[info]   CI (99.9%): [2068.622, 3240.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   665.642 ±(99.9%) 138.159 B/op [Average]
[info]   (min, avg, max) = (601.544, 665.642, 684.143), stdev = 35.879
[info]   CI (99.9%): [527.483, 803.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 68.91% complete, ETA 00:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35810757.314 ops/s
[info] # Warmup Iteration   2: 32432646.083 ops/s
[info] # Warmup Iteration   3: 34312365.722 ops/s
[info] Iteration   1: 35334565.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35306127.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35063473.790 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35322800.316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35314198.614 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   35268233.185 ±(99.9%) 442626.457 ops/s [Average]
[info]   (min, avg, max) = (35063473.790, 35268233.185, 35334565.996), stdev = 114948.685
[info]   CI (99.9%): [34825606.728, 35710859.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 69.15% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21222537.058 ops/s
[info] # Warmup Iteration   2: 27493852.112 ops/s
[info] # Warmup Iteration   3: 27666490.115 ops/s
[info] Iteration   1: 27743110.310 ops/s
[info]                  ·gc.alloc.rate:            986.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.364 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 27831240.453 ops/s
[info]                  ·gc.alloc.rate:            990.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.184 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26618873.351 ops/s
[info]                  ·gc.alloc.rate:                   946.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39.859 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24032429.101 ops/s
[info]                  ·gc.alloc.rate:                                  854.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66.877 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 23941614.589 ops/s
[info]                  ·gc.alloc.rate:            851.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44.752 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26033453.561 ±(99.9%) 7426246.453 ops/s [Average]
[info]   (min, avg, max) = (23941614.589, 26033453.561, 27831240.453), stdev = 1928572.621
[info]   CI (99.9%): [18607207.108, 33459700.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   926.212 ±(99.9%) 264.606 MB/sec [Average]
[info]   (min, avg, max) = (851.734, 926.212, 990.493), stdev = 68.717
[info]   CI (99.9%): [661.606, 1190.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   879.615 ±(99.9%) 711.268 MB/sec [Average]
[info]   (min, avg, max) = (674.008, 879.615, 1020.948), stdev = 184.714
[info]   CI (99.9%): [168.348, 1590.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   53.207 ±(99.9%) 41.722 B/op [Average]
[info]   (min, avg, max) = (39.859, 53.207, 66.877), stdev = 10.835
[info]   CI (99.9%): [11.485, 94.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.400, 9.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 69.40% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3055903.511 ops/s
[info] # Warmup Iteration   2: 5690177.308 ops/s
[info] # Warmup Iteration   3: 5861508.750 ops/s
[info] Iteration   1: 5898920.356 ops/s
[info]                  ·gc.alloc.rate:                                  2848.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       726.547 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 5972798.585 ops/s
[info]                  ·gc.alloc.rate:            2883.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 717.569 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5857740.045 ops/s
[info]                  ·gc.alloc.rate:                                  2828.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       823.167 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 5883310.449 ops/s
[info]                  ·gc.alloc.rate:                                  2841.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       728.494 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 5850703.309 ops/s
[info]                  ·gc.alloc.rate:                                  2824.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       732.545 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   5892694.549 ±(99.9%) 187939.041 ops/s [Average]
[info]   (min, avg, max) = (5850703.309, 5892694.549, 5972798.585), stdev = 48807.172
[info]   CI (99.9%): [5704755.508, 6080633.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2845.496 ±(99.9%) 90.768 MB/sec [Average]
[info]   (min, avg, max) = (2824.620, 2845.496, 2883.960), stdev = 23.572
[info]   CI (99.9%): [2754.728, 2936.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2791.270 ±(99.9%) 586.790 MB/sec [Average]
[info]   (min, avg, max) = (2722.580, 2791.270, 3063.868), stdev = 152.388
[info]   CI (99.9%): [2204.480, 3378.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   745.664 ±(99.9%) 168.160 B/op [Average]
[info]   (min, avg, max) = (717.569, 745.664, 823.167), stdev = 43.671
[info]   CI (99.9%): [577.504, 913.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 13.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 69.65% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13040214.413 ops/s
[info] # Warmup Iteration   2: 19961163.637 ops/s
[info] # Warmup Iteration   3: 19780688.628 ops/s
[info] Iteration   1: 20191012.124 ops/s
[info]                  ·gc.alloc.rate:                                  2257.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       159.200 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 20213563.780 ops/s
[info]                  ·gc.alloc.rate:                                  2259.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       185.527 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 20247603.357 ops/s
[info]                  ·gc.alloc.rate:                                  2263.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       158.754 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 20281425.867 ops/s
[info]                  ·gc.alloc.rate:            2267.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.910 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 20027016.590 ops/s
[info]                  ·gc.alloc.rate:            2239.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.252 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   20192124.344 ±(99.9%) 379118.041 ops/s [Average]
[info]   (min, avg, max) = (20027016.590, 20192124.344, 20281425.867), stdev = 98455.751
[info]   CI (99.9%): [19813006.303, 20571242.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2257.685 ±(99.9%) 42.694 MB/sec [Average]
[info]   (min, avg, max) = (2239.175, 2257.685, 2267.989), stdev = 11.088
[info]   CI (99.9%): [2214.990, 2300.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2246.283 ±(99.9%) 718.081 MB/sec [Average]
[info]   (min, avg, max) = (2041.999, 2246.283, 2382.812), stdev = 186.483
[info]   CI (99.9%): [1528.202, 2964.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   175.129 ±(99.9%) 56.875 B/op [Average]
[info]   (min, avg, max) = (158.754, 175.129, 187.252), stdev = 14.770
[info]   CI (99.9%): [118.254, 232.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 69.90% complete, ETA 00:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.911 ops/s
[info] # Warmup Iteration   2: 51942704.654 ops/s
[info] # Warmup Iteration   3: 51047542.634 ops/s
[info] Iteration   1: 53884233.667 ops/s
[info]                  ·gc.alloc.rate:            1643.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1668.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.741 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 54574982.363 ops/s
[info]                  ·gc.alloc.rate:                                  1664.762 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.610 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.815 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.192 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 55068010.703 ops/s
[info]                  ·gc.alloc.rate:                                  1679.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.641 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 55246821.853 ops/s
[info]                  ·gc.alloc.rate:                                  1685.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.487 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 55201565.590 ops/s
[info]                  ·gc.alloc.rate:                                  1683.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.524 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54795122.835 ±(99.9%) 2213598.191 ops/s [Average]
[info]   (min, avg, max) = (53884233.667, 54795122.835, 55246821.853), stdev = 574864.421
[info]   CI (99.9%): [52581524.644, 57008721.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1671.329 ±(99.9%) 67.490 MB/sec [Average]
[info]   (min, avg, max) = (1643.514, 1671.329, 1685.050), stdev = 17.527
[info]   CI (99.9%): [1603.839, 1738.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.123 ±(99.9%) 1.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.610), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1693.647 ±(99.9%) 55.384 MB/sec [Average]
[info]   (min, avg, max) = (1668.896, 1693.647, 1702.313), stdev = 14.383
[info]   CI (99.9%): [1638.263, 1749.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   48.642 ±(99.9%) 0.537 B/op [Average]
[info]   (min, avg, max) = (48.487, 48.642, 48.815), stdev = 0.139
[info]   CI (99.9%): [48.105, 49.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.333 ±(99.9%) 11.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.333, 6.663), stdev = 2.980
[info]   CI (99.9%): [≈ 0, 12.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.192), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 24.000), stdev = 8.706
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 70.15% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4036321.030 ops/s
[info] # Warmup Iteration   2: 11246216.103 ops/s
[info] # Warmup Iteration   3: 11377311.102 ops/s
[info] Iteration   1: 11572694.292 ops/s
[info]                  ·gc.alloc.rate:                                  2293.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.175 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       324.061 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 11621205.020 ops/s
[info]                  ·gc.alloc.rate:            2303.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 322.697 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11573740.746 ops/s
[info]                  ·gc.alloc.rate:                                  2294.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       324.018 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 11541488.463 ops/s
[info]                  ·gc.alloc.rate:                                  2288.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       278.517 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11618062.496 ops/s
[info]                  ·gc.alloc.rate:            2302.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 322.788 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11585438.203 ±(99.9%) 130218.211 ops/s [Average]
[info]   (min, avg, max) = (11541488.463, 11585438.203, 11621205.020), stdev = 33817.256
[info]   CI (99.9%): [11455219.992, 11715656.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2296.478 ±(99.9%) 24.722 MB/sec [Average]
[info]   (min, avg, max) = (2288.534, 2296.478, 2303.317), stdev = 6.420
[info]   CI (99.9%): [2271.756, 2321.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.175), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2314.484 ±(99.9%) 584.524 MB/sec [Average]
[info]   (min, avg, max) = (2042.938, 2314.484, 2382.500), stdev = 151.799
[info]   CI (99.9%): [1729.960, 2899.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   314.416 ±(99.9%) 77.315 B/op [Average]
[info]   (min, avg, max) = (278.517, 314.416, 324.061), stdev = 20.079
[info]   CI (99.9%): [237.101, 391.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 70.40% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29800828.507 ops/s
[info] # Warmup Iteration   2: 41645734.539 ops/s
[info] # Warmup Iteration   3: 43368627.426 ops/s
[info] Iteration   1: 44996621.013 ops/s
[info]                  ·gc.alloc.rate:            914.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.578 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 44418095.176 ops/s
[info]                  ·gc.alloc.rate:                   903.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 41959772.466 ops/s
[info]                  ·gc.alloc.rate:                   853.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25.236 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38934316.372 ops/s
[info]                  ·gc.alloc.rate:                                  791.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41.011 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.135 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 36009817.489 ops/s
[info]                  ·gc.alloc.rate:                                  732.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29.754 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   41263724.503 ±(99.9%) 14586615.139 ops/s [Average]
[info]   (min, avg, max) = (36009817.489, 41263724.503, 44996621.013), stdev = 3788097.630
[info]   CI (99.9%): [26677109.364, 55850339.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   838.869 ±(99.9%) 296.594 MB/sec [Average]
[info]   (min, avg, max) = (732.012, 838.869, 914.674), stdev = 77.025
[info]   CI (99.9%): [542.275, 1135.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.455 ±(99.9%) 710.290 MB/sec [Average]
[info]   (min, avg, max) = (672.704, 810.455, 1014.428), stdev = 184.460
[info]   CI (99.9%): [100.165, 1520.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   31.077 ±(99.9%) 28.109 B/op [Average]
[info]   (min, avg, max) = (23.578, 31.077, 41.011), stdev = 7.300
[info]   CI (99.9%): [2.968, 59.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.135), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.000, 9.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 70.65% complete, ETA 00:25:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35938408.015 ops/s
[info] # Warmup Iteration   2: 49199053.874 ops/s
[info] # Warmup Iteration   3: 50595049.794 ops/s
[info] Iteration   1: 50701133.218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 50878569.545 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 50871703.974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50903115.764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 50906777.042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   50852259.909 ±(99.9%) 330505.397 ops/s [Average]
[info]   (min, avg, max) = (50701133.218, 50852259.909, 50906777.042), stdev = 85831.202
[info]   CI (99.9%): [50521754.512, 51182765.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 70.90% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41070195.225 ops/s
[info] # Warmup Iteration   2: 39694225.074 ops/s
[info] # Warmup Iteration   3: 39569400.435 ops/s
[info] Iteration   1: 39354798.757 ops/s
[info]                  ·gc.alloc.rate:                                  2000.812 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.676 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 39728733.225 ops/s
[info]                  ·gc.alloc.rate:                                  2018.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.911 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 40165049.866 ops/s
[info]                  ·gc.alloc.rate:            2041.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.029 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 40161745.504 ops/s
[info]                  ·gc.alloc.rate:            2041.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.036 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 40013293.148 ops/s
[info]                  ·gc.alloc.rate:                                  2033.412 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.332 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   39884724.100 ±(99.9%) 1329737.543 ops/s [Average]
[info]   (min, avg, max) = (39354798.757, 39884724.100, 40165049.866), stdev = 345328.617
[info]   CI (99.9%): [38554986.557, 41214461.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2027.150 ±(99.9%) 66.728 MB/sec [Average]
[info]   (min, avg, max) = (2000.812, 2027.150, 2041.386), stdev = 17.329
[info]   CI (99.9%): [1960.422, 2093.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2042.153 ±(99.9%) 1.415 MB/sec [Average]
[info]   (min, avg, max) = (2041.840, 2042.153, 2042.724), stdev = 0.368
[info]   CI (99.9%): [2040.737, 2043.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   80.597 ±(99.9%) 2.702 B/op [Average]
[info]   (min, avg, max) = (80.029, 80.597, 81.676), stdev = 0.702
[info]   CI (99.9%): [77.895, 83.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 71.14% complete, ETA 00:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1380180.433 ops/s
[info] # Warmup Iteration   2: 2102917.283 ops/s
[info] # Warmup Iteration   3: 2122702.856 ops/s
[info] Iteration   1: 2154296.621 ops/s
[info]                  ·gc.alloc.rate:                                  1729.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1234.678 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.920 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 2116570.407 ops/s
[info]                  ·gc.alloc.rate:                                  1699.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1265.622 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2117862.197 ops/s
[info]                  ·gc.alloc.rate:            1700.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1264.867 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2168485.869 ops/s
[info]                  ·gc.alloc.rate:                                  1741.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1235.304 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2137963.720 ops/s
[info]                  ·gc.alloc.rate:                                  1717.048 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1252.935 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2139035.763 ±(99.9%) 87265.395 ops/s [Average]
[info]   (min, avg, max) = (2116570.407, 2139035.763, 2168485.869), stdev = 22662.546
[info]   CI (99.9%): [2051770.368, 2226301.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1717.613 ±(99.9%) 69.941 MB/sec [Average]
[info]   (min, avg, max) = (1699.539, 1717.613, 1741.176), stdev = 18.163
[info]   CI (99.9%): [1647.672, 1787.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.169), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.344 ±(99.9%) 20.970 MB/sec [Average]
[info]   (min, avg, max) = (1689.606, 1699.344, 1702.017), stdev = 5.446
[info]   CI (99.9%): [1678.374, 1720.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1250.681 ±(99.9%) 58.465 B/op [Average]
[info]   (min, avg, max) = (1234.678, 1250.681, 1265.622), stdev = 15.183
[info]   CI (99.9%): [1192.216, 1309.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.584 ±(99.9%) 5.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 2.920), stdev = 1.306
[info]   CI (99.9%): [≈ 0, 5.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 71.39% complete, ETA 00:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121899.478 ops/s
[info] # Warmup Iteration   2: 133822.703 ops/s
[info] # Warmup Iteration   3: 135709.352 ops/s
[info] Iteration   1: 139591.755 ops/s
[info]                  ·gc.alloc.rate:                                  2560.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26864.996 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 139202.622 ops/s
[info]                  ·gc.alloc.rate:                                  2553.086 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30788.858 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 138455.469 ops/s
[info]                  ·gc.alloc.rate:                                  2539.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27085.771 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 138223.218 ops/s
[info]                  ·gc.alloc.rate:                                  2536.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31005.770 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 137252.678 ops/s
[info]                  ·gc.alloc.rate:                                  2518.227 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27323.934 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   138545.149 ±(99.9%) 3502.721 ops/s [Average]
[info]   (min, avg, max) = (137252.678, 138545.149, 139591.755), stdev = 909.646
[info]   CI (99.9%): [135042.427, 142047.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2541.504 ±(99.9%) 62.749 MB/sec [Average]
[info]   (min, avg, max) = (2518.227, 2541.504, 2560.374), stdev = 16.296
[info]   CI (99.9%): [2478.754, 2604.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.003, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.036, 0.061), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2518.873 ±(99.9%) 718.367 MB/sec [Average]
[info]   (min, avg, max) = (2382.297, 2518.873, 2723.882), stdev = 186.558
[info]   CI (99.9%): [1800.506, 3237.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28613.866 ±(99.9%) 8056.349 B/op [Average]
[info]   (min, avg, max) = (26864.996, 28613.866, 31005.770), stdev = 2092.208
[info]   CI (99.9%): [20557.517, 36670.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Run progress: 71.64% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6360.066 ops/s
[info] # Warmup Iteration   2: 20152.102 ops/s
[info] # Warmup Iteration   3: 20954.578 ops/s
[info] Iteration   1: 20865.167 ops/s
[info]                  ·gc.alloc.rate:                   1649.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              124424.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        127071.192 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 401.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 21295.039 ops/s
[info]                  ·gc.alloc.rate:                                  1683.198 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.686 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       125785.797 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 21050.790 ops/s
[info]                  ·gc.alloc.rate:                                  1664.015 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       127237.447 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 21438.892 ops/s
[info]                  ·gc.alloc.rate:                                  1694.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       124935.258 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21449.984 ops/s
[info]                  ·gc.alloc.rate:                                  1695.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       124877.024 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   21219.974 ±(99.9%) 983.565 ops/s [Average]
[info]   (min, avg, max) = (20865.167, 21219.974, 21449.984), stdev = 255.429
[info]   CI (99.9%): [20236.409, 22203.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1677.311 ±(99.9%) 77.607 MB/sec [Average]
[info]   (min, avg, max) = (1649.289, 1677.311, 1695.522), stdev = 20.154
[info]   CI (99.9%): [1599.703, 1754.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124424.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (124424.019, 124424.021, 124424.024), stdev = 0.002
[info]   CI (99.9%): [124424.013, 124424.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.036), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.863 ±(99.9%) 4.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.863, 2.686), stdev = 1.077
[info]   CI (99.9%): [≈ 0, 5.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.165 ±(99.9%) 29.680 MB/sec [Average]
[info]   (min, avg, max) = (1684.378, 1698.165, 1701.695), stdev = 7.708
[info]   CI (99.9%): [1668.486, 1727.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   125981.344 ±(99.9%) 4355.493 B/op [Average]
[info]   (min, avg, max) = (124877.024, 125981.344, 127237.447), stdev = 1131.108
[info]   CI (99.9%): [121625.851, 130336.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.393 ±(99.9%) 692.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.393, 401.965), stdev = 179.764
[info]   CI (99.9%): [≈ 0, 772.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 20.000), stdev = 6.943
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 71.89% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68698.221 ops/s
[info] # Warmup Iteration   2: 129459.799 ops/s
[info] # Warmup Iteration   3: 128976.478 ops/s
[info] Iteration   1: 128114.848 ops/s
[info]                  ·gc.alloc.rate:                   1423.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20631.079 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 57.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 129462.325 ops/s
[info]                  ·gc.alloc.rate:                                  1438.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.706 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16552.925 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 131276.072 ops/s
[info]                  ·gc.alloc.rate:            1458.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16323.605 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 127627.771 ops/s
[info]                  ·gc.alloc.rate:                                  1418.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16790.491 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 125725.258 ops/s
[info]                  ·gc.alloc.rate:                                  1397.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17044.050 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   128441.255 ±(99.9%) 7990.367 ops/s [Average]
[info]   (min, avg, max) = (125725.258, 128441.255, 131276.072), stdev = 2075.073
[info]   CI (99.9%): [120450.888, 136431.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1427.288 ±(99.9%) 88.035 MB/sec [Average]
[info]   (min, avg, max) = (1397.323, 1427.288, 1458.464), stdev = 22.862
[info]   CI (99.9%): [1339.254, 1515.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.003), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.148 ±(99.9%) 1.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.706), stdev = 0.312
[info]   CI (99.9%): [≈ 0, 1.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1425.260 ±(99.9%) 548.053 MB/sec [Average]
[info]   (min, avg, max) = (1361.356, 1425.260, 1679.863), stdev = 142.328
[info]   CI (99.9%): [877.207, 1973.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17468.430 ±(99.9%) 6885.770 B/op [Average]
[info]   (min, avg, max) = (16323.605, 17468.430, 20631.079), stdev = 1788.213
[info]   CI (99.9%): [10582.660, 24354.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.457 ±(99.9%) 98.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.457, 57.286), stdev = 25.619
[info]   CI (99.9%): [≈ 0, 110.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 22.000), stdev = 8.289
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 72.14% complete, ETA 00:23:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436705.800 ops/s
[info] # Warmup Iteration   2: 493593.518 ops/s
[info] # Warmup Iteration   3: 492397.504 ops/s
[info] Iteration   1: 493703.467 ops/s
[info]                  ·gc.alloc.rate:                   1021.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3219.227 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 487213.359 ops/s
[info]                  ·gc.alloc.rate:                   1007.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3262.161 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 483289.895 ops/s
[info]                  ·gc.alloc.rate:                                  999.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3299.530 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.016 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 481302.034 ops/s
[info]                  ·gc.alloc.rate:                                  995.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3339.296 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 482825.194 ops/s
[info]                  ·gc.alloc.rate:                                  998.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3328.758 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   485666.790 ±(99.9%) 19229.663 ops/s [Average]
[info]   (min, avg, max) = (481302.034, 485666.790, 493703.467), stdev = 4993.882
[info]   CI (99.9%): [466437.127, 504896.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1004.718 ±(99.9%) 40.020 MB/sec [Average]
[info]   (min, avg, max) = (995.637, 1004.718, 1021.507), stdev = 10.393
[info]   CI (99.9%): [964.699, 1044.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.025), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.080), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1015.024 ±(99.9%) 22.020 MB/sec [Average]
[info]   (min, avg, max) = (1009.668, 1015.024, 1021.107), stdev = 5.718
[info]   CI (99.9%): [993.004, 1037.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3289.794 ±(99.9%) 190.663 B/op [Average]
[info]   (min, avg, max) = (3219.227, 3289.794, 3339.296), stdev = 49.515
[info]   CI (99.9%): [3099.131, 3480.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.458 ±(99.9%) 20.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.458, 13.016), stdev = 5.449
[info]   CI (99.9%): [≈ 0, 24.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 3.421
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.39% complete, ETA 00:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480903.137 ops/s
[info] # Warmup Iteration   2: 542605.188 ops/s
[info] # Warmup Iteration   3: 547508.711 ops/s
[info] Iteration   1: 546756.325 ops/s
[info]                  ·gc.alloc.rate:                   533.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1938.555 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 549904.033 ops/s
[info]                  ·gc.alloc.rate:            536.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 962.792 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 547651.670 ops/s
[info]                  ·gc.alloc.rate:                   534.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1933.519 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 543305.768 ops/s
[info]                  ·gc.alloc.rate:            530.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 976.418 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 546332.733 ops/s
[info]                  ·gc.alloc.rate:            533.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1940.041 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   546790.106 ±(99.9%) 9191.226 ops/s [Average]
[info]   (min, avg, max) = (543305.768, 546790.106, 549904.033), stdev = 2386.932
[info]   CI (99.9%): [537598.880, 555981.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   533.611 ±(99.9%) 9.030 MB/sec [Average]
[info]   (min, avg, max) = (530.185, 533.611, 536.613), stdev = 2.345
[info]   CI (99.9%): [524.581, 542.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   538.613 ±(99.9%) 709.770 MB/sec [Average]
[info]   (min, avg, max) = (336.359, 538.613, 673.388), stdev = 184.325
[info]   CI (99.9%): [≈ 0, 1248.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   1550.265 ±(99.9%) 2041.207 B/op [Average]
[info]   (min, avg, max) = (962.792, 1550.265, 1940.041), stdev = 530.095
[info]   CI (99.9%): [≈ 0, 3591.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.766 ±(99.9%) 4.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 1.917), stdev = 1.049
[info]   CI (99.9%): [≈ 0, 4.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Run progress: 72.64% complete, ETA 00:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21264.442 ops/s
[info] # Warmup Iteration   2: 44280.598 ops/s
[info] # Warmup Iteration   3: 43913.869 ops/s
[info] Iteration   1: 43721.229 ops/s
[info]                  ·gc.alloc.rate:                   746.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24193.665 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 43532.049 ops/s
[info]                  ·gc.alloc.rate:            743.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36437.655 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 43732.150 ops/s
[info]                  ·gc.alloc.rate:                   747.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24188.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 43729.386 ops/s
[info]                  ·gc.alloc.rate:                   747.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24190.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.975 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 44580.257 ops/s
[info]                  ·gc.alloc.rate:                   761.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23868.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 164.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   43859.014 ±(99.9%) 1586.470 ops/s [Average]
[info]   (min, avg, max) = (43532.049, 43859.014, 44580.257), stdev = 412.001
[info]   CI (99.9%): [42272.544, 45445.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   749.292 ±(99.9%) 27.076 MB/sec [Average]
[info]   (min, avg, max) = (743.680, 749.292, 761.590), stdev = 7.032
[info]   CI (99.9%): [722.215, 776.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26888.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26888.009, 26888.009, 26888.010), stdev = 0.001
[info]   CI (99.9%): [26888.008, 26888.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.051 ±(99.9%) 576.405 MB/sec [Average]
[info]   (min, avg, max) = (671.944, 740.051, 1007.808), stdev = 149.691
[info]   CI (99.9%): [163.646, 1316.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   26575.808 ±(99.9%) 21235.168 B/op [Average]
[info]   (min, avg, max) = (23868.684, 26575.808, 36437.655), stdev = 5514.706
[info]   CI (99.9%): [5340.640, 47810.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.663), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   47.307 ±(99.9%) 255.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.307, 164.612), stdev = 66.392
[info]   CI (99.9%): [≈ 0, 302.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 13.000), stdev = 2.490
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299510.743 ops/s
[info] # Warmup Iteration   2: 363072.418 ops/s
[info] # Warmup Iteration   3: 365244.789 ops/s
[info] Iteration   1: 370791.316 ops/s
[info]                  ·gc.alloc.rate:                                  2510.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11558.482 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 371794.403 ops/s
[info]                  ·gc.alloc.rate:                                  2516.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10086.827 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 371799.080 ops/s
[info]                  ·gc.alloc.rate:                                  2517.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10086.230 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 369834.663 ops/s
[info]                  ·gc.alloc.rate:                                  2503.538 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11588.417 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 369826.770 ops/s
[info]                  ·gc.alloc.rate:                                  2503.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10656.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10139.947 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   370809.247 ±(99.9%) 3785.448 ops/s [Average]
[info]   (min, avg, max) = (369826.770, 370809.247, 371799.080), stdev = 983.069
[info]   CI (99.9%): [367023.799, 374594.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2510.418 ±(99.9%) 25.615 MB/sec [Average]
[info]   (min, avg, max) = (2503.538, 2510.418, 2517.248), stdev = 6.652
[info]   CI (99.9%): [2484.803, 2536.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10656.001, 10656.001, 10656.001), stdev = 0.001
[info]   CI (99.9%): [10656.001, 10656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.008), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.025, 0.033), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2518.699 ±(99.9%) 717.873 MB/sec [Average]
[info]   (min, avg, max) = (2382.355, 2518.699, 2723.243), stdev = 186.429
[info]   CI (99.9%): [1800.826, 3236.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10691.981 ±(99.9%) 3099.893 B/op [Average]
[info]   (min, avg, max) = (10086.230, 10691.981, 11588.417), stdev = 805.032
[info]   CI (99.9%): [7592.088, 13791.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.13% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198421.974 ops/s
[info] # Warmup Iteration   2: 385113.867 ops/s
[info] # Warmup Iteration   3: 391040.926 ops/s
[info] Iteration   1: 390468.354 ops/s
[info]                  ·gc.alloc.rate:                   1033.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4065.206 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 391097.426 ops/s
[info]                  ·gc.alloc.rate:            1035.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4061.214 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 383788.291 ops/s
[info]                  ·gc.alloc.rate:                                  1016.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4154.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.390 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 394579.030 ops/s
[info]                  ·gc.alloc.rate:                                  1044.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4073.218 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 393130.213 ops/s
[info]                  ·gc.alloc.rate:                                  1041.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5450.875 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   390612.663 ±(99.9%) 15981.101 ops/s [Average]
[info]   (min, avg, max) = (383788.291, 390612.663, 394579.030), stdev = 4150.241
[info]   CI (99.9%): [374631.562, 406593.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1034.438 ±(99.9%) 42.335 MB/sec [Average]
[info]   (min, avg, max) = (1016.410, 1034.438, 1044.891), stdev = 10.994
[info]   CI (99.9%): [992.103, 1076.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.221), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.737 ±(99.9%) 600.988 MB/sec [Average]
[info]   (min, avg, max) = (1008.291, 1082.737, 1361.786), stdev = 156.075
[info]   CI (99.9%): [481.750, 1683.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4361.072 ±(99.9%) 2350.557 B/op [Average]
[info]   (min, avg, max) = (4061.214, 4361.072, 5450.875), stdev = 610.432
[info]   CI (99.9%): [2010.515, 6711.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.815 ±(99.9%) 27.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.815, 16.390), stdev = 7.125
[info]   CI (99.9%): [≈ 0, 31.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.38% complete, ETA 00:22:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413984.582 ops/s
[info] # Warmup Iteration   2: 418842.126 ops/s
[info] # Warmup Iteration   3: 423979.350 ops/s
[info] Iteration   1: 422766.947 ops/s
[info]                  ·gc.alloc.rate:            833.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2509.492 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 422486.340 ops/s
[info]                  ·gc.alloc.rate:            833.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3766.947 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 422615.744 ops/s
[info]                  ·gc.alloc.rate:            833.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2510.519 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 423592.748 ops/s
[info]                  ·gc.alloc.rate:                                  835.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3769.354 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.375 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 421471.420 ops/s
[info]                  ·gc.alloc.rate:                                  831.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2542.129 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   422586.640 ±(99.9%) 2919.507 ops/s [Average]
[info]   (min, avg, max) = (421471.420, 422586.640, 423592.748), stdev = 758.187
[info]   CI (99.9%): [419667.133, 425506.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   833.489 ±(99.9%) 5.524 MB/sec [Average]
[info]   (min, avg, max) = (831.351, 833.489, 835.348), stdev = 1.435
[info]   CI (99.9%): [827.965, 839.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.978 ±(99.9%) 709.614 MB/sec [Average]
[info]   (min, avg, max) = (674.165, 810.978, 1014.407), stdev = 184.284
[info]   CI (99.9%): [101.365, 1520.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3019.688 ±(99.9%) 2631.437 B/op [Average]
[info]   (min, avg, max) = (2509.492, 3019.688, 3769.354), stdev = 683.376
[info]   CI (99.9%): [388.251, 5651.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.475 ±(99.9%) 21.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.475, 12.375), stdev = 5.534
[info]   CI (99.9%): [≈ 0, 23.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.63% complete, ETA 00:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56342.241 ops/s
[info] # Warmup Iteration   2: 90042.168 ops/s
[info] # Warmup Iteration   3: 93149.739 ops/s
[info] Iteration   1: 95133.316 ops/s
[info]                  ·gc.alloc.rate:                                  3443.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56314.027 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 94222.016 ops/s
[info]                  ·gc.alloc.rate:                                  3411.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56856.606 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 93310.585 ops/s
[info]                  ·gc.alloc.rate:                                  3378.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57416.508 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 93071.563 ops/s
[info]                  ·gc.alloc.rate:                                  3369.181 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57561.457 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 93605.167 ops/s
[info]                  ·gc.alloc.rate:                                  3389.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57233.135 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   93868.529 ±(99.9%) 3187.241 ops/s [Average]
[info]   (min, avg, max) = (93071.563, 93868.529, 95133.316), stdev = 827.716
[info]   CI (99.9%): [90681.289, 97055.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3398.401 ±(99.9%) 114.930 MB/sec [Average]
[info]   (min, avg, max) = (3369.181, 3398.401, 3443.705), stdev = 29.847
[info]   CI (99.9%): [3283.471, 3513.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.005), stdev = 0.001
[info]   CI (99.9%): [56984.004, 56984.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.057, 0.088), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3403.698 ±(99.9%) 1.784 MB/sec [Average]
[info]   (min, avg, max) = (3403.216, 3403.698, 3404.384), stdev = 0.463
[info]   CI (99.9%): [3401.914, 3405.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57076.347 ±(99.9%) 1930.170 B/op [Average]
[info]   (min, avg, max) = (56314.027, 57076.347, 57561.457), stdev = 501.259
[info]   CI (99.9%): [55146.177, 59006.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:22:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266888.225 ops/s
[info] # Warmup Iteration   2: 318237.255 ops/s
[info] # Warmup Iteration   3: 330470.416 ops/s
[info] Iteration   1: 331749.922 ops/s
[info]                  ·gc.alloc.rate:            507.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1599.075 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 330776.163 ops/s
[info]                  ·gc.alloc.rate:            505.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3207.575 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 331730.065 ops/s
[info]                  ·gc.alloc.rate:            507.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1599.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 330634.058 ops/s
[info]                  ·gc.alloc.rate:            505.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3208.953 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 322634.086 ops/s
[info]                  ·gc.alloc.rate:            493.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1644.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   329504.859 ±(99.9%) 14924.745 ops/s [Average]
[info]   (min, avg, max) = (322634.086, 329504.859, 331749.922), stdev = 3875.909
[info]   CI (99.9%): [314580.114, 344429.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   504.090 ±(99.9%) 22.871 MB/sec [Average]
[info]   (min, avg, max) = (493.570, 504.090, 507.654), stdev = 5.940
[info]   CI (99.9%): [481.218, 526.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.833 ±(99.9%) 710.691 MB/sec [Average]
[info]   (min, avg, max) = (336.979, 471.833, 674.070), stdev = 184.564
[info]   CI (99.9%): [≈ 0, 1182.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2251.806 ±(99.9%) 3362.835 B/op [Average]
[info]   (min, avg, max) = (1599.075, 2251.806, 3208.953), stdev = 873.317
[info]   CI (99.9%): [≈ 0, 5614.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.13% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354893.179 ops/s
[info] # Warmup Iteration   2: 604771.768 ops/s
[info] # Warmup Iteration   3: 612930.009 ops/s
[info] Iteration   1: 610203.904 ops/s
[info]                  ·gc.alloc.rate:            452.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 865.931 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 609569.394 ops/s
[info]                  ·gc.alloc.rate:                   452.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1735.432 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 612790.274 ops/s
[info]                  ·gc.alloc.rate:            454.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 864.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 609927.699 ops/s
[info]                  ·gc.alloc.rate:            452.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 607582.781 ops/s
[info]                  ·gc.alloc.rate:            450.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1742.795 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   610014.810 ±(99.9%) 7167.710 ops/s [Average]
[info]   (min, avg, max) = (607582.781, 610014.810, 612790.274), stdev = 1861.432
[info]   CI (99.9%): [602847.100, 617182.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   452.753 ±(99.9%) 5.514 MB/sec [Average]
[info]   (min, avg, max) = (450.827, 452.753, 454.834), stdev = 1.432
[info]   CI (99.9%): [447.238, 458.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1168.001, 1168.001), stdev = 0.001
[info]   CI (99.9%): [1168.001, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.722 ±(99.9%) 709.030 MB/sec [Average]
[info]   (min, avg, max) = (335.793, 470.722, 672.687), stdev = 184.133
[info]   CI (99.9%): [≈ 0, 1179.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1215.244 ±(99.9%) 1841.512 B/op [Average]
[info]   (min, avg, max) = (864.011, 1215.244, 1742.795), stdev = 478.235
[info]   CI (99.9%): [≈ 0, 3056.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.344 ±(99.9%) 2.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.720), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.38% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2050478.113 ops/s
[info] # Warmup Iteration   2: 2326507.175 ops/s
[info] # Warmup Iteration   3: 2419723.310 ops/s
[info] Iteration   1: 2437981.409 ops/s
[info]                  ·gc.alloc.rate:            1127.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 652.351 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2412112.030 ops/s
[info]                  ·gc.alloc.rate:                   1115.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        877.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.608 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 2394307.755 ops/s
[info]                  ·gc.alloc.rate:                                  1107.731 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       671.268 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2413465.014 ops/s
[info]                  ·gc.alloc.rate:            1116.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.959 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 2401966.133 ops/s
[info]                  ·gc.alloc.rate:            1110.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 669.139 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2411966.468 ±(99.9%) 63590.468 ops/s [Average]
[info]   (min, avg, max) = (2394307.755, 2411966.468, 2437981.409), stdev = 16514.243
[info]   CI (99.9%): [2348376.000, 2475556.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1115.708 ±(99.9%) 29.056 MB/sec [Average]
[info]   (min, avg, max) = (1107.731, 1115.708, 1127.524), stdev = 7.546
[info]   CI (99.9%): [1086.652, 1144.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.990 ±(99.9%) 563.639 MB/sec [Average]
[info]   (min, avg, max) = (1010.358, 1083.990, 1345.697), stdev = 146.375
[info]   CI (99.9%): [520.351, 1647.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   707.339 ±(99.9%) 368.407 B/op [Average]
[info]   (min, avg, max) = (652.351, 707.339, 877.978), stdev = 95.674
[info]   CI (99.9%): [338.932, 1075.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.522 ±(99.9%) 4.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 2.608), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 74.63% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2273915.035 ops/s
[info] # Warmup Iteration   2: 2513130.801 ops/s
[info] # Warmup Iteration   3: 2374533.581 ops/s
[info] Iteration   1: 2487051.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2488372.500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2487961.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2486875.971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2488725.407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2487797.339 ±(99.9%) 3118.637 ops/s [Average]
[info]   (min, avg, max) = (2486875.971, 2487797.339, 2488725.407), stdev = 809.900
[info]   CI (99.9%): [2484678.701, 2490915.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.88% complete, ETA 00:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300127.001 ops/s
[info] # Warmup Iteration   2: 399846.489 ops/s
[info] # Warmup Iteration   3: 404609.624 ops/s
[info] Iteration   1: 404047.691 ops/s
[info]                  ·gc.alloc.rate:            581.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2620.681 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 403882.011 ops/s
[info]                  ·gc.alloc.rate:            580.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2621.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 402954.739 ops/s
[info]                  ·gc.alloc.rate:            579.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2627.769 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 405858.048 ops/s
[info]                  ·gc.alloc.rate:            583.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1304.501 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 403658.980 ops/s
[info]                  ·gc.alloc.rate:            580.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2623.226 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   404080.294 ±(99.9%) 4149.580 ops/s [Average]
[info]   (min, avg, max) = (402954.739, 404080.294, 405858.048), stdev = 1077.633
[info]   CI (99.9%): [399930.714, 408229.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   581.183 ±(99.9%) 6.000 MB/sec [Average]
[info]   (min, avg, max) = (579.535, 581.183, 583.750), stdev = 1.558
[info]   CI (99.9%): [575.183, 587.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.419 ±(99.9%) 579.185 MB/sec [Average]
[info]   (min, avg, max) = (336.353, 605.419, 672.765), stdev = 150.412
[info]   CI (99.9%): [26.234, 1184.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2359.579 ±(99.9%) 2271.159 B/op [Average]
[info]   (min, avg, max) = (1304.501, 2359.579, 2627.769), stdev = 589.813
[info]   CI (99.9%): [88.420, 4630.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 8.000), stdev = 2.236
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.12% complete, ETA 00:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28615.142 ops/s
[info] # Warmup Iteration   2: 38072.766 ops/s
[info] # Warmup Iteration   3: 37871.961 ops/s
[info] Iteration   1: 38067.937 ops/s
[info]                  ·gc.alloc.rate:            1283.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       53056.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55738.991 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 38093.717 ops/s
[info]                  ·gc.alloc.rate:                                  1284.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53056.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55979.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                137.608 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 38603.749 ops/s
[info]                  ·gc.alloc.rate:                                  1301.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53056.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41631.281 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 38531.820 ops/s
[info]                  ·gc.alloc.rate:                                  1298.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53056.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55613.517 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 37886.914 ops/s
[info]                  ·gc.alloc.rate:                                  1277.240 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53056.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56561.617 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   38236.827 ±(99.9%) 1207.126 ops/s [Average]
[info]   (min, avg, max) = (37886.914, 38236.827, 38603.749), stdev = 313.487
[info]   CI (99.9%): [37029.701, 39443.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1289.032 ±(99.9%) 40.361 MB/sec [Average]
[info]   (min, avg, max) = (1277.240, 1289.032, 1301.304), stdev = 10.482
[info]   CI (99.9%): [1248.671, 1329.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53056.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (53056.011, 53056.011, 53056.012), stdev = 0.001
[info]   CI (99.9%): [53056.009, 53056.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.842 ±(99.9%) 5.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.842, 3.282), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 6.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.522 ±(99.9%) 578.207 MB/sec [Average]
[info]   (min, avg, max) = (1021.090, 1289.522, 1361.631), stdev = 150.159
[info]   CI (99.9%): [711.314, 1867.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53104.900 ±(99.9%) 24737.610 B/op [Average]
[info]   (min, avg, max) = (41631.281, 53104.900, 56561.617), stdev = 6424.279
[info]   CI (99.9%): [28367.290, 77842.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.522 ±(99.9%) 236.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.522, 137.608), stdev = 61.540
[info]   CI (99.9%): [≈ 0, 264.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.37% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27365.243 ops/s
[info] # Warmup Iteration   2: 50801.127 ops/s
[info] # Warmup Iteration   3: 52201.473 ops/s
[info] Iteration   1: 52964.646 ops/s
[info]                  ·gc.alloc.rate:            954.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19992.105 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 52067.852 ops/s
[info]                  ·gc.alloc.rate:                   937.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30484.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 52217.146 ops/s
[info]                  ·gc.alloc.rate:                   940.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30417.076 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 120.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 53042.603 ops/s
[info]                  ·gc.alloc.rate:                                  955.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28352.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30299.267 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 53050.163 ops/s
[info]                  ·gc.alloc.rate:            955.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30294.699 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   52668.482 ±(99.9%) 1864.504 ops/s [Average]
[info]   (min, avg, max) = (52067.852, 52668.482, 53050.163), stdev = 484.206
[info]   CI (99.9%): [50803.978, 54532.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   948.688 ±(99.9%) 33.548 MB/sec [Average]
[info]   (min, avg, max) = (937.829, 948.688, 955.618), stdev = 8.712
[info]   CI (99.9%): [915.141, 982.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28352.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28352.008, 28352.008, 28352.008), stdev = 0.001
[info]   CI (99.9%): [28352.007, 28352.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.398 ±(99.9%) 3.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.398, 1.992), stdev = 0.891
[info]   CI (99.9%): [≈ 0, 3.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.457 ±(99.9%) 589.723 MB/sec [Average]
[info]   (min, avg, max) = (672.716, 946.457, 1021.097), stdev = 153.149
[info]   CI (99.9%): [356.734, 1536.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   28297.540 ±(99.9%) 17880.765 B/op [Average]
[info]   (min, avg, max) = (19992.105, 28297.540, 30484.553), stdev = 4643.578
[info]   CI (99.9%): [10416.774, 46178.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.120 ±(99.9%) 201.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.120, 120.464), stdev = 52.353
[info]   CI (99.9%): [≈ 0, 229.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 5.020
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.62% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65356.419 ops/s
[info] # Warmup Iteration   2: 72841.159 ops/s
[info] # Warmup Iteration   3: 73391.320 ops/s
[info] Iteration   1: 73285.946 ops/s
[info]                  ·gc.alloc.rate:            1123.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28954.648 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 73832.836 ops/s
[info]                  ·gc.alloc.rate:                   1131.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21555.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.998 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 74158.380 ops/s
[info]                  ·gc.alloc.rate:                                  1136.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24120.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.765 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21672.446 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 74101.337 ops/s
[info]                  ·gc.alloc.rate:                                  1135.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24120.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28918.429 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 73809.788 ops/s
[info]                  ·gc.alloc.rate:            1130.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       24120.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21774.905 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   73837.658 ±(99.9%) 1330.529 ops/s [Average]
[info]   (min, avg, max) = (73285.946, 73837.658, 74158.380), stdev = 345.534
[info]   CI (99.9%): [72507.129, 75168.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1131.543 ±(99.9%) 20.662 MB/sec [Average]
[info]   (min, avg, max) = (1123.097, 1131.543, 1136.830), stdev = 5.366
[info]   CI (99.9%): [1110.881, 1152.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24120.006, 24120.006, 24120.006), stdev = 0.001
[info]   CI (99.9%): [24120.005, 24120.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.568 ±(99.9%) 4.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.568, 2.765), stdev = 1.228
[info]   CI (99.9%): [≈ 0, 5.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.619 ±(99.9%) 711.060 MB/sec [Average]
[info]   (min, avg, max) = (1011.098, 1152.619, 1361.366), stdev = 184.660
[info]   CI (99.9%): [441.559, 1863.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24575.111 ±(99.9%) 15334.036 B/op [Average]
[info]   (min, avg, max) = (21555.127, 24575.111, 28954.648), stdev = 3982.200
[info]   CI (99.9%): [9241.075, 39909.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.200 ±(99.9%) 122.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.200, 70.998), stdev = 31.751
[info]   CI (99.9%): [≈ 0, 136.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 4.099
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.87% complete, ETA 00:20:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5724.429 ops/s
[info] # Warmup Iteration   2: 14342.495 ops/s
[info] # Warmup Iteration   3: 14592.359 ops/s
[info] Iteration   1: 14617.661 ops/s
[info]                  ·gc.alloc.rate:                   1107.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              119248.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        144725.147 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 71.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 14560.214 ops/s
[info]                  ·gc.alloc.rate:            1102.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       119248.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109004.673 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 14727.883 ops/s
[info]                  ·gc.alloc.rate:                                  1115.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119248.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.411 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108630.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                498.305 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 14801.223 ops/s
[info]                  ·gc.alloc.rate:                                  1121.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119248.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       144777.718 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 14810.904 ops/s
[info]                  ·gc.alloc.rate:            1122.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       119248.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108509.991 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   14703.577 ±(99.9%) 428.699 ops/s [Average]
[info]   (min, avg, max) = (14560.214, 14703.577, 14810.904), stdev = 111.332
[info]   CI (99.9%): [14274.878, 15132.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1113.848 ±(99.9%) 32.577 MB/sec [Average]
[info]   (min, avg, max) = (1102.968, 1113.848, 1122.047), stdev = 8.460
[info]   CI (99.9%): [1081.271, 1146.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119248.083 ±(99.9%) 0.457 B/op [Average]
[info]   (min, avg, max) = (119248.028, 119248.083, 119248.295), stdev = 0.119
[info]   CI (99.9%): [119247.625, 119248.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.576 ±(99.9%) 4.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.576, 2.411), stdev = 1.046
[info]   CI (99.9%): [≈ 0, 4.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.144 ±(99.9%) 712.115 MB/sec [Average]
[info]   (min, avg, max) = (1008.221, 1150.144, 1361.248), stdev = 184.934
[info]   CI (99.9%): [438.029, 1862.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   123129.602 ±(99.9%) 76007.060 B/op [Average]
[info]   (min, avg, max) = (108509.991, 123129.602, 144777.718), stdev = 19738.792
[info]   CI (99.9%): [47122.542, 199136.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   114.004 ±(99.9%) 835.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.004, 498.305), stdev = 217.063
[info]   CI (99.9%): [≈ 0, 949.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 17.000), stdev = 6.419
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.12% complete, ETA 00:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75807.570 ops/s
[info] # Warmup Iteration   2: 137213.890 ops/s
[info] # Warmup Iteration   3: 137742.252 ops/s
[info] Iteration   1: 139707.801 ops/s
[info]                  ·gc.alloc.rate:                   1287.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15136.284 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 140422.585 ops/s
[info]                  ·gc.alloc.rate:                                  1293.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.579 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15156.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                52.265 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 142025.882 ops/s
[info]                  ·gc.alloc.rate:                                  1308.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15089.018 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 142408.505 ops/s
[info]                  ·gc.alloc.rate:                                  1311.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15048.653 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 142362.055 ops/s
[info]                  ·gc.alloc.rate:                                  1311.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11289.978 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   141385.365 ±(99.9%) 4775.484 ops/s [Average]
[info]   (min, avg, max) = (139707.801, 141385.365, 142408.505), stdev = 1240.178
[info]   CI (99.9%): [136609.881, 146160.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1302.310 ±(99.9%) 43.609 MB/sec [Average]
[info]   (min, avg, max) = (1287.208, 1302.310, 1311.541), stdev = 11.325
[info]   CI (99.9%): [1258.701, 1345.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.003), stdev = 0.001
[info]   CI (99.9%): [14496.002, 14496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.141), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.354 ±(99.9%) 2.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.579), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 3.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.159 ±(99.9%) 574.748 MB/sec [Average]
[info]   (min, avg, max) = (1021.473, 1288.159, 1361.536), stdev = 149.260
[info]   CI (99.9%): [713.411, 1862.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14344.130 ±(99.9%) 6576.281 B/op [Average]
[info]   (min, avg, max) = (11289.978, 14344.130, 15156.717), stdev = 1707.839
[info]   CI (99.9%): [7767.848, 20920.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.954 ±(99.9%) 87.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.954, 52.265), stdev = 22.767
[info]   CI (99.9%): [≈ 0, 99.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 18.000), stdev = 6.943
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.37% complete, ETA 00:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413486.018 ops/s
[info] # Warmup Iteration   2: 466740.003 ops/s
[info] # Warmup Iteration   3: 468434.988 ops/s
[info] Iteration   1: 485308.052 ops/s
[info]                  ·gc.alloc.rate:            535.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2184.016 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 486818.289 ops/s
[info]                  ·gc.alloc.rate:            536.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1087.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 488807.912 ops/s
[info]                  ·gc.alloc.rate:            539.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2166.280 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 488716.179 ops/s
[info]                  ·gc.alloc.rate:            539.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1083.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 488145.703 ops/s
[info]                  ·gc.alloc.rate:                   538.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2171.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   487559.227 ±(99.9%) 5730.374 ops/s [Average]
[info]   (min, avg, max) = (485308.052, 487559.227, 488807.912), stdev = 1488.160
[info]   CI (99.9%): [481828.853, 493289.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537.716 ±(99.9%) 6.477 MB/sec [Average]
[info]   (min, avg, max) = (535.175, 537.716, 539.162), stdev = 1.682
[info]   CI (99.9%): [531.238, 544.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.430 ±(99.9%) 710.323 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 538.430, 673.355), stdev = 184.469
[info]   CI (99.9%): [≈ 0, 1248.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1738.511 ±(99.9%) 2295.745 B/op [Average]
[info]   (min, avg, max) = (1083.335, 1738.511, 2184.016), stdev = 596.198
[info]   CI (99.9%): [≈ 0, 4034.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.430 ±(99.9%) 3.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.430, 2.148), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.62% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520665.086 ops/s
[info] # Warmup Iteration   2: 580935.457 ops/s
[info] # Warmup Iteration   3: 588327.704 ops/s
[info] Iteration   1: 589385.814 ops/s
[info]                  ·gc.alloc.rate:      5.990 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 588569.907 ops/s
[info]                  ·gc.alloc.rate:      5.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 589227.027 ops/s
[info]                  ·gc.alloc.rate:      5.989 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 582160.948 ops/s
[info]                  ·gc.alloc.rate:      5.917 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 587224.957 ops/s
[info]                  ·gc.alloc.rate:      5.969 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   587313.731 ±(99.9%) 11566.565 ops/s [Average]
[info]   (min, avg, max) = (582160.948, 587313.731, 589385.814), stdev = 3003.800
[info]   CI (99.9%): [575747.165, 598880.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.970 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (5.917, 5.970, 5.990), stdev = 0.031
[info]   CI (99.9%): [5.852, 6.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.87% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32200.253 ops/s
[info] # Warmup Iteration   2: 60236.616 ops/s
[info] # Warmup Iteration   3: 60341.616 ops/s
[info] Iteration   1: 59220.398 ops/s
[info]                  ·gc.alloc.rate:            1062.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26784.884 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 60575.926 ops/s
[info]                  ·gc.alloc.rate:                   1086.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26168.536 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 61097.089 ops/s
[info]                  ·gc.alloc.rate:                                  1096.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28240.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.750 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26203.246 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                102.960 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 61258.826 ops/s
[info]                  ·gc.alloc.rate:                                  1099.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28240.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.967 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34982.199 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 60855.307 ops/s
[info]                  ·gc.alloc.rate:                                  1091.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28240.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26410.367 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   60601.509 ±(99.9%) 3134.316 ops/s [Average]
[info]   (min, avg, max) = (59220.398, 60601.509, 61258.826), stdev = 813.972
[info]   CI (99.9%): [57467.193, 63735.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1087.354 ±(99.9%) 56.410 MB/sec [Average]
[info]   (min, avg, max) = (1062.577, 1087.354, 1099.458), stdev = 14.650
[info]   CI (99.9%): [1030.944, 1143.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28240.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28240.007, 28240.007, 28240.007), stdev = 0.001
[info]   CI (99.9%): [28240.006, 28240.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.038), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.355 ±(99.9%) 1.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.355, 0.967), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.000 ±(99.9%) 600.910 MB/sec [Average]
[info]   (min, avg, max) = (1006.984, 1083.000, 1361.949), stdev = 156.055
[info]   CI (99.9%): [482.089, 1683.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28109.846 ±(99.9%) 14823.327 B/op [Average]
[info]   (min, avg, max) = (26168.536, 28109.846, 34982.199), stdev = 3849.571
[info]   CI (99.9%): [13286.519, 42933.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   24.053 ±(99.9%) 172.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.053, 102.960), stdev = 44.742
[info]   CI (99.9%): [≈ 0, 196.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 5.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.11% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1108138.583 ops/s
[info] # Warmup Iteration   2: 2017770.492 ops/s
[info] # Warmup Iteration   3: 2030738.414 ops/s
[info] Iteration   1: 2046594.858 ops/s
[info]                  ·gc.alloc.rate:                                  2912.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2355.900 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 2049892.095 ops/s
[info]                  ·gc.alloc.rate:                                  2917.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2351.760 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2039361.841 ops/s
[info]                  ·gc.alloc.rate:                                  2902.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2101.541 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 1997057.755 ops/s
[info]                  ·gc.alloc.rate:            2843.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       2240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2146.093 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2041201.821 ops/s
[info]                  ·gc.alloc.rate:                                  2906.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2362.086 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2034821.674 ±(99.9%) 82881.889 ops/s [Average]
[info]   (min, avg, max) = (1997057.755, 2034821.674, 2049892.095), stdev = 21524.163
[info]   CI (99.9%): [1951939.785, 2117703.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2896.377 ±(99.9%) 116.941 MB/sec [Average]
[info]   (min, avg, max) = (2843.015, 2896.377, 2917.364), stdev = 30.369
[info]   CI (99.9%): [2779.435, 3013.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2240.000, 2240.000, 2240.000), stdev = 0.001
[info]   CI (99.9%): [2240.000, 2240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2927.584 ±(99.9%) 717.159 MB/sec [Average]
[info]   (min, avg, max) = (2723.303, 2927.584, 3064.434), stdev = 186.244
[info]   CI (99.9%): [2210.426, 3644.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2263.476 ±(99.9%) 494.856 B/op [Average]
[info]   (min, avg, max) = (2101.541, 2263.476, 2362.086), stdev = 128.512
[info]   CI (99.9%): [1768.620, 2758.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 10.000), stdev = 1.517
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.36% complete, ETA 00:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.902 ops/s
[info] # Warmup Iteration   2: 881432.523 ops/s
[info] # Warmup Iteration   3: 890315.748 ops/s
[info] Iteration   1: 874742.995 ops/s
[info]                  ·gc.alloc.rate:            520.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 600.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 904147.847 ops/s
[info]                  ·gc.alloc.rate:            537.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1161.933 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 875549.395 ops/s
[info]                  ·gc.alloc.rate:            520.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 599.941 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 880936.369 ops/s
[info]                  ·gc.alloc.rate:            523.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1192.544 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 881957.330 ops/s
[info]                  ·gc.alloc.rate:            524.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1191.172 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   883466.787 ±(99.9%) 46174.718 ops/s [Average]
[info]   (min, avg, max) = (874742.995, 883466.787, 904147.847), stdev = 11991.428
[info]   CI (99.9%): [837292.069, 929641.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   525.356 ±(99.9%) 27.405 MB/sec [Average]
[info]   (min, avg, max) = (520.145, 525.356, 537.615), stdev = 7.117
[info]   CI (99.9%): [497.951, 552.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.000), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.951 ±(99.9%) 703.892 MB/sec [Average]
[info]   (min, avg, max) = (333.700, 533.951, 667.507), stdev = 182.798
[info]   CI (99.9%): [≈ 0, 1237.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   949.216 ±(99.9%) 1227.687 B/op [Average]
[info]   (min, avg, max) = (599.941, 949.216, 1192.544), stdev = 318.826
[info]   CI (99.9%): [≈ 0, 2176.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 77.61% complete, ETA 00:19:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32659.205 ops/s
[info] # Warmup Iteration   2: 295539.283 ops/s
[info] # Warmup Iteration   3: 301822.447 ops/s
[info] Iteration   1: 303596.502 ops/s
[info]                  ·gc.alloc.rate:                   584.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3484.433 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 304602.851 ops/s
[info]                  ·gc.alloc.rate:                   586.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3472.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.442 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 306394.858 ops/s
[info]                  ·gc.alloc.rate:            590.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1727.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 306727.715 ops/s
[info]                  ·gc.alloc.rate:            590.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3452.130 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 305081.547 ops/s
[info]                  ·gc.alloc.rate:                   587.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3467.338 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   305280.695 ±(99.9%) 4972.724 ops/s [Average]
[info]   (min, avg, max) = (303596.502, 305280.695, 306727.715), stdev = 1291.401
[info]   CI (99.9%): [300307.970, 310253.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   588.057 ±(99.9%) 9.648 MB/sec [Average]
[info]   (min, avg, max) = (584.721, 588.057, 590.874), stdev = 2.506
[info]   CI (99.9%): [578.408, 597.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3032.001, 3032.001, 3032.001), stdev = 0.001
[info]   CI (99.9%): [3032.001, 3032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.058 ±(99.9%) 578.472 MB/sec [Average]
[info]   (min, avg, max) = (336.324, 605.058, 672.748), stdev = 150.227
[info]   CI (99.9%): [26.586, 1183.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3120.934 ±(99.9%) 2998.894 B/op [Average]
[info]   (min, avg, max) = (1727.924, 3120.934, 3484.433), stdev = 778.803
[info]   CI (99.9%): [122.040, 6119.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.066 ±(99.9%) 7.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.066, 3.453), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 9.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 77.86% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 708749.705 ops/s
[info] # Warmup Iteration   2: 726326.728 ops/s
[info] # Warmup Iteration   3: 768835.507 ops/s
[info] Iteration   1: 758400.049 ops/s
[info]                  ·gc.alloc.rate:            570.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1399.045 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 756610.605 ops/s
[info]                  ·gc.alloc.rate:            569.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1402.358 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 748489.991 ops/s
[info]                  ·gc.alloc.rate:            563.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1417.578 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 750850.637 ops/s
[info]                  ·gc.alloc.rate:                   564.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        706.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.396 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 745913.527 ops/s
[info]                  ·gc.alloc.rate:            561.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1423.871 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   752052.962 ±(99.9%) 20456.547 ops/s [Average]
[info]   (min, avg, max) = (745913.527, 752052.962, 758400.049), stdev = 5312.500
[info]   CI (99.9%): [731596.415, 772509.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   565.699 ±(99.9%) 15.356 MB/sec [Average]
[info]   (min, avg, max) = (561.068, 565.699, 570.437), stdev = 3.988
[info]   CI (99.9%): [550.343, 581.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.810 ±(99.9%) 580.711 MB/sec [Average]
[info]   (min, avg, max) = (337.035, 606.810, 674.737), stdev = 150.809
[info]   CI (99.9%): [26.099, 1187.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1269.879 ±(99.9%) 1213.277 B/op [Average]
[info]   (min, avg, max) = (706.541, 1269.879, 1423.871), stdev = 315.084
[info]   CI (99.9%): [56.602, 2483.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.396), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.11% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3791119.811 ops/s
[info] # Warmup Iteration   2: 4256979.463 ops/s
[info] # Warmup Iteration   3: 4331606.157 ops/s
[info] Iteration   1: 4326037.351 ops/s
[info]                  ·gc.alloc.rate:            1385.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 490.499 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4224214.490 ops/s
[info]                  ·gc.alloc.rate:                                  1353.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       506.060 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.241 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4284677.141 ops/s
[info]                  ·gc.alloc.rate:                                  1371.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       500.156 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4284388.481 ops/s
[info]                  ·gc.alloc.rate:                                  1372.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       500.177 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4276576.502 ops/s
[info]                  ·gc.alloc.rate:                                  1369.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       626.345 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4279178.793 ±(99.9%) 139913.343 ops/s [Average]
[info]   (min, avg, max) = (4224214.490, 4279178.793, 4326037.351), stdev = 36335.051
[info]   CI (99.9%): [4139265.451, 4419092.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1370.335 ±(99.9%) 44.152 MB/sec [Average]
[info]   (min, avg, max) = (1353.049, 1370.335, 1385.160), stdev = 11.466
[info]   CI (99.9%): [1326.183, 1414.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1426.324 ±(99.9%) 593.138 MB/sec [Average]
[info]   (min, avg, max) = (1348.055, 1426.324, 1701.691), stdev = 154.036
[info]   CI (99.9%): [833.186, 2019.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   524.647 ±(99.9%) 219.965 B/op [Average]
[info]   (min, avg, max) = (490.499, 524.647, 626.345), stdev = 57.124
[info]   CI (99.9%): [304.682, 744.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 2.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 1.241), stdev = 0.555
[info]   CI (99.9%): [≈ 0, 2.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.36% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7287279.277 ops/s
[info] # Warmup Iteration   2: 7782422.084 ops/s
[info] # Warmup Iteration   3: 7928476.088 ops/s
[info] Iteration   1: 8064746.450 ops/s
[info]                  ·gc.alloc.rate:            655.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.556 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7797419.475 ops/s
[info]                  ·gc.alloc.rate:            633.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.069 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7701604.474 ops/s
[info]                  ·gc.alloc.rate:            626.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.757 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7608802.789 ops/s
[info]                  ·gc.alloc.rate:            618.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 7629760.037 ops/s
[info]                  ·gc.alloc.rate:            620.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.527 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7760466.645 ±(99.9%) 713935.265 ops/s [Average]
[info]   (min, avg, max) = (7608802.789, 7760466.645, 8064746.450), stdev = 185406.721
[info]   CI (99.9%): [7046531.380, 8474401.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   631.088 ±(99.9%) 58.284 MB/sec [Average]
[info]   (min, avg, max) = (618.775, 631.088, 655.972), stdev = 15.136
[info]   CI (99.9%): [572.804, 689.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   606.648 ±(99.9%) 580.482 MB/sec [Average]
[info]   (min, avg, max) = (336.979, 606.648, 674.195), stdev = 150.749
[info]   CI (99.9%): [26.166, 1187.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   122.868 ±(99.9%) 115.376 B/op [Average]
[info]   (min, avg, max) = (69.527, 122.868, 139.433), stdev = 29.963
[info]   CI (99.9%): [7.493, 238.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.61% complete, ETA 00:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19561.894 ops/s
[info] # Warmup Iteration   2: 174136.719 ops/s
[info] # Warmup Iteration   3: 185759.087 ops/s
[info] Iteration   1: 191725.818 ops/s
[info]                  ·gc.alloc.rate:            1302.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11035.397 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 186192.267 ops/s
[info]                  ·gc.alloc.rate:                   1265.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11363.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.047 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 191667.137 ops/s
[info]                  ·gc.alloc.rate:                                  1302.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.411 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11180.551 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 192787.786 ops/s
[info]                  ·gc.alloc.rate:                                  1310.196 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11115.262 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 192611.241 ops/s
[info]                  ·gc.alloc.rate:            1308.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8344.063 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   190996.850 ±(99.9%) 10524.030 ops/s [Average]
[info]   (min, avg, max) = (186192.267, 190996.850, 192787.786), stdev = 2733.057
[info]   CI (99.9%): [180472.820, 201520.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1297.986 ±(99.9%) 72.001 MB/sec [Average]
[info]   (min, avg, max) = (1265.088, 1297.986, 1310.196), stdev = 18.698
[info]   CI (99.9%): [1225.985, 1369.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10696.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10696.002, 10696.002, 10696.002), stdev = 0.001
[info]   CI (99.9%): [10696.002, 10696.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.284 ±(99.9%) 2.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.411), stdev = 0.630
[info]   CI (99.9%): [≈ 0, 2.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1286.546 ±(99.9%) 572.392 MB/sec [Average]
[info]   (min, avg, max) = (1021.102, 1286.546, 1361.869), stdev = 148.648
[info]   CI (99.9%): [714.154, 1858.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10607.664 ±(99.9%) 4894.751 B/op [Average]
[info]   (min, avg, max) = (8344.063, 10607.664, 11363.046), stdev = 1271.151
[info]   CI (99.9%): [5712.912, 15502.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.009 ±(99.9%) 77.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.009, 45.047), stdev = 20.146
[info]   CI (99.9%): [≈ 0, 86.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 18.000), stdev = 8.106
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 78.86% complete, ETA 00:18:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 657878.118 ops/s
[info] # Warmup Iteration   2: 723235.523 ops/s
[info] # Warmup Iteration   3: 726729.923 ops/s
[info] Iteration   1: 727532.744 ops/s
[info]                  ·gc.alloc.rate:      70.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 719392.477 ops/s
[info]                  ·gc.alloc.rate:            69.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 746.159 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 726905.139 ops/s
[info]                  ·gc.alloc.rate:      70.214 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 727969.396 ops/s
[info]                  ·gc.alloc.rate:      70.306 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 727929.105 ops/s
[info]                  ·gc.alloc.rate:      70.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   725945.772 ±(99.9%) 14202.197 ops/s [Average]
[info]   (min, avg, max) = (719392.477, 725945.772, 727969.396), stdev = 3688.265
[info]   CI (99.9%): [711743.575, 740147.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   70.109 ±(99.9%) 1.357 MB/sec [Average]
[info]   (min, avg, max) = (69.482, 70.109, 70.306), stdev = 0.352
[info]   CI (99.9%): [68.752, 71.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.001, 152.001, 152.001), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   68.216 ±(99.9%) 587.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 68.216, 341.082), stdev = 152.536
[info]   CI (99.9%): [≈ 0, 655.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   149.232 ±(99.9%) 1284.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 149.232, 746.159), stdev = 333.692
[info]   CI (99.9%): [≈ 0, 1434.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.10% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23707.071 ops/s
[info] # Warmup Iteration   2: 56495.947 ops/s
[info] # Warmup Iteration   3: 57799.680 ops/s
[info] Iteration   1: 59380.806 ops/s
[info]                  ·gc.alloc.rate:                                  2758.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72175.560 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 58723.255 ops/s
[info]                  ·gc.alloc.rate:                                  2727.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72984.160 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 59090.409 ops/s
[info]                  ·gc.alloc.rate:                                  2744.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72529.715 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 59150.129 ops/s
[info]                  ·gc.alloc.rate:                                  2747.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72457.381 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 58991.479 ops/s
[info]                  ·gc.alloc.rate:                                  2740.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72652.645 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   59067.215 ±(99.9%) 922.943 ops/s [Average]
[info]   (min, avg, max) = (58723.255, 59067.215, 59380.806), stdev = 239.685
[info]   CI (99.9%): [58144.272, 59990.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2743.824 ±(99.9%) 43.007 MB/sec [Average]
[info]   (min, avg, max) = (2727.704, 2743.824, 2758.389), stdev = 11.169
[info]   CI (99.9%): [2700.817, 2786.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.007, 73120.007, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.006, 73120.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.135, 0.241), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2722.770 ±(99.9%) 0.443 MB/sec [Average]
[info]   (min, avg, max) = (2722.636, 2722.770, 2722.927), stdev = 0.115
[info]   CI (99.9%): [2722.327, 2723.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72559.892 ±(99.9%) 1135.347 B/op [Average]
[info]   (min, avg, max) = (72175.560, 72559.892, 72984.160), stdev = 294.846
[info]   CI (99.9%): [71424.545, 73695.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 12.000), stdev = 2.387
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.35% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 640715.729 ops/s
[info] # Warmup Iteration   2: 973930.638 ops/s
[info] # Warmup Iteration   3: 978324.219 ops/s
[info] Iteration   1: 979929.719 ops/s
[info]                  ·gc.alloc.rate:            562.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1080.577 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 985734.081 ops/s
[info]                  ·gc.alloc.rate:            566.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 537.119 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1010974.328 ops/s
[info]                  ·gc.alloc.rate:            580.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1047.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1013872.260 ops/s
[info]                  ·gc.alloc.rate:                   582.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1043.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1013720.701 ops/s
[info]                  ·gc.alloc.rate:            582.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1044.589 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1000846.218 ±(99.9%) 63968.378 ops/s [Average]
[info]   (min, avg, max) = (979929.719, 1000846.218, 1013872.260), stdev = 16612.385
[info]   CI (99.9%): [936877.840, 1064814.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   574.844 ±(99.9%) 37.152 MB/sec [Average]
[info]   (min, avg, max) = (562.686, 574.844, 582.465), stdev = 9.648
[info]   CI (99.9%): [537.691, 611.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.365 ±(99.9%) 579.081 MB/sec [Average]
[info]   (min, avg, max) = (336.348, 605.365, 672.946), stdev = 150.385
[info]   CI (99.9%): [26.284, 1184.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   950.603 ±(99.9%) 892.037 B/op [Average]
[info]   (min, avg, max) = (537.119, 950.603, 1080.577), stdev = 231.659
[info]   CI (99.9%): [58.567, 1842.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.207 ±(99.9%) 1.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 1.034), stdev = 0.462
[info]   CI (99.9%): [≈ 0, 1.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.60% complete, ETA 00:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 680075.954 ops/s
[info] # Warmup Iteration   2: 700384.699 ops/s
[info] # Warmup Iteration   3: 721110.171 ops/s
[info] Iteration   1: 713686.389 ops/s
[info]                  ·gc.alloc.rate:            199.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 743.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 713451.788 ops/s
[info]                  ·gc.alloc.rate:      199.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 694471.451 ops/s
[info]                  ·gc.alloc.rate:                   194.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        762.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.510 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 698025.046 ops/s
[info]                  ·gc.alloc.rate:            195.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 759.995 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 718554.256 ops/s
[info]                  ·gc.alloc.rate:      200.945 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   707637.786 ±(99.9%) 41082.720 ops/s [Average]
[info]   (min, avg, max) = (694471.451, 707637.786, 718554.256), stdev = 10669.052
[info]   CI (99.9%): [666555.066, 748720.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   197.856 ±(99.9%) 11.531 MB/sec [Average]
[info]   (min, avg, max) = (194.193, 197.856, 200.945), stdev = 2.995
[info]   CI (99.9%): [186.325, 209.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.128 ±(99.9%) 710.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.128, 337.143), stdev = 184.517
[info]   CI (99.9%): [≈ 0, 912.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   453.136 ±(99.9%) 1593.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 453.136, 762.349), stdev = 413.720
[info]   CI (99.9%): [≈ 0, 2046.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.302 ±(99.9%) 2.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 1.510), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 79.85% complete, ETA 00:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 885372.886 ops/s
[info] # Warmup Iteration   2: 952644.886 ops/s
[info] # Warmup Iteration   3: 951485.966 ops/s
[info] Iteration   1: 952570.266 ops/s
[info]                  ·gc.alloc.rate:      9.682 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 952104.524 ops/s
[info]                  ·gc.alloc.rate:      9.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 952357.373 ops/s
[info]                  ·gc.alloc.rate:      9.680 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 953327.436 ops/s
[info]                  ·gc.alloc.rate:      9.690 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 953178.290 ops/s
[info]                  ·gc.alloc.rate:      9.688 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   952707.578 ±(99.9%) 2029.335 ops/s [Average]
[info]   (min, avg, max) = (952104.524, 952707.578, 953327.436), stdev = 527.012
[info]   CI (99.9%): [950678.243, 954736.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.684 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (9.679, 9.684, 9.690), stdev = 0.005
[info]   CI (99.9%): [9.665, 9.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.10% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18935.398 ops/s
[info] # Warmup Iteration   2: 38931.107 ops/s
[info] # Warmup Iteration   3: 38970.464 ops/s
[info] Iteration   1: 38363.320 ops/s
[info]                  ·gc.alloc.rate:                   1609.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              66058.712 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        55336.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 191.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 39535.812 ops/s
[info]                  ·gc.alloc.rate:                                  1659.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.744 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67751.857 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 38612.265 ops/s
[info]                  ·gc.alloc.rate:                                  1621.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69371.095 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 39613.923 ops/s
[info]                  ·gc.alloc.rate:            1662.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67620.184 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 38788.701 ops/s
[info]                  ·gc.alloc.rate:                                  1628.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69058.169 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   38982.804 ±(99.9%) 2163.623 ops/s [Average]
[info]   (min, avg, max) = (38363.320, 38982.804, 39613.923), stdev = 561.886
[info]   CI (99.9%): [36819.181, 41146.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1636.419 ±(99.9%) 91.004 MB/sec [Average]
[info]   (min, avg, max) = (1609.916, 1636.419, 1662.863), stdev = 23.633
[info]   CI (99.9%): [1545.414, 1727.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66062.951 ±(99.9%) 9.124 B/op [Average]
[info]   (min, avg, max) = (66058.712, 66062.951, 66064.011), stdev = 2.370
[info]   CI (99.9%): [66053.827, 66072.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 1.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.744), stdev = 0.329
[info]   CI (99.9%): [≈ 0, 1.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.462 ±(99.9%) 608.879 MB/sec [Average]
[info]   (min, avg, max) = (1348.602, 1631.462, 1702.345), stdev = 158.124
[info]   CI (99.9%): [1022.583, 2240.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65827.531 ±(99.9%) 22778.715 B/op [Average]
[info]   (min, avg, max) = (55336.349, 65827.531, 69371.095), stdev = 5915.560
[info]   CI (99.9%): [43048.816, 88606.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.257 ±(99.9%) 329.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.257, 191.286), stdev = 85.546
[info]   CI (99.9%): [≈ 0, 367.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.278
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.35% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195052.535 ops/s
[info] # Warmup Iteration   2: 221347.754 ops/s
[info] # Warmup Iteration   3: 222128.973 ops/s
[info] Iteration   1: 225221.273 ops/s
[info]                  ·gc.alloc.rate:            881.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7066.196 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 225525.767 ops/s
[info]                  ·gc.alloc.rate:            882.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4704.657 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 224216.631 ops/s
[info]                  ·gc.alloc.rate:            877.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7098.085 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 221528.253 ops/s
[info]                  ·gc.alloc.rate:                                  867.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6160.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4813.021 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.663 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 225522.741 ops/s
[info]                  ·gc.alloc.rate:                                  882.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6160.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.371 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7126.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   224402.933 ±(99.9%) 6524.227 ops/s [Average]
[info]   (min, avg, max) = (221528.253, 224402.933, 225525.767), stdev = 1694.321
[info]   CI (99.9%): [217878.706, 230927.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   878.192 ±(99.9%) 25.425 MB/sec [Average]
[info]   (min, avg, max) = (867.014, 878.192, 882.581), stdev = 6.603
[info]   CI (99.9%): [852.766, 903.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.002, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.100 ±(99.9%) 0.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.371), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.922 ±(99.9%) 714.393 MB/sec [Average]
[info]   (min, avg, max) = (674.058, 878.922, 1021.057), stdev = 185.526
[info]   CI (99.9%): [164.529, 1593.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6161.691 ±(99.9%) 4934.113 B/op [Average]
[info]   (min, avg, max) = (4704.657, 6161.691, 7126.497), stdev = 1281.374
[info]   CI (99.9%): [1227.578, 11095.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.733 ±(99.9%) 40.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.733, 23.663), stdev = 10.582
[info]   CI (99.9%): [≈ 0, 45.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 9.000), stdev = 2.775
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.60% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9131.243 ops/s
[info] # Warmup Iteration   2: 22229.681 ops/s
[info] # Warmup Iteration   3: 23142.438 ops/s
[info] Iteration   1: 23206.867 ops/s
[info]                  ·gc.alloc.rate:                   1285.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68393.248 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 23115.685 ops/s
[info]                  ·gc.alloc.rate:                   1280.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        91795.754 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 317.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 23379.003 ops/s
[info]                  ·gc.alloc.rate:                                  1295.176 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87200.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91664.073 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 23309.695 ops/s
[info]                  ·gc.alloc.rate:            1291.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91931.429 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 23330.590 ops/s
[info]                  ·gc.alloc.rate:            1292.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91844.761 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   23268.368 ±(99.9%) 408.033 ops/s [Average]
[info]   (min, avg, max) = (23115.685, 23268.368, 23379.003), stdev = 105.965
[info]   CI (99.9%): [22860.335, 23676.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1289.180 ±(99.9%) 22.413 MB/sec [Average]
[info]   (min, avg, max) = (1280.951, 1289.180, 1295.176), stdev = 5.821
[info]   CI (99.9%): [1266.768, 1311.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87200.019 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (87200.018, 87200.019, 87200.022), stdev = 0.002
[info]   CI (99.9%): [87200.012, 87200.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.852 ±(99.9%) 7.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 4.258), stdev = 1.904
[info]   CI (99.9%): [≈ 0, 8.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.282 ±(99.9%) 603.242 MB/sec [Average]
[info]   (min, avg, max) = (1008.225, 1288.282, 1361.821), stdev = 156.660
[info]   CI (99.9%): [685.041, 1891.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   87125.853 ±(99.9%) 40325.066 B/op [Average]
[info]   (min, avg, max) = (68393.248, 87125.853, 91931.429), stdev = 10472.292
[info]   CI (99.9%): [46800.787, 127450.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   72.530 ±(99.9%) 532.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.530, 317.475), stdev = 138.319
[info]   CI (99.9%): [≈ 0, 605.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 16.000), stdev = 6.221
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.85% complete, ETA 00:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62417.548 ops/s
[info] # Warmup Iteration   2: 125742.851 ops/s
[info] # Warmup Iteration   3: 125010.302 ops/s
[info] Iteration   1: 126136.710 ops/s
[info]                  ·gc.alloc.rate:                   1541.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21028.705 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.182 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 130832.884 ops/s
[info]                  ·gc.alloc.rate:                                  1598.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.691 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16379.367 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 129936.227 ops/s
[info]                  ·gc.alloc.rate:            1587.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       19232.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20614.577 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 128721.346 ops/s
[info]                  ·gc.alloc.rate:                                  1572.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20809.443 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 130413.586 ops/s
[info]                  ·gc.alloc.rate:                                  1593.879 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16430.598 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   129208.150 ±(99.9%) 7279.055 ops/s [Average]
[info]   (min, avg, max) = (126136.710, 129208.150, 130832.884), stdev = 1890.347
[info]   CI (99.9%): [121929.095, 136487.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1578.735 ±(99.9%) 89.523 MB/sec [Average]
[info]   (min, avg, max) = (1541.008, 1578.735, 1598.647), stdev = 23.249
[info]   CI (99.9%): [1489.213, 1668.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19232.003, 19232.003, 19232.003), stdev = 0.001
[info]   CI (99.9%): [19232.003, 19232.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.141), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.348 ±(99.9%) 2.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.691), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1562.293 ±(99.9%) 705.892 MB/sec [Average]
[info]   (min, avg, max) = (1361.524, 1562.293, 1701.675), stdev = 183.318
[info]   CI (99.9%): [856.401, 2268.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19052.538 ±(99.9%) 9323.873 B/op [Average]
[info]   (min, avg, max) = (16379.367, 19052.538, 21028.705), stdev = 2421.380
[info]   CI (99.9%): [9728.665, 28376.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.636 ±(99.9%) 100.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.636, 58.182), stdev = 26.020
[info]   CI (99.9%): [≈ 0, 111.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 19.000), stdev = 6.611
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.09% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293477.285 ops/s
[info] # Warmup Iteration   2: 332033.921 ops/s
[info] # Warmup Iteration   3: 337538.889 ops/s
[info] Iteration   1: 337518.415 ops/s
[info]                  ·gc.alloc.rate:                                  1607.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7886.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.637 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 341312.426 ops/s
[info]                  ·gc.alloc.rate:                                  1625.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7848.554 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 338643.615 ops/s
[info]                  ·gc.alloc.rate:            1613.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7910.311 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 343003.932 ops/s
[info]                  ·gc.alloc.rate:                                  1633.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6247.382 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 340925.311 ops/s
[info]                  ·gc.alloc.rate:                                  1624.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7857.047 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   340280.740 ±(99.9%) 8437.709 ops/s [Average]
[info]   (min, avg, max) = (337518.415, 340280.740, 343003.932), stdev = 2191.246
[info]   CI (99.9%): [331843.030, 348718.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1620.792 ±(99.9%) 39.768 MB/sec [Average]
[info]   (min, avg, max) = (1607.568, 1620.792, 1633.463), stdev = 10.328
[info]   CI (99.9%): [1581.024, 1660.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.121 ±(99.9%) 0.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.535), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.892 ±(99.9%) 582.594 MB/sec [Average]
[info]   (min, avg, max) = (1361.375, 1631.892, 1702.396), stdev = 151.298
[info]   CI (99.9%): [1049.297, 2214.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7549.955 ±(99.9%) 2805.473 B/op [Average]
[info]   (min, avg, max) = (6247.382, 7549.955, 7910.311), stdev = 728.572
[info]   CI (99.9%): [4744.483, 10355.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.727 ±(99.9%) 32.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.727, 18.637), stdev = 8.335
[info]   CI (99.9%): [≈ 0, 35.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.34% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333642.390 ops/s
[info] # Warmup Iteration   2: 395735.949 ops/s
[info] # Warmup Iteration   3: 385027.348 ops/s
[info] Iteration   1: 386214.480 ops/s
[info]                  ·gc.alloc.rate:                   1323.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5491.504 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.715 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 389591.457 ops/s
[info]                  ·gc.alloc.rate:                                  1334.928 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.347 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5484.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.147 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 397112.304 ops/s
[info]                  ·gc.alloc.rate:                                  1360.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5396.186 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 400163.475 ops/s
[info]                  ·gc.alloc.rate:                                  1371.412 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5355.184 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 401115.270 ops/s
[info]                  ·gc.alloc.rate:            1374.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5342.357 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   394839.397 ±(99.9%) 25457.136 ops/s [Average]
[info]   (min, avg, max) = (386214.480, 394839.397, 401115.270), stdev = 6611.137
[info]   CI (99.9%): [369382.261, 420296.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1352.854 ±(99.9%) 87.571 MB/sec [Average]
[info]   (min, avg, max) = (1323.164, 1352.854, 1374.432), stdev = 22.742
[info]   CI (99.9%): [1265.282, 1440.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.347), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1358.125 ±(99.9%) 23.631 MB/sec [Average]
[info]   (min, avg, max) = (1347.581, 1358.125, 1362.048), stdev = 6.137
[info]   CI (99.9%): [1334.494, 1381.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   5413.947 ±(99.9%) 271.511 B/op [Average]
[info]   (min, avg, max) = (5342.357, 5413.947, 5491.504), stdev = 70.510
[info]   CI (99.9%): [5142.436, 5685.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   3.772 ±(99.9%) 27.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.772, 16.147), stdev = 7.017
[info]   CI (99.9%): [≈ 0, 30.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.336
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.59% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22035.329 ops/s
[info] # Warmup Iteration   2: 48374.318 ops/s
[info] # Warmup Iteration   3: 48644.594 ops/s
[info] Iteration   1: 48641.662 ops/s
[info]                  ·gc.alloc.rate:                   1185.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              38368.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43517.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 49590.354 ops/s
[info]                  ·gc.alloc.rate:                   1208.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              38368.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32028.723 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 126.846 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 50583.011 ops/s
[info]                  ·gc.alloc.rate:                                  1232.969 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38368.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.950 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42365.032 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 50667.817 ops/s
[info]                  ·gc.alloc.rate:                                  1235.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38368.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42294.807 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 50524.813 ops/s
[info]                  ·gc.alloc.rate:                                  1231.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38368.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31808.984 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   50001.531 ±(99.9%) 3375.738 ops/s [Average]
[info]   (min, avg, max) = (48641.662, 50001.531, 50667.817), stdev = 876.668
[info]   CI (99.9%): [46625.793, 53377.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1218.759 ±(99.9%) 82.403 MB/sec [Average]
[info]   (min, avg, max) = (1185.637, 1218.759, 1235.114), stdev = 21.400
[info]   CI (99.9%): [1136.356, 1301.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38368.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38368.008, 38368.008, 38368.009), stdev = 0.001
[info]   CI (99.9%): [38368.007, 38368.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.822 ±(99.9%) 6.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.822, 3.950), stdev = 1.749
[info]   CI (99.9%): [≈ 0, 7.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.513 ±(99.9%) 719.792 MB/sec [Average]
[info]   (min, avg, max) = (1008.904, 1219.513, 1361.523), stdev = 186.928
[info]   CI (99.9%): [499.721, 1939.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   38402.977 ±(99.9%) 22871.071 B/op [Average]
[info]   (min, avg, max) = (31808.984, 38402.977, 43517.337), stdev = 5939.545
[info]   CI (99.9%): [15531.905, 61274.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   29.680 ±(99.9%) 212.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.680, 126.846), stdev = 55.114
[info]   CI (99.9%): [≈ 0, 241.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 16.000), stdev = 6.442
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.84% complete, ETA 00:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47387.005 ops/s
[info] # Warmup Iteration   2: 59014.558 ops/s
[info] # Warmup Iteration   3: 59266.246 ops/s
[info] Iteration   1: 57806.849 ops/s
[info]                  ·gc.alloc.rate:            1300.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       35416.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36708.140 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 59531.114 ops/s
[info]                  ·gc.alloc.rate:                                  1339.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35416.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26909.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.055 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 59941.828 ops/s
[info]                  ·gc.alloc.rate:                                  1348.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35416.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35749.493 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 60038.846 ops/s
[info]                  ·gc.alloc.rate:                                  1351.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35416.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35692.340 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 59896.449 ops/s
[info]                  ·gc.alloc.rate:                                  1347.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35416.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35775.749 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   59443.017 ±(99.9%) 3598.979 ops/s [Average]
[info]   (min, avg, max) = (57806.849, 59443.017, 60038.846), stdev = 934.643
[info]   CI (99.9%): [55844.038, 63041.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1337.648 ±(99.9%) 80.866 MB/sec [Average]
[info]   (min, avg, max) = (1300.934, 1337.648, 1351.494), stdev = 21.001
[info]   CI (99.9%): [1256.782, 1418.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35416.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35416.007, 35416.007, 35416.007), stdev = 0.001
[info]   CI (99.9%): [35416.006, 35416.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.112), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.680 ±(99.9%) 4.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.680, 2.963), stdev = 1.279
[info]   CI (99.9%): [≈ 0, 5.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1290.180 ±(99.9%) 586.770 MB/sec [Average]
[info]   (min, avg, max) = (1017.782, 1290.180, 1362.039), stdev = 152.382
[info]   CI (99.9%): [703.411, 1876.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34167.063 ±(99.9%) 15705.997 B/op [Average]
[info]   (min, avg, max) = (26909.594, 34167.063, 36708.140), stdev = 4078.798
[info]   CI (99.9%): [18461.066, 49873.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.611 ±(99.9%) 151.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.611, 88.055), stdev = 39.379
[info]   CI (99.9%): [≈ 0, 169.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 4.669
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.09% complete, ETA 00:15:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44822.983 ops/s
[info] # Warmup Iteration   2: 97387.339 ops/s
[info] # Warmup Iteration   3: 96181.104 ops/s
[info] Iteration   1: 98108.741 ops/s
[info]                  ·gc.alloc.rate:                   666.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10782.520 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 98334.948 ops/s
[info]                  ·gc.alloc.rate:            667.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10768.075 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 98347.279 ops/s
[info]                  ·gc.alloc.rate:            667.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10766.762 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 96024.316 ops/s
[info]                  ·gc.alloc.rate:            652.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11016.266 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 98471.016 ops/s
[info]                  ·gc.alloc.rate:                   668.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10742.559 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   97857.260 ±(99.9%) 3977.516 ops/s [Average]
[info]   (min, avg, max) = (96024.316, 97857.260, 98471.016), stdev = 1032.948
[info]   CI (99.9%): [93879.744, 101834.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   664.519 ±(99.9%) 26.817 MB/sec [Average]
[info]   (min, avg, max) = (652.178, 664.519, 668.711), stdev = 6.964
[info]   CI (99.9%): [637.702, 691.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10688.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10688.004, 10688.004, 10688.005), stdev = 0.001
[info]   CI (99.9%): [10688.003, 10688.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.370 ±(99.9%) 1.462 MB/sec [Average]
[info]   (min, avg, max) = (671.977, 672.370, 672.854), stdev = 0.380
[info]   CI (99.9%): [670.909, 673.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10815.236 ±(99.9%) 436.242 B/op [Average]
[info]   (min, avg, max) = (10742.559, 10815.236, 11016.266), stdev = 113.291
[info]   CI (99.9%): [10378.994, 11251.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.267 ±(99.9%) 22.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.267, 10.686), stdev = 5.842
[info]   CI (99.9%): [≈ 0, 26.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.34% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178275.397 ops/s
[info] # Warmup Iteration   2: 198375.612 ops/s
[info] # Warmup Iteration   3: 197372.450 ops/s
[info] Iteration   1: 197069.138 ops/s
[info]                  ·gc.alloc.rate:            811.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5384.079 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 196924.073 ops/s
[info]                  ·gc.alloc.rate:            810.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5387.906 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 192639.111 ops/s
[info]                  ·gc.alloc.rate:            793.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8261.175 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 193529.147 ops/s
[info]                  ·gc.alloc.rate:                   796.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5482.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 192370.160 ops/s
[info]                  ·gc.alloc.rate:                                  792.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6480.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5569.676 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   194506.326 ±(99.9%) 8910.327 ops/s [Average]
[info]   (min, avg, max) = (192370.160, 194506.326, 197069.138), stdev = 2313.984
[info]   CI (99.9%): [185595.998, 203416.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   800.814 ±(99.9%) 36.766 MB/sec [Average]
[info]   (min, avg, max) = (792.064, 800.814, 811.256), stdev = 9.548
[info]   CI (99.9%): [764.048, 837.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.113 ±(99.9%) 0.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.563), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.842 ±(99.9%) 577.428 MB/sec [Average]
[info]   (min, avg, max) = (674.053, 742.842, 1011.042), stdev = 149.956
[info]   CI (99.9%): [165.413, 1320.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6016.976 ±(99.9%) 4839.781 B/op [Average]
[info]   (min, avg, max) = (5384.079, 6016.976, 8261.175), stdev = 1256.876
[info]   CI (99.9%): [1177.195, 10856.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.417 ±(99.9%) 46.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.417, 27.085), stdev = 12.113
[info]   CI (99.9%): [≈ 0, 52.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:14:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6012.552 ops/s
[info] # Warmup Iteration   2: 19889.753 ops/s
[info] # Warmup Iteration   3: 20163.254 ops/s
[info] Iteration   1: 20264.081 ops/s
[info]                  ·gc.alloc.rate:                   1137.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              88328.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        104407.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 103.476 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 20732.178 ops/s
[info]                  ·gc.alloc.rate:            1163.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       88328.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76610.370 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 20440.626 ops/s
[info]                  ·gc.alloc.rate:                                  1147.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88328.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104472.943 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                359.014 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 20872.884 ops/s
[info]                  ·gc.alloc.rate:                                  1171.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88328.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76997.031 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 20935.528 ops/s
[info]                  ·gc.alloc.rate:            1175.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       88328.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102358.725 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20649.060 ±(99.9%) 1107.225 ops/s [Average]
[info]   (min, avg, max) = (20264.081, 20649.060, 20935.528), stdev = 287.543
[info]   CI (99.9%): [19541.835, 21756.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1158.822 ±(99.9%) 62.419 MB/sec [Average]
[info]   (min, avg, max) = (1137.122, 1158.822, 1175.039), stdev = 16.210
[info]   CI (99.9%): [1096.403, 1221.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88328.022 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (88328.020, 88328.022, 88328.025), stdev = 0.002
[info]   CI (99.9%): [88328.014, 88328.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.904 ±(99.9%) 7.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.256), stdev = 1.877
[info]   CI (99.9%): [≈ 0, 8.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.563 ±(99.9%) 715.718 MB/sec [Average]
[info]   (min, avg, max) = (1009.155, 1218.563, 1361.691), stdev = 185.870
[info]   CI (99.9%): [502.845, 1934.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   92969.309 ±(99.9%) 56921.029 B/op [Average]
[info]   (min, avg, max) = (76610.370, 92969.309, 104472.943), stdev = 14782.211
[info]   CI (99.9%): [36048.280, 149890.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   92.498 ±(99.9%) 599.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.498, 359.014), stdev = 155.579
[info]   CI (99.9%): [≈ 0, 691.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 19.000), stdev = 7.057
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.84% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67643.981 ops/s
[info] # Warmup Iteration   2: 119413.215 ops/s
[info] # Warmup Iteration   3: 122924.535 ops/s
[info] Iteration   1: 122246.318 ops/s
[info]                  ·gc.alloc.rate:                   1230.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17298.026 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.576 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 122345.301 ops/s
[info]                  ·gc.alloc.rate:                   1231.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17344.016 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 59.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 123831.670 ops/s
[info]                  ·gc.alloc.rate:                                  1246.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15840.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12978.935 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 123895.342 ops/s
[info]                  ·gc.alloc.rate:            1246.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       15840.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17295.750 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 123691.681 ops/s
[info]                  ·gc.alloc.rate:                                  1244.591 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15840.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17324.270 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   123202.062 ±(99.9%) 3201.051 ops/s [Average]
[info]   (min, avg, max) = (122246.318, 123202.062, 123895.342), stdev = 831.303
[info]   CI (99.9%): [120001.012, 126403.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1239.828 ±(99.9%) 31.683 MB/sec [Average]
[info]   (min, avg, max) = (1230.236, 1239.828, 1246.674), stdev = 8.228
[info]   CI (99.9%): [1208.145, 1271.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15840.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15840.003, 15840.003, 15840.004), stdev = 0.001
[info]   CI (99.9%): [15840.003, 15840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.197 ±(99.9%) 1.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.980), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 1.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1287.085 ±(99.9%) 573.436 MB/sec [Average]
[info]   (min, avg, max) = (1021.059, 1287.085, 1361.248), stdev = 148.919
[info]   CI (99.9%): [713.649, 1860.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16448.199 ±(99.9%) 7468.247 B/op [Average]
[info]   (min, avg, max) = (12978.935, 16448.199, 17344.016), stdev = 1939.480
[info]   CI (99.9%): [8979.952, 23916.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.712 ±(99.9%) 100.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.712, 59.984), stdev = 26.132
[info]   CI (99.9%): [≈ 0, 114.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 18.000), stdev = 7.092
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.08% complete, ETA 00:14:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462667.150 ops/s
[info] # Warmup Iteration   2: 515349.850 ops/s
[info] # Warmup Iteration   3: 516630.125 ops/s
[info] Iteration   1: 510060.881 ops/s
[info]                  ·gc.alloc.rate:            567.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1037.991 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 514752.097 ops/s
[info]                  ·gc.alloc.rate:                   572.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2059.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 512344.569 ops/s
[info]                  ·gc.alloc.rate:                   570.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2068.803 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 516307.267 ops/s
[info]                  ·gc.alloc.rate:            574.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1027.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 507007.367 ops/s
[info]                  ·gc.alloc.rate:            564.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2088.504 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   512094.436 ±(99.9%) 14263.932 ops/s [Average]
[info]   (min, avg, max) = (507007.367, 512094.436, 516307.267), stdev = 3704.298
[info]   CI (99.9%): [497830.504, 526358.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   569.985 ±(99.9%) 15.787 MB/sec [Average]
[info]   (min, avg, max) = (564.409, 569.985, 574.679), stdev = 4.100
[info]   CI (99.9%): [554.198, 585.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.579 ±(99.9%) 709.746 MB/sec [Average]
[info]   (min, avg, max) = (336.314, 538.579, 673.375), stdev = 184.319
[info]   CI (99.9%): [≈ 0, 1248.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1656.388 ±(99.9%) 2192.680 B/op [Average]
[info]   (min, avg, max) = (1027.464, 1656.388, 2088.504), stdev = 569.432
[info]   CI (99.9%): [≈ 0, 3849.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.817 ±(99.9%) 4.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 2.046), stdev = 1.118
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:14:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493437.650 ops/s
[info] # Warmup Iteration   2: 560657.028 ops/s
[info] # Warmup Iteration   3: 563161.003 ops/s
[info] Iteration   1: 561683.194 ops/s
[info]                  ·gc.alloc.rate:      11.422 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 562894.384 ops/s
[info]                  ·gc.alloc.rate:      11.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 562731.388 ops/s
[info]                  ·gc.alloc.rate:      11.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 562790.951 ops/s
[info]                  ·gc.alloc.rate:      11.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 562585.300 ops/s
[info]                  ·gc.alloc.rate:      11.438 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   562537.044 ±(99.9%) 1887.718 ops/s [Average]
[info]   (min, avg, max) = (561683.194, 562537.044, 562894.384), stdev = 490.234
[info]   CI (99.9%): [560649.325, 564424.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.437 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (11.422, 11.437, 11.443), stdev = 0.009
[info]   CI (99.9%): [11.404, 11.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.58% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30676.717 ops/s
[info] # Warmup Iteration   2: 61672.966 ops/s
[info] # Warmup Iteration   3: 63344.932 ops/s
[info] Iteration   1: 63337.181 ops/s
[info]                  ·gc.alloc.rate:                   1136.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25043.734 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.552 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 62968.223 ops/s
[info]                  ·gc.alloc.rate:                   1129.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33581.737 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 116.545 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 64135.125 ops/s
[info]                  ·gc.alloc.rate:                                  1150.827 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28240.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.318 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25059.505 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 63433.039 ops/s
[info]                  ·gc.alloc.rate:            1138.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25336.785 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 64199.776 ops/s
[info]                  ·gc.alloc.rate:                                  1151.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28240.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.165 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33377.291 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   63614.669 ±(99.9%) 2056.678 ops/s [Average]
[info]   (min, avg, max) = (62968.223, 63614.669, 64199.776), stdev = 534.113
[info]   CI (99.9%): [61557.991, 65671.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1141.279 ±(99.9%) 37.364 MB/sec [Average]
[info]   (min, avg, max) = (1129.542, 1141.279, 1151.820), stdev = 9.703
[info]   CI (99.9%): [1103.915, 1178.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28240.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28240.006, 28240.007, 28240.007), stdev = 0.001
[info]   CI (99.9%): [28240.005, 28240.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.497 ±(99.9%) 3.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 2.318), stdev = 1.021
[info]   CI (99.9%): [≈ 0, 4.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.877 ±(99.9%) 708.700 MB/sec [Average]
[info]   (min, avg, max) = (1007.579, 1150.877, 1361.353), stdev = 184.047
[info]   CI (99.9%): [442.177, 1859.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28479.810 ±(99.9%) 17582.595 B/op [Average]
[info]   (min, avg, max) = (25043.734, 28479.810, 33581.737), stdev = 4566.144
[info]   CI (99.9%): [10897.215, 46062.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   26.620 ±(99.9%) 195.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.620, 116.545), stdev = 50.778
[info]   CI (99.9%): [≈ 0, 222.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 7.701
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.83% complete, ETA 00:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80652.305 ops/s
[info] # Warmup Iteration   2: 99368.107 ops/s
[info] # Warmup Iteration   3: 101682.806 ops/s
[info] Iteration   1: 102095.026 ops/s
[info]                  ·gc.alloc.rate:                                  1784.123 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.568 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31370.641 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                51.326 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 102302.697 ops/s
[info]                  ·gc.alloc.rate:            1787.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       27504.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26183.656 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 102580.246 ops/s
[info]                  ·gc.alloc.rate:                                  1792.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26112.709 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 102747.613 ops/s
[info]                  ·gc.alloc.rate:                                  1795.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26070.274 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 101739.123 ops/s
[info]                  ·gc.alloc.rate:                                  1777.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31593.609 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   102292.941 ±(99.9%) 1534.532 ops/s [Average]
[info]   (min, avg, max) = (101739.123, 102292.941, 102747.613), stdev = 398.513
[info]   CI (99.9%): [100758.409, 103827.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1787.473 ±(99.9%) 26.999 MB/sec [Average]
[info]   (min, avg, max) = (1777.695, 1787.473, 1795.384), stdev = 7.012
[info]   CI (99.9%): [1760.473, 1814.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27504.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27504.004, 27504.004, 27504.004), stdev = 0.001
[info]   CI (99.9%): [27504.003, 27504.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.326 ±(99.9%) 2.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 1.568), stdev = 0.694
[info]   CI (99.9%): [≈ 0, 2.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1836.486 ±(99.9%) 710.114 MB/sec [Average]
[info]   (min, avg, max) = (1701.661, 1836.486, 2042.023), stdev = 184.414
[info]   CI (99.9%): [1126.372, 2546.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   28266.178 ±(99.9%) 11309.658 B/op [Average]
[info]   (min, avg, max) = (26070.274, 28266.178, 31593.609), stdev = 2937.082
[info]   CI (99.9%): [16956.519, 39575.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.329), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.265 ±(99.9%) 88.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.265, 51.326), stdev = 22.954
[info]   CI (99.9%): [≈ 0, 98.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.08% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71233.613 ops/s
[info] # Warmup Iteration   2: 134356.454 ops/s
[info] # Warmup Iteration   3: 137080.165 ops/s
[info] Iteration   1: 139050.435 ops/s
[info]                  ·gc.alloc.rate:            594.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7615.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 136892.915 ops/s
[info]                  ·gc.alloc.rate:            585.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3867.701 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 139627.115 ops/s
[info]                  ·gc.alloc.rate:            596.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7583.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 138559.176 ops/s
[info]                  ·gc.alloc.rate:            592.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7642.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 139902.617 ops/s
[info]                  ·gc.alloc.rate:            598.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7569.106 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   138806.451 ±(99.9%) 4579.417 ops/s [Average]
[info]   (min, avg, max) = (136892.915, 138806.451, 139902.617), stdev = 1189.260
[info]   CI (99.9%): [134227.034, 143385.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   593.401 ±(99.9%) 19.336 MB/sec [Average]
[info]   (min, avg, max) = (585.356, 593.401, 598.004), stdev = 5.021
[info]   CI (99.9%): [574.065, 612.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.002, 6728.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.544 ±(99.9%) 579.136 MB/sec [Average]
[info]   (min, avg, max) = (336.501, 605.544, 672.896), stdev = 150.400
[info]   CI (99.9%): [26.409, 1184.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   6855.643 ±(99.9%) 6432.700 B/op [Average]
[info]   (min, avg, max) = (3867.701, 6855.643, 7642.406), stdev = 1670.552
[info]   CI (99.9%): [422.943, 13288.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 9.000), stdev = 1.643
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.33% complete, ETA 00:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191806.330 ops/s
[info] # Warmup Iteration   2: 205734.974 ops/s
[info] # Warmup Iteration   3: 210642.837 ops/s
[info] Iteration   1: 209181.992 ops/s
[info]                  ·gc.alloc.rate:            745.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5072.122 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 209837.951 ops/s
[info]                  ·gc.alloc.rate:            747.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5056.436 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 209072.586 ops/s
[info]                  ·gc.alloc.rate:            744.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7612.404 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 210167.168 ops/s
[info]                  ·gc.alloc.rate:            748.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5048.402 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 208087.667 ops/s
[info]                  ·gc.alloc.rate:                                  741.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5608.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5123.902 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.191 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   209269.473 ±(99.9%) 3087.790 ops/s [Average]
[info]   (min, avg, max) = (208087.667, 209269.473, 210167.168), stdev = 801.889
[info]   CI (99.9%): [206181.683, 212357.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   745.637 ±(99.9%) 10.778 MB/sec [Average]
[info]   (min, avg, max) = (741.618, 745.637, 748.905), stdev = 2.799
[info]   CI (99.9%): [734.859, 756.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.280), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.186 ±(99.9%) 578.906 MB/sec [Average]
[info]   (min, avg, max) = (674.002, 742.186, 1011.109), stdev = 150.340
[info]   CI (99.9%): [163.280, 1321.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5582.653 ±(99.9%) 4370.655 B/op [Average]
[info]   (min, avg, max) = (5048.402, 5582.653, 7612.404), stdev = 1135.045
[info]   CI (99.9%): [1211.998, 9953.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.038 ±(99.9%) 43.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.038, 25.191), stdev = 11.266
[info]   CI (99.9%): [≈ 0, 48.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.58% complete, ETA 00:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23623.394 ops/s
[info] # Warmup Iteration   2: 40652.586 ops/s
[info] # Warmup Iteration   3: 40616.698 ops/s
[info] Iteration   1: 40856.290 ops/s
[info]                  ·gc.alloc.rate:                                  1693.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65255.335 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                153.965 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 41260.316 ops/s
[info]                  ·gc.alloc.rate:                                  1710.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64919.833 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 41346.585 ops/s
[info]                  ·gc.alloc.rate:            1714.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       65248.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64784.826 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41296.214 ops/s
[info]                  ·gc.alloc.rate:            1712.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       65248.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64864.820 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 40640.557 ops/s
[info]                  ·gc.alloc.rate:                                  1684.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65908.428 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41079.992 ±(99.9%) 1207.725 ops/s [Average]
[info]   (min, avg, max) = (40640.557, 41079.992, 41346.585), stdev = 313.642
[info]   CI (99.9%): [39872.267, 42287.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1703.071 ±(99.9%) 50.662 MB/sec [Average]
[info]   (min, avg, max) = (1684.891, 1703.071, 1714.137), stdev = 13.157
[info]   CI (99.9%): [1652.409, 1753.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.011), stdev = 0.001
[info]   CI (99.9%): [65248.009, 65248.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.269 ±(99.9%) 1.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.125), stdev = 0.483
[info]   CI (99.9%): [≈ 0, 2.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1700.354 ±(99.9%) 14.797 MB/sec [Average]
[info]   (min, avg, max) = (1693.484, 1700.354, 1702.228), stdev = 3.843
[info]   CI (99.9%): [1685.557, 1715.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65146.649 ±(99.9%) 1779.135 B/op [Average]
[info]   (min, avg, max) = (64784.826, 65146.649, 65908.428), stdev = 462.036
[info]   CI (99.9%): [63367.513, 66925.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.793 ±(99.9%) 265.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.793, 153.965), stdev = 68.855
[info]   CI (99.9%): [≈ 0, 295.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 11.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.83% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198675.612 ops/s
[info] # Warmup Iteration   2: 255442.788 ops/s
[info] # Warmup Iteration   3: 254527.608 ops/s
[info] Iteration   1: 257540.523 ops/s
[info]                  ·gc.alloc.rate:            1211.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8239.515 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 256739.189 ops/s
[info]                  ·gc.alloc.rate:                                  1208.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8285.700 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.418 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 254635.304 ops/s
[info]                  ·gc.alloc.rate:                                  1198.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6311.812 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 258743.159 ops/s
[info]                  ·gc.alloc.rate:                                  1218.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8281.868 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 259576.329 ops/s
[info]                  ·gc.alloc.rate:                                  1221.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6191.400 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   257446.901 ±(99.9%) 7364.060 ops/s [Average]
[info]   (min, avg, max) = (254635.304, 257446.901, 259576.329), stdev = 1912.423
[info]   CI (99.9%): [250082.841, 264810.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1211.728 ±(99.9%) 34.952 MB/sec [Average]
[info]   (min, avg, max) = (1198.356, 1211.728, 1221.674), stdev = 9.077
[info]   CI (99.9%): [1176.776, 1246.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7408.002, 7408.002), stdev = 0.001
[info]   CI (99.9%): [7408.001, 7408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.304), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.719 ±(99.9%) 702.186 MB/sec [Average]
[info]   (min, avg, max) = (1021.031, 1220.719, 1361.850), stdev = 182.356
[info]   CI (99.9%): [518.533, 1922.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7462.059 ±(99.9%) 4258.641 B/op [Average]
[info]   (min, avg, max) = (6191.400, 7462.059, 8285.700), stdev = 1105.956
[info]   CI (99.9%): [3203.418, 11720.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.084 ±(99.9%) 35.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.084, 20.418), stdev = 9.131
[info]   CI (99.9%): [≈ 0, 39.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.775
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.07% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 279524.574 ops/s
[info] # Warmup Iteration   2: 493913.851 ops/s
[info] # Warmup Iteration   3: 487807.881 ops/s
[info] Iteration   1: 496981.508 ops/s
[info]                  ·gc.alloc.rate:                   399.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1063.197 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 490017.582 ops/s
[info]                  ·gc.alloc.rate:            393.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1080.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 491665.811 ops/s
[info]                  ·gc.alloc.rate:            394.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1076.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 497879.464 ops/s
[info]                  ·gc.alloc.rate:                   399.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1061.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 495711.915 ops/s
[info]                  ·gc.alloc.rate:            398.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1068.035 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   494451.256 ±(99.9%) 13221.820 ops/s [Average]
[info]   (min, avg, max) = (490017.582, 494451.256, 497879.464), stdev = 3433.665
[info]   CI (99.9%): [481229.436, 507673.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   397.077 ±(99.9%) 10.496 MB/sec [Average]
[info]   (min, avg, max) = (393.603, 397.077, 399.828), stdev = 2.726
[info]   CI (99.9%): [386.581, 407.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.107 ±(99.9%) 1.466 MB/sec [Average]
[info]   (min, avg, max) = (335.679, 336.107, 336.450), stdev = 0.381
[info]   CI (99.9%): [334.641, 337.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1069.964 ±(99.9%) 32.343 B/op [Average]
[info]   (min, avg, max) = (1061.290, 1069.964, 1080.461), stdev = 8.399
[info]   CI (99.9%): [1037.622, 1102.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.843 ±(99.9%) 4.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.843, 2.110), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.32% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 534261.659 ops/s
[info] # Warmup Iteration   2: 566766.201 ops/s
[info] # Warmup Iteration   3: 566926.547 ops/s
[info] Iteration   1: 575416.042 ops/s
[info]                  ·gc.alloc.rate:            304.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 921.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 575234.152 ops/s
[info]                  ·gc.alloc.rate:            304.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 920.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 576717.763 ops/s
[info]                  ·gc.alloc.rate:            304.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 918.032 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 576588.711 ops/s
[info]                  ·gc.alloc.rate:                   304.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        918.252 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 577617.044 ops/s
[info]                  ·gc.alloc.rate:            305.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 918.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   576314.742 ±(99.9%) 3806.499 ops/s [Average]
[info]   (min, avg, max) = (575234.152, 576314.742, 577617.044), stdev = 988.536
[info]   CI (99.9%): [572508.244, 580121.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   304.618 ±(99.9%) 1.939 MB/sec [Average]
[info]   (min, avg, max) = (304.108, 304.618, 305.275), stdev = 0.504
[info]   CI (99.9%): [302.678, 306.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.616 ±(99.9%) 1.268 MB/sec [Average]
[info]   (min, avg, max) = (336.335, 336.616, 336.982), stdev = 0.329
[info]   CI (99.9%): [335.349, 337.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   919.400 ±(99.9%) 6.502 B/op [Average]
[info]   (min, avg, max) = (918.032, 919.400, 921.899), stdev = 1.688
[info]   CI (99.9%): [912.898, 925.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.364 ±(99.9%) 3.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 1.818), stdev = 0.813
[info]   CI (99.9%): [≈ 0, 3.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 85.57% complete, ETA 00:12:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489886.950 ops/s
[info] # Warmup Iteration   2: 532987.818 ops/s
[info] # Warmup Iteration   3: 525741.715 ops/s
[info] Iteration   1: 525816.246 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 529274.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 528781.043 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 528987.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 528642.017 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   528300.332 ±(99.9%) 5425.277 ops/s [Average]
[info]   (min, avg, max) = (525816.246, 528300.332, 529274.661), stdev = 1408.927
[info]   CI (99.9%): [522875.056, 533725.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.82% complete, ETA 00:12:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19816.096 ops/s
[info] # Warmup Iteration   2: 29500.736 ops/s
[info] # Warmup Iteration   3: 29688.601 ops/s
[info] Iteration   1: 29570.975 ops/s
[info]                  ·gc.alloc.rate:                   1473.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              78432.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89523.395 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 212.729 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 29869.864 ops/s
[info]                  ·gc.alloc.rate:                                  1488.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.534 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71744.304 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 30049.680 ops/s
[info]                  ·gc.alloc.rate:                                  1497.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71309.866 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 30280.224 ops/s
[info]                  ·gc.alloc.rate:            1508.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88460.400 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29816.414 ops/s
[info]                  ·gc.alloc.rate:                                  1485.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71871.813 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   29917.432 ±(99.9%) 1021.705 ops/s [Average]
[info]   (min, avg, max) = (29570.975, 29917.432, 30280.224), stdev = 265.334
[info]   CI (99.9%): [28895.727, 30939.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1490.550 ±(99.9%) 50.484 MB/sec [Average]
[info]   (min, avg, max) = (1473.313, 1490.550, 1508.393), stdev = 13.111
[info]   CI (99.9%): [1440.066, 1541.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78419.319 ±(99.9%) 27.350 B/op [Average]
[info]   (min, avg, max) = (78416.014, 78419.319, 78432.018), stdev = 7.103
[info]   CI (99.9%): [78391.968, 78446.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.039 ±(99.9%) 16.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.039, 9.823), stdev = 4.353
[info]   CI (99.9%): [≈ 0, 18.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.604 ±(99.9%) 696.625 MB/sec [Average]
[info]   (min, avg, max) = (1361.395, 1493.604, 1701.605), stdev = 180.911
[info]   CI (99.9%): [796.980, 2190.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78581.956 ±(99.9%) 36629.802 B/op [Average]
[info]   (min, avg, max) = (71309.866, 78581.956, 89523.395), stdev = 9512.643
[info]   CI (99.9%): [41952.154, 115211.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.546 ±(99.9%) 366.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.546, 212.729), stdev = 95.135
[info]   CI (99.9%): [≈ 0, 408.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 21.000), stdev = 7.842
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.07% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272124.665 ops/s
[info] # Warmup Iteration   2: 611532.011 ops/s
[info] # Warmup Iteration   3: 617647.791 ops/s
[info] Iteration   1: 616088.441 ops/s
[info]                  ·gc.alloc.rate:                                  1878.957 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5192.183 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.509 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 622726.831 ops/s
[info]                  ·gc.alloc.rate:                                  1899.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4301.714 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 636024.052 ops/s
[info]                  ·gc.alloc.rate:                                  1939.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5053.815 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 636224.848 ops/s
[info]                  ·gc.alloc.rate:                                  1940.100 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5052.338 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 629558.865 ops/s
[info]                  ·gc.alloc.rate:                                  1919.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4254.794 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   628124.607 ±(99.9%) 33573.414 ops/s [Average]
[info]   (min, avg, max) = (616088.441, 628124.607, 636224.848), stdev = 8718.909
[info]   CI (99.9%): [594551.193, 661698.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1915.502 ±(99.9%) 101.753 MB/sec [Average]
[info]   (min, avg, max) = (1878.957, 1915.502, 1940.100), stdev = 26.425
[info]   CI (99.9%): [1813.749, 2017.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4800.001, 4800.001, 4800.001), stdev = 0.001
[info]   CI (99.9%): [4800.001, 4800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.022, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.057, 0.270), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.069 ±(99.9%) 710.701 MB/sec [Average]
[info]   (min, avg, max) = (1701.777, 1904.069, 2042.091), stdev = 184.567
[info]   CI (99.9%): [1193.368, 2614.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4770.969 ±(99.9%) 1746.883 B/op [Average]
[info]   (min, avg, max) = (4254.794, 4770.969, 5192.183), stdev = 453.660
[info]   CI (99.9%): [3024.086, 6517.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.702 ±(99.9%) 14.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.702, 8.509), stdev = 3.805
[info]   CI (99.9%): [≈ 0, 16.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 86.32% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 334005.395 ops/s
[info] # Warmup Iteration   2: 1316743.066 ops/s
[info] # Warmup Iteration   3: 1342315.531 ops/s
[info] Iteration   1: 1341247.469 ops/s
[info]                  ·gc.alloc.rate:                   1015.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1183.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1337247.442 ops/s
[info]                  ·gc.alloc.rate:            1012.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1187.738 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1335872.252 ops/s
[info]                  ·gc.alloc.rate:                   1011.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1188.984 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1324703.857 ops/s
[info]                  ·gc.alloc.rate:                                  1003.373 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.235 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1213.260 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1312996.100 ops/s
[info]                  ·gc.alloc.rate:                                  994.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1224.040 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1330413.424 ±(99.9%) 44317.611 ops/s [Average]
[info]   (min, avg, max) = (1312996.100, 1330413.424, 1341247.469), stdev = 11509.143
[info]   CI (99.9%): [1286095.813, 1374731.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1007.491 ±(99.9%) 33.232 MB/sec [Average]
[info]   (min, avg, max) = (994.333, 1007.491, 1015.531), stdev = 8.630
[info]   CI (99.9%): [974.259, 1040.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.235), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.280), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.715 ±(99.9%) 26.216 MB/sec [Average]
[info]   (min, avg, max) = (1008.212, 1013.715, 1021.269), stdev = 6.808
[info]   CI (99.9%): [987.499, 1039.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1199.486 ±(99.9%) 69.403 B/op [Average]
[info]   (min, avg, max) = (1183.410, 1199.486, 1224.040), stdev = 18.024
[info]   CI (99.9%): [1130.084, 1268.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.098 ±(99.9%) 7.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.098, 4.709), stdev = 2.047
[info]   CI (99.9%): [≈ 0, 8.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 13.000), stdev = 5.477
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 86.57% complete, ETA 00:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5872469.860 ops/s
[info] # Warmup Iteration   2: 6029923.596 ops/s
[info] # Warmup Iteration   3: 6427373.797 ops/s
[info] Iteration   1: 6238122.098 ops/s
[info]                  ·gc.alloc.rate:            190.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6404513.852 ops/s
[info]                  ·gc.alloc.rate:      195.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6383136.391 ops/s
[info]                  ·gc.alloc.rate:            194.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83.271 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 6395790.172 ops/s
[info]                  ·gc.alloc.rate:      195.043 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6236887.523 ops/s
[info]                  ·gc.alloc.rate:            190.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6331690.007 ±(99.9%) 332369.567 ops/s [Average]
[info]   (min, avg, max) = (6236887.523, 6331690.007, 6404513.852), stdev = 86315.321
[info]   CI (99.9%): [5999320.440, 6664059.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   193.108 ±(99.9%) 10.067 MB/sec [Average]
[info]   (min, avg, max) = (190.222, 193.108, 195.308), stdev = 2.614
[info]   CI (99.9%): [183.041, 203.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.524 ±(99.9%) 711.901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.524, 337.807), stdev = 184.878
[info]   CI (99.9%): [≈ 0, 914.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   50.708 ±(99.9%) 178.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.708, 85.212), stdev = 46.296
[info]   CI (99.9%): [≈ 0, 228.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 86.82% complete, ETA 00:11:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19390.488 ops/s
[info] # Warmup Iteration   2: 200632.686 ops/s
[info] # Warmup Iteration   3: 203747.434 ops/s
[info] Iteration   1: 204465.075 ops/s
[info]                  ·gc.alloc.rate:            1448.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       11152.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1681.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12946.712 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  23.000 ms
[info] Iteration   2: 205961.983 ops/s
[info]                  ·gc.alloc.rate:                                  1459.370 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11152.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10338.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.634 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 207571.759 ops/s
[info]                  ·gc.alloc.rate:                                  1470.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11152.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10323.682 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 208403.418 ops/s
[info]                  ·gc.alloc.rate:            1476.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       11152.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12853.340 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 209274.741 ops/s
[info]                  ·gc.alloc.rate:            1483.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       11152.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10239.344 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   207135.395 ±(99.9%) 7427.502 ops/s [Average]
[info]   (min, avg, max) = (204465.075, 207135.395, 209274.741), stdev = 1928.899
[info]   CI (99.9%): [199707.893, 214562.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1467.723 ±(99.9%) 53.389 MB/sec [Average]
[info]   (min, avg, max) = (1448.544, 1467.723, 1483.146), stdev = 13.865
[info]   CI (99.9%): [1414.334, 1521.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.002, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.002, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.117), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.204 ±(99.9%) 1.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.892), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.007 ±(99.9%) 703.584 MB/sec [Average]
[info]   (min, avg, max) = (1352.960, 1492.007, 1702.277), stdev = 182.718
[info]   CI (99.9%): [788.424, 2195.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11340.385 ±(99.9%) 5485.773 B/op [Average]
[info]   (min, avg, max) = (10239.344, 11340.385, 12946.712), stdev = 1424.638
[info]   CI (99.9%): [5854.612, 16826.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.127 ±(99.9%) 61.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.127, 35.634), stdev = 15.936
[info]   CI (99.9%): [≈ 0, 68.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 23.000), stdev = 8.689
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.06% complete, ETA 00:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345703.730 ops/s
[info] # Warmup Iteration   2: 787191.437 ops/s
[info] # Warmup Iteration   3: 807318.739 ops/s
[info] Iteration   1: 811760.042 ops/s
[info]                  ·gc.alloc.rate:            1266.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1960.484 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 808838.263 ops/s
[info]                  ·gc.alloc.rate:                   1262.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2623.501 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 811960.759 ops/s
[info]                  ·gc.alloc.rate:                                  1267.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.333 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2639.230 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 812163.045 ops/s
[info]                  ·gc.alloc.rate:            1267.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2638.635 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 798596.141 ops/s
[info]                  ·gc.alloc.rate:            1245.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2012.420 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   808663.650 ±(99.9%) 22294.661 ops/s [Average]
[info]   (min, avg, max) = (798596.141, 808663.650, 812163.045), stdev = 5789.853
[info]   CI (99.9%): [786368.989, 830958.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1261.798 ±(99.9%) 35.082 MB/sec [Average]
[info]   (min, avg, max) = (1245.962, 1261.798, 1267.282), stdev = 9.111
[info]   CI (99.9%): [1226.716, 1296.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.001, 2456.001, 2456.001), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.653 ±(99.9%) 719.914 MB/sec [Average]
[info]   (min, avg, max) = (1011.020, 1220.653, 1361.828), stdev = 186.959
[info]   CI (99.9%): [500.739, 1940.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2374.854 ±(99.9%) 1367.332 B/op [Average]
[info]   (min, avg, max) = (1960.484, 2374.854, 2639.230), stdev = 355.092
[info]   CI (99.9%): [1007.521, 3742.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.296 ±(99.9%) 11.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.296, 6.481), stdev = 2.898
[info]   CI (99.9%): [≈ 0, 12.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 13.000), stdev = 4.658
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 87.31% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d6f7c3ad/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 611831.663 ops/s
[info] # Warmup Iteration   2: 2012457.726 ops/s
[info] # Warmup Iteration   3: 2046595.168 ops/s
[info] Iteration   1: 2027278.153 ops/s
[info]                  ·gc.alloc.rate:            834.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 781.916 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2089969.892 ops/s
[info]                  ·gc.alloc.rate:            860.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2077645.069 ops/s
[info]                  ·gc.alloc.rate:            855.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 762.992 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 2087274.951 ops/s
[info]                  ·gc.alloc.rate:                   859.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        506.303 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 2107711.379 ops/s
[info]                  ·gc.alloc.rate:                                  867.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       762.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2077975.889 ±(99.9%) 116873.513 ops/s [Average]
[info]   (min, avg, max) = (2027278.153, 2077975.889, 2107711.379), stdev = 30351.680
[info]   CI (99.9%): [1961102.376, 2194849.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   855.528 ±(99.9%) 48.412 MB/sec [Average]
[info]   (min, avg, max) = (834.568, 855.528, 867.974), stdev = 12.573
[info]   CI (99.9%): [807.116, 903.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.553 ±(99.9%) 717.937 MB/sec [Average]
[info]   (min, avg, max) = (671.369, 875.553, 1020.724), stdev = 186.446
[info]   CI (99.9%): [157.616, 1593.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   663.782 ±(99.9%) 555.528 B/op [Average]
[info]   (min, avg, max) = (505.663, 663.782, 781.916), stdev = 144.269
[info]   CI (99.9%): [108.254, 1219.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.702 ±(99.9%) 5.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.014), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 13.000), stdev = 4.099
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 87.56% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3724969.784 ops/s
[info] # Warmup Iteration   2: 5554804.262 ops/s
[info] # Warmup Iteration   3: 5623230.304 ops/s
[info] Iteration   1: 5808131.085 ops/s
[info]                  ·gc.alloc.rate:            649.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5786028.739 ops/s
[info]                  ·gc.alloc.rate:            646.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5782797.747 ops/s
[info]                  ·gc.alloc.rate:                   646.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        183.293 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5787590.731 ops/s
[info]                  ·gc.alloc.rate:            647.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182.957 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5782582.311 ops/s
[info]                  ·gc.alloc.rate:            646.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5789426.123 ±(99.9%) 41093.769 ops/s [Average]
[info]   (min, avg, max) = (5782582.311, 5789426.123, 5808131.085), stdev = 10671.921
[info]   CI (99.9%): [5748332.354, 5830519.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   647.330 ±(99.9%) 4.504 MB/sec [Average]
[info]   (min, avg, max) = (646.537, 647.330, 649.383), stdev = 1.170
[info]   CI (99.9%): [642.826, 651.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.578 ±(99.9%) 579.581 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 605.578, 673.488), stdev = 150.515
[info]   CI (99.9%): [25.996, 1185.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   164.707 ±(99.9%) 158.328 B/op [Average]
[info]   (min, avg, max) = (91.154, 164.707, 183.293), stdev = 41.117
[info]   CI (99.9%): [6.378, 323.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 87.81% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3862206.521 ops/s
[info] # Warmup Iteration   2: 5529915.528 ops/s
[info] # Warmup Iteration   3: 5575218.030 ops/s
[info] Iteration   1: 5528629.235 ops/s
[info]                  ·gc.alloc.rate:            337.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95.769 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 5512161.105 ops/s
[info]                  ·gc.alloc.rate:            336.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96.055 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5546367.798 ops/s
[info]                  ·gc.alloc.rate:            338.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5663558.729 ops/s
[info]                  ·gc.alloc.rate:                   345.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        93.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5666531.401 ops/s
[info]                  ·gc.alloc.rate:            345.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.619 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5583449.654 ±(99.9%) 290605.269 ops/s [Average]
[info]   (min, avg, max) = (5512161.105, 5583449.654, 5666531.401), stdev = 75469.266
[info]   CI (99.9%): [5292844.384, 5874054.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   340.567 ±(99.9%) 17.825 MB/sec [Average]
[info]   (min, avg, max) = (336.213, 340.567, 345.644), stdev = 4.629
[info]   CI (99.9%): [322.742, 358.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.536 ±(99.9%) 1.158 MB/sec [Average]
[info]   (min, avg, max) = (336.342, 336.536, 337.070), stdev = 0.301
[info]   CI (99.9%): [335.378, 337.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   94.877 ±(99.9%) 4.736 B/op [Average]
[info]   (min, avg, max) = (93.483, 94.877, 96.055), stdev = 1.230
[info]   CI (99.9%): [90.142, 99.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.06% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35507.275 ops/s
[info] # Warmup Iteration   2: 302684.975 ops/s
[info] # Warmup Iteration   3: 308494.472 ops/s
[info] Iteration   1: 306430.956 ops/s
[info]                  ·gc.alloc.rate:                   1563.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8628.509 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 311687.188 ops/s
[info]                  ·gc.alloc.rate:                                  1590.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.754 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8570.568 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.546 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 312954.928 ops/s
[info]                  ·gc.alloc.rate:            1597.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       8032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6847.110 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 303327.983 ops/s
[info]                  ·gc.alloc.rate:                                  1548.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8830.907 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 308016.293 ops/s
[info]                  ·gc.alloc.rate:                                  1572.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8696.749 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   308483.470 ±(99.9%) 15070.224 ops/s [Average]
[info]   (min, avg, max) = (303327.983, 308483.470, 312954.928), stdev = 3913.689
[info]   CI (99.9%): [293413.245, 323553.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1574.467 ±(99.9%) 76.777 MB/sec [Average]
[info]   (min, avg, max) = (1548.255, 1574.467, 1597.338), stdev = 19.939
[info]   CI (99.9%): [1497.689, 1651.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8032.001, 8032.001, 8032.001), stdev = 0.001
[info]   CI (99.9%): [8032.001, 8032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.149), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.155 ±(99.9%) 1.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.754), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.722 ±(99.9%) 575.885 MB/sec [Average]
[info]   (min, avg, max) = (1361.697, 1628.722, 1702.436), stdev = 149.556
[info]   CI (99.9%): [1052.837, 2204.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8314.769 ±(99.9%) 3181.267 B/op [Average]
[info]   (min, avg, max) = (6847.110, 8314.769, 8830.907), stdev = 826.165
[info]   CI (99.9%): [5133.501, 11496.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.078 ±(99.9%) 39.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.078, 23.546), stdev = 10.204
[info]   CI (99.9%): [≈ 0, 45.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 22.000), stdev = 7.956
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.31% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52272.859 ops/s
[info] # Warmup Iteration   2: 64936.543 ops/s
[info] # Warmup Iteration   3: 65650.535 ops/s
[info] Iteration   1: 65105.360 ops/s
[info]                  ·gc.alloc.rate:                                  1860.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44984.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.822 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49291.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.515 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 65991.273 ops/s
[info]                  ·gc.alloc.rate:                                  1886.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44984.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40591.371 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 64518.296 ops/s
[info]                  ·gc.alloc.rate:                                  1843.994 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44984.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49820.766 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 66122.439 ops/s
[info]                  ·gc.alloc.rate:                                  1889.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44984.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40512.191 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 66044.342 ops/s
[info]                  ·gc.alloc.rate:                                  1887.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44984.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48672.773 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   65556.342 ±(99.9%) 2742.283 ops/s [Average]
[info]   (min, avg, max) = (64518.296, 65556.342, 66122.439), stdev = 712.162
[info]   CI (99.9%): [62814.060, 68298.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1873.713 ±(99.9%) 78.641 MB/sec [Average]
[info]   (min, avg, max) = (1843.994, 1873.713, 1889.980), stdev = 20.423
[info]   CI (99.9%): [1795.071, 1952.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44984.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44984.006, 44984.006, 44984.007), stdev = 0.001
[info]   CI (99.9%): [44984.006, 44984.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.037, 0.158), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.900 ±(99.9%) 6.293 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.900, 3.822), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.532 ±(99.9%) 714.723 MB/sec [Average]
[info]   (min, avg, max) = (1702.099, 1905.532, 2042.263), stdev = 185.611
[info]   CI (99.9%): [1190.808, 2620.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   45777.648 ±(99.9%) 18436.472 B/op [Average]
[info]   (min, avg, max) = (40512.191, 45777.648, 49820.766), stdev = 4787.893
[info]   CI (99.9%): [27341.176, 64214.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   16.103 ±(99.9%) 138.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.103, 80.515), stdev = 36.007
[info]   CI (99.9%): [≈ 0, 154.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 88.56% complete, ETA 00:09:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43867.843 ops/s
[info] # Warmup Iteration   2: 80294.340 ops/s
[info] # Warmup Iteration   3: 80192.889 ops/s
[info] Iteration   1: 79492.284 ops/s
[info]                  ·gc.alloc.rate:            1223.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26641.052 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 81112.718 ops/s
[info]                  ·gc.alloc.rate:                   1249.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19646.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 90.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 81719.539 ops/s
[info]                  ·gc.alloc.rate:                                  1258.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26223.701 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 81739.726 ops/s
[info]                  ·gc.alloc.rate:                                  1258.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26217.286 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 81246.948 ops/s
[info]                  ·gc.alloc.rate:                                  1251.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19781.775 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   81062.243 ±(99.9%) 3546.177 ops/s [Average]
[info]   (min, avg, max) = (79492.284, 81062.243, 81739.726), stdev = 920.931
[info]   CI (99.9%): [77516.066, 84608.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1248.268 ±(99.9%) 54.827 MB/sec [Average]
[info]   (min, avg, max) = (1223.978, 1248.268, 1258.668), stdev = 14.239
[info]   CI (99.9%): [1193.440, 1303.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.005, 24240.005, 24240.005), stdev = 0.001
[info]   CI (99.9%): [24240.004, 24240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.521 ±(99.9%) 4.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.521, 2.509), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 4.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.281 ±(99.9%) 716.165 MB/sec [Average]
[info]   (min, avg, max) = (1012.379, 1220.281, 1361.449), stdev = 185.986
[info]   CI (99.9%): [504.116, 1936.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23701.999 ±(99.9%) 14035.257 B/op [Average]
[info]   (min, avg, max) = (19646.178, 23701.999, 26641.052), stdev = 3644.912
[info]   CI (99.9%): [9666.741, 37737.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.095 ±(99.9%) 155.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.095, 90.476), stdev = 40.462
[info]   CI (99.9%): [≈ 0, 173.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 17.000), stdev = 6.301
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 88.81% complete, ETA 00:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94594.412 ops/s
[info] # Warmup Iteration   2: 104971.174 ops/s
[info] # Warmup Iteration   3: 105178.847 ops/s
[info] Iteration   1: 107616.388 ops/s
[info]                  ·gc.alloc.rate:                                  1582.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24745.271 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                48.711 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 109772.132 ops/s
[info]                  ·gc.alloc.rate:                                  1613.696 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.165 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19522.073 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 109431.905 ops/s
[info]                  ·gc.alloc.rate:                                  1608.407 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24477.503 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 108558.979 ops/s
[info]                  ·gc.alloc.rate:            1595.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24674.762 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 108153.282 ops/s
[info]                  ·gc.alloc.rate:                                  1589.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19814.266 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   108706.537 ±(99.9%) 3432.229 ops/s [Average]
[info]   (min, avg, max) = (107616.388, 108706.537, 109772.132), stdev = 891.339
[info]   CI (99.9%): [105274.308, 112138.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1597.898 ±(99.9%) 50.341 MB/sec [Average]
[info]   (min, avg, max) = (1582.040, 1597.898, 1613.696), stdev = 13.073
[info]   CI (99.9%): [1547.557, 1648.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23136.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23136.004, 23136.004, 23136.004), stdev = 0.001
[info]   CI (99.9%): [23136.003, 23136.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.068), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.238 ±(99.9%) 1.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.238, 0.992), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 1.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.722 ±(99.9%) 710.827 MB/sec [Average]
[info]   (min, avg, max) = (1361.467, 1563.722, 1701.761), stdev = 184.600
[info]   CI (99.9%): [852.894, 2274.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   22646.775 ±(99.9%) 10484.586 B/op [Average]
[info]   (min, avg, max) = (19522.073, 22646.775, 24745.271), stdev = 2722.814
[info]   CI (99.9%): [12162.190, 33131.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.742 ±(99.9%) 83.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.742, 48.711), stdev = 21.784
[info]   CI (99.9%): [≈ 0, 93.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.05% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23780.141 ops/s
[info] # Warmup Iteration   2: 40181.360 ops/s
[info] # Warmup Iteration   3: 39524.641 ops/s
[info] Iteration   1: 41093.902 ops/s
[info]                  ·gc.alloc.rate:                                  2160.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82776.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.468 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78220.336 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 41279.804 ops/s
[info]                  ·gc.alloc.rate:                                  2170.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82776.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77866.063 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 40673.514 ops/s
[info]                  ·gc.alloc.rate:                                  2139.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82776.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.496 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92201.484 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 41605.796 ops/s
[info]                  ·gc.alloc.rate:                                  2188.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82776.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.645 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77252.355 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 41314.988 ops/s
[info]                  ·gc.alloc.rate:                                  2173.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82776.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90771.190 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   41193.601 ±(99.9%) 1323.441 ops/s [Average]
[info]   (min, avg, max) = (40673.514, 41193.601, 41605.796), stdev = 343.693
[info]   CI (99.9%): [39870.160, 42517.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2166.573 ±(99.9%) 70.573 MB/sec [Average]
[info]   (min, avg, max) = (2139.155, 2166.573, 2188.712), stdev = 18.328
[info]   CI (99.9%): [2096.000, 2237.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82776.010 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (82776.010, 82776.010, 82776.011), stdev = 0.001
[info]   CI (99.9%): [82776.008, 82776.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
[info]   CI (99.9%): [0.003, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.499 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (0.386, 0.499, 0.645), stdev = 0.093
[info]   CI (99.9%): [0.139, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.533 ±(99.9%) 719.269 MB/sec [Average]
[info]   (min, avg, max) = (2041.751, 2178.533, 2383.571), stdev = 186.792
[info]   CI (99.9%): [1459.264, 2897.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83262.286 ±(99.9%) 29004.875 B/op [Average]
[info]   (min, avg, max) = (77252.355, 83262.286, 92201.484), stdev = 7532.474
[info]   CI (99.9%): [54257.411, 112267.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.30% complete, ETA 00:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184792.220 ops/s
[info] # Warmup Iteration   2: 239152.727 ops/s
[info] # Warmup Iteration   3: 240016.642 ops/s
[info] Iteration   1: 243473.951 ops/s
[info]                  ·gc.alloc.rate:            1158.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6536.484 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 240244.675 ops/s
[info]                  ·gc.alloc.rate:                   1142.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8832.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.819 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 242665.445 ops/s
[info]                  ·gc.alloc.rate:                                  1154.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7488.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.919 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6623.295 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 241430.966 ops/s
[info]                  ·gc.alloc.rate:                                  1148.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7488.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8876.043 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 243680.980 ops/s
[info]                  ·gc.alloc.rate:                                  1159.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7488.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6595.629 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   242299.203 ±(99.9%) 5579.579 ops/s [Average]
[info]   (min, avg, max) = (240244.675, 242299.203, 243680.980), stdev = 1448.999
[info]   CI (99.9%): [236719.624, 247878.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1152.784 ±(99.9%) 27.040 MB/sec [Average]
[info]   (min, avg, max) = (1142.830, 1152.784, 1159.297), stdev = 7.022
[info]   CI (99.9%): [1125.744, 1179.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.002, 7488.002, 7488.002), stdev = 0.001
[info]   CI (99.9%): [7488.001, 7488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.194 ±(99.9%) 1.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.919), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.656 ±(99.9%) 710.639 MB/sec [Average]
[info]   (min, avg, max) = (1011.357, 1152.656, 1361.389), stdev = 184.551
[info]   CI (99.9%): [442.017, 1863.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7492.783 ±(99.9%) 4787.654 B/op [Average]
[info]   (min, avg, max) = (6536.484, 7492.783, 8876.043), stdev = 1243.338
[info]   CI (99.9%): [2705.130, 12280.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.364 ±(99.9%) 37.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.364, 21.819), stdev = 9.758
[info]   CI (99.9%): [≈ 0, 41.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 5.263
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.55% complete, ETA 00:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245848.702 ops/s
[info] # Warmup Iteration   2: 452087.265 ops/s
[info] # Warmup Iteration   3: 450152.604 ops/s
[info] Iteration   1: 465425.283 ops/s
[info]                  ·gc.alloc.rate:            409.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1137.514 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 468503.853 ops/s
[info]                  ·gc.alloc.rate:            411.969 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 468401.239 ops/s
[info]                  ·gc.alloc.rate:            411.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1130.319 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 466729.116 ops/s
[info]                  ·gc.alloc.rate:                   410.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1132.090 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 465566.585 ops/s
[info]                  ·gc.alloc.rate:                   409.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2272.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   466925.215 ±(99.9%) 5713.009 ops/s [Average]
[info]   (min, avg, max) = (465425.283, 466925.215, 468503.853), stdev = 1483.650
[info]   CI (99.9%): [461212.207, 472638.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   410.581 ±(99.9%) 5.111 MB/sec [Average]
[info]   (min, avg, max) = (409.276, 410.581, 411.969), stdev = 1.327
[info]   CI (99.9%): [405.470, 415.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1384.001, 1384.001, 1384.001), stdev = 0.001
[info]   CI (99.9%): [1384.001, 1384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.386 ±(99.9%) 578.352 MB/sec [Average]
[info]   (min, avg, max) = (335.642, 403.386, 672.065), stdev = 150.196
[info]   CI (99.9%): [≈ 0, 981.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1360.423 ±(99.9%) 1962.479 B/op [Average]
[info]   (min, avg, max) = (1130.097, 1360.423, 2272.097), stdev = 509.650
[info]   CI (99.9%): [≈ 0, 3322.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.900 ±(99.9%) 4.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 2.252), stdev = 1.232
[info]   CI (99.9%): [≈ 0, 5.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.80% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 710894.428 ops/s
[info] # Warmup Iteration   2: 792405.023 ops/s
[info] # Warmup Iteration   3: 799315.567 ops/s
[info] Iteration   1: 801111.653 ops/s
[info]                  ·gc.alloc.rate:            431.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1321.741 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 803588.281 ops/s
[info]                  ·gc.alloc.rate:                   432.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        658.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 797476.356 ops/s
[info]                  ·gc.alloc.rate:            429.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 805522.571 ops/s
[info]                  ·gc.alloc.rate:            433.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 658.584 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 804178.269 ops/s
[info]                  ·gc.alloc.rate:            433.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1316.771 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   802375.426 ±(99.9%) 12210.821 ops/s [Average]
[info]   (min, avg, max) = (797476.356, 802375.426, 805522.571), stdev = 3171.111
[info]   CI (99.9%): [790164.605, 814586.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   432.275 ±(99.9%) 6.463 MB/sec [Average]
[info]   (min, avg, max) = (429.672, 432.275, 433.954), stdev = 1.678
[info]   CI (99.9%): [425.812, 438.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.184 ±(99.9%) 708.574 MB/sec [Average]
[info]   (min, avg, max) = (336.310, 471.184, 672.787), stdev = 184.014
[info]   CI (99.9%): [≈ 0, 1179.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   924.236 ±(99.9%) 1388.606 B/op [Average]
[info]   (min, avg, max) = (658.584, 924.236, 1321.741), stdev = 360.617
[info]   CI (99.9%): [≈ 0, 2312.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 2.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 1.305), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.05% complete, ETA 00:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743474.295 ops/s
[info] # Warmup Iteration   2: 815011.870 ops/s
[info] # Warmup Iteration   3: 798253.417 ops/s
[info] Iteration   1: 814307.335 ops/s
[info]                  ·gc.alloc.rate:      8.276 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 815685.713 ops/s
[info]                  ·gc.alloc.rate:      8.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 816291.331 ops/s
[info]                  ·gc.alloc.rate:      8.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 815756.022 ops/s
[info]                  ·gc.alloc.rate:      8.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 815640.038 ops/s
[info]                  ·gc.alloc.rate:      8.291 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   815536.088 ±(99.9%) 2830.807 ops/s [Average]
[info]   (min, avg, max) = (814307.335, 815536.088, 816291.331), stdev = 735.152
[info]   CI (99.9%): [812705.281, 818366.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.290 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (8.276, 8.290, 8.297), stdev = 0.008
[info]   CI (99.9%): [8.259, 8.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.30% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20101.157 ops/s
[info] # Warmup Iteration   2: 29969.441 ops/s
[info] # Warmup Iteration   3: 30133.478 ops/s
[info] Iteration   1: 29454.594 ops/s
[info]                  ·gc.alloc.rate:                   1467.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              78431.956 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89872.858 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 213.559 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 30182.975 ops/s
[info]                  ·gc.alloc.rate:                                  1504.102 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.978 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70998.057 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30541.282 ops/s
[info]                  ·gc.alloc.rate:                                  1521.868 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87707.447 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30587.928 ops/s
[info]                  ·gc.alloc.rate:            1524.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70058.162 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 29873.487 ops/s
[info]                  ·gc.alloc.rate:                                  1488.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89662.372 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30128.053 ±(99.9%) 1830.181 ops/s [Average]
[info]   (min, avg, max) = (29454.594, 30128.053, 30587.928), stdev = 475.292
[info]   CI (99.9%): [28297.872, 31958.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1501.174 ±(99.9%) 91.662 MB/sec [Average]
[info]   (min, avg, max) = (1467.498, 1501.174, 1524.161), stdev = 23.804
[info]   CI (99.9%): [1409.511, 1592.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78419.202 ±(99.9%) 27.454 B/op [Average]
[info]   (min, avg, max) = (78416.013, 78419.202, 78431.956), stdev = 7.130
[info]   CI (99.9%): [78391.749, 78446.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.172), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.856 ±(99.9%) 15.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.856, 8.978), stdev = 3.982
[info]   CI (99.9%): [≈ 0, 17.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.793 ±(99.9%) 703.860 MB/sec [Average]
[info]   (min, avg, max) = (1361.710, 1561.793, 1702.193), stdev = 182.790
[info]   CI (99.9%): [857.933, 2265.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81659.779 ±(99.9%) 39285.075 B/op [Average]
[info]   (min, avg, max) = (70058.162, 81659.779, 89872.858), stdev = 10202.209
[info]   CI (99.9%): [42374.704, 120944.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.712 ±(99.9%) 367.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.712, 213.559), stdev = 95.507
[info]   CI (99.9%): [≈ 0, 410.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 90.55% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3446699.451 ops/s
[info] # Warmup Iteration   2: 4908889.461 ops/s
[info] # Warmup Iteration   3: 4952015.829 ops/s
[info] Iteration   1: 5006325.643 ops/s
[info]                  ·gc.alloc.rate:                                  3612.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1177.123 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 4948534.519 ops/s
[info]                  ·gc.alloc.rate:            3572.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       1136.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3404.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1082.635 B/op
[info]                  ·gc.count:                 10.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 4925759.181 ops/s
[info]                  ·gc.alloc.rate:                                  3554.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1196.446 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   4: 4953398.600 ops/s
[info]                  ·gc.alloc.rate:                                  3575.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1081.581 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 4985336.254 ops/s
[info]                  ·gc.alloc.rate:                                  3597.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1182.054 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4963870.839 ±(99.9%) 122686.124 ops/s [Average]
[info]   (min, avg, max) = (4925759.181, 4963870.839, 5006325.643), stdev = 31861.197
[info]   CI (99.9%): [4841184.715, 5086556.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3582.615 ±(99.9%) 87.490 MB/sec [Average]
[info]   (min, avg, max) = (3554.813, 3582.615, 3612.702), stdev = 22.721
[info]   CI (99.9%): [3495.125, 3670.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1136.000, 1136.000, 1136.000), stdev = 0.001
[info]   CI (99.9%): [1136.000, 1136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3607.953 ±(99.9%) 715.742 MB/sec [Average]
[info]   (min, avg, max) = (3404.015, 3607.953, 3743.964), stdev = 185.876
[info]   CI (99.9%): [2892.211, 4323.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1143.968 ±(99.9%) 219.162 B/op [Average]
[info]   (min, avg, max) = (1081.581, 1143.968, 1196.446), stdev = 56.916
[info]   CI (99.9%): [924.806, 1363.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.200, 14.000), stdev = 2.775
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 90.80% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.894 ops/s
[info] # Warmup Iteration   2: 7349431.367 ops/s
[info] # Warmup Iteration   3: 7307805.398 ops/s
[info] Iteration   1: 7756397.677 ops/s
[info]                  ·gc.alloc.rate:            828.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 203.157 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 7818339.391 ops/s
[info]                  ·gc.alloc.rate:            834.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 7716446.265 ops/s
[info]                  ·gc.alloc.rate:            823.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204.199 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 7799328.744 ops/s
[info]                  ·gc.alloc.rate:            832.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 7681106.630 ops/s
[info]                  ·gc.alloc.rate:                                  819.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.475 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       207.324 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.365 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7754323.741 ±(99.9%) 218871.118 ops/s [Average]
[info]   (min, avg, max) = (7681106.630, 7754323.741, 7818339.391), stdev = 56840.134
[info]   CI (99.9%): [7535452.623, 7973194.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   827.752 ±(99.9%) 23.331 MB/sec [Average]
[info]   (min, avg, max) = (819.826, 827.752, 834.565), stdev = 6.059
[info]   CI (99.9%): [804.421, 851.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.095 ±(99.9%) 0.818 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.475), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 0.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   869.862 ±(99.9%) 711.726 MB/sec [Average]
[info]   (min, avg, max) = (667.405, 869.862, 1011.723), stdev = 184.833
[info]   CI (99.9%): [158.136, 1581.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   176.747 ±(99.9%) 148.525 B/op [Average]
[info]   (min, avg, max) = (134.365, 176.747, 207.324), stdev = 38.572
[info]   CI (99.9%): [28.221, 325.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.660), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.273 ±(99.9%) 2.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.273, 1.365), stdev = 0.610
[info]   CI (99.9%): [≈ 0, 2.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 14.000), stdev = 2.408
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 91.04% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1505883.671 ops/s
[info] # Warmup Iteration   2: 3950008.502 ops/s
[info] # Warmup Iteration   3: 3898041.611 ops/s
[info] Iteration   1: 4012283.673 ops/s
[info]                  ·gc.alloc.rate:                                  2079.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       799.550 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.568 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 4043133.667 ops/s
[info]                  ·gc.alloc.rate:                                  2096.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       795.031 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4021674.725 ops/s
[info]                  ·gc.alloc.rate:                                  2084.775 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       932.485 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4048745.448 ops/s
[info]                  ·gc.alloc.rate:                                  2098.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       793.933 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4009292.442 ops/s
[info]                  ·gc.alloc.rate:            2078.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       816.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 801.742 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4027025.991 ±(99.9%) 69194.979 ops/s [Average]
[info]   (min, avg, max) = (4009292.442, 4027025.991, 4048745.448), stdev = 17969.716
[info]   CI (99.9%): [3957831.012, 4096220.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2087.668 ±(99.9%) 36.651 MB/sec [Average]
[info]   (min, avg, max) = (2078.288, 2087.668, 2098.826), stdev = 9.518
[info]   CI (99.9%): [2051.017, 2124.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2109.412 ±(99.9%) 587.626 MB/sec [Average]
[info]   (min, avg, max) = (2037.902, 2109.412, 2382.378), stdev = 152.605
[info]   CI (99.9%): [1521.787, 2697.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   824.548 ±(99.9%) 232.669 B/op [Average]
[info]   (min, avg, max) = (793.933, 824.548, 932.485), stdev = 60.423
[info]   CI (99.9%): [591.879, 1057.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.314 ±(99.9%) 2.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.568), stdev = 0.701
[info]   CI (99.9%): [≈ 0, 3.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 91.29% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6990354.263 ops/s
[info] # Warmup Iteration   2: 7635668.463 ops/s
[info] # Warmup Iteration   3: 7663431.707 ops/s
[info] Iteration   1: 7647905.498 ops/s
[info]                  ·gc.alloc.rate:            816.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.723 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7577147.955 ops/s
[info]                  ·gc.alloc.rate:            808.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140.024 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7524450.851 ops/s
[info]                  ·gc.alloc.rate:            803.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 211.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 7402147.611 ops/s
[info]                  ·gc.alloc.rate:                   790.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        143.335 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7128632.242 ops/s
[info]                  ·gc.alloc.rate:                                  760.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.303 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7456056.831 ±(99.9%) 785049.361 ops/s [Average]
[info]   (min, avg, max) = (7128632.242, 7456056.831, 7647905.498), stdev = 203874.826
[info]   CI (99.9%): [6671007.471, 8241106.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   795.790 ±(99.9%) 83.504 MB/sec [Average]
[info]   (min, avg, max) = (760.959, 795.790, 816.199), stdev = 21.686
[info]   CI (99.9%): [712.286, 879.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.775 ±(99.9%) 577.612 MB/sec [Average]
[info]   (min, avg, max) = (673.960, 742.775, 1011.059), stdev = 150.004
[info]   CI (99.9%): [165.163, 1320.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   156.778 ±(99.9%) 119.069 B/op [Average]
[info]   (min, avg, max) = (138.723, 156.778, 211.508), stdev = 30.922
[info]   CI (99.9%): [37.709, 275.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.142 ±(99.9%) 1.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.708), stdev = 0.317
[info]   CI (99.9%): [≈ 0, 1.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 91.54% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2316873.786 ops/s
[info] # Warmup Iteration   2: 4478758.159 ops/s
[info] # Warmup Iteration   3: 4498346.770 ops/s
[info] Iteration   1: 4533758.898 ops/s
[info]                  ·gc.alloc.rate:                                  2442.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       827.148 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 4608639.229 ops/s
[info]                  ·gc.alloc.rate:                                  2482.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       813.720 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4593369.268 ops/s
[info]                  ·gc.alloc.rate:                                  2474.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       816.383 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4544501.875 ops/s
[info]                  ·gc.alloc.rate:                                  2447.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       943.099 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 4578830.054 ops/s
[info]                  ·gc.alloc.rate:                                  2466.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       819.001 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4571819.865 ±(99.9%) 122739.764 ops/s [Average]
[info]   (min, avg, max) = (4533758.898, 4571819.865, 4608639.229), stdev = 31875.127
[info]   CI (99.9%): [4449080.101, 4694559.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2462.925 ±(99.9%) 65.736 MB/sec [Average]
[info]   (min, avg, max) = (2442.809, 2462.925, 2482.646), stdev = 17.071
[info]   CI (99.9%): [2397.188, 2528.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2450.422 ±(99.9%) 585.727 MB/sec [Average]
[info]   (min, avg, max) = (2382.239, 2450.422, 2722.527), stdev = 152.111
[info]   CI (99.9%): [1864.695, 3036.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   843.870 ±(99.9%) 214.473 B/op [Average]
[info]   (min, avg, max) = (813.720, 843.870, 943.099), stdev = 55.698
[info]   CI (99.9%): [629.397, 1058.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 91.79% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2049486.457 ops/s
[info] # Warmup Iteration   2: 3301060.019 ops/s
[info] # Warmup Iteration   3: 3257588.578 ops/s
[info] Iteration   1: 3342647.292 ops/s
[info]                  ·gc.alloc.rate:            798.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3340441.208 ops/s
[info]                  ·gc.alloc.rate:            797.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.626 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3329111.197 ops/s
[info]                  ·gc.alloc.rate:            795.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.062 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 3341255.576 ops/s
[info]                  ·gc.alloc.rate:            798.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.549 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3325940.620 ops/s
[info]                  ·gc.alloc.rate:                                  794.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.173 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       481.552 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.576 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3335879.179 ±(99.9%) 29833.523 ops/s [Average]
[info]   (min, avg, max) = (3325940.620, 3335879.179, 3342647.292), stdev = 7747.671
[info]   CI (99.9%): [3306045.655, 3365712.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   796.837 ±(99.9%) 7.032 MB/sec [Average]
[info]   (min, avg, max) = (794.537, 796.837, 798.480), stdev = 1.826
[info]   CI (99.9%): [789.805, 803.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.173), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.138 ±(99.9%) 717.773 MB/sec [Average]
[info]   (min, avg, max) = (673.960, 810.138, 1017.582), stdev = 186.403
[info]   CI (99.9%): [92.365, 1527.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   382.437 ±(99.9%) 342.302 B/op [Average]
[info]   (min, avg, max) = (317.397, 382.437, 481.552), stdev = 88.895
[info]   CI (99.9%): [40.135, 724.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.315 ±(99.9%) 2.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 1.576), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 92.04% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.891 ops/s
[info] # Warmup Iteration   2: 7652770.418 ops/s
[info] # Warmup Iteration   3: 7839743.926 ops/s
[info] Iteration   1: 7994415.719 ops/s
[info]                  ·gc.alloc.rate:            772.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.401 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 7989871.969 ops/s
[info]                  ·gc.alloc.rate:            771.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197.215 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 8009261.691 ops/s
[info]                  ·gc.alloc.rate:            773.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 8070098.161 ops/s
[info]                  ·gc.alloc.rate:            779.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.172 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 7812301.321 ops/s
[info]                  ·gc.alloc.rate:                   754.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        202.373 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.476 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7975189.772 ±(99.9%) 371773.388 ops/s [Average]
[info]   (min, avg, max) = (7812301.321, 7975189.772, 8070098.161), stdev = 96548.368
[info]   CI (99.9%): [7603416.385, 8346963.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   770.226 ±(99.9%) 35.920 MB/sec [Average]
[info]   (min, avg, max) = (754.491, 770.226, 779.409), stdev = 9.328
[info]   CI (99.9%): [734.306, 806.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.604 ±(99.9%) 707.113 MB/sec [Average]
[info]   (min, avg, max) = (667.368, 801.604, 1004.531), stdev = 183.635
[info]   CI (99.9%): [94.490, 1508.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   158.464 ±(99.9%) 145.462 B/op [Average]
[info]   (min, avg, max) = (130.172, 158.464, 202.373), stdev = 37.776
[info]   CI (99.9%): [13.002, 303.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 12.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.327), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 14.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.295 ±(99.9%) 2.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.295, 1.476), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 15.000), stdev = 2.510
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 92.29% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 987568.016 ops/s
[info] # Warmup Iteration   2: 1843486.819 ops/s
[info] # Warmup Iteration   3: 1981041.305 ops/s
[info] Iteration   1: 1990776.955 ops/s
[info]                  ·gc.alloc.rate:            617.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1997739.358 ops/s
[info]                  ·gc.alloc.rate:            619.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530.060 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2020575.140 ops/s
[info]                  ·gc.alloc.rate:            626.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 524.069 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2028174.627 ops/s
[info]                  ·gc.alloc.rate:            629.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2015835.817 ops/s
[info]                  ·gc.alloc.rate:            624.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 525.265 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2010620.380 ±(99.9%) 60705.125 ops/s [Average]
[info]   (min, avg, max) = (1990776.955, 2010620.380, 2028174.627), stdev = 15764.928
[info]   CI (99.9%): [1949915.254, 2071325.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   623.389 ±(99.9%) 19.003 MB/sec [Average]
[info]   (min, avg, max) = (617.235, 623.389, 629.060), stdev = 4.935
[info]   CI (99.9%): [604.386, 642.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.463 ±(99.9%) 578.944 MB/sec [Average]
[info]   (min, avg, max) = (336.509, 605.463, 672.759), stdev = 150.350
[info]   CI (99.9%): [26.520, 1184.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   474.469 ±(99.9%) 459.568 B/op [Average]
[info]   (min, avg, max) = (261.051, 474.469, 531.899), stdev = 119.348
[info]   CI (99.9%): [14.901, 934.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 92.54% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6511221.315 ops/s
[info] # Warmup Iteration   2: 9718078.909 ops/s
[info] # Warmup Iteration   3: 9711038.631 ops/s
[info] Iteration   1: 9817921.358 ops/s
[info]                  ·gc.alloc.rate:                   947.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        161.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9876122.052 ops/s
[info]                  ·gc.alloc.rate:            954.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.826 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 9475465.691 ops/s
[info]                  ·gc.alloc.rate:            915.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 111.751 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9159684.096 ops/s
[info]                  ·gc.alloc.rate:                                  884.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       174.780 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.687 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 9180358.552 ops/s
[info]                  ·gc.alloc.rate:                                  886.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       175.071 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9501910.350 ±(99.9%) 1307392.915 ops/s [Average]
[info]   (min, avg, max) = (9159684.096, 9501910.350, 9876122.052), stdev = 339525.788
[info]   CI (99.9%): [8194517.435, 10809303.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   917.604 ±(99.9%) 126.518 MB/sec [Average]
[info]   (min, avg, max) = (884.512, 917.604, 954.003), stdev = 32.856
[info]   CI (99.9%): [791.086, 1044.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.181), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.107 ±(99.9%) 588.632 MB/sec [Average]
[info]   (min, avg, max) = (672.788, 946.107, 1020.996), stdev = 152.866
[info]   CI (99.9%): [357.475, 1534.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   156.885 ±(99.9%) 100.591 B/op [Average]
[info]   (min, avg, max) = (111.751, 156.885, 175.071), stdev = 26.123
[info]   CI (99.9%): [56.293, 257.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.159 ±(99.9%) 1.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.687), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.79% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5735638.692 ops/s
[info] # Warmup Iteration   2: 7998718.421 ops/s
[info] # Warmup Iteration   3: 7928172.834 ops/s
[info] Iteration   1: 7970547.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7973545.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7967505.418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7966957.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7968349.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7969380.924 ±(99.9%) 10396.107 ops/s [Average]
[info]   (min, avg, max) = (7966957.320, 7969380.924, 7973545.126), stdev = 2699.836
[info]   CI (99.9%): [7958984.818, 7979777.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 93.03% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2187737.086 ops/s
[info] # Warmup Iteration   2: 2899000.077 ops/s
[info] # Warmup Iteration   3: 3053589.899 ops/s
[info] Iteration   1: 3055810.634 ops/s
[info]                  ·gc.alloc.rate:            978.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 519.753 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3048958.820 ops/s
[info]                  ·gc.alloc.rate:            976.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 520.931 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 3039271.571 ops/s
[info]                  ·gc.alloc.rate:                   973.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        522.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 3072642.235 ops/s
[info]                  ·gc.alloc.rate:                                  983.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       523.075 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 3079341.756 ops/s
[info]                  ·gc.alloc.rate:            985.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 521.935 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3059205.003 ±(99.9%) 63852.679 ops/s [Average]
[info]   (min, avg, max) = (3039271.571, 3059205.003, 3079341.756), stdev = 16582.338
[info]   CI (99.9%): [2995352.325, 3123057.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   979.523 ±(99.9%) 20.358 MB/sec [Average]
[info]   (min, avg, max) = (973.072, 979.523, 985.990), stdev = 5.287
[info]   CI (99.9%): [959.165, 999.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.846 ±(99.9%) 25.248 MB/sec [Average]
[info]   (min, avg, max) = (1008.866, 1013.846, 1021.077), stdev = 6.557
[info]   CI (99.9%): [988.598, 1039.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   521.659 ±(99.9%) 5.144 B/op [Average]
[info]   (min, avg, max) = (519.753, 521.659, 523.075), stdev = 1.336
[info]   CI (99.9%): [516.516, 526.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.414 ±(99.9%) 3.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.414, 2.070), stdev = 0.926
[info]   CI (99.9%): [≈ 0, 3.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.28% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605802.415 ops/s
[info] # Warmup Iteration   2: 852558.772 ops/s
[info] # Warmup Iteration   3: 844263.033 ops/s
[info] Iteration   1: 860405.654 ops/s
[info]                  ·gc.alloc.rate:            1430.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2466.168 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 872191.746 ops/s
[info]                  ·gc.alloc.rate:                                  1449.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2450.944 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.010 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 861630.098 ops/s
[info]                  ·gc.alloc.rate:                                  1431.905 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3108.851 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 875271.250 ops/s
[info]                  ·gc.alloc.rate:                                  1454.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2448.324 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 874725.727 ops/s
[info]                  ·gc.alloc.rate:            1454.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2449.768 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   868844.895 ±(99.9%) 27924.320 ops/s [Average]
[info]   (min, avg, max) = (860405.654, 868844.895, 875271.250), stdev = 7251.857
[info]   CI (99.9%): [840920.576, 896769.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1444.162 ±(99.9%) 46.876 MB/sec [Average]
[info]   (min, avg, max) = (1430.155, 1444.162, 1454.744), stdev = 12.174
[info]   CI (99.9%): [1397.286, 1491.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.000, 2616.000, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.000, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.031 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.308 ±(99.9%) 593.127 MB/sec [Average]
[info]   (min, avg, max) = (1348.243, 1426.308, 1701.674), stdev = 154.033
[info]   CI (99.9%): [833.181, 2019.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2584.811 ±(99.9%) 1128.377 B/op [Average]
[info]   (min, avg, max) = (2448.324, 2584.811, 3108.851), stdev = 293.036
[info]   CI (99.9%): [1456.434, 3713.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.202 ±(99.9%) 10.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.202, 6.010), stdev = 2.688
[info]   CI (99.9%): [≈ 0, 11.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 93.53% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.867 ops/s
[info] # Warmup Iteration   2: 2632674.599 ops/s
[info] # Warmup Iteration   3: 2686940.179 ops/s
[info] Iteration   1: 2667912.081 ops/s
[info]                  ·gc.alloc.rate:            745.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 393.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2685292.217 ops/s
[info]                  ·gc.alloc.rate:            750.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 586.843 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 2676935.697 ops/s
[info]                  ·gc.alloc.rate:            748.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 392.450 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2618789.981 ops/s
[info]                  ·gc.alloc.rate:                   732.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        400.754 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 2634181.999 ops/s
[info]                  ·gc.alloc.rate:                   736.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        398.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2656622.395 ±(99.9%) 110549.514 ops/s [Average]
[info]   (min, avg, max) = (2618789.981, 2656622.395, 2685292.217), stdev = 28709.358
[info]   CI (99.9%): [2546072.881, 2767171.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   742.650 ±(99.9%) 30.827 MB/sec [Average]
[info]   (min, avg, max) = (732.076, 742.650, 750.631), stdev = 8.006
[info]   CI (99.9%): [711.824, 773.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   734.054 ±(99.9%) 574.930 MB/sec [Average]
[info]   (min, avg, max) = (666.778, 734.054, 1001.143), stdev = 149.307
[info]   CI (99.9%): [159.124, 1308.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   434.522 ±(99.9%) 328.148 B/op [Average]
[info]   (min, avg, max) = (392.450, 434.522, 586.843), stdev = 85.219
[info]   CI (99.9%): [106.374, 762.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.558 ±(99.9%) 3.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.388), stdev = 1.038
[info]   CI (99.9%): [≈ 0, 4.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.400, 14.000), stdev = 2.074
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.78% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429944.583 ops/s
[info] # Warmup Iteration   2: 1079600.384 ops/s
[info] # Warmup Iteration   3: 1099608.708 ops/s
[info] Iteration   1: 1096732.671 ops/s
[info]                  ·gc.alloc.rate:            758.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 965.471 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1094346.397 ops/s
[info]                  ·gc.alloc.rate:            756.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1451.411 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1102683.435 ops/s
[info]                  ·gc.alloc.rate:            762.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 960.286 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1099755.324 ops/s
[info]                  ·gc.alloc.rate:            760.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 962.840 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1097457.512 ops/s
[info]                  ·gc.alloc.rate:                                  758.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1088.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       970.584 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.732 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1098195.068 ±(99.9%) 12188.170 ops/s [Average]
[info]   (min, avg, max) = (1094346.397, 1098195.068, 1102683.435), stdev = 3165.229
[info]   CI (99.9%): [1086006.898, 1110383.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   759.172 ±(99.9%) 8.704 MB/sec [Average]
[info]   (min, avg, max) = (756.499, 759.172, 762.479), stdev = 2.260
[info]   CI (99.9%): [750.468, 767.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.869 ±(99.9%) 577.602 MB/sec [Average]
[info]   (min, avg, max) = (672.707, 740.869, 1009.183), stdev = 150.002
[info]   CI (99.9%): [163.267, 1318.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1062.119 ±(99.9%) 838.110 B/op [Average]
[info]   (min, avg, max) = (960.286, 1062.119, 1451.411), stdev = 217.655
[info]   CI (99.9%): [224.008, 1900.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.146 ±(99.9%) 9.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.146, 5.732), stdev = 2.563
[info]   CI (99.9%): [≈ 0, 11.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 12.000), stdev = 2.510
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 94.03% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1572344.290 ops/s
[info] # Warmup Iteration   2: 1695801.390 ops/s
[info] # Warmup Iteration   3: 1687045.670 ops/s
[info] Iteration   1: 1705785.796 ops/s
[info]                  ·gc.alloc.rate:                   476.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        310.989 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1706007.124 ops/s
[info]                  ·gc.alloc.rate:            476.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 311.569 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 1699415.322 ops/s
[info]                  ·gc.alloc.rate:            474.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 624.945 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1704372.039 ops/s
[info]                  ·gc.alloc.rate:            476.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 311.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1698710.729 ops/s
[info]                  ·gc.alloc.rate:            474.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 624.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1702858.202 ±(99.9%) 13591.352 ops/s [Average]
[info]   (min, avg, max) = (1698710.729, 1702858.202, 1706007.124), stdev = 3529.631
[info]   CI (99.9%): [1689266.850, 1716449.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   476.038 ±(99.9%) 3.994 MB/sec [Average]
[info]   (min, avg, max) = (474.838, 476.038, 476.930), stdev = 1.037
[info]   CI (99.9%): [472.044, 480.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   472.115 ±(99.9%) 710.872 MB/sec [Average]
[info]   (min, avg, max) = (337.073, 472.115, 674.653), stdev = 184.611
[info]   CI (99.9%): [≈ 0, 1182.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   436.669 ±(99.9%) 661.188 B/op [Average]
[info]   (min, avg, max) = (310.989, 436.669, 624.945), stdev = 171.708
[info]   CI (99.9%): [≈ 0, 1097.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.123 ±(99.9%) 1.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.615), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 94.28% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 644399.068 ops/s
[info] # Warmup Iteration   2: 1221638.742 ops/s
[info] # Warmup Iteration   3: 1242501.445 ops/s
[info] Iteration   1: 1227318.888 ops/s
[info]                  ·gc.alloc.rate:            873.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1294.164 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1242198.412 ops/s
[info]                  ·gc.alloc.rate:            884.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.434 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1222009.811 ops/s
[info]                  ·gc.alloc.rate:            869.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1299.772 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1238677.995 ops/s
[info]                  ·gc.alloc.rate:                                  881.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1287.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.078 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 1251517.806 ops/s
[info]                  ·gc.alloc.rate:                                  890.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       856.113 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1236344.583 ±(99.9%) 45434.648 ops/s [Average]
[info]   (min, avg, max) = (1222009.811, 1236344.583, 1251517.806), stdev = 11799.234
[info]   CI (99.9%): [1190909.934, 1281779.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   879.724 ±(99.9%) 32.563 MB/sec [Average]
[info]   (min, avg, max) = (869.464, 879.724, 890.516), stdev = 8.456
[info]   CI (99.9%): [847.162, 912.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.048 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.146), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.184), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   876.932 ±(99.9%) 703.689 MB/sec [Average]
[info]   (min, avg, max) = (672.852, 876.932, 1013.117), stdev = 182.746
[info]   CI (99.9%): [173.243, 1580.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1117.970 ±(99.9%) 927.097 B/op [Average]
[info]   (min, avg, max) = (852.434, 1117.970, 1299.772), stdev = 240.764
[info]   CI (99.9%): [190.872, 2045.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.016 ±(99.9%) 8.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.016, 5.078), stdev = 2.271
[info]   CI (99.9%): [≈ 0, 9.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.200, 12.000), stdev = 4.324
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.53% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1070514.048 ops/s
[info] # Warmup Iteration   2: 1741213.150 ops/s
[info] # Warmup Iteration   3: 1764872.944 ops/s
[info] Iteration   1: 1771314.647 ops/s
[info]                  ·gc.alloc.rate:            1440.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1198.025 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1776103.331 ops/s
[info]                  ·gc.alloc.rate:                                  1444.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1203.624 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1790387.138 ops/s
[info]                  ·gc.alloc.rate:                                  1455.897 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1196.878 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1787812.591 ops/s
[info]                  ·gc.alloc.rate:                                  1453.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1498.301 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1762226.904 ops/s
[info]                  ·gc.alloc.rate:                                  1432.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1216.039 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1777568.922 ±(99.9%) 44983.402 ops/s [Average]
[info]   (min, avg, max) = (1762226.904, 1777568.922, 1790387.138), stdev = 11682.047
[info]   CI (99.9%): [1732585.520, 1822552.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1445.476 ±(99.9%) 36.610 MB/sec [Average]
[info]   (min, avg, max) = (1432.973, 1445.476, 1455.897), stdev = 9.507
[info]   CI (99.9%): [1408.867, 1482.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1426.151 ±(99.9%) 593.697 MB/sec [Average]
[info]   (min, avg, max) = (1348.223, 1426.151, 1701.790), stdev = 154.181
[info]   CI (99.9%): [832.454, 2019.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1262.573 ±(99.9%) 508.264 B/op [Average]
[info]   (min, avg, max) = (1196.878, 1262.573, 1498.301), stdev = 131.995
[info]   CI (99.9%): [754.309, 1770.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 5.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.952), stdev = 1.320
[info]   CI (99.9%): [≈ 0, 5.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.207
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 94.78% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.895 ops/s
[info] # Warmup Iteration   2: 2858384.123 ops/s
[info] # Warmup Iteration   3: 2963107.580 ops/s
[info] Iteration   1: 2993297.845 ops/s
[info]                  ·gc.alloc.rate:            699.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350.954 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2980952.577 ops/s
[info]                  ·gc.alloc.rate:            696.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 352.412 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2994283.567 ops/s
[info]                  ·gc.alloc.rate:            700.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350.844 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2985878.464 ops/s
[info]                  ·gc.alloc.rate:            698.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 351.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2970267.059 ops/s
[info]                  ·gc.alloc.rate:            694.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 353.654 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2984935.902 ±(99.9%) 37984.567 ops/s [Average]
[info]   (min, avg, max) = (2970267.059, 2984935.902, 2994283.567), stdev = 9864.471
[info]   CI (99.9%): [2946951.335, 3022920.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   697.832 ±(99.9%) 8.934 MB/sec [Average]
[info]   (min, avg, max) = (694.412, 697.832, 700.069), stdev = 2.320
[info]   CI (99.9%): [688.897, 706.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.371 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (667.312, 667.371, 667.432), stdev = 0.050
[info]   CI (99.9%): [667.180, 667.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   351.940 ±(99.9%) 4.451 B/op [Average]
[info]   (min, avg, max) = (350.844, 351.940, 353.654), stdev = 1.156
[info]   CI (99.9%): [347.489, 356.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 95.02% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 845993.130 ops/s
[info] # Warmup Iteration   2: 1969582.299 ops/s
[info] # Warmup Iteration   3: 1999858.351 ops/s
[info] Iteration   1: 1998337.379 ops/s
[info]                  ·gc.alloc.rate:            893.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.830 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2001752.679 ops/s
[info]                  ·gc.alloc.rate:            895.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 528.993 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1997952.193 ops/s
[info]                  ·gc.alloc.rate:            893.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.982 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 2004040.321 ops/s
[info]                  ·gc.alloc.rate:                                  896.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       798.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.139 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 2019161.336 ops/s
[info]                  ·gc.alloc.rate:                                  903.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530.640 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2004248.781 ±(99.9%) 33527.699 ops/s [Average]
[info]   (min, avg, max) = (1997952.193, 2004248.781, 2019161.336), stdev = 8707.037
[info]   CI (99.9%): [1970721.083, 2037776.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   896.427 ±(99.9%) 14.806 MB/sec [Average]
[info]   (min, avg, max) = (893.615, 896.427, 903.025), stdev = 3.845
[info]   CI (99.9%): [881.621, 911.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.750 ±(99.9%) 706.877 MB/sec [Average]
[info]   (min, avg, max) = (672.764, 877.750, 1017.023), stdev = 183.574
[info]   CI (99.9%): [170.873, 1584.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   689.657 ±(99.9%) 561.903 B/op [Average]
[info]   (min, avg, max) = (528.993, 689.657, 798.842), stdev = 145.924
[info]   CI (99.9%): [127.755, 1251.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.628 ±(99.9%) 5.405 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 3.139), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.27% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720616.377 ops/s
[info] # Warmup Iteration   2: 2535846.190 ops/s
[info] # Warmup Iteration   3: 2550922.504 ops/s
[info] Iteration   1: 2558745.855 ops/s
[info]                  ·gc.alloc.rate:            598.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 413.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2541718.561 ops/s
[info]                  ·gc.alloc.rate:            594.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 416.585 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2561021.822 ops/s
[info]                  ·gc.alloc.rate:                   598.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        413.465 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2580322.466 ops/s
[info]                  ·gc.alloc.rate:            603.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.588 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2522567.516 ops/s
[info]                  ·gc.alloc.rate:            589.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 420.597 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2552875.244 ±(99.9%) 83861.216 ops/s [Average]
[info]   (min, avg, max) = (2522567.516, 2552875.244, 2580322.466), stdev = 21778.491
[info]   CI (99.9%): [2469014.028, 2636736.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   596.897 ±(99.9%) 19.669 MB/sec [Average]
[info]   (min, avg, max) = (589.731, 596.897, 603.283), stdev = 5.108
[info]   CI (99.9%): [577.228, 616.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.891 ±(99.9%) 578.743 MB/sec [Average]
[info]   (min, avg, max) = (337.032, 605.891, 674.020), stdev = 150.298
[info]   CI (99.9%): [27.148, 1184.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   374.010 ±(99.9%) 362.707 B/op [Average]
[info]   (min, avg, max) = (205.588, 374.010, 420.597), stdev = 94.194
[info]   CI (99.9%): [11.302, 736.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.409), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 0.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.52% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1796672.434 ops/s
[info] # Warmup Iteration   2: 2598707.085 ops/s
[info] # Warmup Iteration   3: 2602735.877 ops/s
[info] Iteration   1: 2610662.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2596892.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2594422.304 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2616309.858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2615558.192 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2606769.097 ±(99.9%) 40082.352 ops/s [Average]
[info]   (min, avg, max) = (2594422.304, 2606769.097, 2616309.858), stdev = 10409.259
[info]   CI (99.9%): [2566686.746, 2646851.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 95.77% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1306042.661 ops/s
[info] # Warmup Iteration   2: 1866440.384 ops/s
[info] # Warmup Iteration   3: 1917912.735 ops/s
[info] Iteration   1: 1953068.572 ops/s
[info]                  ·gc.alloc.rate:            893.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1948902.693 ops/s
[info]                  ·gc.alloc.rate:            891.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 814.989 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1946507.779 ops/s
[info]                  ·gc.alloc.rate:            890.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 815.986 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 1920630.221 ops/s
[info]                  ·gc.alloc.rate:                                  878.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       554.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.275 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1909660.350 ops/s
[info]                  ·gc.alloc.rate:                                  873.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       841.600 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   1935753.923 ±(99.9%) 74516.018 ops/s [Average]
[info]   (min, avg, max) = (1909660.350, 1935753.923, 1953068.572), stdev = 19351.573
[info]   CI (99.9%): [1861237.905, 2010269.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   885.401 ±(99.9%) 33.966 MB/sec [Average]
[info]   (min, avg, max) = (873.542, 885.401, 893.272), stdev = 8.821
[info]   CI (99.9%): [851.434, 919.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.135), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.034 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   877.679 ±(99.9%) 713.962 MB/sec [Average]
[info]   (min, avg, max) = (672.643, 877.679, 1021.073), stdev = 185.414
[info]   CI (99.9%): [163.717, 1591.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   713.868 ±(99.9%) 583.399 B/op [Average]
[info]   (min, avg, max) = (542.167, 713.868, 841.600), stdev = 151.507
[info]   CI (99.9%): [130.469, 1297.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.655 ±(99.9%) 5.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.655, 3.275), stdev = 1.465
[info]   CI (99.9%): [≈ 0, 6.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.02% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5246.829 ops/s
[info] # Warmup Iteration   2: 8195.908 ops/s
[info] # Warmup Iteration   3: 9737.958 ops/s
[info] Iteration   1: 9752.484 ops/s
[info]                  ·gc.alloc.rate:            1430.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       230736.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217562.053 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   2: 10999.903 ops/s
[info]                  ·gc.alloc.rate:                                  1608.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230237.870 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242536.210 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                476.496 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 11314.651 ops/s
[info]                  ·gc.alloc.rate:                                  1654.379 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230160.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236733.382 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 11299.525 ops/s
[info]                  ·gc.alloc.rate:                                  1652.322 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230170.918 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       189638.059 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11269.064 ops/s
[info]                  ·gc.alloc.rate:                                  1647.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230184.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       237699.555 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10927.125 ±(99.9%) 2576.523 ops/s [Average]
[info]   (min, avg, max) = (9752.484, 10927.125, 11314.651), stdev = 669.115
[info]   CI (99.9%): [8350.602, 13503.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1598.747 ±(99.9%) 369.946 MB/sec [Average]
[info]   (min, avg, max) = (1430.137, 1598.747, 1654.379), stdev = 96.074
[info]   CI (99.9%): [1228.802, 1968.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230297.780 ±(99.9%) 950.391 B/op [Average]
[info]   (min, avg, max) = (230160.036, 230297.780, 230736.042), stdev = 246.814
[info]   CI (99.9%): [229347.389, 231248.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.065 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.138), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   9.198 ±(99.9%) 27.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.198, 19.787), stdev = 7.206
[info]   CI (99.9%): [≈ 0, 36.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1561.621 ±(99.9%) 726.889 MB/sec [Average]
[info]   (min, avg, max) = (1348.483, 1561.621, 1701.770), stdev = 188.771
[info]   CI (99.9%): [834.732, 2288.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   224833.852 ±(99.9%) 84190.116 B/op [Average]
[info]   (min, avg, max) = (189638.059, 224833.852, 242536.210), stdev = 21863.906
[info]   CI (99.9%): [140643.736, 309023.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   95.299 ±(99.9%) 820.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.299, 476.496), stdev = 213.095
[info]   CI (99.9%): [≈ 0, 915.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 21.000), stdev = 7.348
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.27% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4309.967 ops/s
[info] # Warmup Iteration   2: 13012.814 ops/s
[info] # Warmup Iteration   3: 14309.052 ops/s
[info] Iteration   1: 14587.176 ops/s
[info]                  ·gc.alloc.rate:      206.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14378.698 ops/s
[info]                  ·gc.alloc.rate:            203.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36746.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14081.242 ops/s
[info]                  ·gc.alloc.rate:            199.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       22255.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37520.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14385.019 ops/s
[info]                  ·gc.alloc.rate:      203.400 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14408.931 ops/s
[info]                  ·gc.alloc.rate:            203.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36669.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14368.213 ±(99.9%) 700.424 ops/s [Average]
[info]   (min, avg, max) = (14081.242, 14368.213, 14587.176), stdev = 181.898
[info]   CI (99.9%): [13667.789, 15068.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   203.122 ±(99.9%) 9.683 MB/sec [Average]
[info]   (min, avg, max) = (199.154, 203.122, 206.134), stdev = 2.515
[info]   CI (99.9%): [193.439, 212.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22249.441 ±(99.9%) 33.115 B/op [Average]
[info]   (min, avg, max) = (22240.030, 22249.441, 22256.038), stdev = 8.600
[info]   CI (99.9%): [22216.326, 22282.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.431 ±(99.9%) 708.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.431, 335.763), stdev = 183.881
[info]   CI (99.9%): [≈ 0, 909.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22187.325 ±(99.9%) 78002.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22187.325, 37520.930), stdev = 20256.902
[info]   CI (99.9%): [≈ 0, 100189.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.52% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18099.336 ops/s
[info] # Warmup Iteration   2: 22038.377 ops/s
[info] # Warmup Iteration   3: 36470.766 ops/s
[info] Iteration   1: 36943.053 ops/s
[info]                  ·gc.alloc.rate:            342.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       14608.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14359.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 37100.609 ops/s
[info]                  ·gc.alloc.rate:            344.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       14608.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14299.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37155.254 ops/s
[info]                  ·gc.alloc.rate:            344.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       14608.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14278.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37215.010 ops/s
[info]                  ·gc.alloc.rate:            345.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       14608.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14255.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37069.167 ops/s
[info]                  ·gc.alloc.rate:            344.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       14608.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14311.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37096.618 ±(99.9%) 393.664 ops/s [Average]
[info]   (min, avg, max) = (36943.053, 37096.618, 37215.010), stdev = 102.233
[info]   CI (99.9%): [36702.954, 37490.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   344.295 ±(99.9%) 3.652 MB/sec [Average]
[info]   (min, avg, max) = (342.847, 344.295, 345.367), stdev = 0.948
[info]   CI (99.9%): [340.643, 347.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14608.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (14608.011, 14608.012, 14608.014), stdev = 0.001
[info]   CI (99.9%): [14608.007, 14608.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.048 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (337.012, 337.048, 337.123), stdev = 0.044
[info]   CI (99.9%): [336.880, 337.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14300.648 ±(99.9%) 150.784 B/op [Average]
[info]   (min, avg, max) = (14255.225, 14300.648, 14359.390), stdev = 39.158
[info]   CI (99.9%): [14149.864, 14451.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.77% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 565.521 ops/s
[info] # Warmup Iteration   2: 2602.050 ops/s
[info] # Warmup Iteration   3: 2453.114 ops/s
[info] Iteration   1: 2346.003 ops/s
[info]                  ·gc.alloc.rate:            758.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       508560.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450347.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  26.000 ms
[info] Iteration   2: 2730.193 ops/s
[info]                  ·gc.alloc.rate:            882.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       508395.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 580537.134 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 2858.918 ops/s
[info]                  ·gc.alloc.rate:            923.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       508344.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 554352.067 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 2866.435 ops/s
[info]                  ·gc.alloc.rate:                   926.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              508344.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        368665.716 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2194.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 2870.540 ops/s
[info]                  ·gc.alloc.rate:                                  927.496 MB/sec
[info]                  ·gc.alloc.rate.norm:                             508344.142 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       559532.718 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                365.230 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2734.418 ±(99.9%) 866.057 ops/s [Average]
[info]   (min, avg, max) = (2346.003, 2734.418, 2870.540), stdev = 224.912
[info]   CI (99.9%): [1868.361, 3600.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   883.585 ±(99.9%) 279.341 MB/sec [Average]
[info]   (min, avg, max) = (758.297, 883.585, 927.496), stdev = 72.544
[info]   CI (99.9%): [604.243, 1162.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   508397.641 ±(99.9%) 360.474 B/op [Average]
[info]   (min, avg, max) = (508344.142, 508397.641, 508560.382), stdev = 93.614
[info]   CI (99.9%): [508037.168, 508758.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.583 ±(99.9%) 48.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.583, 27.915), stdev = 12.484
[info]   CI (99.9%): [≈ 0, 53.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   875.770 ±(99.9%) 718.115 MB/sec [Average]
[info]   (min, avg, max) = (671.497, 875.770, 1020.891), stdev = 186.492
[info]   CI (99.9%): [157.655, 1593.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   502686.944 ±(99.9%) 347959.158 B/op [Average]
[info]   (min, avg, max) = (368665.716, 502686.944, 580537.134), stdev = 90363.888
[info]   CI (99.9%): [154727.785, 850646.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   511.934 ±(99.9%) 3672.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 511.934, 2194.439), stdev = 953.752
[info]   CI (99.9%): [≈ 0, 4184.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   85.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 17.000, 26.000), stdev = 5.831
[info]   CI (99.9%): [85.000, 85.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.01% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_d6f7c3ad/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 20072.099 ops/s
[info] # Warmup Iteration   2: 54388.031 ops/s
[info] # Warmup Iteration   3: 54726.962 ops/s
[info] Iteration   1: 54231.833 ops/s
[info]                  ·gc.alloc.rate:            692.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19447.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 54671.045 ops/s
[info]                  ·gc.alloc.rate:            698.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19291.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 54875.523 ops/s
[info]                  ·gc.alloc.rate:            700.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19219.595 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 54957.545 ops/s
[info]                  ·gc.alloc.rate:            701.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.927 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19190.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 54548.706 ops/s
[info]                  ·gc.alloc.rate:                   696.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19334.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   54656.931 ±(99.9%) 1107.305 ops/s [Average]
[info]   (min, avg, max) = (54231.833, 54656.931, 54957.545), stdev = 287.564
[info]   CI (99.9%): [53549.625, 55764.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   697.975 ±(99.9%) 14.216 MB/sec [Average]
[info]   (min, avg, max) = (692.440, 697.975, 701.722), stdev = 3.692
[info]   CI (99.9%): [683.759, 712.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.010 ±(99.9%) 0.200 B/op [Average]
[info]   (min, avg, max) = (20099.927, 20100.010, 20100.068), stdev = 0.052
[info]   CI (99.9%): [20099.809, 20100.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.072 ±(99.9%) 0.492 MB/sec [Average]
[info]   (min, avg, max) = (669.971, 670.072, 670.290), stdev = 0.128
[info]   CI (99.9%): [669.580, 670.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19296.879 ±(99.9%) 391.941 B/op [Average]
[info]   (min, avg, max) = (19190.923, 19296.879, 19447.788), stdev = 101.786
[info]   CI (99.9%): [18904.938, 19688.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.063 ±(99.9%) 198.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.063, 115.317), stdev = 51.571
[info]   CI (99.9%): [≈ 0, 221.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.26% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64453.854 ops/s
[info] # Warmup Iteration   2: 79780.836 ops/s
[info] # Warmup Iteration   3: 77666.129 ops/s
[info] Iteration   1: 79929.760 ops/s
[info]                  ·gc.alloc.rate:            523.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13247.711 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 80340.690 ops/s
[info]                  ·gc.alloc.rate:            526.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6589.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 78510.149 ops/s
[info]                  ·gc.alloc.rate:            514.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13486.937 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 80395.678 ops/s
[info]                  ·gc.alloc.rate:            527.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6585.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 80055.568 ops/s
[info]                  ·gc.alloc.rate:            524.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13226.699 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   79846.369 ±(99.9%) 2971.675 ops/s [Average]
[info]   (min, avg, max) = (78510.149, 79846.369, 80395.678), stdev = 771.735
[info]   CI (99.9%): [76874.694, 82818.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   523.523 ±(99.9%) 19.201 MB/sec [Average]
[info]   (min, avg, max) = (514.910, 523.523, 527.079), stdev = 4.987
[info]   CI (99.9%): [504.322, 542.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.193 ±(99.9%) 709.467 MB/sec [Average]
[info]   (min, avg, max) = (336.343, 538.193, 672.923), stdev = 184.246
[info]   CI (99.9%): [≈ 0, 1247.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10627.325 ±(99.9%) 14205.520 B/op [Average]
[info]   (min, avg, max) = (6585.468, 10627.325, 13486.937), stdev = 3689.128
[info]   CI (99.9%): [≈ 0, 24832.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.51% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72447.776 ops/s
[info] # Warmup Iteration   2: 89939.431 ops/s
[info] # Warmup Iteration   3: 90182.826 ops/s
[info] Iteration   1: 90152.225 ops/s
[info]                  ·gc.alloc.rate:      5.957 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 89598.290 ops/s
[info]                  ·gc.alloc.rate:      5.920 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 89929.792 ops/s
[info]                  ·gc.alloc.rate:      5.943 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 89996.768 ops/s
[info]                  ·gc.alloc.rate:      5.947 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90121.379 ops/s
[info]                  ·gc.alloc.rate:      5.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   89959.691 ±(99.9%) 852.575 ops/s [Average]
[info]   (min, avg, max) = (89598.290, 89959.691, 90152.225), stdev = 221.411
[info]   CI (99.9%): [89107.115, 90812.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.944 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (5.920, 5.944, 5.957), stdev = 0.015
[info]   CI (99.9%): [5.888, 6.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.005, 104.005, 104.005), stdev = 0.001
[info]   CI (99.9%): [104.004, 104.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.76% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282913.631 ops/s
[info] # Warmup Iteration   2: 331523.238 ops/s
[info] # Warmup Iteration   3: 332345.170 ops/s
[info] Iteration   1: 336785.275 ops/s
[info]                  ·gc.alloc.rate:                                  1798.884 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8408.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7938.121 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.565 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 342275.083 ops/s
[info]                  ·gc.alloc.rate:                                  1828.788 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8408.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7826.086 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 338256.109 ops/s
[info]                  ·gc.alloc.rate:                                  1806.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8408.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9502.895 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 335997.852 ops/s
[info]                  ·gc.alloc.rate:                                  1794.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8408.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7972.337 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 337263.242 ops/s
[info]                  ·gc.alloc.rate:            1801.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       8408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7942.133 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   338115.512 ±(99.9%) 9491.306 ops/s [Average]
[info]   (min, avg, max) = (335997.852, 338115.512, 342275.083), stdev = 2464.862
[info]   CI (99.9%): [328624.206, 347606.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1806.143 ±(99.9%) 51.550 MB/sec [Average]
[info]   (min, avg, max) = (1794.692, 1806.143, 1828.788), stdev = 13.387
[info]   CI (99.9%): [1754.594, 1857.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8408.001, 8408.001, 8408.001), stdev = 0.001
[info]   CI (99.9%): [8408.001, 8408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.088), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.412), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.213 ±(99.9%) 587.110 MB/sec [Average]
[info]   (min, avg, max) = (1698.354, 1769.213, 2041.946), stdev = 152.470
[info]   CI (99.9%): [1182.103, 2356.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8236.314 ±(99.9%) 2734.812 B/op [Average]
[info]   (min, avg, max) = (7826.086, 8236.314, 9502.895), stdev = 710.222
[info]   CI (99.9%): [5501.502, 10971.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.113 ±(99.9%) 26.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.113, 15.565), stdev = 6.961
[info]   CI (99.9%): [≈ 0, 29.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.01% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199630.543 ops/s
[info] # Warmup Iteration   2: 388533.690 ops/s
[info] # Warmup Iteration   3: 394623.091 ops/s
[info] Iteration   1: 392238.799 ops/s
[info]                  ·gc.alloc.rate:            478.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2699.608 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 394452.868 ops/s
[info]                  ·gc.alloc.rate:            481.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1342.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 394581.018 ops/s
[info]                  ·gc.alloc.rate:                   481.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1339.130 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 393023.231 ops/s
[info]                  ·gc.alloc.rate:                   479.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2691.557 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 395189.422 ops/s
[info]                  ·gc.alloc.rate:            482.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1339.655 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   393897.068 ±(99.9%) 4700.439 ops/s [Average]
[info]   (min, avg, max) = (392238.799, 393897.068, 395189.422), stdev = 1220.689
[info]   CI (99.9%): [389196.629, 398597.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   480.508 ±(99.9%) 5.875 MB/sec [Average]
[info]   (min, avg, max) = (478.403, 480.508, 482.264), stdev = 1.526
[info]   CI (99.9%): [474.633, 486.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.674 ±(99.9%) 709.297 MB/sec [Average]
[info]   (min, avg, max) = (335.667, 470.674, 672.657), stdev = 184.202
[info]   CI (99.9%): [≈ 0, 1179.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1882.435 ±(99.9%) 2858.352 B/op [Average]
[info]   (min, avg, max) = (1339.130, 1882.435, 2699.608), stdev = 742.305
[info]   CI (99.9%): [≈ 0, 4740.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.065 ±(99.9%) 5.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 2.668), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.26% complete, ETA 00:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 957892.677 ops/s
[info] # Warmup Iteration   2: 1013356.214 ops/s
[info] # Warmup Iteration   3: 1047658.839 ops/s
[info] Iteration   1: 1036061.698 ops/s
[info]                  ·gc.alloc.rate:            542.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1024.035 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1046228.441 ops/s
[info]                  ·gc.alloc.rate:            547.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 507.050 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1043176.849 ops/s
[info]                  ·gc.alloc.rate:            546.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.073 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1044430.885 ops/s
[info]                  ·gc.alloc.rate:            546.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1015.851 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1049007.951 ops/s
[info]                  ·gc.alloc.rate:            549.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.708 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1043781.165 ±(99.9%) 18635.481 ops/s [Average]
[info]   (min, avg, max) = (1036061.698, 1043781.165, 1049007.951), stdev = 4839.575
[info]   CI (99.9%): [1025145.684, 1062416.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   546.432 ±(99.9%) 9.488 MB/sec [Average]
[info]   (min, avg, max) = (542.554, 546.432, 549.198), stdev = 2.464
[info]   CI (99.9%): [536.944, 555.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.268 ±(99.9%) 710.965 MB/sec [Average]
[info]   (min, avg, max) = (336.965, 539.268, 674.264), stdev = 184.635
[info]   CI (99.9%): [≈ 0, 1250.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   813.943 ±(99.9%) 1081.200 B/op [Average]
[info]   (min, avg, max) = (505.708, 813.943, 1024.035), stdev = 280.784
[info]   CI (99.9%): [≈ 0, 1895.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.51% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58685.766 ops/s
[info] # Warmup Iteration   2: 90701.548 ops/s
[info] # Warmup Iteration   3: 95256.436 ops/s
[info] Iteration   1: 97581.288 ops/s
[info]                  ·gc.alloc.rate:                                  3391.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54901.517 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 97145.980 ops/s
[info]                  ·gc.alloc.rate:                                  3376.863 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55149.017 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 97709.713 ops/s
[info]                  ·gc.alloc.rate:                                  3398.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54829.046 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 97833.673 ops/s
[info]                  ·gc.alloc.rate:                                  3401.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54759.564 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 97020.768 ops/s
[info]                  ·gc.alloc.rate:                                  3372.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49697.542 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   97458.284 ±(99.9%) 1372.550 ops/s [Average]
[info]   (min, avg, max) = (97020.768, 97458.284, 97833.673), stdev = 356.447
[info]   CI (99.9%): [96085.734, 98830.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3388.156 ±(99.9%) 49.197 MB/sec [Average]
[info]   (min, avg, max) = (3372.625, 3388.156, 3401.254), stdev = 12.776
[info]   CI (99.9%): [3338.959, 3437.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54720.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54720.004, 54720.004, 54720.005), stdev = 0.001
[info]   CI (99.9%): [54720.004, 54720.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.048, 0.106), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.636 ±(99.9%) 586.725 MB/sec [Average]
[info]   (min, avg, max) = (3063.070, 3335.636, 3404.825), stdev = 152.371
[info]   CI (99.9%): [2748.911, 3922.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   53867.337 ±(99.9%) 8993.618 B/op [Average]
[info]   (min, avg, max) = (49697.542, 53867.337, 55149.017), stdev = 2335.614
[info]   CI (99.9%): [44873.719, 62860.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.76% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256406.152 ops/s
[info] # Warmup Iteration   2: 315680.517 ops/s
[info] # Warmup Iteration   3: 313021.701 ops/s
[info] Iteration   1: 316150.072 ops/s
[info]                  ·gc.alloc.rate:            496.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1677.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 315900.935 ops/s
[info]                  ·gc.alloc.rate:            496.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3358.619 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 316019.970 ops/s
[info]                  ·gc.alloc.rate:            496.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1678.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 316306.718 ops/s
[info]                  ·gc.alloc.rate:            496.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3354.308 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 325184.491 ops/s
[info]                  ·gc.alloc.rate:            510.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1631.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   317912.437 ±(99.9%) 15664.432 ops/s [Average]
[info]   (min, avg, max) = (315900.935, 317912.437, 325184.491), stdev = 4068.003
[info]   CI (99.9%): [302248.005, 333576.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   499.264 ±(99.9%) 24.874 MB/sec [Average]
[info]   (min, avg, max) = (496.048, 499.264, 510.811), stdev = 6.460
[info]   CI (99.9%): [474.390, 524.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.821 ±(99.9%) 710.711 MB/sec [Average]
[info]   (min, avg, max) = (336.986, 471.821, 674.051), stdev = 184.569
[info]   CI (99.9%): [≈ 0, 1182.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2340.192 ±(99.9%) 3573.102 B/op [Average]
[info]   (min, avg, max) = (1631.408, 2340.192, 3358.619), stdev = 927.923
[info]   CI (99.9%): [≈ 0, 5913.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377063.665 ops/s
[info] # Warmup Iteration   2: 675265.981 ops/s
[info] # Warmup Iteration   3: 687516.518 ops/s
[info] Iteration   1: 673285.306 ops/s
[info]                  ·gc.alloc.rate:            513.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1572.713 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 664101.513 ops/s
[info]                  ·gc.alloc.rate:                   506.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1592.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 674616.531 ops/s
[info]                  ·gc.alloc.rate:            514.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 784.827 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 670688.715 ops/s
[info]                  ·gc.alloc.rate:                   511.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1577.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 681684.814 ops/s
[info]                  ·gc.alloc.rate:            519.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   672875.376 ±(99.9%) 24548.271 ops/s [Average]
[info]   (min, avg, max) = (664101.513, 672875.376, 681684.814), stdev = 6375.108
[info]   CI (99.9%): [648327.105, 697423.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   512.975 ±(99.9%) 18.689 MB/sec [Average]
[info]   (min, avg, max) = (506.278, 512.975, 519.684), stdev = 4.853
[info]   CI (99.9%): [494.286, 531.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.001, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.785 ±(99.9%) 709.231 MB/sec [Average]
[info]   (min, avg, max) = (335.694, 537.785, 672.690), stdev = 184.185
[info]   CI (99.9%): [≈ 0, 1247.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1260.579 ±(99.9%) 1689.642 B/op [Average]
[info]   (min, avg, max) = (775.150, 1260.579, 1592.918), stdev = 438.795
[info]   CI (99.9%): [≈ 0, 2950.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.628 ±(99.9%) 3.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.628, 1.579), stdev = 0.860
[info]   CI (99.9%): [≈ 0, 3.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.25% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1731574.035 ops/s
[info] # Warmup Iteration   2: 1952145.750 ops/s
[info] # Warmup Iteration   3: 1980703.381 ops/s
[info] Iteration   1: 1969072.876 ops/s
[info]                  ·gc.alloc.rate:                   910.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        806.587 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1927803.500 ops/s
[info]                  ·gc.alloc.rate:                   891.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        825.018 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1951281.531 ops/s
[info]                  ·gc.alloc.rate:            902.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.655 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1869634.192 ops/s
[info]                  ·gc.alloc.rate:                                  864.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       856.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.365 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1893873.857 ops/s
[info]                  ·gc.alloc.rate:                                  875.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       848.643 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1922333.191 ±(99.9%) 156882.991 ops/s [Average]
[info]   (min, avg, max) = (1869634.192, 1922333.191, 1969072.876), stdev = 40742.015
[info]   CI (99.9%): [1765450.200, 2079216.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   889.138 ±(99.9%) 72.347 MB/sec [Average]
[info]   (min, avg, max) = (864.937, 889.138, 910.660), stdev = 18.788
[info]   CI (99.9%): [816.791, 961.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.102), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.117 ±(99.9%) 588.656 MB/sec [Average]
[info]   (min, avg, max) = (672.794, 946.117, 1021.020), stdev = 152.872
[info]   CI (99.9%): [357.461, 1534.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   775.837 ±(99.9%) 507.607 B/op [Average]
[info]   (min, avg, max) = (542.655, 775.837, 856.283), stdev = 131.824
[info]   CI (99.9%): [268.230, 1283.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.888 ±(99.9%) 5.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.888, 3.365), stdev = 1.410
[info]   CI (99.9%): [≈ 0, 6.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.50% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1901744.682 ops/s
[info] # Warmup Iteration   2: 2103092.749 ops/s
[info] # Warmup Iteration   3: 2103496.167 ops/s
[info] Iteration   1: 2095517.471 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2093720.870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2106308.505 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2106148.194 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2106614.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2101661.942 ±(99.9%) 24885.238 ops/s [Average]
[info]   (min, avg, max) = (2093720.870, 2101661.942, 2106614.672), stdev = 6462.617
[info]   CI (99.9%): [2076776.704, 2126547.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.75% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252083.100 ops/s
[info] # Warmup Iteration   2: 338836.834 ops/s
[info] # Warmup Iteration   3: 338451.509 ops/s
[info] Iteration   1: 342294.328 ops/s
[info]                  ·gc.alloc.rate:            506.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1546.821 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 340471.516 ops/s
[info]                  ·gc.alloc.rate:            503.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3110.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 341524.154 ops/s
[info]                  ·gc.alloc.rate:            505.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1550.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 340789.403 ops/s
[info]                  ·gc.alloc.rate:            504.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3107.320 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 342217.942 ops/s
[info]                  ·gc.alloc.rate:            506.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1547.173 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   341459.469 ±(99.9%) 3164.503 ops/s [Average]
[info]   (min, avg, max) = (340471.516, 341459.469, 342294.328), stdev = 821.811
[info]   CI (99.9%): [338294.966, 344623.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   505.031 ±(99.9%) 4.629 MB/sec [Average]
[info]   (min, avg, max) = (503.506, 505.031, 506.235), stdev = 1.202
[info]   CI (99.9%): [500.402, 509.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   470.940 ±(99.9%) 709.485 MB/sec [Average]
[info]   (min, avg, max) = (336.347, 470.940, 672.871), stdev = 184.251
[info]   CI (99.9%): [≈ 0, 1180.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2172.368 ±(99.9%) 3291.580 B/op [Average]
[info]   (min, avg, max) = (1546.821, 2172.368, 3110.213), stdev = 854.813
[info]   CI (99.9%): [≈ 0, 5463.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:26:11
[info] Benchmark                                                                                                     (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                           N/A  thrpt    5    712327.196 ±    55503.467   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      1864.494 ±      144.167  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5      4120.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.013 ±        0.108  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.031 ±        0.245    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      1904.065 ±      711.453  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      4208.273 ±     1582.706    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                               N/A  thrpt    5         0.666 ±        5.737  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                          N/A  thrpt    5         1.515 ±       13.045    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        28.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        32.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   1387648.164 ±    97067.817   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      1114.308 ±       78.159  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5      1264.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.047 ±        0.348  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.053 ±        0.394    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1082.211 ±      564.010  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      1229.127 ±      695.068    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.199 ±        6.388  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.365 ±        7.224    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        16.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        45.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5   3273124.356 ±   102030.651   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5       216.270 ±        6.740  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       202.619 ±      712.233  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5        97.592 ±      343.083    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5         3.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                          N/A  thrpt    5         8.000                     ms
[info] AdtBenchmark.readPlayJson                                                                                        N/A  thrpt    5    149695.987 ±     3411.686   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      1236.257 ±       28.366  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5     13000.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.013 ±        0.112  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.137 ±        1.182    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      1218.418 ±      717.779  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5     12817.862 ±     7702.637    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                            N/A  thrpt    5         1.066 ±        7.821  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                       N/A  thrpt    5        11.240 ±       82.517    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        18.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        46.000                     ms
[info] AdtBenchmark.writeCirce                                                                                          N/A  thrpt    5    526790.256 ±    11117.673   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1636.156 ±       34.066  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5      4888.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.024 ±        0.203  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.072 ±        0.606    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1629.973 ±      578.319  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5      4870.439 ±     1765.960    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         1.988 ±       17.117    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        24.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        37.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   1676006.402 ±    23131.802   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5       698.565 ±        9.469  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       656.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       738.599 ±      578.304  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       693.908 ±      552.297    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.754 ±        6.495    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        11.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        48.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5   7214777.683 ±   611943.048   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       366.671 ±       31.172  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       403.877 ±      580.072  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        88.031 ±      124.405    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.029 ±        0.247    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         6.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        17.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5   7909684.502 ±   650447.434   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                                       N/A  thrpt    5    306481.673 ±    16619.448   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5       951.837 ±       51.823  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      4888.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.037 ±        0.259  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.188 ±        1.322    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1012.256 ±       24.375  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      5198.815 ±      200.631    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         1.332 ±        7.257  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         6.824 ±       36.937    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        15.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        55.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                                       N/A  thrpt    5   1467872.039 ±    39746.015   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      2268.039 ±       60.547  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      2432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.016 ±        0.120  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.017 ±        0.128    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      2246.426 ±      717.832  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      2409.060 ±      780.640    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        33.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        27.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                 N/A  thrpt    5   8837549.510 ±   560936.523   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                  N/A  thrpt    5      1078.089 ±       68.116  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                             N/A  thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.121 ±        1.035  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.021 ±        0.183    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1076.732 ±      608.551  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5       191.710 ±      105.543    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.332 ±        7.254  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.234 ±        1.272    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                       N/A  thrpt    5        16.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                        N/A  thrpt    5        52.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                N/A  thrpt    5   2202538.221 ±   112270.361   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1477.774 ±       75.279  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1056.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.021 ±        0.167  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.015 ±        0.121    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1492.760 ±      698.995  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1066.067 ±      468.913    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±        6.688  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.675 ±        4.847    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        40.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                               N/A  thrpt    5   9517110.943 ±  1413163.715   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5      1209.357 ±      179.194  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.020 ±        0.152  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.003 ±        0.025    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1221.380 ±      703.780  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       201.464 ±       95.236    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.109 ±        0.938    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                                    N/A  thrpt    5    581949.355 ±    12464.819   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1496.634 ±       32.418  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4048.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.015 ±        0.121  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.041 ±        0.324    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1560.465 ±      707.894  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4220.839 ±     1919.352    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.066 ±        6.688  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         2.875 ±       17.994    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                          N/A  thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                           N/A  thrpt    5        41.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                                      N/A  thrpt    5   1758140.611 ±    76185.538   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      1572.830 ±       67.925  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1408.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.009 ±        0.073  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.008 ±        0.065    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1630.524 ±      579.958  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5      1459.101 ±      490.373    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.737  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.598 ±        5.150    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        24.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        40.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                N/A  thrpt    5  17018999.618 ±  1063565.762   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                 N/A  thrpt    5       519.047 ±       32.575  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                            N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       533.990 ±      704.060  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        49.431 ±       65.710    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                      N/A  thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                       N/A  thrpt    5        38.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                               N/A  thrpt    5   4138779.460 ±    56080.508   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1135.897 ±       15.426  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.013 ±        0.108  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.005 ±        0.041    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1149.619 ±      702.815  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       437.372 ±      272.136    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.932 ±        8.029  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.357 ±        3.072    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5        17.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        44.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5  21503153.741 ±   567348.632   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       655.776 ±       17.265  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       605.634 ±      579.542  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        44.380 ±       43.060    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.010 ±        0.084    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         9.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5        27.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5  19283459.189 ±  1689415.924   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                                   N/A  thrpt    5   1252796.452 ±    39762.431   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      1852.981 ±       58.484  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2328.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.025 ±        0.129  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.031 ±        0.164    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1835.521 ±      726.627  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2305.804 ±      897.042    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.933 ±        8.030  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.188 ±       10.233    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                         N/A  thrpt    5        27.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                          N/A  thrpt    5        41.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    348275.953 ±     6430.012   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1911.691 ±       35.217  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      8640.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.029 ±        0.226  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.130 ±        1.017    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1906.027 ±      717.923  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      8617.716 ±     3394.713    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        28.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        23.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    415766.653 ±    21421.910   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       566.370 ±       29.173  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2144.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       537.431 ±      709.063  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2032.079 ±     2654.262    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.996 ±        5.252    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         8.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        35.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5    949616.215 ±    15240.247   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       632.296 ±        9.809  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1048.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       606.700 ±      580.538  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1006.014 ±      967.840    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        27.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5     95309.345 ±     5914.848   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3299.940 ±      202.716  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     54496.004 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.004 ±        0.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.061 ±        0.093    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      3335.652 ±      584.887  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     55086.821 ±     9252.455    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        49.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        40.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    322357.158 ±    17444.449   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       493.158 ±       26.894  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2408.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       471.865 ±      710.941  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2307.766 ±     3520.680    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         7.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        22.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    539858.613 ±     6009.484   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       397.874 ±        4.351  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1160.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       403.399 ±      580.047  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1176.846 ±     1705.259    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.387 ±        3.336    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         6.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        26.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2704936.331 ±    86139.090   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1251.020 ±       39.372  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.010 ±        0.063  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.006 ±        0.037    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1288.677 ±      592.706  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       750.184 ±      353.174    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.541 ±        3.866    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        32.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2926851.045 ±    23767.395   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    410355.442 ±    15227.847   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       590.216 ±       22.073  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      2264.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       605.416 ±      579.222  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2324.717 ±     2252.392    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                            128  thrpt    5     19287.907 ±      409.360   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1206.513 ±       25.974  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     98453.237 ±       20.525    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.014 ±        0.046  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         1.161 ±        3.723    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1153.245 ±      714.630  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     94102.556 ±    58152.632    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        54.562 ±      469.797    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        17.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        29.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                     128  thrpt    5     34385.614 ±     1718.878   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       861.926 ±       43.111  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     39456.172 ±        1.376    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.026 ±        0.162  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.181 ±        7.362    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       877.574 ±      713.334  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     40206.918 ±    33323.446    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        42.343 ±      303.105    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        40.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                    128  thrpt    5     32128.017 ±     1093.029   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       431.586 ±       14.867  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     21144.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       471.827 ±      710.656  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     23168.124 ±    35544.756    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        21.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                         128  thrpt    5     25337.712 ±     1414.887   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1342.602 ±       74.940  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     83400.017 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.027 ±        0.154  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.676 ±        9.626    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1356.582 ±       27.887  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     84277.510 ±     3032.695    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        58.203 ±      501.149    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        20.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        42.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                           128  thrpt    5     27743.111 ±      760.174   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1575.979 ±       43.318  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     89407.732 ±        2.441    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.036 ±        0.174  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         2.045 ±        9.957    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1563.071 ±      709.579  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     88662.060 ±    39658.802    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        38.151 ±      328.490    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                    128  thrpt    5     28650.378 ±      554.255   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1542.145 ±       29.605  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     84720.026 ±        0.095    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.022 ±        0.185  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         1.213 ±       10.120    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.305 ±      730.034  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     82090.574 ±    40028.521    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        51.581 ±      444.131    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        34.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                   128  thrpt    5     30160.270 ±     1511.395   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1556.661 ±       78.057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     81224.024 ±        0.091    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.028 ±        0.143  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.496 ±        7.530    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1562.746 ±      707.157  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     81520.744 ±    35863.176    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        42.391 ±      364.999    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        31.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5     30367.467 ±      937.469   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5      1508.254 ±       46.375  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5     78168.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.027 ±        0.232  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         1.398 ±       11.868    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1494.558 ±      729.723  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     77442.339 ±    37123.220    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        41.551 ±      357.767    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  128  thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                        128  thrpt    5      7975.024 ±      179.654   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1037.734 ±       24.012  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    204776.052 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.025 ±        0.163  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         4.825 ±       32.079    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1082.093 ±      566.960  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    213656.191 ±   116972.822    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       157.306 ±     1354.453    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        43.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                128  thrpt    5     19817.575 ±     1157.221   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1539.406 ±       90.486  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5    122260.934 ±       23.216    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.019 ±        0.084  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.538 ±        6.651    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1563.032 ±      732.502  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5    124033.380 ±    53608.513    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        54.361 ±      468.068    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        23.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        29.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                         128  thrpt    5     40309.367 ±      909.285   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       994.190 ±       22.339  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     38823.848 ±        1.402    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.032 ±        0.180  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.244 ±        7.020    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1014.475 ±       23.921  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     39616.006 ±      251.952    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        36.519 ±      261.750    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        39.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5     55786.786 ±      178.600   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       720.772 ±        2.382  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     20336.008 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       674.094 ±        0.239  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     19019.036 ±       60.759    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        18.821 ±      162.055    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        10.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        28.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                             128  thrpt    5     29542.344 ±     1015.186   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1973.152 ±       67.308  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    105128.015 ±        0.006    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.009 ±        0.026  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.493 ±        1.391    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1972.486 ±      582.815  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    105113.713 ±    32074.408    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        42.658 ±      367.301    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5     32318.382 ±      928.078   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1830.438 ±       52.912  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     89144.014 ±        0.007    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.013 ±        0.093  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.653 ±        4.533    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1836.404 ±      723.462  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     89475.960 ±    37113.075    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        39.025 ±      336.019    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        31.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5     43645.072 ±     1308.273   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1818.902 ±       54.138  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     65600.010 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.028 ±        0.221  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.996 ±        7.937    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1768.986 ±      587.598  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     63793.405 ±    20681.069    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        28.747 ±      247.522    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        26.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        30.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     45383.087 ±     1440.480   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1664.941 ±       52.548  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     57736.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.030 ±        0.202  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         1.037 ±        7.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1699.648 ±       20.319  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     58942.687 ±     1968.441    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        27.752 ±      238.951    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                               128  thrpt    5    365817.924 ±    11481.109   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1844.512 ±       58.246  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7936.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.025 ±        0.196  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.106 ±        0.848    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1837.377 ±      713.562  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      7906.756 ±     3129.264    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         2.874 ±       24.747    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        27.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        25.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                         128  thrpt    5   1492358.208 ±    74352.988   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                          128  thrpt    5       470.289 ±       23.518  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     128  thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       467.216 ±      704.052  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       494.059 ±      760.299    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                128  thrpt    5        34.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                        128  thrpt    5    586658.922 ±     3886.344   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       497.905 ±        3.395  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       538.134 ±      709.225  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1444.619 ±     1911.281    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        32.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                       128  thrpt    5   1733425.468 ±    15288.652   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       334.774 ±        2.984  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       337.018 ±        0.108  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       306.039 ±        2.698    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                            128  thrpt    5     91018.566 ±     2554.848   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      3306.488 ±       91.086  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     57176.005 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.002 ±        0.008  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.038 ±        0.139    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3335.786 ±      585.010  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     57677.638 ±     9494.181    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        49.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        43.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                              128  thrpt    5    320124.424 ±    17314.944   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       497.891 ±       27.048  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      2448.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       471.891 ±      711.132  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      2318.525 ±     3469.995    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        22.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                        128  thrpt    5   1216454.194 ±   101008.309   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       562.629 ±       46.740  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       533.929 ±      703.919  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       692.815 ±      934.235    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                               128  thrpt    5        39.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                       128  thrpt    5    954598.767 ±     8078.131   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       674.405 ±        5.523  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       672.723 ±        0.385  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1109.233 ±        9.310    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.320 ±       11.365    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        42.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                      128  thrpt    5   2404636.523 ±   175172.180   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      1112.140 ±       80.703  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.025 ±        0.218  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.017 ±        0.144    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1152.275 ±      712.460  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       754.012 ±      454.490    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.514 ±        4.422    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5        17.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        30.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   1969292.710 ±    36131.063   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                           128  thrpt    5    408997.682 ±    13679.812   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5       478.114 ±       15.774  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       538.203 ±      709.651  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      2074.036 ±     2764.551    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        31.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                  128  thrpt    5    169216.768 ±     3305.428   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2031.335 ±       40.132  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     18896.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.012 ±        0.090  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.116 ±        0.839    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2042.064 ±        0.825  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     18996.199 ±      371.599    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        30.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        26.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                           128  thrpt    5    357286.968 ±     4261.992   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       303.277 ±        3.572  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       269.114 ±      579.289  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1186.885 ±     2554.876    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        16.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                          128  thrpt    5    840021.216 ±    16037.882   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       162.237 ±        3.100  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       134.804 ±      710.781  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       253.724 ±     1337.834    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         6.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                               128  thrpt    5     75960.630 ±     2497.932   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3235.707 ±      107.588  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     67048.006 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±        0.015  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.187 ±        0.302    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3199.392 ±      719.026  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     66295.816 ±    14762.310    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        47.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        38.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                 128  thrpt    5    266539.267 ±     4923.536   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1174.524 ±       21.381  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      6936.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.019 ±        0.163  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.112 ±        0.962    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1220.656 ±      719.922  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      7208.402 ±     4248.735    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         3.950 ±       34.015    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        18.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        31.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                          128  thrpt    5   1685466.026 ±    18209.640   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       865.211 ±        9.457  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.028 ±        0.195  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.026 ±        0.182    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       877.752 ±      706.850  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       819.739 ±      660.554    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.745 ±        6.417    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        39.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2200030.181 ±   163681.495   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       592.610 ±       44.218  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       606.375 ±      579.902  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       432.415 ±      395.066    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.094 ±        0.808    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         9.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        27.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2509091.262 ±     1855.176   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                              128  thrpt    5     38882.882 ±     1258.503   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1645.556 ±       53.981  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     66608.831 ±        7.066    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.037 ±        0.190  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.509 ±        7.679    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1698.719 ±       28.426  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     68763.856 ±     2041.451    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        32.562 ±      280.368    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        25.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                  128  thrpt    5    239506.061 ±     5412.985   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2461.555 ±       56.339  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     16176.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.009 ±        0.011  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.062 ±        0.071    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2450.793 ±      586.675  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     16105.344 ±     3839.533    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        36.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        29.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                           128  thrpt    5    296215.672 ±    14687.887   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1433.420 ±       71.996  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.030 ±        0.258  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.159 ±        1.373    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1426.495 ±      594.567  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7576.341 ±     2981.766    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.339 ±       37.359    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        21.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        31.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                          128  thrpt    5   1267528.361 ±    21291.309   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       438.101 ±        7.520  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       471.850 ±      710.610  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       586.717 ±      893.660    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        20.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                               128  thrpt    5     72517.227 ±     1280.299   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3047.033 ±       53.124  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     66128.006 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±        0.008  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.188 ±        0.173    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3063.647 ±        1.140  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     66489.658 ±     1167.846    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        45.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        39.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                 128  thrpt    5    213553.006 ±     3829.697   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1812.596 ±       32.681  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     13360.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.023 ±        0.188  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.171 ±        1.391    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1836.605 ±      710.620  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     13538.973 ±     5330.254    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.929 ±       42.438    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        27.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        26.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                          128  thrpt    5   1165578.168 ±    49185.205   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       681.305 ±       29.040  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       672.758 ±        0.373  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       908.549 ±       38.794    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.078 ±        9.284    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        40.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   3006191.198 ±    86502.183   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1023.714 ±       28.766  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.019 ±        0.113  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.010 ±        0.059    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.193 ±      599.145  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       567.025 ±      308.457    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.558 ±        3.361    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        31.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   3287659.847 ±    12188.116   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                              128  thrpt    5    263314.917 ±     6280.344   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      2152.135 ±       49.956  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     12864.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.030 ±        0.248  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.180 ±        1.475    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2110.337 ±      585.098  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     12613.373 ±     3423.346    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        31.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        26.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                128  thrpt    5     25767.458 ±      987.202   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1508.498 ±       57.542  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     92146.129 ±       56.373    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.026 ±        0.141  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.610 ±        8.596    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1494.898 ±      727.746  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     91302.271 ±    43789.671    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        41.336 ±      355.917    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        27.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                          128  thrpt    5     93262.621 ±     2220.576   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       840.021 ±       19.568  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5     14176.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.095 ±        0.816  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.602 ±       13.795    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       802.796 ±      697.452  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     13539.005 ±    11560.542    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.599 ±        6.438  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        27.005 ±      108.620    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                128  thrpt    5        12.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                 128  thrpt    5        56.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                         128  thrpt    5     59307.870 ±     2172.643   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       979.969 ±       36.333  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.031 ±        0.177  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.819 ±        4.686    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       946.453 ±      572.064  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     25136.611 ±    15591.033    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        24.832 ±      177.773    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        39.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                        128  thrpt    5     72120.777 ±      231.003   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       464.779 ±        1.506  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     10144.006 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       404.414 ±      580.216  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      8828.385 ±    12699.570    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        17.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                             128  thrpt    5     32432.170 ±      152.228   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1693.895 ±        8.170  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     82216.014 ±        0.007    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.030 ±        0.163  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.449 ±        7.903    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1699.260 ±       20.712  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     82476.329 ±      777.221    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        38.852 ±      334.525    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        25.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        32.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                               128  thrpt    5     38960.492 ±      668.821   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       436.417 ±        7.496  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     17631.801 ±        1.805    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       471.826 ±      710.796  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     19079.098 ±    28950.682    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        23.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                        128  thrpt    5     40230.976 ±     1217.745   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       363.356 ±       11.097  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     14216.010 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       403.631 ±      579.150  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     15782.968 ±    22478.697    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        24.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44558.667 ±      479.354   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       391.582 ±        4.272  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13832.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       403.921 ±      580.180  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     14277.411 ±    20677.583    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         9.425 ±       49.696    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        18.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     44219.322 ±     2192.510   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5       338.001 ±       16.743  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5       336.474 ±        1.053  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     11979.248 ±      596.015    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        14.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                              128  thrpt    5     19597.126 ±      293.737   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5       734.854 ±       11.133  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     59016.023 ±        0.008    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       675.046 ±        2.033  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     54213.550 ±      819.129    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.932 ±        5.318  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        75.077 ±      429.103    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        32.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                       128  thrpt    5     18472.454 ±      260.246   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       524.357 ±        7.449  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     44674.766 ±       41.582    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       538.241 ±      709.745  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     45853.293 ±    60415.073    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        31.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                      128  thrpt    5     74722.820 ±      744.865   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       194.456 ±        1.913  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       202.773 ±      712.778  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4277.425 ±    15035.780    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                           128  thrpt    5     15737.603 ±      980.007   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1020.387 ±       63.656  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    102064.441 ±        3.553    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.023 ±        0.125  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         2.300 ±       12.484    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1014.534 ±       23.445  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    101492.540 ±     4074.128    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        79.821 ±      687.279    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        39.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                             128  thrpt    5     57561.897 ±     2124.648   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       872.027 ±       32.025  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     23848.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.032 ±        0.191  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.884 ±        5.262    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       878.989 ±      719.662  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     24068.814 ±    20294.958    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        22.072 ±      154.154    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                      128  thrpt    5     87238.210 ±     2214.267   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1034.414 ±       26.139  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.025 ±        0.160  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.447 ±        2.916    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1082.725 ±      565.488  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     19540.848 ±    10402.630    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        14.555 ±      125.321    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        40.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    208573.262 ±     1938.603   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       330.719 ±        3.079  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2496.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.469 ±        1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2539.415 ±       26.348    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.002 ±        8.626    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        15.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    237580.350 ±     7227.297   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                          128  thrpt    5     62478.291 ±     1630.578   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       973.239 ±       25.407  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     24520.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.031 ±        0.268  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.779 ±        6.711    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1013.825 ±       25.272  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     25542.612 ±      194.678    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        20.283 ±      174.645    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        39.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                  128  thrpt    5     27903.765 ±      404.057   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       579.760 ±        8.173  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     32700.008 ±       26.685    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       606.718 ±      580.584  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     34216.776 ±    32697.829    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        30.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                           128  thrpt    5     27932.744 ±     2299.624   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       367.151 ±       30.265  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     20687.781 ±        2.015    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       403.523 ±      579.625  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     22749.692 ±    32785.755    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         7.379 ±       63.537    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        25.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                          128  thrpt    5    119380.454 ±     2595.073   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       465.939 ±       10.128  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      6144.004 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       471.781 ±      710.631  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      6227.898 ±     9466.238    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        21.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                               128  thrpt    5     40324.504 ±     2085.162   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2174.042 ±      111.593  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     84856.011 ±        0.005    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±        0.035  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.342 ±        1.354    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2178.376 ±      717.329  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     85009.131 ±    26648.953    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        32.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        31.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                 128  thrpt    5    178784.125 ±     5486.224   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       624.243 ±       19.211  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       606.649 ±      580.450  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      5344.275 ±     5151.101    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        28.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                          128  thrpt    5    272265.870 ±     9371.287   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       275.377 ±        9.539  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1592.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.076 ±      579.206  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1556.172 ±     3350.456    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        17.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    461471.216 ±    21744.885   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       354.138 ±       16.700  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       336.617 ±        1.392  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1148.372 ±       53.912    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.915 ±        4.828    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         5.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        15.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    521928.536 ±    13043.836   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                              128  thrpt    5    278531.805 ±     9505.027   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       767.411 ±       25.948  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      4336.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.005 ±        0.040  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.026 ±        0.222    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       808.104 ±      702.289  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      4566.658 ±     3981.253    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.197 ±        6.111  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         6.782 ±       34.654    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        46.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                 128  thrpt    5     36598.646 ±      782.895   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1631.673 ±       34.889  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     70176.012 ±        0.005    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.023 ±        0.122  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.998 ±        5.277    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1631.663 ±      603.386  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     70152.176 ±    24869.555    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        28.884 ±      248.700    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        24.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        26.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                           128  thrpt    5    297972.240 ±    17030.764   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       308.990 ±       17.549  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       333.752 ±        0.170  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1763.094 ±       99.910    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                          128  thrpt    5     97358.857 ±     4039.305   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1075.795 ±       44.826  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.043 ±        0.369  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.700 ±        6.024    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.617 ±      598.676  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     17505.364 ±     9107.200    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        13.037 ±      112.249    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        37.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                         128  thrpt    5    142958.996 ±     5657.410   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        93.013 ±        3.635  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1024.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       135.646 ±      715.245  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1502.187 ±     7922.432    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         5.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                              128  thrpt    5     36018.206 ±     1554.821   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      1922.701 ±       83.235  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     84016.012 ±        0.005    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.024 ±        0.145  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.051 ±        6.339    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1905.371 ±      723.152  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     83314.752 ±    33964.304    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        34.835 ±      299.944    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        28.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        28.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                128  thrpt    5     82388.963 ±      755.081   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       397.813 ±        3.624  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      7600.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       404.432 ±      580.363  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      7727.979 ±    11116.573    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         6.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                          128  thrpt    5    113890.243 ±      150.999   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       348.486 ±        0.369  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       333.717 ±        0.191  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4611.906 ±        6.070    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        23.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                         128  thrpt    5     96976.898 ±     4044.840   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       320.406 ±       13.239  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       336.397 ±        0.312  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5460.041 ±      231.111    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    114204.388 ±     5504.150   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       349.445 ±       16.922  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       336.508 ±        1.331  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4638.304 ±      225.458    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.819 ±       15.662    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        15.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    116919.246 ±     3668.045   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5       265.644 ±        8.305  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5      3576.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.374 ±      579.849  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3631.668 ±     7818.403    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       128  thrpt    5        11.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                               128  thrpt    5      8631.233 ±      330.833   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1430.716 ±       54.538  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    260880.056 ±        0.067    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.013 ±        0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         2.317 ±       16.736    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1426.383 ±      592.915  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    259988.006 ±   102179.123    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5       146.979 ±     1024.399    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        29.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                        128  thrpt    5      8715.052 ±      361.954   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1359.694 ±       57.260  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    245531.219 ±       27.309    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.016 ±        0.107  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         2.945 ±       19.326    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1424.489 ±      595.355  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    257167.273 ±   103537.453    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       144.931 ±     1247.900    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        38.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                       128  thrpt    5     92231.876 ±     1290.658   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       240.015 ±        3.268  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       202.629 ±      712.268  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      3465.595 ±    12182.110    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5         9.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                            128  thrpt    5      4660.127 ±      138.355   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1237.800 ±       37.044  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    418040.090 ±        0.013    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.015 ±        0.086  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         5.197 ±       29.231    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1287.775 ±      574.956  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    434898.742 ±   193317.770    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       272.063 ±     2342.544    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        40.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                              128  thrpt    5     25035.325 ±      665.788   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1297.710 ±       33.592  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     81576.196 ±       44.199    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.024 ±        0.108  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.533 ±        6.800    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1289.522 ±      592.542  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     81045.207 ±    36646.878    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        42.051 ±      362.069    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        32.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                       128  thrpt    5     25511.726 ±      854.659   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1296.954 ±       44.077  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     80016.017 ±        0.006    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.021 ±        0.163  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.295 ±       10.044    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1356.533 ±       29.151  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     83695.968 ±     2868.483    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        57.456 ±      411.562    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        37.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    357236.343 ±    12843.091   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       789.785 ±       28.441  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3480.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.017 ±        0.144  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.073 ±        0.630    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       808.972 ±      704.414  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3563.560 ±     3078.066    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         3.514 ±       30.254    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5        12.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        32.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    389904.485 ±     8557.525   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                           128  thrpt    5     27285.377 ±     1141.165   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1435.842 ±       60.751  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     82824.016 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.026 ±        0.220  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.514 ±       12.825    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1425.536 ±      595.763  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     82203.717 ±    32819.163    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        46.500 ±      400.379    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                   128  thrpt    5    129381.304 ±     6041.721   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      2105.954 ±       97.495  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     25616.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        128  thrpt    5         0.015 ±        0.086  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   128  thrpt    5         0.178 ±        1.048    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                              128  thrpt    5      2110.581 ±      586.435  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                         128  thrpt    5     25665.669 ±     6505.707    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        31.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        26.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                             128  thrpt    5    452896.991 ±    30723.419   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       469.591 ±       31.982  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       467.177 ±      703.699  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1631.192 ±     2548.997    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5        33.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                            128  thrpt    5    267999.436 ±     3208.329   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       384.104 ±        4.710  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2256.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       336.359 ±        0.201  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      1975.591 ±       23.750    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5        21.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                           128  thrpt    5    616515.630 ±    33784.378   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       401.123 ±       21.929  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       404.490 ±      580.563  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1034.326 ±     1513.286    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5        18.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                128  thrpt    5     66886.805 ±     2509.586   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      2928.936 ±      110.977  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68920.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.010 ±        0.012  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.238 ±        0.286    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2927.321 ±      718.574  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     68867.358 ±    15569.885    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        43.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        37.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                  128  thrpt    5    245875.288 ±    10710.706   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1461.174 ±       63.852  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      9352.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.028 ±        0.231  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.178 ±        1.474    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1494.543 ±      700.222  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5      9574.769 ±     4828.258    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         4.345 ±       37.409    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5        22.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                            128  thrpt    5    912995.728 ±    22914.606   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       496.520 ±       12.383  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       467.211 ±      703.875  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       806.423 ±     1226.596    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5        32.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                           128  thrpt    5    789456.207 ±    43644.593   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       621.988 ±       34.733  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1240.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       605.518 ±      579.292  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1209.384 ±     1182.656    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5        35.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                          128  thrpt    5    983883.399 ±    42099.370   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       535.138 ±       22.963  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       538.769 ±      708.865  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       861.985 ±     1135.708    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.640 ±        2.248    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         8.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5        24.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1092220.234 ±     5487.568   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                               128  thrpt    5     29494.480 ±     1444.616   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1545.896 ±       75.712  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     82491.790 ±       26.756    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.031 ±        0.263  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         1.670 ±       14.233    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1494.516 ±      729.048  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     79774.541 ±    39682.397    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        43.297 ±      372.798    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        22.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                              128  thrpt    5    123640.547 ±     7791.951   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1523.943 ±       95.865  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     19400.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.012 ±        0.086  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.150 ±        1.089    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1494.945 ±      726.843  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     19019.109 ±     8681.075    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         8.725 ±       75.122    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        22.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                       128  thrpt    5    164717.721 ±     4496.532   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       879.073 ±       23.933  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.017 ±        0.097  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.163 ±        0.920    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       877.643 ±      706.312  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      8393.834 ±     6903.379    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         8.906 ±       63.755    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        41.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                      128  thrpt    5    256093.318 ±    11110.892   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       666.413 ±       28.987  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       674.061 ±        0.357  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4143.433 ±      182.060    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                           128  thrpt    5     62998.963 ±     3339.948   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2658.844 ±      140.906  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     66432.007 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.009 ±        0.015  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.219 ±        0.359    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      2654.768 ±      586.575  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     66358.610 ±    16405.517    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        39.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        32.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                             128  thrpt    5    178622.111 ±     1911.400   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       623.747 ±        6.951  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       606.706 ±      580.581  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      5344.048 ±     5092.225    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        28.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                      128  thrpt    5    537795.928 ±    12948.231   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       543.945 ±       13.282  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       538.038 ±      708.792  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1576.751 ±     2099.308    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.389 ±        3.351    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        34.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    483545.102 ±     4174.754   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       371.162 ±        3.366  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.561 ±        1.196  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1095.388 ±        7.288    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.867 ±        4.572    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        15.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    500575.645 ±     2334.429   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                          128  thrpt    5    285220.919 ±     6317.738   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       785.903 ±       17.827  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4336.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.006 ±        0.051  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.032 ±        0.276    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       741.235 ±      574.278  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4091.052 ±     3212.244    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.199 ±        7.565  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         6.635 ±       41.888    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        11.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        42.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                         128  thrpt    5      8654.153 ±      249.132   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1106.571 ±       32.245  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    201256.049 ±        0.013    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.007 ±        0.035  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.237 ±        6.429    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1152.329 ±      713.668  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    209623.862 ±   131087.914    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        5.319  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       169.868 ±      966.244    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5        17.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        34.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      9191.252 ±      309.681   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1089.483 ±       37.130  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    186576.046 ±        0.013    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.010 ±        0.084  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         1.672 ±       14.397    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1083.375 ±      598.849  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    185465.569 ±    99724.921    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       159.599 ±     1143.201    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        37.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5    107711.621 ±      511.954   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       700.838 ±        3.190  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     10240.004 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       675.498 ±        0.294  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      9869.778 ±       46.367    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.533 ±        4.589  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         7.793 ±       67.100    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        28.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      6868.258 ±      171.625   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1279.150 ±       32.516  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    293112.062 ±        0.011    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.017 ±        0.115  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         3.801 ±       26.468    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1288.616 ±      593.801  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    295277.987 ±   135825.654    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       183.291 ±     1578.189    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        37.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     22466.595 ±      750.007   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       943.319 ±       32.121  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     66089.662 ±       50.478    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.015 ±        0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.086 ±        9.348    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       947.110 ±      573.647  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     66345.945 ±    39959.497    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        55.713 ±      387.307    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     25394.999 ±      309.533   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       976.998 ±       11.855  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     60552.017 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.024 ±        0.130  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.469 ±        8.067    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       946.668 ±      572.917  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     58682.591 ±    35747.687    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        49.500 ±      426.210    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    866257.804 ±    25037.062   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1563.030 ±       44.820  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      2840.000 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.030 ±        0.152  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.055 ±        0.277    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1563.298 ±      731.204  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      2840.763 ±     1336.997    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.462 ±       12.585    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        23.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        24.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1045411.896 ±     4859.891   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     23803.092 ±     1086.724   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1035.409 ±       46.690  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     68470.443 ±       33.699    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.023 ±        0.127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.491 ±        8.393    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1014.630 ±       23.326  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     67100.496 ±     1881.255    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        52.983 ±      456.199    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        36.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                             128  thrpt    5     24681.355 ±     1713.297   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1339.530 ±       93.387  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     85416.018 ±        0.011    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.015 ±        0.073  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.949 ±        4.782    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1357.716 ±       22.492  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     86596.167 ±     5608.858    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        52.327 ±      366.097    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                      128  thrpt    5     26291.600 ±     1966.063   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1200.829 ±       89.654  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     71888.146 ±        1.122    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.021 ±        0.142  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         1.283 ±        8.800    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1152.333 ±      714.678  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     69075.492 ±    45312.301    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        57.442 ±      414.130    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        17.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        33.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                     128  thrpt    5    250866.718 ±    11579.089   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       652.921 ±       30.239  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       675.502 ±        0.469  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4238.162 ±      198.688    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        10.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        28.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                          128  thrpt    5     15396.107 ±      411.768   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1584.878 ±       42.731  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    162024.603 ±        4.948    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.020 ±        0.152  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.034 ±       15.618    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1630.572 ±      580.022  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    166752.791 ±    61701.789    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        82.048 ±      706.460    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        24.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        42.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                            128  thrpt    5     52967.041 ±      823.836   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1284.915 ±       19.459  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     38176.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.005 ±        0.026  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.159 ±        0.774    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1289.093 ±      591.763  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     38287.436 ±    17134.197    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.915 ±      171.476    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                     128  thrpt    5    128980.359 ±     9033.204   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1092.822 ±       76.750  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     13336.003 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.043 ±        0.373  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.527 ±        4.520    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.481 ±      591.317  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     13218.760 ±     7004.349    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.933 ±        6.691  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        11.328 ±       81.082    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        16.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        37.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1455528.039 ±    18551.166   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1561.009 ±       19.901  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.031 ±        0.156  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.034 ±        0.169    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1563.451 ±      729.844  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1690.238 ±      773.524    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.869 ±        7.479    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        23.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1544989.808 ±    45463.218   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                         128  thrpt    5     59524.545 ±     3713.496   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1383.553 ±       86.960  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     36584.007 ±        0.002    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.027 ±        0.223  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.720 ±        5.968    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.487 ±       27.019  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     35900.420 ±     1709.822    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        21.374 ±      184.037    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        33.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                             128  thrpt    5     14182.914 ±      398.004   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1247.030 ±       35.384  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5    138397.389 ±       58.006    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.010 ±        0.050  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.086 ±        5.599    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1289.151 ±      577.482  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    143121.703 ±    65689.635    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        89.428 ±      622.188    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        19.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        35.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                      128  thrpt    5     13762.521 ±      658.470   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1138.852 ±       54.937  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5    130244.033 ±       64.554    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.007 ±        0.054  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.836 ±        6.230    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1151.644 ±      709.731  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    131751.574 ±    82318.478    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        91.605 ±      788.750    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        37.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                     128  thrpt    5    272258.503 ±     1991.998   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       708.527 ±        5.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       675.424 ±        0.462  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3904.645 ±       28.294    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.533 ±        4.590  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         3.079 ±       26.514    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        10.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                          128  thrpt    5     10639.502 ±      396.873   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1469.098 ±       54.689  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    217320.316 ±        2.378    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.028 ±        0.224  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         4.059 ±       32.973    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1493.648 ±      697.322  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    221163.109 ±   111252.332    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       119.974 ±     1033.016    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        22.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                            128  thrpt    5     37093.009 ±     1340.115   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1153.096 ±       42.377  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     48928.953 ±        8.111    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.020 ±        0.172  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.835 ±        7.191    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1152.563 ±      711.072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     48927.334 ±    30767.188    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        28.444 ±      244.909    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                     128  thrpt    5     43472.123 ±     2842.353   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1153.237 ±       75.941  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     41752.010 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.041 ±        0.347  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.477 ±       12.414    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1151.491 ±      710.212  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     41739.956 ±    27165.974    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        33.883 ±      291.741    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        37.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1674245.946 ±    53410.019   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1523.211 ±       48.852  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.030 ±        0.155  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.028 ±        0.145    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.361 ±      725.588  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1406.476 ±      706.467    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.871 ±        7.496    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        22.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1830989.557 ±     3611.854   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                         128  thrpt    5     33962.815 ±     1848.175   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1071.575 ±       58.699  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     49665.620 ±       13.845    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.024 ±        0.157  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.087 ±        7.145    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1082.657 ±      565.352  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     50211.909 ±    27363.859    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        36.403 ±      313.437    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                  128  thrpt    5    129713.893 ±     1553.106   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2223.229 ±       27.131  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     26976.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.008 ±        0.028  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.101 ±        0.346    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2246.519 ±      717.892  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     27261.321 ±     8856.564    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        33.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        27.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                            128  thrpt    5    335953.433 ±     8986.105   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       672.770 ±       18.024  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       667.423 ±        0.255  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      3127.075 ±       84.188    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5        48.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                           128  thrpt    5    232034.605 ±     2667.537   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       514.215 ±        5.779  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       470.818 ±      709.016  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      3196.302 ±     4846.751    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.905 ±        7.794    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                          128  thrpt    5    451471.422 ±     6943.467   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       569.115 ±        8.810  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       606.745 ±      580.569  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2116.378 ±     2039.186    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        26.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                               128  thrpt    5     64615.392 ±     1196.328   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2883.400 ±       53.969  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     70232.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.014 ±        0.030  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.338 ±        0.736    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2859.301 ±      716.551  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     69650.072 ±    17780.845    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        42.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        35.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                 128  thrpt    5    218062.886 ±     6685.603   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1538.580 ±       47.586  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     11104.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.022 ±        0.163  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.159 ±        1.173    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1563.298 ±      732.296  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     11275.333 ±     5000.303    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.865 ±       41.885    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        23.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                           128  thrpt    5    680080.573 ±    11247.184   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       532.351 ±        8.941  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       533.942 ±      703.720  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1237.131 ±     1646.215    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                  128  thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                          128  thrpt    5    444387.311 ±    67784.557   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       456.238 ±       69.609  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       470.904 ±      709.380  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1671.849 ±     2557.340    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    631833.961 ±     6019.717   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       494.578 ±        4.563  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       471.206 ±      709.676  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1174.280 ±     1774.793    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.332 ±        2.859    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        20.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    659623.658 ±    12973.361   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                              128  thrpt    5     26591.175 ±     1102.882   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1363.211 ±       56.279  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     80692.799 ±       27.518    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.033 ±        0.205  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.987 ±       12.251    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1424.709 ±      597.013  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     84270.919 ±    31845.159    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        47.690 ±      410.622    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        21.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                        128  thrpt    5      6501.295 ±      131.049   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1000.768 ±       20.727  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5    242272.065 ±        0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.013 ±        0.107  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         3.216 ±       25.697    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1015.615 ±       19.652  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    245866.841 ±     1262.954    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±        5.317  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       259.173 ±     1294.694    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                              128  thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                 128  thrpt    5      6502.429 ±      291.231   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       937.217 ±       41.883  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5    226864.066 ±        0.016    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.017 ±        0.139  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         4.132 ±       34.089    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       945.661 ±      570.740  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5    228707.892 ±   133057.227    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       224.172 ±     1608.259    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        41.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                128  thrpt    5     97011.815 ±     4834.466   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       939.891 ±       47.440  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.010 ±        0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.164 ±        1.410    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       948.862 ±      588.908  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     15384.763 ±     9325.263    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.533 ±        4.587  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         8.790 ±       75.686    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                     128  thrpt    5      6547.291 ±      134.350   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1178.044 ±       24.407  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    283224.063 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.022 ±        0.172  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         5.367 ±       41.293    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1151.430 ±      709.826  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    276906.203 ±   173102.296    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       193.762 ±     1668.350    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        38.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                       128  thrpt    5     18114.018 ±      320.442   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       821.981 ±       13.939  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     71414.875 ±       70.586    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.028 ±        0.244  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         2.442 ±       21.027    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       809.918 ±      704.716  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     70381.503 ±    61555.201    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        57.942 ±      498.898    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        35.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                128  thrpt    5     19850.983 ±     1743.698   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       841.192 ±       74.064  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     66696.022 ±        0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.020 ±        0.107  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         1.575 ±        8.318    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       809.556 ±      707.416  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     64238.275 ±    56909.943    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        73.397 ±      524.031    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                               128  thrpt    5    602153.533 ±    16535.762   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1365.163 ±       37.211  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.022 ±        0.181  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.057 ±        0.474    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1357.790 ±       26.845  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3548.896 ±      130.547    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         2.094 ±       14.587    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        20.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        27.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    615268.326 ±     6576.396   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                    128  thrpt    5     18617.130 ±     1111.854   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       858.050 ±       51.190  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     72544.346 ±       28.230    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.047 ±        0.255  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         3.912 ±       21.410    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       876.912 ±      703.925  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     74052.932 ±    57483.692    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        67.472 ±      580.957    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                            128  thrpt    5     11576.824 ±      311.073   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1125.072 ±       30.279  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    152968.043 ±        0.049    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.018 ±        0.127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         2.399 ±       17.297    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1084.432 ±      596.459  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    147377.860 ±    78353.313    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        90.363 ±      778.055    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        30.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                     128  thrpt    5     11364.102 ±      583.083   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1040.412 ±       53.262  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5    144088.038 ±        0.013    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.007 ±        0.057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.907 ±        7.810    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1082.807 ±      565.648  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    150001.160 ±    79521.738    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       109.808 ±      945.481    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                    128  thrpt    5    165413.947 ±     8684.511   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       956.774 ±       50.228  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      9104.003 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.017 ±        0.148  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.167 ±        1.438    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       947.681 ±      588.778  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      9020.276 ±     5662.905    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         6.330 ±       54.499    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        28.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                         128  thrpt    5     10462.768 ±      386.847   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1309.697 ±       48.163  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    197000.040 ±        0.005    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.005 ±        0.039  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.758 ±        5.818    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1288.447 ±      594.514  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    193660.859 ±    84177.623    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±        7.823  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       162.491 ±     1194.271    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                           128  thrpt    5     28035.714 ±      493.575   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       967.623 ±       16.451  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     54317.469 ±       40.299    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.008 ±        0.058  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.427 ±        3.221    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1015.252 ±       21.004  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     56991.232 ±      847.841    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        37.323 ±      321.358    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                    128  thrpt    5     77469.847 ±     4509.904   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1233.311 ±       71.449  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.039 ±        0.209  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.788 ±        4.190    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1220.479 ±      715.328  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     24799.311 ±    14591.664    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        18.935 ±      135.203    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        18.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        35.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                   128  thrpt    5    952547.608 ±    27701.892   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1307.132 ±       37.991  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      2160.000 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.028 ±        0.217  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.046 ±        0.359    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1289.604 ±      586.951  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2131.224 ±      975.533    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.320 ±       11.367    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        27.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1108251.214 ±      698.542   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                        128  thrpt    5     64287.168 ±     3881.530   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1386.623 ±       84.048  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     33944.007 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.011 ±        0.085  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.276 ±        2.060    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.681 ±       27.038  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     33240.079 ±     1403.895    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        19.466 ±      167.607    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                128  thrpt    5     20096.713 ±      775.824   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       726.516 ±       27.594  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     56896.022 ±        0.011    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       674.917 ±        1.894  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     52859.013 ±     1928.707    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        31.409 ±      110.421    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        10.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        31.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                         128  thrpt    5     14781.837 ±      872.174   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       414.045 ±       24.440  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     44088.241 ±        1.816    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       470.867 ±      709.195  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     50157.275 ±    75729.489    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        29.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                        128  thrpt    5     97480.406 ±     1151.499   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       244.787 ±        2.783  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3952.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       202.663 ±      712.387  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3277.332 ±    11520.353    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         9.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                             128  thrpt    5     13636.172 ±      690.470   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5       861.167 ±       43.703  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     99392.032 ±        0.009    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.016 ±        0.140  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.852 ±       15.943    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       877.029 ±      718.462  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    101281.435 ±    84023.798    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        92.386 ±      795.467    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        43.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                               128  thrpt    5     57107.040 ±     2055.954   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5      1018.594 ±       36.655  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     28072.007 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.011 ±        0.054  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.298 ±        1.486    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1015.838 ±       19.660  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     27997.602 ±      936.562    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        18.355 ±      158.038    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5        15.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        32.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                        128  thrpt    5     78843.410 ±     3822.389   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1274.588 ±       61.359  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     25440.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.042 ±        0.348  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.849 ±        7.029    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1288.846 ±      576.959  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     25739.289 ±    11967.494    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        16.166 ±      139.195    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        36.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    253827.826 ±     4072.182   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       486.403 ±        7.887  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      3016.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       471.214 ±      709.596  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2924.906 ±     4442.894    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         2.479 ±        8.715    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    287588.153 ±    25807.376   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                            128  thrpt    5     72959.055 ±     4272.026   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1173.713 ±       68.164  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     25320.006 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.027 ±        0.231  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.584 ±        4.935    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1151.715 ±      710.478  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     24872.603 ±    16107.094    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        17.680 ±      152.231    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5        17.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        35.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                 128  thrpt    5    147963.913 ±     4955.715   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      2141.195 ±       71.966  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     22776.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.016 ±        0.124  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.170 ±        1.310    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      2178.451 ±      716.867  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     23179.951 ±     8023.196    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        32.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        27.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                           128  thrpt    5    633906.454 ±     1013.701   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       351.231 ±        0.682  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       333.613 ±        1.280  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       828.262 ±        2.817    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.331 ±        2.849    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        23.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                          128  thrpt    5    328033.156 ±     1939.588   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       341.812 ±        2.010  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       336.385 ±        0.194  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1613.964 ±        9.576    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        20.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                         128  thrpt    5    797849.890 ±    23150.767   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       275.760 ±        8.011  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       544.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       269.656 ±      580.454  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       533.197 ±     1147.832    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5        12.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                              128  thrpt    5     71727.650 ±     1802.083   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3075.976 ±       76.735  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     67504.006 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.009 ±        0.016  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.188 ±        0.350    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      3063.051 ±        0.981  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     67222.637 ±     1690.920    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        45.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                128  thrpt    5    283758.203 ±    17683.972   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1478.489 ±       92.600  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      8200.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.034 ±        0.284  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.190 ±        1.583    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1494.480 ±      700.958  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      8295.328 ±     4120.636    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         3.792 ±       32.654    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5        22.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        29.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1521716.455 ±    14804.962   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       518.211 ±        5.202  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       467.180 ±      703.663  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       483.603 ±      733.199    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        32.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                         128  thrpt    5   1473794.586 ±    94288.665   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       861.428 ±       54.777  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.025 ±        0.137  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.026 ±        0.144    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       877.741 ±      713.694  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       937.596 ±      763.888    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.839 ±        7.226    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5        13.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        40.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1595096.700 ±   107927.747   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       543.174 ±       36.738  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       538.746 ±      710.387  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       533.506 ±      723.375    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.396 ±        1.391    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        24.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   1814222.819 ±    12487.953   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                             128  thrpt    5     34285.830 ±     1923.008   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1590.103 ±       88.709  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     72977.919 ±       16.413    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.038 ±        0.187  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.733 ±        8.613    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1630.983 ±      579.924  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     74906.679 ±    28668.388    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        37.416 ±      322.161    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        24.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                  128  thrpt    5     46476.956 ±      769.761   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       927.238 ±       16.150  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     31400.009 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.006 ±        0.033  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.206 ±        1.100    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       947.093 ±      573.039  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     32087.123 ±    19750.619    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        22.682 ±      195.301    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        34.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                           128  thrpt    5     79440.354 ±     2019.845   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       837.505 ±       21.429  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.025 ±        0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.494 ±        2.668    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       877.859 ±      714.153  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     17391.871 ±    14150.433    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        15.971 ±      137.519    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        41.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                          128  thrpt    5    259664.017 ±     4840.841   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       844.693 ±       15.635  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.025 ±        0.142  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.153 ±        0.862    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       810.926 ±      710.226  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4916.321 ±     4325.919    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         4.051 ±       34.881    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        29.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                               128  thrpt    5     23471.066 ±     1380.292   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1102.837 ±       64.980  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     73960.019 ±        0.007    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.046 ±        0.390  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         2.999 ±       25.640    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1083.524 ±      563.648  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     72753.647 ±    41119.402    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        54.549 ±      469.687    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        38.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                 128  thrpt    5     59485.423 ±      503.273   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       882.504 ±        7.393  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     23352.007 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.014 ±        0.086  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.383 ±        2.273    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       878.940 ±      714.715  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     23260.437 ±    18967.792    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        17.616 ±      151.682    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        33.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                          128  thrpt    5     89306.434 ±     2715.149   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1223.420 ±       37.777  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     21560.000 ±        0.038    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.017 ±        0.111  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.303 ±        1.940    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1220.659 ±      715.782  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21510.754 ±    12578.277    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        14.078 ±      121.216    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        18.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        37.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    286207.904 ±    30791.468   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       912.055 ±       98.343  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.019 ±        0.123  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.101 ±        0.668    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       945.917 ±      587.057  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5209.587 ±     3373.873    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         5.054 ±       36.226    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        31.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    320636.005 ±      577.981   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                              128  thrpt    5     77454.929 ±     3280.912   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1147.975 ±       48.399  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     23328.005 ±        0.070    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.045 ±        0.358  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.914 ±        7.312    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1151.659 ±      709.919  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     23397.086 ±    14202.522    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        16.344 ±      140.727    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        38.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                128  thrpt    5     77975.766 ±     1786.121   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1463.982 ±       33.377  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     29552.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.028 ±        0.197  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.574 ±        3.994    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1493.577 ±      725.052  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     30148.376 ±    14574.519    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        16.192 ±      139.419    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        22.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                         128  thrpt    5     76682.629 ±     4391.332   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       884.065 ±       50.334  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     18144.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.020 ±        0.161  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.409 ±        3.356    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       876.682 ±      705.050  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     17978.608 ±    14160.376    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        19.484 ±      167.766    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        44.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                        128  thrpt    5     97006.228 ±     5438.003   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1042.199 ±       58.533  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     16912.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.021 ±        0.142  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.348 ±        2.340    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1082.686 ±      583.303  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     17586.811 ±    10114.164    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        13.159 ±      113.300    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                             128  thrpt    5     43793.177 ±      903.630   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2091.985 ±       42.445  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     75176.009 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.030 ±        0.195  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.095 ±        7.064    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2110.568 ±      585.953  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     75848.353 ±    21319.111    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        31.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        27.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                               128  thrpt    5    127994.528 ±     6514.270   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       567.970 ±       28.685  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      6984.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       605.532 ±      579.346  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      7462.377 ±     7329.014    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                        128  thrpt    5    159456.510 ±    10217.083   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       236.682 ±       15.265  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       268.595 ±      578.171  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2660.194 ±     5729.613    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        17.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    725214.257 ±    39261.363   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       899.447 ±       48.564  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.024 ±        0.162  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.054 ±        0.355    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       945.909 ±      588.528  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2054.410 ±     1312.058    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.757 ±       15.127    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    764538.869 ±    35051.999   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                            128  thrpt    5    192849.423 ±     4625.141   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       628.304 ±       15.056  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       604.146 ±      577.814  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      4935.303 ±     4772.655    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         1.096 ±        9.439    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        38.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                            128  thrpt    5    123410.539 ±     4340.703   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1678.378 ±       59.231  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     21408.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.024 ±        0.115  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.307 ±        1.471    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1699.693 ±       17.193  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     21681.251 ±      749.835    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         8.526 ±       73.414    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        25.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        27.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                     128  thrpt    5    156159.132 ±     8159.096   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       833.392 ±       43.378  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.027 ±        0.158  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.280 ±        1.615    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       809.717 ±      701.171  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      8159.833 ±     7014.569    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         8.218 ±       70.758    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        41.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                    128  thrpt    5    309391.314 ±     5163.443   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       600.825 ±       10.390  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       606.779 ±      580.534  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      3087.479 ±     2968.108    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                         128  thrpt    5     60343.633 ±     3522.089   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2547.105 ±      149.410  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     66432.007 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.009 ±        0.020  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.235 ±        0.530    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2518.905 ±      717.005  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     65700.749 ±    18557.089    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        37.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        32.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                           128  thrpt    5    183876.015 ±     2021.841   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       629.936 ±        6.766  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5392.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       606.691 ±      580.394  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      5195.373 ±     4997.907    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                    128  thrpt    5    286985.584 ±    20031.408   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       283.009 ±       19.897  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       269.144 ±      579.353  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1464.578 ±     3152.835    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        15.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1507510.054 ±    42524.821   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1118.764 ±       30.904  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.031 ±        0.256  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.032 ±        0.270    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1152.142 ±      710.987  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1203.011 ±      746.508    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±        6.687  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.104 ±        6.922    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        17.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1750996.461 ±     5896.760   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                        128  thrpt    5    309531.028 ±     4283.013   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       841.881 ±       11.940  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4280.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.011 ±        0.094  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.058 ±        0.478    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       809.704 ±      701.444  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4117.961 ±     3600.966    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         4.751 ±       34.117    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        42.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                         128  thrpt    5      4496.692 ±       94.293   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5       885.236 ±       18.467  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    309816.092 ±        0.014    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.037 ±        0.316  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5        12.787 ±      110.099    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       941.197 ±      587.227  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    329269.151 ±   202346.148    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.332 ±       10.099  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       468.538 ±     3556.086    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        48.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      4637.572 ±      184.340   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       807.369 ±       32.504  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    273992.091 ±        0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.006 ±        0.054  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         2.102 ±       18.099    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       871.510 ±      718.235  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    295762.624 ±   243489.129    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.332 ±       10.097  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       449.757 ±     3413.287    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        57.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5     29425.557 ±      802.381   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       482.351 ±       13.200  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     25800.015 ±        0.006    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       535.680 ±      706.336  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     28684.153 ±    38164.584    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        21.393 ±       75.204    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        31.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      3927.142 ±       87.769   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1000.613 ±       22.951  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    401008.109 ±        0.019    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.008 ±        0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         3.344 ±       28.792    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1010.428 ±       39.507  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    404935.871 ±     9080.867    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.332 ±       11.468  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       534.715 ±     4604.057    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        15.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        49.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     13987.806 ±      442.560   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       778.812 ±       25.112  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     87627.164 ±      114.650    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.032 ±        0.273  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         3.535 ±       30.439    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       804.820 ±      717.743  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     90472.289 ±    78837.520    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±       10.327  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       133.861 ±     1152.582    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        47.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     16153.262 ±     1164.848   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       836.860 ±       60.574  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     81536.028 ±        0.291    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.017 ±        0.148  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.638 ±       14.107    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       804.919 ±      700.427  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     78526.959 ±    70363.282    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.465 ±       11.238  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       141.984 ±     1085.364    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        48.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    274039.028 ±     7068.854   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       966.694 ±       24.882  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.018 ±        0.156  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.104 ±        0.895    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       944.052 ±      567.442  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5418.701 ±     3177.009    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.332 ±        8.700  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         7.621 ±       49.746    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        38.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    311987.698 ±    11614.982   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     14870.667 ±      868.361   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       845.243 ±       49.157  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     89446.587 ±       42.669    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.046 ±        0.397  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         4.801 ±       41.338    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       871.869 ±      694.064  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     92329.837 ±    74733.702    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.598 ±       10.966  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       168.532 ±     1151.169    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        54.000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                                                N/A  thrpt    5    587079.048 ±     4210.102   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                 N/A  thrpt    5        38.789 ±        0.278  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5       104.001 ±        0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                      N/A  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.readPlayJson                                                                                     N/A  thrpt    5     65928.561 ±     1204.972   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                      N/A  thrpt    5      2974.732 ±       55.022  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                 N/A  thrpt    5     71008.006 ±        0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.007 ±        0.019  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.164 ±        0.448    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2927.574 ±      718.548  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5     69887.013 ±    17451.792    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                           N/A  thrpt    5        43.000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                            N/A  thrpt    5        37.000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                                                N/A  thrpt    5    994051.404 ±    51714.495   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5       570.919 ±       29.523  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5       904.000 ±        0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       537.779 ±      707.950  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5       849.891 ±     1099.714    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.266 ±        1.405  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.419 ±        2.211    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                      N/A  thrpt    5         8.000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                       N/A  thrpt    5        32.000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                                               N/A  thrpt    5    691135.603 ±     4282.220   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5       186.175 ±        1.168  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       424.001 ±        0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       201.949 ±      709.881  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       460.468 ±     1618.611    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                     N/A  thrpt    5         3.000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                      N/A  thrpt    5         9.000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                       N/A  thrpt    5    859566.530 ±    76733.242   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                        N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                   N/A  thrpt    5        ≈ 10⁻³                   B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                             N/A  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                                                    N/A  thrpt    5     33446.948 ±     1319.542   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1727.225 ±       68.595  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5     81277.528 ±       21.391    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.008 ±        0.051  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.373 ±        2.404    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1767.607 ±      592.204  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5     83153.101 ±    26052.351    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5        37.889 ±      326.235    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                          N/A  thrpt    5        26.000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                           N/A  thrpt    5        32.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                                 N/A  thrpt    5    675474.026 ±     7152.139   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2197.216 ±       22.510  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      5120.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.025 ±        0.200  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.058 ±        0.466    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2178.323 ±      718.337  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      5076.536 ±     1705.386    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        32.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        26.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   5078168.240 ±    65582.792   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       309.734 ±        4.051  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       333.714 ±        0.119  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       103.434 ±        1.335    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        24.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                          N/A  thrpt    5    772254.326 ±    28310.214   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       957.764 ±       35.088  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.046 ±        0.330  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.093 ±        0.669    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       945.484 ±      588.629  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      1925.956 ±     1173.991    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.066 ±        6.438  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         2.165 ±       13.044    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        14.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        45.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5   7505907.544 ±   321624.895   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       343.361 ±       14.811  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       337.192 ±        1.184  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5        70.713 ±        2.927    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.028 ±        0.237    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        13.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                              N/A  thrpt    5    258490.475 ±    16031.636   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1428.304 ±       89.255  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      8696.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.032 ±        0.210  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.197 ±        1.301    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1423.335 ±      572.716  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      8672.947 ±     3803.562    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.933 ±        8.031  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         5.763 ±       49.625    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        21.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        44.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                 N/A  thrpt    5      7251.687 ±      130.596   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1746.047 ±       31.370  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    378960.057 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.109 ±        0.158  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        23.676 ±       34.749    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1767.839 ±      590.744  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    383706.409 ±   129028.145    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       145.575 ±     1253.444    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        26.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        31.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                           N/A  thrpt    5     11268.362 ±      523.739   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       259.788 ±       12.010  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5     36280.037 ±        0.007    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       266.886 ±      574.493  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     37362.394 ±    80451.766    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5        18.508 ±      159.360    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                          N/A  thrpt    5     12821.918 ±      453.419   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       447.372 ±       15.754  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     54920.033 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       402.823 ±      577.984  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     49455.306 ±    70989.887    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        28.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     23687.558 ±     1781.588   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       443.918 ±       33.217  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     29496.019 ±        0.010    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       471.847 ±      710.715  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     31325.652 ±    46788.201    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        20.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                              N/A  thrpt    5      2111.232 ±       79.441   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1341.187 ±       50.824  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5    999801.217 ±        8.711    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.008 ±        0.039  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         5.738 ±       29.062    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1355.471 ±       32.582  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5   1010490.591 ±    25837.637    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5       693.437 ±     5970.703    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        42.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                N/A  thrpt    5      7532.464 ±      274.020   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1545.843 ±       56.043  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    323016.057 ±        0.017    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.083 ±        0.295  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5        17.268 ±       61.480    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1494.837 ±      727.597  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    312461.594 ±   155766.737    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       140.146 ±     1206.704    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        22.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        31.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5     53526.547 ±     1700.081   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       528.611 ±       16.525  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5     15544.008 ±        0.002    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       533.673 ±      703.024  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     15708.124 ±    20857.987    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.266 ±        1.405  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         7.879 ±       41.546    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        38.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                         N/A  thrpt    5     35699.912 ±      205.146   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       531.506 ±        3.174  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     23431.848 ±        0.338    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       537.011 ±      707.550  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     23683.780 ±    31305.938    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         5.881 ±       50.637    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        36.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5     72987.294 ±     3734.487   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       548.653 ±       28.230  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     11832.006 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       538.166 ±      709.240  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     11599.481 ±    15207.646    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        24.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5     94337.273 ±      208.368   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.004 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                             N/A  thrpt    5      4771.549 ±      204.919   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      1445.318 ±       62.978  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5    476735.704 ±        2.768    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.035 ±        0.079  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5        11.433 ±       25.897    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1424.653 ±      597.857  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5    469674.224 ±   183133.554    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5       311.944 ±     2685.928    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        21.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        38.000                     ms
[info] IntBenchmark.readCirce                                                                                           N/A  thrpt    5   6456917.455 ±   149885.228   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      3905.660 ±       88.644  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5       952.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.001 ±        0.003  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      3880.431 ±      716.347  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5       945.793 ±      167.219    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        57.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        47.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                                     N/A  thrpt    5  37307198.138 ±  1392875.374   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                      N/A  thrpt    5       379.246 ±       14.268  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5       333.578 ±        1.109  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        14.074 ±        0.542    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                         N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                    N/A  thrpt    5         0.006 ±        0.048    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                           N/A  thrpt    5         5.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                            N/A  thrpt    5        24.000                     ms
[info] IntBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   6276827.957 ±   112389.546   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      2647.845 ±       48.230  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5       664.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.003 ±        0.010  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.001 ±        0.002    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2654.810 ±      586.188  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       665.642 ±      138.159    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        39.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        31.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5  35268233.185 ±   442626.457   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                                      N/A  thrpt    5  26033453.561 ±  7426246.453   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                       N/A  thrpt    5       926.212 ±      264.606  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        56.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.011 ±        0.097  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.001 ±        0.006    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       879.615 ±      711.268  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5        53.207 ±       41.722    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.039 ±        0.339    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                            N/A  thrpt    5        13.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                             N/A  thrpt    5        27.000                     ms
[info] IntBenchmark.readPlayJson                                                                                        N/A  thrpt    5   5892694.549 ±   187939.041   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      2845.496 ±       90.768  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.003 ±        0.006  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.001 ±        0.002    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      2791.270 ±      586.790  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5       745.664 ±      168.160    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        41.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        39.000                     ms
[info] IntBenchmark.writeCirce                                                                                          N/A  thrpt    5  20192124.344 ±   379118.041   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      2257.685 ±       42.694  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       176.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.004 ±        0.020  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      2246.283 ±      718.081  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5       175.129 ±       56.875    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        33.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        26.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                                    N/A  thrpt    5  54795122.835 ±  2213598.191   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                     N/A  thrpt    5      1671.329 ±       67.490  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                N/A  thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.123 ±        1.048  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.004 ±        0.030    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1693.647 ±       55.384  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5        48.642 ±        0.537    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.333 ±       11.474  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.038 ±        0.331    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                          N/A  thrpt    5        25.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                           N/A  thrpt    5        47.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5  11585438.203 ±   130218.211   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5      2296.478 ±       24.722  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.036 ±        0.299  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.005 ±        0.041    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      2314.484 ±      584.524  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       314.416 ±       77.315    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        34.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        28.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  41263724.503 ± 14586615.139   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       838.869 ±      296.594  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       N/A  thrpt    5         0.034 ±        0.199  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  N/A  thrpt    5         0.001 ±        0.009    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       810.455 ±      710.290  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        31.077 ±       28.109    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.933 ±        5.318  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.037 ±        0.216    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5        12.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  50852259.909 ±   330505.397   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                                     N/A  thrpt    5  39884724.100 ±  1329737.543   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2027.150 ±       66.728  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.001 ±        0.005  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2042.153 ±        1.415  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        80.597 ±        2.702    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                           N/A  thrpt    5        30.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                            N/A  thrpt    5        27.000                     ms
[info] IntBenchmark.writePlayJson                                                                                       N/A  thrpt    5   2139035.763 ±    87265.395   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1717.613 ±       69.941  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      1264.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.035 ±        0.289  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.026 ±        0.211    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1699.344 ±       20.970  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      1250.681 ±       58.465    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.584 ±        5.028    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        25.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        30.000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                      N/A  thrpt    5    138545.149 ±     3502.721   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5      2541.504 ±       62.749  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     28872.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.003 ±        0.008  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.036 ±        0.087    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      2518.873 ±      718.367  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     28613.866 ±     8056.349    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5        37.000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        29.000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                           N/A  thrpt    5     21219.974 ±      983.565   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      1677.311 ±       77.607  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5    124424.021 ±        0.008    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.012 ±        0.056  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.863 ±        4.149    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1698.165 ±       29.680  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5    125981.344 ±     4355.493    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.066 ±        9.175  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5        80.393 ±      692.208    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        25.000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        41.000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                      N/A  thrpt    5    128441.255 ±     7990.367   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1427.288 ±       88.035  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     17488.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.012 ±        0.099  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.148 ±        1.203    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      1425.260 ±      548.053  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     17468.430 ±     6885.770    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         0.933 ±        8.032  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5        11.457 ±       98.650    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        21.000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        36.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5    485666.790 ±    19229.663   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1004.718 ±       40.020  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      3256.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          N/A  thrpt    5         0.010 ±        0.049  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     N/A  thrpt    5         0.032 ±        0.161    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5      1015.024 ±       22.020  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5      3289.794 ±      190.663    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         1.066 ±        6.439  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         3.458 ±       20.981    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5        15.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        31.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5    546790.106 ±     9191.226   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5       533.611 ±        9.030  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5      1536.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       538.613 ±      709.770  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5      1550.265 ±     2041.207    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                 N/A  thrpt    5         0.266 ±        1.405  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                            N/A  thrpt    5         0.766 ±        4.041    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5         8.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    N/A  thrpt    5        24.000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                          N/A  thrpt    5     43859.014 ±     1586.470   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5       749.292 ±       27.076  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5     26888.009 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       740.051 ±      576.405  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     26575.808 ±    21235.168    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.332 ±        7.254  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5        47.307 ±      255.651    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        11.000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        46.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    370809.247 ±     3785.448   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      2510.418 ±       25.615  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10656.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.006 ±        0.007  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.025 ±        0.031    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2518.699 ±      717.873  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     10691.981 ±     3099.893    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        37.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        33.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    390612.663 ±    15981.101   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1034.438 ±       42.335  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4168.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.014 ±        0.091  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.057 ±        0.364    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1082.737 ±      600.988  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4361.072 ±     2350.557    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        6.689  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         3.815 ±       27.436    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        40.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    422586.640 ±     2919.507   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       833.489 ±        5.524  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3104.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.014 ±        0.080  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.052 ±        0.296    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       810.978 ±      709.614  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3019.688 ±     2631.437    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         2.475 ±       21.310    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        32.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     93868.529 ±     3187.241   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3398.401 ±      114.930  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     56984.004 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.003 ±        0.005  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.057 ±        0.079    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      3403.698 ±        1.784  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     57076.347 ±     1930.170    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        50.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        41.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    329504.859 ±    14924.745   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       504.090 ±       22.871  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      2408.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       471.833 ±      710.691  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      2251.806 ±     3362.835    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        23.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    610014.810 ±     7167.710   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       452.753 ±        5.514  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1168.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       470.722 ±      709.030  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1215.244 ±     1841.512    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.344 ±        2.962    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        31.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   2411966.468 ±    63590.468   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1115.708 ±       29.056  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       728.000 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.024 ±        0.204  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.016 ±        0.134    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1083.990 ±      563.639  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       707.339 ±      368.407    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.522 ±        4.491    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        16.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        30.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   2487797.339 ±     3118.637   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    404080.294 ±     4149.580   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       581.183 ±        6.000  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2264.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       605.419 ±      579.185  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2359.579 ±     2271.159    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        35.000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                           128  thrpt    5     38236.827 ±     1207.126   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1289.032 ±       40.361  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     53056.011 ±        0.002    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.020 ±        0.129  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.842 ±        5.345    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1289.522 ±      578.207  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     53104.900 ±    24737.610    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.737  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        27.522 ±      236.970    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        30.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5     52668.482 ±     1864.504   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       948.688 ±       33.548  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     28352.008 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.013 ±        0.116  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.398 ±        3.430    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       946.457 ±      589.723  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     28297.540 ±    17880.765    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±        6.688  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        28.120 ±      201.592    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5        14.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        41.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5     73837.658 ±     1330.529   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1131.543 ±       20.662  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     24120.006 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.027 ±        0.223  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.568 ±        4.730    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1152.619 ±      711.060  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     24575.111 ±    15334.036    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        14.200 ±      122.264    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5        17.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                        128  thrpt    5     14703.577 ±      428.699   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1113.848 ±       32.577  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    119248.083 ±        0.457    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.005 ±        0.038  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.576 ±        4.027    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1150.144 ±      712.115  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    123129.602 ±    76007.060    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±        7.821  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       114.004 ±      835.834    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        17.000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        44.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    141385.365 ±     4775.484   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1302.310 ±       43.609  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     14496.003 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.032 ±        0.236  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.354 ±        2.649    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1288.159 ±      574.748  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     14344.130 ±     6576.281    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±        7.822  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        11.954 ±       87.669    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        39.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5    487559.227 ±     5730.374   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       537.716 ±        6.477  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      1736.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       538.430 ±      710.323  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1738.511 ±     2295.745    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.430 ±        3.699    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         8.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        25.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    587313.731 ±    11566.565   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         5.970 ±        0.118  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                       128  thrpt    5     60601.509 ±     3134.316   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1087.354 ±       56.410  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     28240.007 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.014 ±        0.070  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.355 ±        1.796    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1083.000 ±      600.910  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     28109.846 ±    14823.327    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±        6.688  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        24.053 ±      172.286    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        40.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                               N/A  thrpt    5   2034821.674 ±    82881.889   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                N/A  thrpt    5      2896.377 ±      116.941  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                           N/A  thrpt    5      2240.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.002 ±        0.007  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.001 ±        0.005    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      2927.584 ±      717.159  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5      2263.476 ±      494.856    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                     N/A  thrpt    5        43.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                      N/A  thrpt    5        37.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                         N/A  thrpt    5    883466.787 ±    46174.718   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                          N/A  thrpt    5       525.356 ±       27.405  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     N/A  thrpt    5       936.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       533.951 ±      703.892  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       949.216 ±     1227.687    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                               N/A  thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                N/A  thrpt    5        38.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                        N/A  thrpt    5    305280.695 ±     4972.724   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                         N/A  thrpt    5       588.057 ±        9.648  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5      3032.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       605.058 ±      578.472  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      3120.934 ±     2998.894    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.400 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         2.066 ±        7.263    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                              N/A  thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                               N/A  thrpt    5        38.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                       N/A  thrpt    5    752052.962 ±    20456.547   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                        N/A  thrpt    5       565.699 ±       15.356  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1184.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       606.810 ±      580.711  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1269.879 ±     1213.277    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                           N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      N/A  thrpt    5         0.279 ±        2.405    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                             N/A  thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                              N/A  thrpt    5        23.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                   N/A  thrpt    5   4279178.793 ±   139913.343   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                    N/A  thrpt    5      1370.335 ±       44.152  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                               N/A  thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.022 ±        0.176  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.008 ±        0.065    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5      1426.324 ±      593.138  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       524.647 ±      219.965    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.666 ±        5.737  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.248 ±        2.137    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                         N/A  thrpt    5        21.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                          N/A  thrpt    5        26.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                             N/A  thrpt    5   7760466.645 ±   713935.265   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                              N/A  thrpt    5       631.088 ±       58.284  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                         N/A  thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       606.648 ±      580.482  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       122.868 ±      115.376    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                   N/A  thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                    N/A  thrpt    5        23.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                            N/A  thrpt    5    190996.850 ±    10524.030   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                             N/A  thrpt    5      1297.986 ±       72.001  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        N/A  thrpt    5     10696.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.035 ±        0.296  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.284 ±        2.427    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      1286.546 ±      572.392  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     10607.664 ±     4894.751    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         1.066 ±        9.175  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         9.009 ±       77.573    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                  N/A  thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                   N/A  thrpt    5        46.000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                         128  thrpt    5    725945.772 ±    14202.197   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        70.109 ±        1.357  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       152.001 ±        0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5        68.216 ±      587.363  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       149.232 ±     1284.930    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         1.000                 counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         3.000                     ms
[info] MutableBitSetBenchmark.readPlayJson                                                                              128  thrpt    5     59067.215 ±      922.943   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2743.824 ±       43.007  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     73120.007 ±        0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.005 ±        0.011  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.135 ±        0.282    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2722.770 ±        0.443  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     72559.892 ±     1135.347    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        40.000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        39.000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                         128  thrpt    5   1000846.218 ±    63968.378   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       574.844 ±       37.152  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       904.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       605.365 ±      579.081  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       950.603 ±      892.037    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.207 ±        1.781    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         9.000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        38.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                        128  thrpt    5    707637.786 ±    41082.720   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       197.856 ±       11.531  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       440.001 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       202.128 ±      710.509  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       453.136 ±     1593.087    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.302 ±        2.600    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5         9.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    952707.578 ±     2029.335   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         9.684 ±        0.018  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        16.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                                             128  thrpt    5     38982.804 ±     2163.623   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1636.419 ±       91.004  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     66062.951 ±        9.124    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.004 ±        0.032  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.156 ±        1.265    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1631.462 ±      608.879  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     65827.531 ±    22778.715    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±        8.028  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        38.257 ±      329.406    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        24.000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        32.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    224402.933 ±     6524.227   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       878.192 ±       25.425  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6160.002 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.014 ±        0.089  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.100 ±        0.622    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       878.922 ±      714.393  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      6161.691 ±     4934.113    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         4.733 ±       40.749    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        13.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        31.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     23268.368 ±      408.033   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1289.180 ±       22.413  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     87200.019 ±        0.007    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.013 ±        0.109  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.852 ±        7.333    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1288.282 ±      603.242  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     87125.853 ±    40325.066    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±        7.824  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        72.530 ±      532.617    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        19.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        39.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5    129208.150 ±     7279.055   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1578.735 ±       89.523  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     19232.003 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.029 ±        0.240  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.348 ±        2.890    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1562.293 ±      705.892  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     19052.538 ±     9323.873    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.932 ±        8.028  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        11.636 ±      100.193    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        23.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        36.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    340280.740 ±     8437.709   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1620.792 ±       39.768  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      7496.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.026 ±        0.192  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.121 ±        0.897    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1631.892 ±      582.594  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      7549.955 ±     2805.473    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.799 ±        6.883  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         3.727 ±       32.094    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        24.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        27.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    394839.397 ±    25457.136   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1352.854 ±       87.571  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      5392.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.018 ±        0.146  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.074 ±        0.589    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1358.125 ±       23.631  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5413.947 ±      271.511    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         0.933 ±        6.690  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         3.772 ±       27.019    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        20.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        28.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     50001.531 ±     3375.738   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1218.759 ±       82.403  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     38368.008 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.026 ±        0.216  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.822 ±        6.736    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1219.513 ±      719.792  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     38402.977 ±    22871.071    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.932 ±        6.687  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        29.680 ±      212.223    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        18.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        40.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                    128  thrpt    5     59443.017 ±     3598.979   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1337.648 ±       80.866  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     35416.007 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.026 ±        0.186  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.680 ±        4.924    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1290.180 ±      586.770  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     34167.063 ±    15705.997    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.611 ±      151.636    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                          128  thrpt    5        19.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                           128  thrpt    5        32.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                             128  thrpt    5     97857.260 ±     3977.516   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       664.519 ±       26.817  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     10688.004 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       672.370 ±        1.462  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     10815.236 ±      436.242    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         4.267 ±       22.497    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        43.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                            128  thrpt    5    194506.326 ±     8910.327   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       800.814 ±       36.766  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      6480.002 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 128  thrpt    5         0.014 ±        0.119  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            128  thrpt    5         0.113 ±        0.970    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       742.842 ±      577.428  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      6016.976 ±     4839.781    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5         5.417 ±       46.642    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        11.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        29.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                 128  thrpt    5     20649.060 ±     1107.225   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1158.822 ±       62.419  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88328.022 ±        0.008    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.012 ±        0.094  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.904 ±        7.228    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1218.563 ±      715.718  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     92969.309 ±    56921.029    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.199 ±        7.779  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        92.498 ±      599.077    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        18.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        47.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                            128  thrpt    5    123202.062 ±     3201.051   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1239.828 ±       31.683  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     15840.003 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 128  thrpt    5         0.016 ±        0.133  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            128  thrpt    5         0.197 ±        1.685    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5      1287.085 ±      573.436  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5     16448.199 ±     7468.247    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         1.066 ±        7.823  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        13.712 ±      100.626    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5        19.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        42.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                           128  thrpt    5    512094.436 ±    14263.932   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       569.985 ±       15.787  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1752.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       538.579 ±      709.746  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1656.388 ±     2192.680    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.817 ±        4.306    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        24.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    562537.044 ±     1887.718   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        11.437 ±        0.033  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        32.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                128  thrpt    5     63614.669 ±     2056.678   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1141.279 ±       37.364  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     28240.007 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.020 ±        0.160  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.497 ±        3.930    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1150.877 ±      708.700  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     28479.810 ±    17582.595    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±        7.820  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        26.620 ±      195.530    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        17.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        43.000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                              128  thrpt    5    102292.941 ±     1534.532   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1787.473 ±       26.999  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     27504.004 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.021 ±        0.173  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.326 ±        2.672    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1836.486 ±      710.114  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     28266.178 ±    11309.658    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.733  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        10.265 ±       88.387    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        27.000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        28.000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                       128  thrpt    5    138806.451 ±     4579.417   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       593.401 ±       19.336  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6728.003 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       605.544 ±      579.136  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      6855.643 ±     6432.700    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         9.000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        39.000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                      128  thrpt    5    209269.473 ±     3087.790   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       745.637 ±       10.778  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      5608.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.007 ±        0.064  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.056 ±        0.482    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       742.186 ±      578.906  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      5582.653 ±     4370.655    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±        5.737  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         5.038 ±       43.381    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        11.000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        31.000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                           128  thrpt    5     41079.992 ±     1207.725   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1703.071 ±       50.662  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     65248.010 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.007 ±        0.048  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.269 ±        1.861    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1700.354 ±       14.797  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     65146.649 ±     1779.135    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.881  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        30.793 ±      265.136    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        27.000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                             128  thrpt    5    257446.901 ±     7364.060   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1211.728 ±       34.952  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      7408.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.017 ±        0.083  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.105 ±        0.510    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1220.719 ±      702.186  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      7462.059 ±     4258.641    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.736  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         4.084 ±       35.161    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        18.000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        32.000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                      128  thrpt    5    494451.256 ±    13221.820   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       397.077 ±       10.496  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1264.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       336.107 ±        1.466  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1069.964 ±       32.343    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.843 ±        4.445    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         5.000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        22.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    576314.742 ±     3806.499   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       304.618 ±        1.939  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       832.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.616 ±        1.268  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       919.400 ±        6.502    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.364 ±        3.131    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        15.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    528300.332 ±     5425.277   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                          128  thrpt    5     29917.432 ±     1021.705   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1490.550 ±       50.484  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     78419.319 ±       27.350    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.039 ±        0.318  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.039 ±       16.761    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1493.604 ±      696.625  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     78581.956 ±    36629.802    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.881  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        42.546 ±      366.332    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        22.000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        35.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                                    N/A  thrpt    5    628124.607 ±    33573.414   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1915.502 ±      101.753  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4800.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.022 ±        0.179  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.057 ±        0.458    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1904.069 ±      710.701  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4770.969 ±     1746.883    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.702 ±       14.653    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        30.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                             N/A  thrpt    5   1330413.424 ±    44317.611   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      1007.491 ±       33.232  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.047 ±        0.405  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.056 ±        0.481    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1013.715 ±       26.216  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      1199.486 ±       69.403    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.932 ±        6.688  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         1.098 ±        7.881    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                            N/A  thrpt    5   6331690.007 ±   332369.567   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       193.108 ±       10.067  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       202.524 ±      711.901  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        50.708 ±      178.270    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                                 N/A  thrpt    5    207135.395 ±     7427.502   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1467.723 ±       53.389  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5     11152.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.027 ±        0.196  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.204 ±        1.496    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1492.007 ±      703.584  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5     11340.385 ±     5485.773    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.933 ±        8.030  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         7.127 ±       61.363    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        22.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                                   N/A  thrpt    5    808663.650 ±    22294.661   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1261.798 ±       35.082  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2456.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.034 ±        0.296  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.067 ±        0.574    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1220.653 ±      719.914  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2374.854 ±     1367.332    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.296 ±       11.161    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                         N/A  thrpt    5        18.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                          N/A  thrpt    5        31.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                            N/A  thrpt    5   2077975.889 ±   116873.513   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       855.528 ±       48.412  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.037 ±        0.320  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.028 ±        0.239    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       875.553 ±      717.937  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5       663.782 ±      555.528    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.933 ±        6.688  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         0.702 ±        5.044    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        47.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5   5789426.123 ±    41093.769   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       647.330 ±        4.504  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       605.578 ±      579.581  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       164.707 ±      158.328    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.036 ±        0.312    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        27.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5   5583449.654 ±   290605.269   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5       340.567 ±       17.825  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       336.536 ±        1.158  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5        94.877 ±        4.736    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.037 ±        0.319    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5         5.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                          N/A  thrpt    5        14.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                                N/A  thrpt    5    308483.470 ±    15070.224   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      1574.467 ±       76.777  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      8032.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.031 ±        0.256  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.155 ±        1.290    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1628.722 ±      575.885  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      8314.769 ±     3181.267    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.199 ±        7.780  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         6.078 ±       39.294    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                      N/A  thrpt    5        24.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                       N/A  thrpt    5        42.000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                                     128  thrpt    5     65556.342 ±     2742.283   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1873.713 ±       78.641  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     44984.006 ±        0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.037 ±        0.260  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.900 ±        6.293    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      1905.532 ±      714.723  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     45777.648 ±    18436.472    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         128  thrpt    5         0.666 ±        5.735  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    128  thrpt    5        16.103 ±      138.651    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        28.000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        26.000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5     81062.243 ±     3546.177   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5      1248.268 ±       54.827  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5     24240.005 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.027 ±        0.222  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.521 ±        4.280    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1220.281 ±      716.165  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     23701.999 ±    14035.257    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.932 ±        8.029  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        18.095 ±      155.805    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5        18.000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5        36.000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5    108706.537 ±     3432.229   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5      1597.898 ±       50.341  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5     23136.004 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.016 ±        0.112  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.238 ±        1.645    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1563.722 ±      710.827  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     22646.775 ±    10484.586    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.736  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         9.742 ±       83.884    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5        23.000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5        25.000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     41193.601 ±     1323.441   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      2166.573 ±       70.573  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     82776.010 ±        0.003    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.013 ±        0.010  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.499 ±        0.360    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2178.533 ±      719.269  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     83262.286 ±    29004.875    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        32.000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        26.000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    242299.203 ±     5579.579   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5      1152.784 ±       27.040  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      7488.002 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.030 ±        0.241  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.194 ±        1.561    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1152.656 ±      710.639  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5      7492.783 ±     4787.654    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.666 ±        5.735  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5         4.364 ±       37.574    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5        17.000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5        34.000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    466925.215 ±     5713.009   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       410.581 ±        5.111  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1384.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       403.386 ±      578.352  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1360.423 ±     1962.479    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.266 ±        1.405  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.900 ±        4.743    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         6.000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5        26.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    802375.426 ±    12210.821   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       432.275 ±        6.463  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       848.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       471.184 ±      708.574  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       924.236 ±     1388.606    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.261 ±        2.247    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         7.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5        21.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5    815536.088 ±     2830.807   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         8.290 ±        0.030  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5        16.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                 counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     30128.053 ±     1830.181   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1501.174 ±       91.662  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     78419.202 ±       27.454    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.036 ±        0.294  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.856 ±       15.334    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1561.793 ±      703.860  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     81659.779 ±    39285.075    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.799 ±        6.881  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        42.712 ±      367.762    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        23.000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        34.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                            N/A  thrpt    5   4963870.839 ±   122686.124   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3582.615 ±       87.490  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      1136.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.001 ±        0.005  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5        ≈ 10⁻³                   B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      3607.953 ±      715.742  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5      1143.968 ±      219.162    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        53.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        46.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                      N/A  thrpt    5   7754323.741 ±   218871.118   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       827.752 ±       23.331  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.095 ±        0.818  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.019 ±        0.168    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       869.862 ±      711.726  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5       176.747 ±      148.525    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         1.332 ±       11.470  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5         0.273 ±        2.350    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5        57.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                     N/A  thrpt    5   4027025.991 ±    69194.979   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      2087.668 ±       36.651  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          N/A  thrpt    5         0.017 ±        0.129  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     N/A  thrpt    5         0.007 ±        0.051    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5      2109.412 ±      587.626  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       824.548 ±      232.669    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.314 ±        2.700    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        31.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        29.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   7456056.831 ±   785049.361   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       795.790 ±       83.504  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         N/A  thrpt    5         0.006 ±        0.056  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    N/A  thrpt    5         0.001 ±        0.012    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       742.775 ±      577.612  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5       156.778 ±      119.069    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   N/A  thrpt    5         0.142 ±        1.220    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5        11.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5        26.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                         N/A  thrpt    5   4571819.865 ±   122739.764   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      2462.925 ±       65.736  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.004 ±        0.007  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.001 ±        0.002    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      2450.422 ±      585.727  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       843.870 ±      214.473    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        36.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                           N/A  thrpt    5   3335879.179 ±    29833.523   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5       796.837 ±        7.032  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       376.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.035 ±        0.299  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.016 ±        0.141    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       810.138 ±      717.773  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       382.437 ±      342.302    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.315 ±        2.714    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5   7975189.772 ±   371773.388   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5       770.226 ±       35.920  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       801.604 ±      707.113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       158.464 ±      145.462    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         1.465 ±       12.618  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.295 ±        2.542    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        57.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2010620.380 ±    60705.125   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       623.389 ±       19.003  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       605.463 ±      578.944  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5       474.469 ±      459.568    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         9.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        34.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5   9501910.350 ±  1307392.915   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       917.604 ±      126.518  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.037 ±        0.310  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.006 ±        0.053    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       946.107 ±      588.632  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       156.885 ±      100.591    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.932 ±        6.688  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.159 ±        1.151    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5   7969380.924 ±    10396.107   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                        N/A  thrpt    5   3059205.003 ±    63852.679   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5       979.523 ±       20.358  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.032 ±        0.276  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         0.016 ±        0.141    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      1013.846 ±       25.248  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5       521.659 ±        5.144    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         0.414 ±        3.564    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        35.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                         N/A  thrpt    5    868844.895 ±    27924.320   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1444.162 ±       46.876  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      2616.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.017 ±        0.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.031 ±        0.265    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      1426.308 ±      593.127  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5      2584.811 ±     1128.377    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         1.202 ±       10.350    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                               N/A  thrpt    5        21.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                N/A  thrpt    5        27.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                   N/A  thrpt    5   2656622.395 ±   110549.514   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       742.650 ±       30.827  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       734.054 ±      574.930  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       434.522 ±      328.148    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.933 ±        6.689  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.558 ±        3.996    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                         N/A  thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                          N/A  thrpt    5        52.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                  N/A  thrpt    5   1098195.068 ±    12188.170   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       759.172 ±        8.704  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5      1088.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       N/A  thrpt    5         0.007 ±        0.057  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  N/A  thrpt    5         0.010 ±        0.082    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       740.869 ±      577.602  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5      1062.119 ±      838.110    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 N/A  thrpt    5         1.146 ±        9.871    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                        N/A  thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                         N/A  thrpt    5        42.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                 N/A  thrpt    5   1702858.202 ±    13591.352   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       476.038 ±        3.994  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            N/A  thrpt    5       472.115 ±      710.872  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       N/A  thrpt    5       436.669 ±      661.188    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                N/A  thrpt    5         0.123 ±        1.058    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                       N/A  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                        N/A  thrpt    5        18.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                      N/A  thrpt    5   1236344.583 ±    45434.648   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       N/A  thrpt    5       879.724 ±       32.563  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.048 ±        0.264  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.061 ±        0.332    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       876.932 ±      703.689  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5      1117.970 ±      927.097    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5         1.016 ±        8.745    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                            N/A  thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                             N/A  thrpt    5        41.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                        N/A  thrpt    5   1777568.922 ±    44983.402   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1445.476 ±       36.610  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1280.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.010 ±        0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         0.009 ±        0.071    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      1426.151 ±      593.697  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      1262.573 ±      508.264    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         0.590 ±        5.083    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                              N/A  thrpt    5        21.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                               N/A  thrpt    5        29.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                  N/A  thrpt    5   2984935.902 ±    37984.567   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5       697.832 ±        8.934  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       667.371 ±        0.191  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5       351.940 ±        4.451    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                        N/A  thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                         N/A  thrpt    5        47.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                 N/A  thrpt    5   2004248.781 ±    33527.699   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5       896.427 ±       14.806  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5       704.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      N/A  thrpt    5         0.026 ±        0.162  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 N/A  thrpt    5         0.020 ±        0.127    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            N/A  thrpt    5       877.750 ±      706.877  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       N/A  thrpt    5       689.657 ±      561.903    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                N/A  thrpt    5         0.628 ±        5.405    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                       N/A  thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                        N/A  thrpt    5        40.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                N/A  thrpt    5   2552875.244 ±    83861.216   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       596.897 ±       19.669  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           N/A  thrpt    5       605.891 ±      578.743  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      N/A  thrpt    5       374.010 ±      362.707    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               N/A  thrpt    5         0.082 ±        0.705    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                      N/A  thrpt    5         9.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                       N/A  thrpt    5        27.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                        N/A  thrpt    5   2606769.097 ±    40082.352   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              N/A  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                     N/A  thrpt    5   1935753.923 ±    74516.018   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      N/A  thrpt    5       885.401 ±       33.966  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          N/A  thrpt    5         0.041 ±        0.234  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     N/A  thrpt    5         0.034 ±        0.193    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       877.679 ±      713.962  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       713.868 ±      583.399    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.655 ±        5.640    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                           N/A  thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                            N/A  thrpt    5        34.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                                    N/A  thrpt    5     10927.125 ±     2576.523   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1598.747 ±      369.946  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5    230297.780 ±      950.391    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.065 ±        0.194  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         9.198 ±       27.747    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1561.621 ±      726.889  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5    224833.852 ±    84190.116    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5        95.299 ±      820.554    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        23.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        45.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                             N/A  thrpt    5     14368.213 ±      700.424   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       203.122 ±        9.683  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     22249.441 ±       33.115    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       201.431 ±      708.059  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5     22187.325 ±    78002.116    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                            N/A  thrpt    5     37096.618 ±      393.664   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       344.295 ±        3.652  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     14608.012 ±        0.005    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       337.048 ±        0.168  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     14300.648 ±      150.784    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                 N/A  thrpt    5      2734.418 ±      866.057   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5       883.585 ±      279.341  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5    508397.641 ±      360.474    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.010 ±        0.088  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         5.583 ±       48.071    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5       875.770 ±      718.115  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    502686.944 ±   347959.158    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.933 ±        6.691  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       511.934 ±     3672.560    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        13.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        85.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                            N/A  thrpt    5     54656.931 ±     1107.305   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       697.975 ±       14.216  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     20100.010 ±        0.200    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       670.072 ±        0.492  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     19296.879 ±      391.941    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5        23.063 ±      198.583    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5        10.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        48.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5     79846.369 ±     2971.675   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       523.523 ±       19.201  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       538.193 ±      709.467  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     10627.325 ±    14205.520    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         8.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        25.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5     89959.691 ±      852.575   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5         5.944 ±        0.056  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5       104.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                                              128  thrpt    5    338115.512 ±     9491.306   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1806.143 ±       51.550  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      8408.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.020 ±        0.147  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.093 ±        0.689    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1769.213 ±      587.110  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8236.314 ±     2734.812    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.113 ±       26.804    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        26.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        23.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                       128  thrpt    5    393897.068 ±     4700.439   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       480.508 ±        5.875  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1920.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       470.674 ±      709.297  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1882.435 ±     2858.352    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±        1.405  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.065 ±        5.615    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        29.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5   1043781.165 ±    18635.481   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       546.432 ±        9.488  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       824.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       539.268 ±      710.965  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       813.943 ±     1081.200    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        23.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     97458.284 ±     1372.550   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      3388.156 ±       49.197  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     54720.004 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.003 ±        0.008  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.048 ±        0.134    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      3335.636 ±      586.725  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     53867.337 ±     8993.618    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        49.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        41.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                             128  thrpt    5    317912.437 ±    15664.432   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       499.264 ±       24.874  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      2472.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       471.821 ±      710.711  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      2340.192 ±     3573.102    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        22.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    672875.376 ±    24548.271   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       512.975 ±       18.689  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1200.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       537.785 ±      709.231  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1260.579 ±     1689.642    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±        1.405  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.628 ±        3.313    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        34.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1922333.191 ±   156882.991   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       889.138 ±       72.347  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       728.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.025 ±        0.170  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.021 ±        0.143    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       946.117 ±      588.656  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       775.837 ±      507.607    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.066 ±        6.439  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.888 ±        5.430    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5        14.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        32.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   2101661.942 ±    24885.238   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5    341459.469 ±     3164.503   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       505.031 ±        4.629  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      2328.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       470.940 ±      709.485  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2172.368 ±     3291.580    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        27.000                     ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 5326 s, completed Apr 14, 2018 11:02:10 PM
